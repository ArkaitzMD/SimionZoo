#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.0.30319.33440.
// 
using namespace System;
ref class NewDataSet;


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[System::Serializable, 
System::ComponentModel::DesignerCategoryAttribute(L"code"), 
System::ComponentModel::ToolboxItem(true), 
System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
public ref class NewDataSet : public ::System::Data::DataSet {
    public : ref class EXPERIMENTDataTable;
    public : ref class LOGDataTable;
    public : ref class WORLDDataTable;
    public : ref class rewardDataTable;
    public : ref class _reward_componentDataTable;
    public : ref class _wind_turbineDataTable;
    public : ref class TRAINING_WIND_DATA_FILESDataTable;
    public : ref class _magnetic_levitationDataTable;
    public : ref class pitchDataTable;
    public : ref class _underwater_vehicleDataTable;
    public : ref class SIMGODDataTable;
    public : ref class actorDataTable;
    public : ref class CACLADataTable;
    public : ref class vfaDataTable;
    public : ref class NOISE_WIDTHDataTable;
    public : ref class scheduleDataTable;
    public : ref class LEARNING_RATEDataTable;
    public : ref class RBF_GRIDDataTable;
    public : ref class dimensionDataTable;
    public : ref class PIDDataTable;
    public : ref class KPDataTable;
    public : ref class KIDataTable;
    public : ref class KDDataTable;
    public : ref class LQRDataTable;
    public : ref class _LQR_GAINDataTable;
    public : ref class jonkmanDataTable;
    public : ref class VS_RtGnSpDataTable;
    public : ref class VS_SlPcDataTable;
    public : ref class VS_Rgn2KDataTable;
    public : ref class VS_Rgn2SpDataTable;
    public : ref class VS_CtInSpDataTable;
    public : ref class VS_RtPwrDataTable;
    public : ref class VS_Rgn3MPDataTable;
    public : ref class PC_KIDataTable;
    public : ref class PC_KKDataTable;
    public : ref class PC_KPDataTable;
    public : ref class PC_RefSpdDataTable;
    public : ref class vidalDataTable;
    public : ref class ADataTable;
    public : ref class K_alphaDataTable;
    public : ref class P_sDataTable;
    public : ref class boukhezzarDataTable;
    public : ref class C_0DataTable;
    public : ref class K_tDataTable;
    public : ref class J_tDataTable;
    public : ref class criticDataTable;
    public : ref class _TD_LambdaDataTable;
    public : ref class _True_Online_TD_LambdaDataTable;
    public : ref class _TDC_LambdaDataTable;
    public : ref class controllerDataTable;
    public : ref class EXPERIMENTRow;
    public : ref class LOGRow;
    public : ref class WORLDRow;
    public : ref class rewardRow;
    public : ref class _reward_componentRow;
    public : ref class _wind_turbineRow;
    public : ref class TRAINING_WIND_DATA_FILESRow;
    public : ref class _magnetic_levitationRow;
    public : ref class pitchRow;
    public : ref class _underwater_vehicleRow;
    public : ref class SIMGODRow;
    public : ref class actorRow;
    public : ref class CACLARow;
    public : ref class vfaRow;
    public : ref class NOISE_WIDTHRow;
    public : ref class scheduleRow;
    public : ref class LEARNING_RATERow;
    public : ref class RBF_GRIDRow;
    public : ref class dimensionRow;
    public : ref class PIDRow;
    public : ref class KPRow;
    public : ref class KIRow;
    public : ref class KDRow;
    public : ref class LQRRow;
    public : ref class _LQR_GAINRow;
    public : ref class jonkmanRow;
    public : ref class VS_RtGnSpRow;
    public : ref class VS_SlPcRow;
    public : ref class VS_Rgn2KRow;
    public : ref class VS_Rgn2SpRow;
    public : ref class VS_CtInSpRow;
    public : ref class VS_RtPwrRow;
    public : ref class VS_Rgn3MPRow;
    public : ref class PC_KIRow;
    public : ref class PC_KKRow;
    public : ref class PC_KPRow;
    public : ref class PC_RefSpdRow;
    public : ref class vidalRow;
    public : ref class ARow;
    public : ref class K_alphaRow;
    public : ref class P_sRow;
    public : ref class boukhezzarRow;
    public : ref class C_0Row;
    public : ref class K_tRow;
    public : ref class J_tRow;
    public : ref class criticRow;
    public : ref class _TD_LambdaRow;
    public : ref class _True_Online_TD_LambdaRow;
    public : ref class _TDC_LambdaRow;
    public : ref class controllerRow;
    public : ref class EXPERIMENTRowChangeEvent;
    public : ref class LOGRowChangeEvent;
    public : ref class WORLDRowChangeEvent;
    public : ref class rewardRowChangeEvent;
    public : ref class _reward_componentRowChangeEvent;
    public : ref class _wind_turbineRowChangeEvent;
    public : ref class TRAINING_WIND_DATA_FILESRowChangeEvent;
    public : ref class _magnetic_levitationRowChangeEvent;
    public : ref class pitchRowChangeEvent;
    public : ref class _underwater_vehicleRowChangeEvent;
    public : ref class SIMGODRowChangeEvent;
    public : ref class actorRowChangeEvent;
    public : ref class CACLARowChangeEvent;
    public : ref class vfaRowChangeEvent;
    public : ref class NOISE_WIDTHRowChangeEvent;
    public : ref class scheduleRowChangeEvent;
    public : ref class LEARNING_RATERowChangeEvent;
    public : ref class RBF_GRIDRowChangeEvent;
    public : ref class dimensionRowChangeEvent;
    public : ref class PIDRowChangeEvent;
    public : ref class KPRowChangeEvent;
    public : ref class KIRowChangeEvent;
    public : ref class KDRowChangeEvent;
    public : ref class LQRRowChangeEvent;
    public : ref class _LQR_GAINRowChangeEvent;
    public : ref class jonkmanRowChangeEvent;
    public : ref class VS_RtGnSpRowChangeEvent;
    public : ref class VS_SlPcRowChangeEvent;
    public : ref class VS_Rgn2KRowChangeEvent;
    public : ref class VS_Rgn2SpRowChangeEvent;
    public : ref class VS_CtInSpRowChangeEvent;
    public : ref class VS_RtPwrRowChangeEvent;
    public : ref class VS_Rgn3MPRowChangeEvent;
    public : ref class PC_KIRowChangeEvent;
    public : ref class PC_KKRowChangeEvent;
    public : ref class PC_KPRowChangeEvent;
    public : ref class PC_RefSpdRowChangeEvent;
    public : ref class vidalRowChangeEvent;
    public : ref class ARowChangeEvent;
    public : ref class K_alphaRowChangeEvent;
    public : ref class P_sRowChangeEvent;
    public : ref class boukhezzarRowChangeEvent;
    public : ref class C_0RowChangeEvent;
    public : ref class K_tRowChangeEvent;
    public : ref class J_tRowChangeEvent;
    public : ref class criticRowChangeEvent;
    public : ref class _TD_LambdaRowChangeEvent;
    public : ref class _True_Online_TD_LambdaRowChangeEvent;
    public : ref class _TDC_LambdaRowChangeEvent;
    public : ref class controllerRowChangeEvent;
    
    private: NewDataSet::EXPERIMENTDataTable^  tableEXPERIMENT;
    
    private: NewDataSet::LOGDataTable^  tableLOG;
    
    private: NewDataSet::WORLDDataTable^  tableWORLD;
    
    private: NewDataSet::rewardDataTable^  tablereward;
    
    private: NewDataSet::_reward_componentDataTable^  table_reward_component;
    
    private: NewDataSet::_wind_turbineDataTable^  table_wind_turbine;
    
    private: NewDataSet::TRAINING_WIND_DATA_FILESDataTable^  tableTRAINING_WIND_DATA_FILES;
    
    private: NewDataSet::_magnetic_levitationDataTable^  table_magnetic_levitation;
    
    private: NewDataSet::pitchDataTable^  tablepitch;
    
    private: NewDataSet::_underwater_vehicleDataTable^  table_underwater_vehicle;
    
    private: NewDataSet::SIMGODDataTable^  tableSIMGOD;
    
    private: NewDataSet::actorDataTable^  tableactor;
    
    private: NewDataSet::CACLADataTable^  tableCACLA;
    
    private: NewDataSet::vfaDataTable^  tablevfa;
    
    private: NewDataSet::NOISE_WIDTHDataTable^  tableNOISE_WIDTH;
    
    private: NewDataSet::scheduleDataTable^  tableschedule;
    
    private: NewDataSet::LEARNING_RATEDataTable^  tableLEARNING_RATE;
    
    private: NewDataSet::RBF_GRIDDataTable^  tableRBF_GRID;
    
    private: NewDataSet::dimensionDataTable^  tabledimension;
    
    private: NewDataSet::PIDDataTable^  tablePID;
    
    private: NewDataSet::KPDataTable^  tableKP;
    
    private: NewDataSet::KIDataTable^  tableKI;
    
    private: NewDataSet::KDDataTable^  tableKD;
    
    private: NewDataSet::LQRDataTable^  tableLQR;
    
    private: NewDataSet::_LQR_GAINDataTable^  table_LQR_GAIN;
    
    private: NewDataSet::jonkmanDataTable^  tablejonkman;
    
    private: NewDataSet::VS_RtGnSpDataTable^  tableVS_RtGnSp;
    
    private: NewDataSet::VS_SlPcDataTable^  tableVS_SlPc;
    
    private: NewDataSet::VS_Rgn2KDataTable^  tableVS_Rgn2K;
    
    private: NewDataSet::VS_Rgn2SpDataTable^  tableVS_Rgn2Sp;
    
    private: NewDataSet::VS_CtInSpDataTable^  tableVS_CtInSp;
    
    private: NewDataSet::VS_RtPwrDataTable^  tableVS_RtPwr;
    
    private: NewDataSet::VS_Rgn3MPDataTable^  tableVS_Rgn3MP;
    
    private: NewDataSet::PC_KIDataTable^  tablePC_KI;
    
    private: NewDataSet::PC_KKDataTable^  tablePC_KK;
    
    private: NewDataSet::PC_KPDataTable^  tablePC_KP;
    
    private: NewDataSet::PC_RefSpdDataTable^  tablePC_RefSpd;
    
    private: NewDataSet::vidalDataTable^  tablevidal;
    
    private: NewDataSet::ADataTable^  tableA;
    
    private: NewDataSet::K_alphaDataTable^  tableK_alpha;
    
    private: NewDataSet::P_sDataTable^  tableP_s;
    
    private: NewDataSet::boukhezzarDataTable^  tableboukhezzar;
    
    private: NewDataSet::C_0DataTable^  tableC_0;
    
    private: NewDataSet::K_tDataTable^  tableK_t;
    
    private: NewDataSet::J_tDataTable^  tableJ_t;
    
    private: NewDataSet::criticDataTable^  tablecritic;
    
    private: NewDataSet::_TD_LambdaDataTable^  table_TD_Lambda;
    
    private: NewDataSet::_True_Online_TD_LambdaDataTable^  table_True_Online_TD_Lambda;
    
    private: NewDataSet::_TDC_LambdaDataTable^  table_TDC_Lambda;
    
    private: NewDataSet::controllerDataTable^  tablecontroller;
    
    private: ::System::Data::DataRelation^  relationEXPERIMENT_LOG;
    
    private: ::System::Data::DataRelation^  relationWORLD_reward;
    
    private: ::System::Data::DataRelation^  _relationreward_reward_component;
    
    private: ::System::Data::DataRelation^  _relationWORLD_wind_turbine;
    
    private: ::System::Data::DataRelation^  _relationwind_turbine_TRAINING_WIND_DATA_FILES;
    
    private: ::System::Data::DataRelation^  _relationWORLD_magnetic_levitation;
    
    private: ::System::Data::DataRelation^  relationWORLD_pitch;
    
    private: ::System::Data::DataRelation^  _relationWORLD_underwater_vehicle;
    
    private: ::System::Data::DataRelation^  relationSIMGOD_actor;
    
    private: ::System::Data::DataRelation^  relationactor_CACLA;
    
    private: ::System::Data::DataRelation^  relationcontroller_CACLA;
    
    private: ::System::Data::DataRelation^  relationCACLA_vfa;
    
    private: ::System::Data::DataRelation^  _relationTD_Lambda_vfa;
    
    private: ::System::Data::DataRelation^  _relationTrue_Online_TD_Lambda_vfa;
    
    private: ::System::Data::DataRelation^  _relationTDC_Lambda_vfa;
    
    private: ::System::Data::DataRelation^  relationvfa_NOISE_WIDTH;
    
    private: ::System::Data::DataRelation^  relationNOISE_WIDTH_schedule;
    
    private: ::System::Data::DataRelation^  relationLEARNING_RATE_schedule;
    
    private: ::System::Data::DataRelation^  relationKP_schedule;
    
    private: ::System::Data::DataRelation^  relationKI_schedule;
    
    private: ::System::Data::DataRelation^  relationKD_schedule;
    
    private: ::System::Data::DataRelation^  relationVS_RtGnSp_schedule;
    
    private: ::System::Data::DataRelation^  relationVS_SlPc_schedule;
    
    private: ::System::Data::DataRelation^  relationVS_Rgn2K_schedule;
    
    private: ::System::Data::DataRelation^  relationVS_Rgn2Sp_schedule;
    
    private: ::System::Data::DataRelation^  relationVS_CtInSp_schedule;
    
    private: ::System::Data::DataRelation^  relationVS_RtPwr_schedule;
    
    private: ::System::Data::DataRelation^  relationVS_Rgn3MP_schedule;
    
    private: ::System::Data::DataRelation^  relationPC_KI_schedule;
    
    private: ::System::Data::DataRelation^  relationPC_KK_schedule;
    
    private: ::System::Data::DataRelation^  relationPC_KP_schedule;
    
    private: ::System::Data::DataRelation^  relationPC_RefSpd_schedule;
    
    private: ::System::Data::DataRelation^  relationA_schedule;
    
    private: ::System::Data::DataRelation^  relationK_alpha_schedule;
    
    private: ::System::Data::DataRelation^  relationP_s_schedule;
    
    private: ::System::Data::DataRelation^  relationC_0_schedule;
    
    private: ::System::Data::DataRelation^  relationK_t_schedule;
    
    private: ::System::Data::DataRelation^  relationJ_t_schedule;
    
    private: ::System::Data::DataRelation^  relationvfa_LEARNING_RATE;
    
    private: ::System::Data::DataRelation^  _relationTD_Lambda_LEARNING_RATE;
    
    private: ::System::Data::DataRelation^  _relationTrue_Online_TD_Lambda_LEARNING_RATE;
    
    private: ::System::Data::DataRelation^  _relationTDC_Lambda_LEARNING_RATE;
    
    private: ::System::Data::DataRelation^  relationvfa_RBF_GRID;
    
    private: ::System::Data::DataRelation^  relationRBF_GRID_dimension;
    
    private: ::System::Data::DataRelation^  relationactor_PID;
    
    private: ::System::Data::DataRelation^  relationcontroller_PID;
    
    private: ::System::Data::DataRelation^  relationPID_KP;
    
    private: ::System::Data::DataRelation^  relationvidal_KP;
    
    private: ::System::Data::DataRelation^  relationboukhezzar_KP;
    
    private: ::System::Data::DataRelation^  relationPID_KI;
    
    private: ::System::Data::DataRelation^  relationvidal_KI;
    
    private: ::System::Data::DataRelation^  relationboukhezzar_KI;
    
    private: ::System::Data::DataRelation^  relationPID_KD;
    
    private: ::System::Data::DataRelation^  relationactor_LQR;
    
    private: ::System::Data::DataRelation^  relationcontroller_LQR;
    
    private: ::System::Data::DataRelation^  _relationLQR_LQR_GAIN;
    
    private: ::System::Data::DataRelation^  relationactor_jonkman;
    
    private: ::System::Data::DataRelation^  relationcontroller_jonkman;
    
    private: ::System::Data::DataRelation^  relationjonkman_VS_RtGnSp;
    
    private: ::System::Data::DataRelation^  relationjonkman_VS_SlPc;
    
    private: ::System::Data::DataRelation^  relationjonkman_VS_Rgn2K;
    
    private: ::System::Data::DataRelation^  relationjonkman_VS_Rgn2Sp;
    
    private: ::System::Data::DataRelation^  relationjonkman_VS_CtInSp;
    
    private: ::System::Data::DataRelation^  relationjonkman_VS_RtPwr;
    
    private: ::System::Data::DataRelation^  relationjonkman_VS_Rgn3MP;
    
    private: ::System::Data::DataRelation^  relationjonkman_PC_KI;
    
    private: ::System::Data::DataRelation^  relationjonkman_PC_KK;
    
    private: ::System::Data::DataRelation^  relationjonkman_PC_KP;
    
    private: ::System::Data::DataRelation^  relationjonkman_PC_RefSpd;
    
    private: ::System::Data::DataRelation^  relationactor_vidal;
    
    private: ::System::Data::DataRelation^  relationcontroller_vidal;
    
    private: ::System::Data::DataRelation^  relationvidal_A;
    
    private: ::System::Data::DataRelation^  relationvidal_K_alpha;
    
    private: ::System::Data::DataRelation^  relationvidal_P_s;
    
    private: ::System::Data::DataRelation^  relationactor_boukhezzar;
    
    private: ::System::Data::DataRelation^  relationcontroller_boukhezzar;
    
    private: ::System::Data::DataRelation^  relationboukhezzar_C_0;
    
    private: ::System::Data::DataRelation^  relationboukhezzar_K_t;
    
    private: ::System::Data::DataRelation^  relationboukhezzar_J_t;
    
    private: ::System::Data::DataRelation^  relationSIMGOD_critic;
    
    private: ::System::Data::DataRelation^  _relationcritic_TD_Lambda;
    
    private: ::System::Data::DataRelation^  _relationcritic_True_Online_TD_Lambda;
    
    private: ::System::Data::DataRelation^  _relationcritic_TDC_Lambda;
    
    private: ::System::Data::DataRelation^  relationSIMGOD_controller;
    
    private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void EXPERIMENTRowChangeEventHandler(::System::Object^  sender, NewDataSet::EXPERIMENTRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void LOGRowChangeEventHandler(::System::Object^  sender, NewDataSet::LOGRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void WORLDRowChangeEventHandler(::System::Object^  sender, NewDataSet::WORLDRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void rewardRowChangeEventHandler(::System::Object^  sender, NewDataSet::rewardRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _reward_componentRowChangeEventHandler(::System::Object^  sender, NewDataSet::_reward_componentRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _wind_turbineRowChangeEventHandler(::System::Object^  sender, NewDataSet::_wind_turbineRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void TRAINING_WIND_DATA_FILESRowChangeEventHandler(::System::Object^  sender, NewDataSet::TRAINING_WIND_DATA_FILESRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _magnetic_levitationRowChangeEventHandler(::System::Object^  sender, NewDataSet::_magnetic_levitationRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void pitchRowChangeEventHandler(::System::Object^  sender, NewDataSet::pitchRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _underwater_vehicleRowChangeEventHandler(::System::Object^  sender, NewDataSet::_underwater_vehicleRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void SIMGODRowChangeEventHandler(::System::Object^  sender, NewDataSet::SIMGODRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void actorRowChangeEventHandler(::System::Object^  sender, NewDataSet::actorRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void CACLARowChangeEventHandler(::System::Object^  sender, NewDataSet::CACLARowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void vfaRowChangeEventHandler(::System::Object^  sender, NewDataSet::vfaRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void NOISE_WIDTHRowChangeEventHandler(::System::Object^  sender, NewDataSet::NOISE_WIDTHRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void scheduleRowChangeEventHandler(::System::Object^  sender, NewDataSet::scheduleRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void LEARNING_RATERowChangeEventHandler(::System::Object^  sender, NewDataSet::LEARNING_RATERowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void RBF_GRIDRowChangeEventHandler(::System::Object^  sender, NewDataSet::RBF_GRIDRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void dimensionRowChangeEventHandler(::System::Object^  sender, NewDataSet::dimensionRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void PIDRowChangeEventHandler(::System::Object^  sender, NewDataSet::PIDRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void KPRowChangeEventHandler(::System::Object^  sender, NewDataSet::KPRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void KIRowChangeEventHandler(::System::Object^  sender, NewDataSet::KIRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void KDRowChangeEventHandler(::System::Object^  sender, NewDataSet::KDRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void LQRRowChangeEventHandler(::System::Object^  sender, NewDataSet::LQRRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _LQR_GAINRowChangeEventHandler(::System::Object^  sender, NewDataSet::_LQR_GAINRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void jonkmanRowChangeEventHandler(::System::Object^  sender, NewDataSet::jonkmanRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void VS_RtGnSpRowChangeEventHandler(::System::Object^  sender, NewDataSet::VS_RtGnSpRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void VS_SlPcRowChangeEventHandler(::System::Object^  sender, NewDataSet::VS_SlPcRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void VS_Rgn2KRowChangeEventHandler(::System::Object^  sender, NewDataSet::VS_Rgn2KRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void VS_Rgn2SpRowChangeEventHandler(::System::Object^  sender, NewDataSet::VS_Rgn2SpRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void VS_CtInSpRowChangeEventHandler(::System::Object^  sender, NewDataSet::VS_CtInSpRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void VS_RtPwrRowChangeEventHandler(::System::Object^  sender, NewDataSet::VS_RtPwrRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void VS_Rgn3MPRowChangeEventHandler(::System::Object^  sender, NewDataSet::VS_Rgn3MPRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void PC_KIRowChangeEventHandler(::System::Object^  sender, NewDataSet::PC_KIRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void PC_KKRowChangeEventHandler(::System::Object^  sender, NewDataSet::PC_KKRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void PC_KPRowChangeEventHandler(::System::Object^  sender, NewDataSet::PC_KPRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void PC_RefSpdRowChangeEventHandler(::System::Object^  sender, NewDataSet::PC_RefSpdRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void vidalRowChangeEventHandler(::System::Object^  sender, NewDataSet::vidalRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void ARowChangeEventHandler(::System::Object^  sender, NewDataSet::ARowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void K_alphaRowChangeEventHandler(::System::Object^  sender, NewDataSet::K_alphaRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void P_sRowChangeEventHandler(::System::Object^  sender, NewDataSet::P_sRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void boukhezzarRowChangeEventHandler(::System::Object^  sender, NewDataSet::boukhezzarRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void C_0RowChangeEventHandler(::System::Object^  sender, NewDataSet::C_0RowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void K_tRowChangeEventHandler(::System::Object^  sender, NewDataSet::K_tRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void J_tRowChangeEventHandler(::System::Object^  sender, NewDataSet::J_tRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void criticRowChangeEventHandler(::System::Object^  sender, NewDataSet::criticRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _TD_LambdaRowChangeEventHandler(::System::Object^  sender, NewDataSet::_TD_LambdaRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _True_Online_TD_LambdaRowChangeEventHandler(::System::Object^  sender, NewDataSet::_True_Online_TD_LambdaRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _TDC_LambdaRowChangeEventHandler(::System::Object^  sender, NewDataSet::_TDC_LambdaRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void controllerRowChangeEventHandler(::System::Object^  sender, NewDataSet::controllerRowChangeEvent^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    NewDataSet();
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::EXPERIMENTDataTable^  EXPERIMENT {
        NewDataSet::EXPERIMENTDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::LOGDataTable^  LOG {
        NewDataSet::LOGDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::WORLDDataTable^  WORLD {
        NewDataSet::WORLDDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::rewardDataTable^  reward {
        NewDataSet::rewardDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::_reward_componentDataTable^  _reward_component {
        NewDataSet::_reward_componentDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::_wind_turbineDataTable^  _wind_turbine {
        NewDataSet::_wind_turbineDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::TRAINING_WIND_DATA_FILESDataTable^  TRAINING_WIND_DATA_FILES {
        NewDataSet::TRAINING_WIND_DATA_FILESDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::_magnetic_levitationDataTable^  _magnetic_levitation {
        NewDataSet::_magnetic_levitationDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::pitchDataTable^  pitch {
        NewDataSet::pitchDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::_underwater_vehicleDataTable^  _underwater_vehicle {
        NewDataSet::_underwater_vehicleDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::SIMGODDataTable^  SIMGOD {
        NewDataSet::SIMGODDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::actorDataTable^  actor {
        NewDataSet::actorDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::CACLADataTable^  CACLA {
        NewDataSet::CACLADataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::vfaDataTable^  vfa {
        NewDataSet::vfaDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::NOISE_WIDTHDataTable^  NOISE_WIDTH {
        NewDataSet::NOISE_WIDTHDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::scheduleDataTable^  schedule {
        NewDataSet::scheduleDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::LEARNING_RATEDataTable^  LEARNING_RATE {
        NewDataSet::LEARNING_RATEDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::RBF_GRIDDataTable^  RBF_GRID {
        NewDataSet::RBF_GRIDDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::dimensionDataTable^  dimension {
        NewDataSet::dimensionDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::PIDDataTable^  PID {
        NewDataSet::PIDDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::KPDataTable^  KP {
        NewDataSet::KPDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::KIDataTable^  KI {
        NewDataSet::KIDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::KDDataTable^  KD {
        NewDataSet::KDDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::LQRDataTable^  LQR {
        NewDataSet::LQRDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::_LQR_GAINDataTable^  _LQR_GAIN {
        NewDataSet::_LQR_GAINDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::jonkmanDataTable^  jonkman {
        NewDataSet::jonkmanDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::VS_RtGnSpDataTable^  VS_RtGnSp {
        NewDataSet::VS_RtGnSpDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::VS_SlPcDataTable^  VS_SlPc {
        NewDataSet::VS_SlPcDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::VS_Rgn2KDataTable^  VS_Rgn2K {
        NewDataSet::VS_Rgn2KDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::VS_Rgn2SpDataTable^  VS_Rgn2Sp {
        NewDataSet::VS_Rgn2SpDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::VS_CtInSpDataTable^  VS_CtInSp {
        NewDataSet::VS_CtInSpDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::VS_RtPwrDataTable^  VS_RtPwr {
        NewDataSet::VS_RtPwrDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::VS_Rgn3MPDataTable^  VS_Rgn3MP {
        NewDataSet::VS_Rgn3MPDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::PC_KIDataTable^  PC_KI {
        NewDataSet::PC_KIDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::PC_KKDataTable^  PC_KK {
        NewDataSet::PC_KKDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::PC_KPDataTable^  PC_KP {
        NewDataSet::PC_KPDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::PC_RefSpdDataTable^  PC_RefSpd {
        NewDataSet::PC_RefSpdDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::vidalDataTable^  vidal {
        NewDataSet::vidalDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::ADataTable^  A {
        NewDataSet::ADataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::K_alphaDataTable^  K_alpha {
        NewDataSet::K_alphaDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::P_sDataTable^  P_s {
        NewDataSet::P_sDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::boukhezzarDataTable^  boukhezzar {
        NewDataSet::boukhezzarDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::C_0DataTable^  C_0 {
        NewDataSet::C_0DataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::K_tDataTable^  K_t {
        NewDataSet::K_tDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::J_tDataTable^  J_t {
        NewDataSet::J_tDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::criticDataTable^  critic {
        NewDataSet::criticDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::_TD_LambdaDataTable^  _TD_Lambda {
        NewDataSet::_TD_LambdaDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::_True_Online_TD_LambdaDataTable^  _True_Online_TD_Lambda {
        NewDataSet::_True_Online_TD_LambdaDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::_TDC_LambdaDataTable^  _TDC_Lambda {
        NewDataSet::_TDC_LambdaDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::controllerDataTable^  controller {
        NewDataSet::controllerDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::BrowsableAttribute(true), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
    virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
        ::System::Data::SchemaSerializationMode get() override;
        System::Void set(::System::Data::SchemaSerializationMode value) override;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataTableCollection^  Tables {
        ::System::Data::DataTableCollection^  get() new;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataRelationCollection^  Relations {
        ::System::Data::DataRelationCollection^  get() new;
    }
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void InitializeDerivedDataSet() override;
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Data::DataSet^  Clone() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeTables() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeRelations() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars();
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars(::System::Boolean initTable);
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitClass();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeEXPERIMENT();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeLOG();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeWORLD();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializereward();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_reward_component();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_wind_turbine();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeTRAINING_WIND_DATA_FILES();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_magnetic_levitation();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializepitch();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_underwater_vehicle();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeSIMGOD();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeactor();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeCACLA();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializevfa();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeNOISE_WIDTH();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeschedule();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeLEARNING_RATE();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeRBF_GRID();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializedimension();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializePID();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeKP();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeKI();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeKD();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeLQR();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_LQR_GAIN();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializejonkman();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeVS_RtGnSp();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeVS_SlPc();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeVS_Rgn2K();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeVS_Rgn2Sp();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeVS_CtInSp();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeVS_RtPwr();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeVS_Rgn3MP();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializePC_KI();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializePC_KK();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializePC_KP();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializePC_RefSpd();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializevidal();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeA();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeK_alpha();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeP_s();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeboukhezzar();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeC_0();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeK_t();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeJ_t();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializecritic();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_TD_Lambda();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_True_Online_TD_Lambda();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_TDC_Lambda();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializecontroller();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class EXPERIMENTDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnNUM_EPISODES;
        
        private: ::System::Data::DataColumn^  columnEPISODE_LENGTH;
        
        private: ::System::Data::DataColumn^  columnRANDOM_SEED;
        
        private: ::System::Data::DataColumn^  columnEVAL_FREQ;
        
        private: ::System::Data::DataColumn^  columnEXPERIMENT_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::EXPERIMENTRowChangeEventHandler^  EXPERIMENTRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::EXPERIMENTRowChangeEventHandler^  EXPERIMENTRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::EXPERIMENTRowChangeEventHandler^  EXPERIMENTRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::EXPERIMENTRowChangeEventHandler^  EXPERIMENTRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        EXPERIMENTDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        EXPERIMENTDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        EXPERIMENTDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  NUM_EPISODESColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EPISODE_LENGTHColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  RANDOM_SEEDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EVAL_FREQColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EXPERIMENT_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::EXPERIMENTRow^  default [::System::Int32 ] {
            NewDataSet::EXPERIMENTRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddEXPERIMENTRow(NewDataSet::EXPERIMENTRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::EXPERIMENTRow^  AddEXPERIMENTRow(System::Int64 NUM_EPISODES, System::Int64 EPISODE_LENGTH, System::Int64 RANDOM_SEED, 
                    System::Int64 EVAL_FREQ);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::EXPERIMENTRow^  NewEXPERIMENTRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveEXPERIMENTRow(NewDataSet::EXPERIMENTRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class LOGDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnFREQ;
        
        private: ::System::Data::DataColumn^  columnOUTPUT_DIR;
        
        private: ::System::Data::DataColumn^  columnFILE_PREFIX;
        
        private: ::System::Data::DataColumn^  columnEVALUATION_EPISODES;
        
        private: ::System::Data::DataColumn^  columnTRAINING_EPISODES;
        
        private: ::System::Data::DataColumn^  columnEVALUATION_AVG_REWARDS;
        
        private: ::System::Data::DataColumn^  columnEXPERIMENT_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::LOGRowChangeEventHandler^  LOGRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::LOGRowChangeEventHandler^  LOGRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::LOGRowChangeEventHandler^  LOGRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::LOGRowChangeEventHandler^  LOGRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LOGDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LOGDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LOGDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  FREQColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  OUTPUT_DIRColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  FILE_PREFIXColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EVALUATION_EPISODESColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TRAINING_EPISODESColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EVALUATION_AVG_REWARDSColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EXPERIMENT_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::LOGRow^  default [::System::Int32 ] {
            NewDataSet::LOGRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddLOGRow(NewDataSet::LOGRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::LOGRow^  AddLOGRow(
                    System::Decimal FREQ, 
                    System::String^  OUTPUT_DIR, 
                    System::Int64 FILE_PREFIX, 
                    System::Boolean EVALUATION_EPISODES, 
                    System::Boolean TRAINING_EPISODES, 
                    System::Boolean EVALUATION_AVG_REWARDS, 
                    NewDataSet::EXPERIMENTRow^  parentEXPERIMENTRowByEXPERIMENT_LOG);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::LOGRow^  NewLOGRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveLOGRow(NewDataSet::LOGRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class WORLDDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  column_dynamic_model;
        
        private: ::System::Data::DataColumn^  columnDELTA_T;
        
        private: ::System::Data::DataColumn^  columnNUM_SIMULATION_STEPS;
        
        private: ::System::Data::DataColumn^  columnWORLD_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::WORLDRowChangeEventHandler^  WORLDRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::WORLDRowChangeEventHandler^  WORLDRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::WORLDRowChangeEventHandler^  WORLDRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::WORLDRowChangeEventHandler^  WORLDRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        WORLDDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        WORLDDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        WORLDDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _dynamic_modelColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  DELTA_TColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  NUM_SIMULATION_STEPSColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  WORLD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::WORLDRow^  default [::System::Int32 ] {
            NewDataSet::WORLDRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddWORLDRow(NewDataSet::WORLDRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::WORLDRow^  AddWORLDRow(System::String^  _dynamic_model, System::Decimal DELTA_T, System::Int64 NUM_SIMULATION_STEPS);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::WORLDRow^  NewWORLDRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveWORLDRow(NewDataSet::WORLDRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class rewardDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnMIN_REWARD;
        
        private: ::System::Data::DataColumn^  columnMAX_REWARD;
        
        private: ::System::Data::DataColumn^  columnreward_Id;
        
        private: ::System::Data::DataColumn^  columnWORLD_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::rewardRowChangeEventHandler^  rewardRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::rewardRowChangeEventHandler^  rewardRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::rewardRowChangeEventHandler^  rewardRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::rewardRowChangeEventHandler^  rewardRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        rewardDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        rewardDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        rewardDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  MIN_REWARDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  MAX_REWARDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  reward_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  WORLD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::rewardRow^  default [::System::Int32 ] {
            NewDataSet::rewardRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddrewardRow(NewDataSet::rewardRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::rewardRow^  AddrewardRow(System::Decimal MIN_REWARD, System::Decimal MAX_REWARD, NewDataSet::WORLDRow^  parentWORLDRowByWORLD_reward);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::rewardRow^  NewrewardRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoverewardRow(NewDataSet::rewardRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _reward_componentDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnCOMPONENT_TYPE;
        
        private: ::System::Data::DataColumn^  columnCOMPONENT_WEIGHT;
        
        private: ::System::Data::DataColumn^  columnCOMPONENT_TOLERANCE;
        
        private: ::System::Data::DataColumn^  columnCONTROL_ERROR_VARIABLE;
        
        private: ::System::Data::DataColumn^  columnreward_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_reward_componentRowChangeEventHandler^  _reward_componentRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_reward_componentRowChangeEventHandler^  _reward_componentRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_reward_componentRowChangeEventHandler^  _reward_componentRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_reward_componentRowChangeEventHandler^  _reward_componentRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _reward_componentDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _reward_componentDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _reward_componentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  COMPONENT_TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  COMPONENT_WEIGHTColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  COMPONENT_TOLERANCEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CONTROL_ERROR_VARIABLEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  reward_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_reward_componentRow^  default [::System::Int32 ] {
            NewDataSet::_reward_componentRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_reward_componentRow(NewDataSet::_reward_componentRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::_reward_componentRow^  Add_reward_componentRow(System::String^  COMPONENT_TYPE, System::Decimal COMPONENT_WEIGHT, 
                    System::Decimal COMPONENT_TOLERANCE, System::String^  CONTROL_ERROR_VARIABLE, NewDataSet::rewardRow^  _parentrewardRowByreward_reward_component);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::_reward_componentRow^  New_reward_componentRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_reward_componentRow(NewDataSet::_reward_componentRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _wind_turbineDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnEVALUATION_WIND_DATA_FILE;
        
        private: ::System::Data::DataColumn^  columnPOWER_SET_POINT_FILE;
        
        private: ::System::Data::DataColumn^  column_wind_turbine_Id;
        
        private: ::System::Data::DataColumn^  columnWORLD_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_wind_turbineRowChangeEventHandler^  _wind_turbineRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_wind_turbineRowChangeEventHandler^  _wind_turbineRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_wind_turbineRowChangeEventHandler^  _wind_turbineRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_wind_turbineRowChangeEventHandler^  _wind_turbineRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _wind_turbineDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _wind_turbineDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _wind_turbineDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EVALUATION_WIND_DATA_FILEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  POWER_SET_POINT_FILEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _wind_turbine_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  WORLD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_wind_turbineRow^  default [::System::Int32 ] {
            NewDataSet::_wind_turbineRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_wind_turbineRow(NewDataSet::_wind_turbineRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::_wind_turbineRow^  Add_wind_turbineRow(System::String^  EVALUATION_WIND_DATA_FILE, System::String^  POWER_SET_POINT_FILE, 
                    NewDataSet::WORLDRow^  _parentWORLDRowByWORLD_wind_turbine);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::_wind_turbineRow^  New_wind_turbineRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_wind_turbineRow(NewDataSet::_wind_turbineRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class TRAINING_WIND_DATA_FILESDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTRAINING_WIND_DATA_FILES_Column;
        
        private: ::System::Data::DataColumn^  column_wind_turbine_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::TRAINING_WIND_DATA_FILESRowChangeEventHandler^  TRAINING_WIND_DATA_FILESRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::TRAINING_WIND_DATA_FILESRowChangeEventHandler^  TRAINING_WIND_DATA_FILESRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::TRAINING_WIND_DATA_FILESRowChangeEventHandler^  TRAINING_WIND_DATA_FILESRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::TRAINING_WIND_DATA_FILESRowChangeEventHandler^  TRAINING_WIND_DATA_FILESRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        TRAINING_WIND_DATA_FILESDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        TRAINING_WIND_DATA_FILESDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        TRAINING_WIND_DATA_FILESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TRAINING_WIND_DATA_FILES_ColumnColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _wind_turbine_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::TRAINING_WIND_DATA_FILESRow^  default [::System::Int32 ] {
            NewDataSet::TRAINING_WIND_DATA_FILESRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddTRAINING_WIND_DATA_FILESRow(NewDataSet::TRAINING_WIND_DATA_FILESRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::TRAINING_WIND_DATA_FILESRow^  AddTRAINING_WIND_DATA_FILESRow(System::String^  TRAINING_WIND_DATA_FILES_Column, 
                    NewDataSet::_wind_turbineRow^  _parent_wind_turbineRowBywind_turbine_TRAINING_WIND_DATA_FILES);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::TRAINING_WIND_DATA_FILESRow^  NewTRAINING_WIND_DATA_FILESRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveTRAINING_WIND_DATA_FILESRow(NewDataSet::TRAINING_WIND_DATA_FILESRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _magnetic_levitationDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSET_POINT_FILE;
        
        private: ::System::Data::DataColumn^  columnWORLD_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_magnetic_levitationRowChangeEventHandler^  _magnetic_levitationRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_magnetic_levitationRowChangeEventHandler^  _magnetic_levitationRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_magnetic_levitationRowChangeEventHandler^  _magnetic_levitationRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_magnetic_levitationRowChangeEventHandler^  _magnetic_levitationRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _magnetic_levitationDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _magnetic_levitationDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _magnetic_levitationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SET_POINT_FILEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  WORLD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_magnetic_levitationRow^  default [::System::Int32 ] {
            NewDataSet::_magnetic_levitationRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_magnetic_levitationRow(NewDataSet::_magnetic_levitationRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::_magnetic_levitationRow^  Add_magnetic_levitationRow(System::String^  SET_POINT_FILE, NewDataSet::WORLDRow^  _parentWORLDRowByWORLD_magnetic_levitation);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::_magnetic_levitationRow^  New_magnetic_levitationRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_magnetic_levitationRow(NewDataSet::_magnetic_levitationRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class pitchDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSET_POINT_FILE;
        
        private: ::System::Data::DataColumn^  columnWORLD_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::pitchRowChangeEventHandler^  pitchRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::pitchRowChangeEventHandler^  pitchRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::pitchRowChangeEventHandler^  pitchRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::pitchRowChangeEventHandler^  pitchRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        pitchDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        pitchDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        pitchDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SET_POINT_FILEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  WORLD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::pitchRow^  default [::System::Int32 ] {
            NewDataSet::pitchRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddpitchRow(NewDataSet::pitchRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::pitchRow^  AddpitchRow(System::String^  SET_POINT_FILE, NewDataSet::WORLDRow^  parentWORLDRowByWORLD_pitch);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::pitchRow^  NewpitchRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovepitchRow(NewDataSet::pitchRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _underwater_vehicleDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSET_POINT_FILE;
        
        private: ::System::Data::DataColumn^  columnWORLD_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_underwater_vehicleRowChangeEventHandler^  _underwater_vehicleRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_underwater_vehicleRowChangeEventHandler^  _underwater_vehicleRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_underwater_vehicleRowChangeEventHandler^  _underwater_vehicleRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_underwater_vehicleRowChangeEventHandler^  _underwater_vehicleRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _underwater_vehicleDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _underwater_vehicleDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _underwater_vehicleDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SET_POINT_FILEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  WORLD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_underwater_vehicleRow^  default [::System::Int32 ] {
            NewDataSet::_underwater_vehicleRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_underwater_vehicleRow(NewDataSet::_underwater_vehicleRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::_underwater_vehicleRow^  Add_underwater_vehicleRow(System::String^  SET_POINT_FILE, NewDataSet::WORLDRow^  _parentWORLDRowByWORLD_underwater_vehicle);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::_underwater_vehicleRow^  New_underwater_vehicleRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_underwater_vehicleRow(NewDataSet::_underwater_vehicleRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class SIMGODDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSIMGOD_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::SIMGODRowChangeEventHandler^  SIMGODRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::SIMGODRowChangeEventHandler^  SIMGODRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::SIMGODRowChangeEventHandler^  SIMGODRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::SIMGODRowChangeEventHandler^  SIMGODRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        SIMGODDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        SIMGODDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        SIMGODDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SIMGOD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::SIMGODRow^  default [::System::Int32 ] {
            NewDataSet::SIMGODRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddSIMGODRow(NewDataSet::SIMGODRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::SIMGODRow^  AddSIMGODRow();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::SIMGODRow^  NewSIMGODRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveSIMGODRow(NewDataSet::SIMGODRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class actorDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnALGORITHM;
        
        private: ::System::Data::DataColumn^  columnLOAD;
        
        private: ::System::Data::DataColumn^  columnSAVE;
        
        private: ::System::Data::DataColumn^  columnactor_Id;
        
        private: ::System::Data::DataColumn^  columnSIMGOD_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::actorRowChangeEventHandler^  actorRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::actorRowChangeEventHandler^  actorRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::actorRowChangeEventHandler^  actorRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::actorRowChangeEventHandler^  actorRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        actorDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        actorDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        actorDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ALGORITHMColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  LOADColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SAVEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  actor_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SIMGOD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::actorRow^  default [::System::Int32 ] {
            NewDataSet::actorRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddactorRow(NewDataSet::actorRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::actorRow^  AddactorRow(System::String^  ALGORITHM, System::String^  LOAD, System::String^  SAVE, NewDataSet::SIMGODRow^  parentSIMGODRowBySIMGOD_actor);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::actorRow^  NewactorRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveactorRow(NewDataSet::actorRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class CACLADataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnCACLA_Id;
        
        private: ::System::Data::DataColumn^  columnactor_Id;
        
        private: ::System::Data::DataColumn^  columncontroller_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::CACLARowChangeEventHandler^  CACLARowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::CACLARowChangeEventHandler^  CACLARowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::CACLARowChangeEventHandler^  CACLARowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::CACLARowChangeEventHandler^  CACLARowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        CACLADataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        CACLADataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        CACLADataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CACLA_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  actor_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  controller_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::CACLARow^  default [::System::Int32 ] {
            NewDataSet::CACLARow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddCACLARow(NewDataSet::CACLARow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::CACLARow^  AddCACLARow(NewDataSet::actorRow^  parentactorRowByactor_CACLA, NewDataSet::controllerRow^  parentcontrollerRowBycontroller_CACLA);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::CACLARow^  NewCACLARow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveCACLARow(NewDataSet::CACLARow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class vfaDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnvfa_Id;
        
        private: ::System::Data::DataColumn^  columnCACLA_Id;
        
        private: ::System::Data::DataColumn^  column_TD_Lambda_Id;
        
        private: ::System::Data::DataColumn^  column_True_Online_TD_Lambda_Id;
        
        private: ::System::Data::DataColumn^  column_TDC_Lambda_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::vfaRowChangeEventHandler^  vfaRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::vfaRowChangeEventHandler^  vfaRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::vfaRowChangeEventHandler^  vfaRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::vfaRowChangeEventHandler^  vfaRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        vfaDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        vfaDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        vfaDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  vfa_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CACLA_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _TD_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _True_Online_TD_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _TDC_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::vfaRow^  default [::System::Int32 ] {
            NewDataSet::vfaRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddvfaRow(NewDataSet::vfaRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::vfaRow^  AddvfaRow(NewDataSet::CACLARow^  parentCACLARowByCACLA_vfa, NewDataSet::_TD_LambdaRow^  _parent_TD_LambdaRowByTD_Lambda_vfa, 
                    NewDataSet::_True_Online_TD_LambdaRow^  _parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_vfa, NewDataSet::_TDC_LambdaRow^  _parent_TDC_LambdaRowByTDC_Lambda_vfa);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::vfaRow^  NewvfaRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovevfaRow(NewDataSet::vfaRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class NOISE_WIDTHDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnNOISE_WIDTH_Id;
        
        private: ::System::Data::DataColumn^  columnvfa_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::NOISE_WIDTHRowChangeEventHandler^  NOISE_WIDTHRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::NOISE_WIDTHRowChangeEventHandler^  NOISE_WIDTHRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::NOISE_WIDTHRowChangeEventHandler^  NOISE_WIDTHRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::NOISE_WIDTHRowChangeEventHandler^  NOISE_WIDTHRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NOISE_WIDTHDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NOISE_WIDTHDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NOISE_WIDTHDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  NOISE_WIDTH_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  vfa_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::NOISE_WIDTHRow^  default [::System::Int32 ] {
            NewDataSet::NOISE_WIDTHRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddNOISE_WIDTHRow(NewDataSet::NOISE_WIDTHRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::NOISE_WIDTHRow^  AddNOISE_WIDTHRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::vfaRow^  parentvfaRowByvfa_NOISE_WIDTH);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::NOISE_WIDTHRow^  NewNOISE_WIDTHRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveNOISE_WIDTHRow(NewDataSet::NOISE_WIDTHRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class scheduleDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnINITIAL_VALUE;
        
        private: ::System::Data::DataColumn^  columnFINAL_VALUE;
        
        private: ::System::Data::DataColumn^  columnEVALUATION_EPISODE_VALUE;
        
        private: ::System::Data::DataColumn^  columnINTERPOLATION;
        
        private: ::System::Data::DataColumn^  columnNOISE_WIDTH_Id;
        
        private: ::System::Data::DataColumn^  columnLEARNING_RATE_Id;
        
        private: ::System::Data::DataColumn^  columnKP_Id;
        
        private: ::System::Data::DataColumn^  columnKI_Id;
        
        private: ::System::Data::DataColumn^  columnKD_Id;
        
        private: ::System::Data::DataColumn^  columnVS_RtGnSp_Id;
        
        private: ::System::Data::DataColumn^  columnVS_SlPc_Id;
        
        private: ::System::Data::DataColumn^  columnVS_Rgn2K_Id;
        
        private: ::System::Data::DataColumn^  columnVS_Rgn2Sp_Id;
        
        private: ::System::Data::DataColumn^  columnVS_CtInSp_Id;
        
        private: ::System::Data::DataColumn^  columnVS_RtPwr_Id;
        
        private: ::System::Data::DataColumn^  columnVS_Rgn3MP_Id;
        
        private: ::System::Data::DataColumn^  columnPC_KI_Id;
        
        private: ::System::Data::DataColumn^  columnPC_KK_Id;
        
        private: ::System::Data::DataColumn^  columnPC_KP_Id;
        
        private: ::System::Data::DataColumn^  columnPC_RefSpd_Id;
        
        private: ::System::Data::DataColumn^  columnA_Id;
        
        private: ::System::Data::DataColumn^  columnK_alpha_Id;
        
        private: ::System::Data::DataColumn^  columnP_s_Id;
        
        private: ::System::Data::DataColumn^  columnC_0_Id;
        
        private: ::System::Data::DataColumn^  columnK_t_Id;
        
        private: ::System::Data::DataColumn^  columnJ_t_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::scheduleRowChangeEventHandler^  scheduleRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::scheduleRowChangeEventHandler^  scheduleRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::scheduleRowChangeEventHandler^  scheduleRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::scheduleRowChangeEventHandler^  scheduleRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        scheduleDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        scheduleDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        scheduleDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  INITIAL_VALUEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  FINAL_VALUEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EVALUATION_EPISODE_VALUEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  INTERPOLATIONColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  NOISE_WIDTH_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  LEARNING_RATE_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  KP_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  KI_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  KD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_RtGnSp_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_SlPc_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_Rgn2K_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_Rgn2Sp_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_CtInSp_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_RtPwr_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_Rgn3MP_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PC_KI_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PC_KK_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PC_KP_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PC_RefSpd_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  A_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  K_alpha_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  P_s_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  C_0_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  K_t_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  J_t_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::scheduleRow^  default [::System::Int32 ] {
            NewDataSet::scheduleRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddscheduleRow(NewDataSet::scheduleRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::scheduleRow^  AddscheduleRow(
                    System::Decimal INITIAL_VALUE, 
                    System::Decimal FINAL_VALUE, 
                    System::Decimal EVALUATION_EPISODE_VALUE, 
                    System::String^  INTERPOLATION, 
                    NewDataSet::NOISE_WIDTHRow^  parentNOISE_WIDTHRowByNOISE_WIDTH_schedule, 
                    NewDataSet::LEARNING_RATERow^  parentLEARNING_RATERowByLEARNING_RATE_schedule, 
                    NewDataSet::KPRow^  parentKPRowByKP_schedule, 
                    NewDataSet::KIRow^  parentKIRowByKI_schedule, 
                    NewDataSet::KDRow^  parentKDRowByKD_schedule, 
                    NewDataSet::VS_RtGnSpRow^  parentVS_RtGnSpRowByVS_RtGnSp_schedule, 
                    NewDataSet::VS_SlPcRow^  parentVS_SlPcRowByVS_SlPc_schedule, 
                    NewDataSet::VS_Rgn2KRow^  parentVS_Rgn2KRowByVS_Rgn2K_schedule, 
                    NewDataSet::VS_Rgn2SpRow^  parentVS_Rgn2SpRowByVS_Rgn2Sp_schedule, 
                    NewDataSet::VS_CtInSpRow^  parentVS_CtInSpRowByVS_CtInSp_schedule, 
                    NewDataSet::VS_RtPwrRow^  parentVS_RtPwrRowByVS_RtPwr_schedule, 
                    NewDataSet::VS_Rgn3MPRow^  parentVS_Rgn3MPRowByVS_Rgn3MP_schedule, 
                    NewDataSet::PC_KIRow^  parentPC_KIRowByPC_KI_schedule, 
                    NewDataSet::PC_KKRow^  parentPC_KKRowByPC_KK_schedule, 
                    NewDataSet::PC_KPRow^  parentPC_KPRowByPC_KP_schedule, 
                    NewDataSet::PC_RefSpdRow^  parentPC_RefSpdRowByPC_RefSpd_schedule, 
                    NewDataSet::ARow^  parentARowByA_schedule, 
                    NewDataSet::K_alphaRow^  parentK_alphaRowByK_alpha_schedule, 
                    NewDataSet::P_sRow^  parentP_sRowByP_s_schedule, 
                    NewDataSet::C_0Row^  parentC_0RowByC_0_schedule, 
                    NewDataSet::K_tRow^  parentK_tRowByK_t_schedule, 
                    NewDataSet::J_tRow^  parentJ_tRowByJ_t_schedule);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::scheduleRow^  NewscheduleRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovescheduleRow(NewDataSet::scheduleRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class LEARNING_RATEDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnLEARNING_RATE_Id;
        
        private: ::System::Data::DataColumn^  columnvfa_Id;
        
        private: ::System::Data::DataColumn^  column_TD_Lambda_Id;
        
        private: ::System::Data::DataColumn^  column_True_Online_TD_Lambda_Id;
        
        private: ::System::Data::DataColumn^  column_TDC_Lambda_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::LEARNING_RATERowChangeEventHandler^  LEARNING_RATERowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::LEARNING_RATERowChangeEventHandler^  LEARNING_RATERowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::LEARNING_RATERowChangeEventHandler^  LEARNING_RATERowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::LEARNING_RATERowChangeEventHandler^  LEARNING_RATERowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LEARNING_RATEDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LEARNING_RATEDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LEARNING_RATEDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  LEARNING_RATE_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  vfa_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _TD_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _True_Online_TD_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _TDC_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::LEARNING_RATERow^  default [::System::Int32 ] {
            NewDataSet::LEARNING_RATERow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddLEARNING_RATERow(NewDataSet::LEARNING_RATERow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::LEARNING_RATERow^  AddLEARNING_RATERow(
                    System::String^  TYPE, 
                    System::Decimal decimal, 
                    NewDataSet::vfaRow^  parentvfaRowByvfa_LEARNING_RATE, 
                    NewDataSet::_TD_LambdaRow^  _parent_TD_LambdaRowByTD_Lambda_LEARNING_RATE, 
                    NewDataSet::_True_Online_TD_LambdaRow^  _parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_LEARNING_RATE, 
                    NewDataSet::_TDC_LambdaRow^  _parent_TDC_LambdaRowByTDC_Lambda_LEARNING_RATE);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::LEARNING_RATERow^  NewLEARNING_RATERow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveLEARNING_RATERow(NewDataSet::LEARNING_RATERow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class RBF_GRIDDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnRBF_GRID_Id;
        
        private: ::System::Data::DataColumn^  columnvfa_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::RBF_GRIDRowChangeEventHandler^  RBF_GRIDRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::RBF_GRIDRowChangeEventHandler^  RBF_GRIDRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::RBF_GRIDRowChangeEventHandler^  RBF_GRIDRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::RBF_GRIDRowChangeEventHandler^  RBF_GRIDRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RBF_GRIDDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RBF_GRIDDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RBF_GRIDDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  RBF_GRID_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  vfa_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::RBF_GRIDRow^  default [::System::Int32 ] {
            NewDataSet::RBF_GRIDRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddRBF_GRIDRow(NewDataSet::RBF_GRIDRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::RBF_GRIDRow^  AddRBF_GRIDRow(NewDataSet::vfaRow^  parentvfaRowByvfa_RBF_GRID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::RBF_GRIDRow^  NewRBF_GRIDRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveRBF_GRIDRow(NewDataSet::RBF_GRIDRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class dimensionDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  column_state_action_variable;
        
        private: ::System::Data::DataColumn^  column_dimension_num_features;
        
        private: ::System::Data::DataColumn^  column_feature_distribution;
        
        private: ::System::Data::DataColumn^  columnRBF_GRID_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::dimensionRowChangeEventHandler^  dimensionRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::dimensionRowChangeEventHandler^  dimensionRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::dimensionRowChangeEventHandler^  dimensionRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::dimensionRowChangeEventHandler^  dimensionRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        dimensionDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        dimensionDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        dimensionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _state_action_variableColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _dimension_num_featuresColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _feature_distributionColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  RBF_GRID_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::dimensionRow^  default [::System::Int32 ] {
            NewDataSet::dimensionRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AdddimensionRow(NewDataSet::dimensionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::dimensionRow^  AdddimensionRow(System::String^  _state_action_variable, System::Int64 _dimension_num_features, 
                    System::String^  _feature_distribution, NewDataSet::RBF_GRIDRow^  parentRBF_GRIDRowByRBF_GRID_dimension);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::dimensionRow^  NewdimensionRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovedimensionRow(NewDataSet::dimensionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class PIDDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnERROR_VARIABLE;
        
        private: ::System::Data::DataColumn^  columnPID_Id;
        
        private: ::System::Data::DataColumn^  columnactor_Id;
        
        private: ::System::Data::DataColumn^  columncontroller_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::PIDRowChangeEventHandler^  PIDRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::PIDRowChangeEventHandler^  PIDRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::PIDRowChangeEventHandler^  PIDRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::PIDRowChangeEventHandler^  PIDRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PIDDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PIDDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PIDDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ERROR_VARIABLEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PID_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  actor_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  controller_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::PIDRow^  default [::System::Int32 ] {
            NewDataSet::PIDRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddPIDRow(NewDataSet::PIDRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::PIDRow^  AddPIDRow(System::String^  ERROR_VARIABLE, NewDataSet::actorRow^  parentactorRowByactor_PID, 
                    NewDataSet::controllerRow^  parentcontrollerRowBycontroller_PID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::PIDRow^  NewPIDRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovePIDRow(NewDataSet::PIDRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class KPDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnKP_Id;
        
        private: ::System::Data::DataColumn^  columnPID_Id;
        
        private: ::System::Data::DataColumn^  columnvidal_Id;
        
        private: ::System::Data::DataColumn^  columnboukhezzar_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::KPRowChangeEventHandler^  KPRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::KPRowChangeEventHandler^  KPRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::KPRowChangeEventHandler^  KPRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::KPRowChangeEventHandler^  KPRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KPDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KPDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KPDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  KP_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PID_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  vidal_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  boukhezzar_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::KPRow^  default [::System::Int32 ] {
            NewDataSet::KPRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddKPRow(NewDataSet::KPRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::KPRow^  AddKPRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::PIDRow^  parentPIDRowByPID_KP, 
                    NewDataSet::vidalRow^  parentvidalRowByvidal_KP, NewDataSet::boukhezzarRow^  parentboukhezzarRowByboukhezzar_KP);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::KPRow^  NewKPRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveKPRow(NewDataSet::KPRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class KIDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnKI_Id;
        
        private: ::System::Data::DataColumn^  columnPID_Id;
        
        private: ::System::Data::DataColumn^  columnvidal_Id;
        
        private: ::System::Data::DataColumn^  columnboukhezzar_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::KIRowChangeEventHandler^  KIRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::KIRowChangeEventHandler^  KIRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::KIRowChangeEventHandler^  KIRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::KIRowChangeEventHandler^  KIRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KIDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KIDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KIDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  KI_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PID_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  vidal_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  boukhezzar_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::KIRow^  default [::System::Int32 ] {
            NewDataSet::KIRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddKIRow(NewDataSet::KIRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::KIRow^  AddKIRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::PIDRow^  parentPIDRowByPID_KI, 
                    NewDataSet::vidalRow^  parentvidalRowByvidal_KI, NewDataSet::boukhezzarRow^  parentboukhezzarRowByboukhezzar_KI);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::KIRow^  NewKIRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveKIRow(NewDataSet::KIRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class KDDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnKD_Id;
        
        private: ::System::Data::DataColumn^  columnPID_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::KDRowChangeEventHandler^  KDRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::KDRowChangeEventHandler^  KDRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::KDRowChangeEventHandler^  KDRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::KDRowChangeEventHandler^  KDRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KDDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KDDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KDDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  KD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PID_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::KDRow^  default [::System::Int32 ] {
            NewDataSet::KDRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddKDRow(NewDataSet::KDRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::KDRow^  AddKDRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::PIDRow^  parentPIDRowByPID_KD);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::KDRow^  NewKDRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveKDRow(NewDataSet::KDRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class LQRDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnLQR_Id;
        
        private: ::System::Data::DataColumn^  columnactor_Id;
        
        private: ::System::Data::DataColumn^  columncontroller_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::LQRRowChangeEventHandler^  LQRRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::LQRRowChangeEventHandler^  LQRRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::LQRRowChangeEventHandler^  LQRRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::LQRRowChangeEventHandler^  LQRRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LQRDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LQRDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LQRDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  LQR_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  actor_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  controller_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::LQRRow^  default [::System::Int32 ] {
            NewDataSet::LQRRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddLQRRow(NewDataSet::LQRRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::LQRRow^  AddLQRRow(NewDataSet::actorRow^  parentactorRowByactor_LQR, NewDataSet::controllerRow^  parentcontrollerRowBycontroller_LQR);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::LQRRow^  NewLQRRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveLQRRow(NewDataSet::LQRRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _LQR_GAINDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  column_state_variable;
        
        private: ::System::Data::DataColumn^  columngain;
        
        private: ::System::Data::DataColumn^  columnLQR_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_LQR_GAINRowChangeEventHandler^  _LQR_GAINRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_LQR_GAINRowChangeEventHandler^  _LQR_GAINRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_LQR_GAINRowChangeEventHandler^  _LQR_GAINRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_LQR_GAINRowChangeEventHandler^  _LQR_GAINRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _LQR_GAINDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _LQR_GAINDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _LQR_GAINDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _state_variableColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  gainColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  LQR_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_LQR_GAINRow^  default [::System::Int32 ] {
            NewDataSet::_LQR_GAINRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_LQR_GAINRow(NewDataSet::_LQR_GAINRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::_LQR_GAINRow^  Add_LQR_GAINRow(System::String^  _state_variable, System::Decimal gain, NewDataSet::LQRRow^  _parentLQRRowByLQR_LQR_GAIN);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::_LQR_GAINRow^  New_LQR_GAINRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_LQR_GAINRow(NewDataSet::_LQR_GAINRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class jonkmanDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        private: ::System::Data::DataColumn^  columnactor_Id;
        
        private: ::System::Data::DataColumn^  columncontroller_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::jonkmanRowChangeEventHandler^  jonkmanRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::jonkmanRowChangeEventHandler^  jonkmanRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::jonkmanRowChangeEventHandler^  jonkmanRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::jonkmanRowChangeEventHandler^  jonkmanRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        jonkmanDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        jonkmanDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        jonkmanDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  actor_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  controller_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::jonkmanRow^  default [::System::Int32 ] {
            NewDataSet::jonkmanRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddjonkmanRow(NewDataSet::jonkmanRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::jonkmanRow^  AddjonkmanRow(NewDataSet::actorRow^  parentactorRowByactor_jonkman, NewDataSet::controllerRow^  parentcontrollerRowBycontroller_jonkman);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::jonkmanRow^  NewjonkmanRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovejonkmanRow(NewDataSet::jonkmanRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class VS_RtGnSpDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnVS_RtGnSp_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_RtGnSpRowChangeEventHandler^  VS_RtGnSpRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_RtGnSpRowChangeEventHandler^  VS_RtGnSpRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_RtGnSpRowChangeEventHandler^  VS_RtGnSpRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_RtGnSpRowChangeEventHandler^  VS_RtGnSpRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_RtGnSpDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_RtGnSpDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_RtGnSpDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_RtGnSp_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_RtGnSpRow^  default [::System::Int32 ] {
            NewDataSet::VS_RtGnSpRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddVS_RtGnSpRow(NewDataSet::VS_RtGnSpRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::VS_RtGnSpRow^  AddVS_RtGnSpRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_VS_RtGnSp);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::VS_RtGnSpRow^  NewVS_RtGnSpRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveVS_RtGnSpRow(NewDataSet::VS_RtGnSpRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class VS_SlPcDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnVS_SlPc_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_SlPcRowChangeEventHandler^  VS_SlPcRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_SlPcRowChangeEventHandler^  VS_SlPcRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_SlPcRowChangeEventHandler^  VS_SlPcRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_SlPcRowChangeEventHandler^  VS_SlPcRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_SlPcDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_SlPcDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_SlPcDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_SlPc_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_SlPcRow^  default [::System::Int32 ] {
            NewDataSet::VS_SlPcRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddVS_SlPcRow(NewDataSet::VS_SlPcRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::VS_SlPcRow^  AddVS_SlPcRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_VS_SlPc);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::VS_SlPcRow^  NewVS_SlPcRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveVS_SlPcRow(NewDataSet::VS_SlPcRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class VS_Rgn2KDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnVS_Rgn2K_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_Rgn2KRowChangeEventHandler^  VS_Rgn2KRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_Rgn2KRowChangeEventHandler^  VS_Rgn2KRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_Rgn2KRowChangeEventHandler^  VS_Rgn2KRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_Rgn2KRowChangeEventHandler^  VS_Rgn2KRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn2KDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn2KDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn2KDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_Rgn2K_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_Rgn2KRow^  default [::System::Int32 ] {
            NewDataSet::VS_Rgn2KRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddVS_Rgn2KRow(NewDataSet::VS_Rgn2KRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::VS_Rgn2KRow^  AddVS_Rgn2KRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_VS_Rgn2K);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::VS_Rgn2KRow^  NewVS_Rgn2KRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveVS_Rgn2KRow(NewDataSet::VS_Rgn2KRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class VS_Rgn2SpDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnVS_Rgn2Sp_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_Rgn2SpRowChangeEventHandler^  VS_Rgn2SpRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_Rgn2SpRowChangeEventHandler^  VS_Rgn2SpRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_Rgn2SpRowChangeEventHandler^  VS_Rgn2SpRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_Rgn2SpRowChangeEventHandler^  VS_Rgn2SpRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn2SpDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn2SpDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn2SpDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_Rgn2Sp_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_Rgn2SpRow^  default [::System::Int32 ] {
            NewDataSet::VS_Rgn2SpRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddVS_Rgn2SpRow(NewDataSet::VS_Rgn2SpRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::VS_Rgn2SpRow^  AddVS_Rgn2SpRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_VS_Rgn2Sp);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::VS_Rgn2SpRow^  NewVS_Rgn2SpRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveVS_Rgn2SpRow(NewDataSet::VS_Rgn2SpRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class VS_CtInSpDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnVS_CtInSp_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_CtInSpRowChangeEventHandler^  VS_CtInSpRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_CtInSpRowChangeEventHandler^  VS_CtInSpRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_CtInSpRowChangeEventHandler^  VS_CtInSpRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_CtInSpRowChangeEventHandler^  VS_CtInSpRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_CtInSpDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_CtInSpDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_CtInSpDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_CtInSp_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_CtInSpRow^  default [::System::Int32 ] {
            NewDataSet::VS_CtInSpRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddVS_CtInSpRow(NewDataSet::VS_CtInSpRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::VS_CtInSpRow^  AddVS_CtInSpRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_VS_CtInSp);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::VS_CtInSpRow^  NewVS_CtInSpRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveVS_CtInSpRow(NewDataSet::VS_CtInSpRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class VS_RtPwrDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnVS_RtPwr_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_RtPwrRowChangeEventHandler^  VS_RtPwrRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_RtPwrRowChangeEventHandler^  VS_RtPwrRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_RtPwrRowChangeEventHandler^  VS_RtPwrRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_RtPwrRowChangeEventHandler^  VS_RtPwrRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_RtPwrDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_RtPwrDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_RtPwrDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_RtPwr_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_RtPwrRow^  default [::System::Int32 ] {
            NewDataSet::VS_RtPwrRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddVS_RtPwrRow(NewDataSet::VS_RtPwrRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::VS_RtPwrRow^  AddVS_RtPwrRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_VS_RtPwr);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::VS_RtPwrRow^  NewVS_RtPwrRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveVS_RtPwrRow(NewDataSet::VS_RtPwrRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class VS_Rgn3MPDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnVS_Rgn3MP_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_Rgn3MPRowChangeEventHandler^  VS_Rgn3MPRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_Rgn3MPRowChangeEventHandler^  VS_Rgn3MPRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_Rgn3MPRowChangeEventHandler^  VS_Rgn3MPRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::VS_Rgn3MPRowChangeEventHandler^  VS_Rgn3MPRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn3MPDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn3MPDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn3MPDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_Rgn3MP_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_Rgn3MPRow^  default [::System::Int32 ] {
            NewDataSet::VS_Rgn3MPRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddVS_Rgn3MPRow(NewDataSet::VS_Rgn3MPRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::VS_Rgn3MPRow^  AddVS_Rgn3MPRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_VS_Rgn3MP);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::VS_Rgn3MPRow^  NewVS_Rgn3MPRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveVS_Rgn3MPRow(NewDataSet::VS_Rgn3MPRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class PC_KIDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnPC_KI_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::PC_KIRowChangeEventHandler^  PC_KIRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::PC_KIRowChangeEventHandler^  PC_KIRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::PC_KIRowChangeEventHandler^  PC_KIRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::PC_KIRowChangeEventHandler^  PC_KIRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KIDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KIDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KIDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PC_KI_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::PC_KIRow^  default [::System::Int32 ] {
            NewDataSet::PC_KIRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddPC_KIRow(NewDataSet::PC_KIRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::PC_KIRow^  AddPC_KIRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_PC_KI);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::PC_KIRow^  NewPC_KIRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovePC_KIRow(NewDataSet::PC_KIRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class PC_KKDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnPC_KK_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::PC_KKRowChangeEventHandler^  PC_KKRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::PC_KKRowChangeEventHandler^  PC_KKRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::PC_KKRowChangeEventHandler^  PC_KKRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::PC_KKRowChangeEventHandler^  PC_KKRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KKDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KKDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KKDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PC_KK_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::PC_KKRow^  default [::System::Int32 ] {
            NewDataSet::PC_KKRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddPC_KKRow(NewDataSet::PC_KKRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::PC_KKRow^  AddPC_KKRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_PC_KK);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::PC_KKRow^  NewPC_KKRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovePC_KKRow(NewDataSet::PC_KKRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class PC_KPDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnPC_KP_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::PC_KPRowChangeEventHandler^  PC_KPRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::PC_KPRowChangeEventHandler^  PC_KPRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::PC_KPRowChangeEventHandler^  PC_KPRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::PC_KPRowChangeEventHandler^  PC_KPRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KPDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KPDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KPDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PC_KP_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::PC_KPRow^  default [::System::Int32 ] {
            NewDataSet::PC_KPRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddPC_KPRow(NewDataSet::PC_KPRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::PC_KPRow^  AddPC_KPRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_PC_KP);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::PC_KPRow^  NewPC_KPRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovePC_KPRow(NewDataSet::PC_KPRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class PC_RefSpdDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnPC_RefSpd_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::PC_RefSpdRowChangeEventHandler^  PC_RefSpdRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::PC_RefSpdRowChangeEventHandler^  PC_RefSpdRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::PC_RefSpdRowChangeEventHandler^  PC_RefSpdRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::PC_RefSpdRowChangeEventHandler^  PC_RefSpdRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_RefSpdDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_RefSpdDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_RefSpdDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PC_RefSpd_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::PC_RefSpdRow^  default [::System::Int32 ] {
            NewDataSet::PC_RefSpdRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddPC_RefSpdRow(NewDataSet::PC_RefSpdRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::PC_RefSpdRow^  AddPC_RefSpdRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_PC_RefSpd);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::PC_RefSpdRow^  NewPC_RefSpdRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovePC_RefSpdRow(NewDataSet::PC_RefSpdRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class vidalDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnvidal_Id;
        
        private: ::System::Data::DataColumn^  columnactor_Id;
        
        private: ::System::Data::DataColumn^  columncontroller_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::vidalRowChangeEventHandler^  vidalRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::vidalRowChangeEventHandler^  vidalRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::vidalRowChangeEventHandler^  vidalRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::vidalRowChangeEventHandler^  vidalRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        vidalDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        vidalDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        vidalDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  vidal_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  actor_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  controller_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::vidalRow^  default [::System::Int32 ] {
            NewDataSet::vidalRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddvidalRow(NewDataSet::vidalRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::vidalRow^  AddvidalRow(NewDataSet::actorRow^  parentactorRowByactor_vidal, NewDataSet::controllerRow^  parentcontrollerRowBycontroller_vidal);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::vidalRow^  NewvidalRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovevidalRow(NewDataSet::vidalRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class ADataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnA_Id;
        
        private: ::System::Data::DataColumn^  columnvidal_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::ARowChangeEventHandler^  ARowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::ARowChangeEventHandler^  ARowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::ARowChangeEventHandler^  ARowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::ARowChangeEventHandler^  ARowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ADataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ADataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ADataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  A_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  vidal_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::ARow^  default [::System::Int32 ] {
            NewDataSet::ARow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddARow(NewDataSet::ARow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::ARow^  AddARow(System::String^  TYPE, System::Decimal decimal, NewDataSet::vidalRow^  parentvidalRowByvidal_A);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::ARow^  NewARow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveARow(NewDataSet::ARow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class K_alphaDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnK_alpha_Id;
        
        private: ::System::Data::DataColumn^  columnvidal_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::K_alphaRowChangeEventHandler^  K_alphaRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::K_alphaRowChangeEventHandler^  K_alphaRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::K_alphaRowChangeEventHandler^  K_alphaRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::K_alphaRowChangeEventHandler^  K_alphaRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        K_alphaDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        K_alphaDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        K_alphaDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  K_alpha_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  vidal_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::K_alphaRow^  default [::System::Int32 ] {
            NewDataSet::K_alphaRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddK_alphaRow(NewDataSet::K_alphaRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::K_alphaRow^  AddK_alphaRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::vidalRow^  parentvidalRowByvidal_K_alpha);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::K_alphaRow^  NewK_alphaRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveK_alphaRow(NewDataSet::K_alphaRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class P_sDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnP_s_Id;
        
        private: ::System::Data::DataColumn^  columnvidal_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::P_sRowChangeEventHandler^  P_sRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::P_sRowChangeEventHandler^  P_sRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::P_sRowChangeEventHandler^  P_sRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::P_sRowChangeEventHandler^  P_sRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        P_sDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        P_sDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        P_sDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  P_s_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  vidal_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::P_sRow^  default [::System::Int32 ] {
            NewDataSet::P_sRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddP_sRow(NewDataSet::P_sRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::P_sRow^  AddP_sRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::vidalRow^  parentvidalRowByvidal_P_s);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::P_sRow^  NewP_sRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveP_sRow(NewDataSet::P_sRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class boukhezzarDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnboukhezzar_Id;
        
        private: ::System::Data::DataColumn^  columnactor_Id;
        
        private: ::System::Data::DataColumn^  columncontroller_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::boukhezzarRowChangeEventHandler^  boukhezzarRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::boukhezzarRowChangeEventHandler^  boukhezzarRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::boukhezzarRowChangeEventHandler^  boukhezzarRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::boukhezzarRowChangeEventHandler^  boukhezzarRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        boukhezzarDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        boukhezzarDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        boukhezzarDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  boukhezzar_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  actor_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  controller_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::boukhezzarRow^  default [::System::Int32 ] {
            NewDataSet::boukhezzarRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddboukhezzarRow(NewDataSet::boukhezzarRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::boukhezzarRow^  AddboukhezzarRow(NewDataSet::actorRow^  parentactorRowByactor_boukhezzar, NewDataSet::controllerRow^  parentcontrollerRowBycontroller_boukhezzar);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::boukhezzarRow^  NewboukhezzarRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveboukhezzarRow(NewDataSet::boukhezzarRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class C_0DataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnC_0_Id;
        
        private: ::System::Data::DataColumn^  columnboukhezzar_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::C_0RowChangeEventHandler^  C_0RowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::C_0RowChangeEventHandler^  C_0RowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::C_0RowChangeEventHandler^  C_0RowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::C_0RowChangeEventHandler^  C_0RowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        C_0DataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        C_0DataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        C_0DataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  C_0_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  boukhezzar_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::C_0Row^  default [::System::Int32 ] {
            NewDataSet::C_0Row^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddC_0Row(NewDataSet::C_0Row^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::C_0Row^  AddC_0Row(System::String^  TYPE, System::Decimal decimal, NewDataSet::boukhezzarRow^  parentboukhezzarRowByboukhezzar_C_0);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::C_0Row^  NewC_0Row();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveC_0Row(NewDataSet::C_0Row^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class K_tDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnK_t_Id;
        
        private: ::System::Data::DataColumn^  columnboukhezzar_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::K_tRowChangeEventHandler^  K_tRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::K_tRowChangeEventHandler^  K_tRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::K_tRowChangeEventHandler^  K_tRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::K_tRowChangeEventHandler^  K_tRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        K_tDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        K_tDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        K_tDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  K_t_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  boukhezzar_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::K_tRow^  default [::System::Int32 ] {
            NewDataSet::K_tRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddK_tRow(NewDataSet::K_tRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::K_tRow^  AddK_tRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::boukhezzarRow^  parentboukhezzarRowByboukhezzar_K_t);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::K_tRow^  NewK_tRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveK_tRow(NewDataSet::K_tRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class J_tDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTYPE;
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnJ_t_Id;
        
        private: ::System::Data::DataColumn^  columnboukhezzar_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::J_tRowChangeEventHandler^  J_tRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::J_tRowChangeEventHandler^  J_tRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::J_tRowChangeEventHandler^  J_tRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::J_tRowChangeEventHandler^  J_tRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        J_tDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        J_tDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        J_tDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  J_t_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  boukhezzar_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::J_tRow^  default [::System::Int32 ] {
            NewDataSet::J_tRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddJ_tRow(NewDataSet::J_tRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::J_tRow^  AddJ_tRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::boukhezzarRow^  parentboukhezzarRowByboukhezzar_J_t);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::J_tRow^  NewJ_tRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveJ_tRow(NewDataSet::J_tRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class criticDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnALGORITHM;
        
        private: ::System::Data::DataColumn^  columnLOAD;
        
        private: ::System::Data::DataColumn^  columnSAVE;
        
        private: ::System::Data::DataColumn^  columncritic_Id;
        
        private: ::System::Data::DataColumn^  columnSIMGOD_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::criticRowChangeEventHandler^  criticRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::criticRowChangeEventHandler^  criticRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::criticRowChangeEventHandler^  criticRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::criticRowChangeEventHandler^  criticRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        criticDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        criticDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        criticDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ALGORITHMColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  LOADColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SAVEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  critic_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SIMGOD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::criticRow^  default [::System::Int32 ] {
            NewDataSet::criticRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddcriticRow(NewDataSet::criticRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::criticRow^  AddcriticRow(System::String^  ALGORITHM, System::String^  LOAD, System::String^  SAVE, NewDataSet::SIMGODRow^  parentSIMGODRowBySIMGOD_critic);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::criticRow^  NewcriticRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovecriticRow(NewDataSet::criticRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _TD_LambdaDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  column_TD_Lambda_Id;
        
        private: ::System::Data::DataColumn^  columncritic_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_TD_LambdaRowChangeEventHandler^  _TD_LambdaRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_TD_LambdaRowChangeEventHandler^  _TD_LambdaRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_TD_LambdaRowChangeEventHandler^  _TD_LambdaRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_TD_LambdaRowChangeEventHandler^  _TD_LambdaRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _TD_LambdaDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _TD_LambdaDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _TD_LambdaDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _TD_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  critic_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_TD_LambdaRow^  default [::System::Int32 ] {
            NewDataSet::_TD_LambdaRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_TD_LambdaRow(NewDataSet::_TD_LambdaRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::_TD_LambdaRow^  Add_TD_LambdaRow(NewDataSet::criticRow^  _parentcriticRowBycritic_TD_Lambda);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::_TD_LambdaRow^  New_TD_LambdaRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_TD_LambdaRow(NewDataSet::_TD_LambdaRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _True_Online_TD_LambdaDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  column_True_Online_TD_Lambda_Id;
        
        private: ::System::Data::DataColumn^  columncritic_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_True_Online_TD_LambdaRowChangeEventHandler^  _True_Online_TD_LambdaRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_True_Online_TD_LambdaRowChangeEventHandler^  _True_Online_TD_LambdaRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_True_Online_TD_LambdaRowChangeEventHandler^  _True_Online_TD_LambdaRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_True_Online_TD_LambdaRowChangeEventHandler^  _True_Online_TD_LambdaRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _True_Online_TD_LambdaDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _True_Online_TD_LambdaDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _True_Online_TD_LambdaDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _True_Online_TD_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  critic_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_True_Online_TD_LambdaRow^  default [::System::Int32 ] {
            NewDataSet::_True_Online_TD_LambdaRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_True_Online_TD_LambdaRow(NewDataSet::_True_Online_TD_LambdaRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::_True_Online_TD_LambdaRow^  Add_True_Online_TD_LambdaRow(NewDataSet::criticRow^  _parentcriticRowBycritic_True_Online_TD_Lambda);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::_True_Online_TD_LambdaRow^  New_True_Online_TD_LambdaRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_True_Online_TD_LambdaRow(NewDataSet::_True_Online_TD_LambdaRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _TDC_LambdaDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  column_TDC_Lambda_Id;
        
        private: ::System::Data::DataColumn^  columncritic_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_TDC_LambdaRowChangeEventHandler^  _TDC_LambdaRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_TDC_LambdaRowChangeEventHandler^  _TDC_LambdaRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_TDC_LambdaRowChangeEventHandler^  _TDC_LambdaRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::_TDC_LambdaRowChangeEventHandler^  _TDC_LambdaRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _TDC_LambdaDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _TDC_LambdaDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _TDC_LambdaDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _TDC_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  critic_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_TDC_LambdaRow^  default [::System::Int32 ] {
            NewDataSet::_TDC_LambdaRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_TDC_LambdaRow(NewDataSet::_TDC_LambdaRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::_TDC_LambdaRow^  Add_TDC_LambdaRow(NewDataSet::criticRow^  _parentcriticRowBycritic_TDC_Lambda);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::_TDC_LambdaRow^  New_TDC_LambdaRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_TDC_LambdaRow(NewDataSet::_TDC_LambdaRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class controllerDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnALGORITHM;
        
        private: ::System::Data::DataColumn^  columnLOAD;
        
        private: ::System::Data::DataColumn^  columnSAVE;
        
        private: ::System::Data::DataColumn^  columncontroller_Id;
        
        private: ::System::Data::DataColumn^  columnSIMGOD_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::controllerRowChangeEventHandler^  controllerRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::controllerRowChangeEventHandler^  controllerRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::controllerRowChangeEventHandler^  controllerRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::controllerRowChangeEventHandler^  controllerRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        controllerDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        controllerDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        controllerDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ALGORITHMColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  LOADColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SAVEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  controller_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SIMGOD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::controllerRow^  default [::System::Int32 ] {
            NewDataSet::controllerRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddcontrollerRow(NewDataSet::controllerRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::controllerRow^  AddcontrollerRow(System::String^  ALGORITHM, System::String^  LOAD, System::String^  SAVE, 
                    NewDataSet::SIMGODRow^  parentSIMGODRowBySIMGOD_controller);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::controllerRow^  NewcontrollerRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovecontrollerRow(NewDataSet::controllerRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class EXPERIMENTRow : public ::System::Data::DataRow {
        
        private: NewDataSet::EXPERIMENTDataTable^  tableEXPERIMENT;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        EXPERIMENTRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 NUM_EPISODES {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 EPISODE_LENGTH {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 RANDOM_SEED {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 EVAL_FREQ {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 EXPERIMENT_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::LOGRow^  >^  GetLOGRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class LOGRow : public ::System::Data::DataRow {
        
        private: NewDataSet::LOGDataTable^  tableLOG;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LOGRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal FREQ {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  OUTPUT_DIR {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 FILE_PREFIX {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Boolean EVALUATION_EPISODES {
            System::Boolean get();
            System::Void set(System::Boolean value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Boolean TRAINING_EPISODES {
            System::Boolean get();
            System::Void set(System::Boolean value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Boolean EVALUATION_AVG_REWARDS {
            System::Boolean get();
            System::Void set(System::Boolean value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 EXPERIMENT_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::EXPERIMENTRow^  EXPERIMENTRow {
            NewDataSet::EXPERIMENTRow^  get();
            System::Void set(NewDataSet::EXPERIMENTRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsEXPERIMENT_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetEXPERIMENT_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class WORLDRow : public ::System::Data::DataRow {
        
        private: NewDataSet::WORLDDataTable^  tableWORLD;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        WORLDRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  _dynamic_model {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal DELTA_T {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 NUM_SIMULATION_STEPS {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 WORLD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::rewardRow^  >^  GetrewardRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::_wind_turbineRow^  >^  _Getwind_turbineRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::_magnetic_levitationRow^  >^  _Getmagnetic_levitationRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::pitchRow^  >^  GetpitchRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::_underwater_vehicleRow^  >^  _Getunderwater_vehicleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class rewardRow : public ::System::Data::DataRow {
        
        private: NewDataSet::rewardDataTable^  tablereward;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        rewardRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal MIN_REWARD {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal MAX_REWARD {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 reward_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 WORLD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::WORLDRow^  WORLDRow {
            NewDataSet::WORLDRow^  get();
            System::Void set(NewDataSet::WORLDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsWORLD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetWORLD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::_reward_componentRow^  >^  _Getreward_componentRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _reward_componentRow : public ::System::Data::DataRow {
        
        private: NewDataSet::_reward_componentDataTable^  table_reward_component;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _reward_componentRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  COMPONENT_TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal COMPONENT_WEIGHT {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal COMPONENT_TOLERANCE {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  CONTROL_ERROR_VARIABLE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 reward_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::rewardRow^  rewardRow {
            NewDataSet::rewardRow^  get();
            System::Void set(NewDataSet::rewardRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isreward_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setreward_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _wind_turbineRow : public ::System::Data::DataRow {
        
        private: NewDataSet::_wind_turbineDataTable^  table_wind_turbine;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _wind_turbineRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  EVALUATION_WIND_DATA_FILE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  POWER_SET_POINT_FILE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _wind_turbine_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 WORLD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::WORLDRow^  WORLDRow {
            NewDataSet::WORLDRow^  get();
            System::Void set(NewDataSet::WORLDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsWORLD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetWORLD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::TRAINING_WIND_DATA_FILESRow^  >^  GetTRAINING_WIND_DATA_FILESRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class TRAINING_WIND_DATA_FILESRow : public ::System::Data::DataRow {
        
        private: NewDataSet::TRAINING_WIND_DATA_FILESDataTable^  tableTRAINING_WIND_DATA_FILES;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        TRAINING_WIND_DATA_FILESRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TRAINING_WIND_DATA_FILES_Column {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _wind_turbine_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_wind_turbineRow^  _wind_turbineRow {
            NewDataSet::_wind_turbineRow^  get();
            System::Void set(NewDataSet::_wind_turbineRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_wind_turbine_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_wind_turbine_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _magnetic_levitationRow : public ::System::Data::DataRow {
        
        private: NewDataSet::_magnetic_levitationDataTable^  table_magnetic_levitation;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _magnetic_levitationRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  SET_POINT_FILE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 WORLD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::WORLDRow^  WORLDRow {
            NewDataSet::WORLDRow^  get();
            System::Void set(NewDataSet::WORLDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsWORLD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetWORLD_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class pitchRow : public ::System::Data::DataRow {
        
        private: NewDataSet::pitchDataTable^  tablepitch;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        pitchRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  SET_POINT_FILE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 WORLD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::WORLDRow^  WORLDRow {
            NewDataSet::WORLDRow^  get();
            System::Void set(NewDataSet::WORLDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsWORLD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetWORLD_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _underwater_vehicleRow : public ::System::Data::DataRow {
        
        private: NewDataSet::_underwater_vehicleDataTable^  table_underwater_vehicle;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _underwater_vehicleRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  SET_POINT_FILE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 WORLD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::WORLDRow^  WORLDRow {
            NewDataSet::WORLDRow^  get();
            System::Void set(NewDataSet::WORLDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsWORLD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetWORLD_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class SIMGODRow : public ::System::Data::DataRow {
        
        private: NewDataSet::SIMGODDataTable^  tableSIMGOD;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        SIMGODRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 SIMGOD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::actorRow^  >^  GetactorRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::criticRow^  >^  GetcriticRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::controllerRow^  >^  GetcontrollerRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class actorRow : public ::System::Data::DataRow {
        
        private: NewDataSet::actorDataTable^  tableactor;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        actorRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  ALGORITHM {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  LOAD {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  SAVE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 actor_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 SIMGOD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::SIMGODRow^  SIMGODRow {
            NewDataSet::SIMGODRow^  get();
            System::Void set(NewDataSet::SIMGODRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsSIMGOD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetSIMGOD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::CACLARow^  >^  GetCACLARows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::PIDRow^  >^  GetPIDRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::LQRRow^  >^  GetLQRRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::jonkmanRow^  >^  GetjonkmanRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::vidalRow^  >^  GetvidalRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::boukhezzarRow^  >^  GetboukhezzarRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class CACLARow : public ::System::Data::DataRow {
        
        private: NewDataSet::CACLADataTable^  tableCACLA;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        CACLARow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 CACLA_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 actor_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 controller_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::actorRow^  actorRow {
            NewDataSet::actorRow^  get();
            System::Void set(NewDataSet::actorRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::controllerRow^  controllerRow {
            NewDataSet::controllerRow^  get();
            System::Void set(NewDataSet::controllerRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isactor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setactor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Iscontroller_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setcontroller_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::vfaRow^  >^  GetvfaRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class vfaRow : public ::System::Data::DataRow {
        
        private: NewDataSet::vfaDataTable^  tablevfa;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        vfaRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 vfa_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 CACLA_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _TD_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _True_Online_TD_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _TDC_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::CACLARow^  CACLARow {
            NewDataSet::CACLARow^  get();
            System::Void set(NewDataSet::CACLARow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_TD_LambdaRow^  _TD_LambdaRow {
            NewDataSet::_TD_LambdaRow^  get();
            System::Void set(NewDataSet::_TD_LambdaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_True_Online_TD_LambdaRow^  _True_Online_TD_LambdaRow {
            NewDataSet::_True_Online_TD_LambdaRow^  get();
            System::Void set(NewDataSet::_True_Online_TD_LambdaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_TDC_LambdaRow^  _TDC_LambdaRow {
            NewDataSet::_TDC_LambdaRow^  get();
            System::Void set(NewDataSet::_TDC_LambdaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsCACLA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetCACLA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_True_Online_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_True_Online_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_TDC_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_TDC_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::NOISE_WIDTHRow^  >^  GetNOISE_WIDTHRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::LEARNING_RATERow^  >^  GetLEARNING_RATERows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::RBF_GRIDRow^  >^  GetRBF_GRIDRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class NOISE_WIDTHRow : public ::System::Data::DataRow {
        
        private: NewDataSet::NOISE_WIDTHDataTable^  tableNOISE_WIDTH;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NOISE_WIDTHRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 NOISE_WIDTH_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 vfa_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::vfaRow^  vfaRow {
            NewDataSet::vfaRow^  get();
            System::Void set(NewDataSet::vfaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isvfa_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setvfa_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class scheduleRow : public ::System::Data::DataRow {
        
        private: NewDataSet::scheduleDataTable^  tableschedule;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        scheduleRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal INITIAL_VALUE {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal FINAL_VALUE {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal EVALUATION_EPISODE_VALUE {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  INTERPOLATION {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 NOISE_WIDTH_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 LEARNING_RATE_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 KP_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 KI_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 KD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_RtGnSp_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_SlPc_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_Rgn2K_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_Rgn2Sp_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_CtInSp_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_RtPwr_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_Rgn3MP_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PC_KI_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PC_KK_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PC_KP_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PC_RefSpd_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 A_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 K_alpha_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 P_s_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 C_0_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 K_t_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 J_t_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::NOISE_WIDTHRow^  NOISE_WIDTHRow {
            NewDataSet::NOISE_WIDTHRow^  get();
            System::Void set(NewDataSet::NOISE_WIDTHRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::LEARNING_RATERow^  LEARNING_RATERow {
            NewDataSet::LEARNING_RATERow^  get();
            System::Void set(NewDataSet::LEARNING_RATERow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::KPRow^  KPRow {
            NewDataSet::KPRow^  get();
            System::Void set(NewDataSet::KPRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::KIRow^  KIRow {
            NewDataSet::KIRow^  get();
            System::Void set(NewDataSet::KIRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::KDRow^  KDRow {
            NewDataSet::KDRow^  get();
            System::Void set(NewDataSet::KDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_RtGnSpRow^  VS_RtGnSpRow {
            NewDataSet::VS_RtGnSpRow^  get();
            System::Void set(NewDataSet::VS_RtGnSpRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_SlPcRow^  VS_SlPcRow {
            NewDataSet::VS_SlPcRow^  get();
            System::Void set(NewDataSet::VS_SlPcRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_Rgn2KRow^  VS_Rgn2KRow {
            NewDataSet::VS_Rgn2KRow^  get();
            System::Void set(NewDataSet::VS_Rgn2KRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_Rgn2SpRow^  VS_Rgn2SpRow {
            NewDataSet::VS_Rgn2SpRow^  get();
            System::Void set(NewDataSet::VS_Rgn2SpRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_CtInSpRow^  VS_CtInSpRow {
            NewDataSet::VS_CtInSpRow^  get();
            System::Void set(NewDataSet::VS_CtInSpRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_RtPwrRow^  VS_RtPwrRow {
            NewDataSet::VS_RtPwrRow^  get();
            System::Void set(NewDataSet::VS_RtPwrRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_Rgn3MPRow^  VS_Rgn3MPRow {
            NewDataSet::VS_Rgn3MPRow^  get();
            System::Void set(NewDataSet::VS_Rgn3MPRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::PC_KIRow^  PC_KIRow {
            NewDataSet::PC_KIRow^  get();
            System::Void set(NewDataSet::PC_KIRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::PC_KKRow^  PC_KKRow {
            NewDataSet::PC_KKRow^  get();
            System::Void set(NewDataSet::PC_KKRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::PC_KPRow^  PC_KPRow {
            NewDataSet::PC_KPRow^  get();
            System::Void set(NewDataSet::PC_KPRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::PC_RefSpdRow^  PC_RefSpdRow {
            NewDataSet::PC_RefSpdRow^  get();
            System::Void set(NewDataSet::PC_RefSpdRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::ARow^  ARow {
            NewDataSet::ARow^  get();
            System::Void set(NewDataSet::ARow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::K_alphaRow^  K_alphaRow {
            NewDataSet::K_alphaRow^  get();
            System::Void set(NewDataSet::K_alphaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::P_sRow^  P_sRow {
            NewDataSet::P_sRow^  get();
            System::Void set(NewDataSet::P_sRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::C_0Row^  C_0Row {
            NewDataSet::C_0Row^  get();
            System::Void set(NewDataSet::C_0Row^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::K_tRow^  K_tRow {
            NewDataSet::K_tRow^  get();
            System::Void set(NewDataSet::K_tRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::J_tRow^  J_tRow {
            NewDataSet::J_tRow^  get();
            System::Void set(NewDataSet::J_tRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsNOISE_WIDTH_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetNOISE_WIDTH_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsLEARNING_RATE_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetLEARNING_RATE_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsKP_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetKP_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsKI_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetKI_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsKD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetKD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsVS_RtGnSp_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetVS_RtGnSp_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsVS_SlPc_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetVS_SlPc_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsVS_Rgn2K_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetVS_Rgn2K_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsVS_Rgn2Sp_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetVS_Rgn2Sp_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsVS_CtInSp_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetVS_CtInSp_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsVS_RtPwr_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetVS_RtPwr_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsVS_Rgn3MP_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetVS_Rgn3MP_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsPC_KI_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetPC_KI_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsPC_KK_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetPC_KK_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsPC_KP_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetPC_KP_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsPC_RefSpd_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetPC_RefSpd_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsK_alpha_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetK_alpha_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsP_s_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetP_s_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsC_0_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetC_0_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsK_t_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetK_t_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsJ_t_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetJ_t_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class LEARNING_RATERow : public ::System::Data::DataRow {
        
        private: NewDataSet::LEARNING_RATEDataTable^  tableLEARNING_RATE;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LEARNING_RATERow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 LEARNING_RATE_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 vfa_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _TD_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _True_Online_TD_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _TDC_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::vfaRow^  vfaRow {
            NewDataSet::vfaRow^  get();
            System::Void set(NewDataSet::vfaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_TD_LambdaRow^  _TD_LambdaRow {
            NewDataSet::_TD_LambdaRow^  get();
            System::Void set(NewDataSet::_TD_LambdaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_True_Online_TD_LambdaRow^  _True_Online_TD_LambdaRow {
            NewDataSet::_True_Online_TD_LambdaRow^  get();
            System::Void set(NewDataSet::_True_Online_TD_LambdaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_TDC_LambdaRow^  _TDC_LambdaRow {
            NewDataSet::_TDC_LambdaRow^  get();
            System::Void set(NewDataSet::_TDC_LambdaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isvfa_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setvfa_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_True_Online_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_True_Online_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_TDC_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_TDC_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class RBF_GRIDRow : public ::System::Data::DataRow {
        
        private: NewDataSet::RBF_GRIDDataTable^  tableRBF_GRID;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RBF_GRIDRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 RBF_GRID_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 vfa_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::vfaRow^  vfaRow {
            NewDataSet::vfaRow^  get();
            System::Void set(NewDataSet::vfaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isvfa_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setvfa_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::dimensionRow^  >^  GetdimensionRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class dimensionRow : public ::System::Data::DataRow {
        
        private: NewDataSet::dimensionDataTable^  tabledimension;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        dimensionRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  _state_action_variable {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 _dimension_num_features {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  _feature_distribution {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 RBF_GRID_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::RBF_GRIDRow^  RBF_GRIDRow {
            NewDataSet::RBF_GRIDRow^  get();
            System::Void set(NewDataSet::RBF_GRIDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsRBF_GRID_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetRBF_GRID_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class PIDRow : public ::System::Data::DataRow {
        
        private: NewDataSet::PIDDataTable^  tablePID;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PIDRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  ERROR_VARIABLE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PID_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 actor_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 controller_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::actorRow^  actorRow {
            NewDataSet::actorRow^  get();
            System::Void set(NewDataSet::actorRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::controllerRow^  controllerRow {
            NewDataSet::controllerRow^  get();
            System::Void set(NewDataSet::controllerRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isactor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setactor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Iscontroller_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setcontroller_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::KPRow^  >^  GetKPRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::KIRow^  >^  GetKIRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::KDRow^  >^  GetKDRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class KPRow : public ::System::Data::DataRow {
        
        private: NewDataSet::KPDataTable^  tableKP;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KPRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 KP_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PID_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 vidal_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 boukhezzar_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::PIDRow^  PIDRow {
            NewDataSet::PIDRow^  get();
            System::Void set(NewDataSet::PIDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::vidalRow^  vidalRow {
            NewDataSet::vidalRow^  get();
            System::Void set(NewDataSet::vidalRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::boukhezzarRow^  boukhezzarRow {
            NewDataSet::boukhezzarRow^  get();
            System::Void set(NewDataSet::boukhezzarRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsPID_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetPID_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isvidal_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setvidal_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isboukhezzar_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setboukhezzar_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class KIRow : public ::System::Data::DataRow {
        
        private: NewDataSet::KIDataTable^  tableKI;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KIRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 KI_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PID_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 vidal_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 boukhezzar_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::PIDRow^  PIDRow {
            NewDataSet::PIDRow^  get();
            System::Void set(NewDataSet::PIDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::vidalRow^  vidalRow {
            NewDataSet::vidalRow^  get();
            System::Void set(NewDataSet::vidalRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::boukhezzarRow^  boukhezzarRow {
            NewDataSet::boukhezzarRow^  get();
            System::Void set(NewDataSet::boukhezzarRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsPID_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetPID_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isvidal_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setvidal_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isboukhezzar_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setboukhezzar_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class KDRow : public ::System::Data::DataRow {
        
        private: NewDataSet::KDDataTable^  tableKD;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KDRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 KD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PID_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::PIDRow^  PIDRow {
            NewDataSet::PIDRow^  get();
            System::Void set(NewDataSet::PIDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsPID_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetPID_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class LQRRow : public ::System::Data::DataRow {
        
        private: NewDataSet::LQRDataTable^  tableLQR;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LQRRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 LQR_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 actor_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 controller_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::actorRow^  actorRow {
            NewDataSet::actorRow^  get();
            System::Void set(NewDataSet::actorRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::controllerRow^  controllerRow {
            NewDataSet::controllerRow^  get();
            System::Void set(NewDataSet::controllerRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isactor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setactor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Iscontroller_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setcontroller_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::_LQR_GAINRow^  >^  _GetLQR_GAINRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _LQR_GAINRow : public ::System::Data::DataRow {
        
        private: NewDataSet::_LQR_GAINDataTable^  table_LQR_GAIN;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _LQR_GAINRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  _state_variable {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal gain {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 LQR_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::LQRRow^  LQRRow {
            NewDataSet::LQRRow^  get();
            System::Void set(NewDataSet::LQRRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsLQR_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetLQR_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class jonkmanRow : public ::System::Data::DataRow {
        
        private: NewDataSet::jonkmanDataTable^  tablejonkman;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        jonkmanRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 actor_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 controller_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::actorRow^  actorRow {
            NewDataSet::actorRow^  get();
            System::Void set(NewDataSet::actorRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::controllerRow^  controllerRow {
            NewDataSet::controllerRow^  get();
            System::Void set(NewDataSet::controllerRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isactor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setactor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Iscontroller_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setcontroller_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::VS_RtGnSpRow^  >^  GetVS_RtGnSpRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::VS_SlPcRow^  >^  GetVS_SlPcRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::VS_Rgn2KRow^  >^  GetVS_Rgn2KRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::VS_Rgn2SpRow^  >^  GetVS_Rgn2SpRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::VS_CtInSpRow^  >^  GetVS_CtInSpRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::VS_RtPwrRow^  >^  GetVS_RtPwrRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::VS_Rgn3MPRow^  >^  GetVS_Rgn3MPRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::PC_KIRow^  >^  GetPC_KIRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::PC_KKRow^  >^  GetPC_KKRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::PC_KPRow^  >^  GetPC_KPRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::PC_RefSpdRow^  >^  GetPC_RefSpdRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class VS_RtGnSpRow : public ::System::Data::DataRow {
        
        private: NewDataSet::VS_RtGnSpDataTable^  tableVS_RtGnSp;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_RtGnSpRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_RtGnSp_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::jonkmanRow^  jonkmanRow {
            NewDataSet::jonkmanRow^  get();
            System::Void set(NewDataSet::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class VS_SlPcRow : public ::System::Data::DataRow {
        
        private: NewDataSet::VS_SlPcDataTable^  tableVS_SlPc;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_SlPcRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_SlPc_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::jonkmanRow^  jonkmanRow {
            NewDataSet::jonkmanRow^  get();
            System::Void set(NewDataSet::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class VS_Rgn2KRow : public ::System::Data::DataRow {
        
        private: NewDataSet::VS_Rgn2KDataTable^  tableVS_Rgn2K;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn2KRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_Rgn2K_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::jonkmanRow^  jonkmanRow {
            NewDataSet::jonkmanRow^  get();
            System::Void set(NewDataSet::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class VS_Rgn2SpRow : public ::System::Data::DataRow {
        
        private: NewDataSet::VS_Rgn2SpDataTable^  tableVS_Rgn2Sp;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn2SpRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_Rgn2Sp_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::jonkmanRow^  jonkmanRow {
            NewDataSet::jonkmanRow^  get();
            System::Void set(NewDataSet::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class VS_CtInSpRow : public ::System::Data::DataRow {
        
        private: NewDataSet::VS_CtInSpDataTable^  tableVS_CtInSp;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_CtInSpRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_CtInSp_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::jonkmanRow^  jonkmanRow {
            NewDataSet::jonkmanRow^  get();
            System::Void set(NewDataSet::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class VS_RtPwrRow : public ::System::Data::DataRow {
        
        private: NewDataSet::VS_RtPwrDataTable^  tableVS_RtPwr;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_RtPwrRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_RtPwr_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::jonkmanRow^  jonkmanRow {
            NewDataSet::jonkmanRow^  get();
            System::Void set(NewDataSet::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class VS_Rgn3MPRow : public ::System::Data::DataRow {
        
        private: NewDataSet::VS_Rgn3MPDataTable^  tableVS_Rgn3MP;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn3MPRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_Rgn3MP_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::jonkmanRow^  jonkmanRow {
            NewDataSet::jonkmanRow^  get();
            System::Void set(NewDataSet::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class PC_KIRow : public ::System::Data::DataRow {
        
        private: NewDataSet::PC_KIDataTable^  tablePC_KI;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KIRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PC_KI_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::jonkmanRow^  jonkmanRow {
            NewDataSet::jonkmanRow^  get();
            System::Void set(NewDataSet::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class PC_KKRow : public ::System::Data::DataRow {
        
        private: NewDataSet::PC_KKDataTable^  tablePC_KK;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KKRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PC_KK_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::jonkmanRow^  jonkmanRow {
            NewDataSet::jonkmanRow^  get();
            System::Void set(NewDataSet::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class PC_KPRow : public ::System::Data::DataRow {
        
        private: NewDataSet::PC_KPDataTable^  tablePC_KP;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KPRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PC_KP_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::jonkmanRow^  jonkmanRow {
            NewDataSet::jonkmanRow^  get();
            System::Void set(NewDataSet::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class PC_RefSpdRow : public ::System::Data::DataRow {
        
        private: NewDataSet::PC_RefSpdDataTable^  tablePC_RefSpd;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_RefSpdRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PC_RefSpd_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::jonkmanRow^  jonkmanRow {
            NewDataSet::jonkmanRow^  get();
            System::Void set(NewDataSet::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class vidalRow : public ::System::Data::DataRow {
        
        private: NewDataSet::vidalDataTable^  tablevidal;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        vidalRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 vidal_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 actor_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 controller_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::actorRow^  actorRow {
            NewDataSet::actorRow^  get();
            System::Void set(NewDataSet::actorRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::controllerRow^  controllerRow {
            NewDataSet::controllerRow^  get();
            System::Void set(NewDataSet::controllerRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isactor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setactor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Iscontroller_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setcontroller_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::ARow^  >^  GetARows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::K_alphaRow^  >^  GetK_alphaRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::KPRow^  >^  GetKPRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::KIRow^  >^  GetKIRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::P_sRow^  >^  GetP_sRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class ARow : public ::System::Data::DataRow {
        
        private: NewDataSet::ADataTable^  tableA;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ARow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 A_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 vidal_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::vidalRow^  vidalRow {
            NewDataSet::vidalRow^  get();
            System::Void set(NewDataSet::vidalRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isvidal_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setvidal_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class K_alphaRow : public ::System::Data::DataRow {
        
        private: NewDataSet::K_alphaDataTable^  tableK_alpha;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        K_alphaRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 K_alpha_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 vidal_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::vidalRow^  vidalRow {
            NewDataSet::vidalRow^  get();
            System::Void set(NewDataSet::vidalRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isvidal_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setvidal_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class P_sRow : public ::System::Data::DataRow {
        
        private: NewDataSet::P_sDataTable^  tableP_s;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        P_sRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 P_s_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 vidal_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::vidalRow^  vidalRow {
            NewDataSet::vidalRow^  get();
            System::Void set(NewDataSet::vidalRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isvidal_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setvidal_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class boukhezzarRow : public ::System::Data::DataRow {
        
        private: NewDataSet::boukhezzarDataTable^  tableboukhezzar;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        boukhezzarRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 boukhezzar_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 actor_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 controller_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::actorRow^  actorRow {
            NewDataSet::actorRow^  get();
            System::Void set(NewDataSet::actorRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::controllerRow^  controllerRow {
            NewDataSet::controllerRow^  get();
            System::Void set(NewDataSet::controllerRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isactor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setactor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Iscontroller_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setcontroller_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::C_0Row^  >^  GetC_0Rows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::KPRow^  >^  GetKPRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::KIRow^  >^  GetKIRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::K_tRow^  >^  GetK_tRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::J_tRow^  >^  GetJ_tRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class C_0Row : public ::System::Data::DataRow {
        
        private: NewDataSet::C_0DataTable^  tableC_0;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        C_0Row(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 C_0_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 boukhezzar_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::boukhezzarRow^  boukhezzarRow {
            NewDataSet::boukhezzarRow^  get();
            System::Void set(NewDataSet::boukhezzarRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isboukhezzar_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setboukhezzar_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class K_tRow : public ::System::Data::DataRow {
        
        private: NewDataSet::K_tDataTable^  tableK_t;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        K_tRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 K_t_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 boukhezzar_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::boukhezzarRow^  boukhezzarRow {
            NewDataSet::boukhezzarRow^  get();
            System::Void set(NewDataSet::boukhezzarRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isboukhezzar_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setboukhezzar_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class J_tRow : public ::System::Data::DataRow {
        
        private: NewDataSet::J_tDataTable^  tableJ_t;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        J_tRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 J_t_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 boukhezzar_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::boukhezzarRow^  boukhezzarRow {
            NewDataSet::boukhezzarRow^  get();
            System::Void set(NewDataSet::boukhezzarRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isboukhezzar_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setboukhezzar_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class criticRow : public ::System::Data::DataRow {
        
        private: NewDataSet::criticDataTable^  tablecritic;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        criticRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  ALGORITHM {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  LOAD {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  SAVE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 critic_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 SIMGOD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::SIMGODRow^  SIMGODRow {
            NewDataSet::SIMGODRow^  get();
            System::Void set(NewDataSet::SIMGODRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsLOADNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetLOADNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsSAVENull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetSAVENull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsSIMGOD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetSIMGOD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::_TD_LambdaRow^  >^  _GetTD_LambdaRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::_True_Online_TD_LambdaRow^  >^  _GetTrue_Online_TD_LambdaRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::_TDC_LambdaRow^  >^  _GetTDC_LambdaRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _TD_LambdaRow : public ::System::Data::DataRow {
        
        private: NewDataSet::_TD_LambdaDataTable^  table_TD_Lambda;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _TD_LambdaRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _TD_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 critic_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::criticRow^  criticRow {
            NewDataSet::criticRow^  get();
            System::Void set(NewDataSet::criticRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Iscritic_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setcritic_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::vfaRow^  >^  GetvfaRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::LEARNING_RATERow^  >^  GetLEARNING_RATERows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _True_Online_TD_LambdaRow : public ::System::Data::DataRow {
        
        private: NewDataSet::_True_Online_TD_LambdaDataTable^  table_True_Online_TD_Lambda;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _True_Online_TD_LambdaRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _True_Online_TD_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 critic_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::criticRow^  criticRow {
            NewDataSet::criticRow^  get();
            System::Void set(NewDataSet::criticRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Iscritic_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setcritic_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::vfaRow^  >^  GetvfaRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::LEARNING_RATERow^  >^  GetLEARNING_RATERows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _TDC_LambdaRow : public ::System::Data::DataRow {
        
        private: NewDataSet::_TDC_LambdaDataTable^  table_TDC_Lambda;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _TDC_LambdaRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _TDC_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 critic_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::criticRow^  criticRow {
            NewDataSet::criticRow^  get();
            System::Void set(NewDataSet::criticRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Iscritic_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setcritic_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::vfaRow^  >^  GetvfaRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::LEARNING_RATERow^  >^  GetLEARNING_RATERows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class controllerRow : public ::System::Data::DataRow {
        
        private: NewDataSet::controllerDataTable^  tablecontroller;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        controllerRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  ALGORITHM {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  LOAD {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  SAVE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 controller_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 SIMGOD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::SIMGODRow^  SIMGODRow {
            NewDataSet::SIMGODRow^  get();
            System::Void set(NewDataSet::SIMGODRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsSIMGOD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetSIMGOD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::CACLARow^  >^  GetCACLARows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::PIDRow^  >^  GetPIDRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::LQRRow^  >^  GetLQRRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::jonkmanRow^  >^  GetjonkmanRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::vidalRow^  >^  GetvidalRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::boukhezzarRow^  >^  GetboukhezzarRows();
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class EXPERIMENTRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::EXPERIMENTRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        EXPERIMENTRowChangeEvent(NewDataSet::EXPERIMENTRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::EXPERIMENTRow^  Row {
            NewDataSet::EXPERIMENTRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class LOGRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::LOGRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LOGRowChangeEvent(NewDataSet::LOGRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::LOGRow^  Row {
            NewDataSet::LOGRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class WORLDRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::WORLDRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        WORLDRowChangeEvent(NewDataSet::WORLDRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::WORLDRow^  Row {
            NewDataSet::WORLDRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class rewardRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::rewardRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        rewardRowChangeEvent(NewDataSet::rewardRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::rewardRow^  Row {
            NewDataSet::rewardRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _reward_componentRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::_reward_componentRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _reward_componentRowChangeEvent(NewDataSet::_reward_componentRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_reward_componentRow^  Row {
            NewDataSet::_reward_componentRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _wind_turbineRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::_wind_turbineRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _wind_turbineRowChangeEvent(NewDataSet::_wind_turbineRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_wind_turbineRow^  Row {
            NewDataSet::_wind_turbineRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class TRAINING_WIND_DATA_FILESRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::TRAINING_WIND_DATA_FILESRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        TRAINING_WIND_DATA_FILESRowChangeEvent(NewDataSet::TRAINING_WIND_DATA_FILESRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::TRAINING_WIND_DATA_FILESRow^  Row {
            NewDataSet::TRAINING_WIND_DATA_FILESRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _magnetic_levitationRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::_magnetic_levitationRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _magnetic_levitationRowChangeEvent(NewDataSet::_magnetic_levitationRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_magnetic_levitationRow^  Row {
            NewDataSet::_magnetic_levitationRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class pitchRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::pitchRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        pitchRowChangeEvent(NewDataSet::pitchRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::pitchRow^  Row {
            NewDataSet::pitchRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _underwater_vehicleRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::_underwater_vehicleRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _underwater_vehicleRowChangeEvent(NewDataSet::_underwater_vehicleRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_underwater_vehicleRow^  Row {
            NewDataSet::_underwater_vehicleRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class SIMGODRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::SIMGODRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        SIMGODRowChangeEvent(NewDataSet::SIMGODRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::SIMGODRow^  Row {
            NewDataSet::SIMGODRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class actorRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::actorRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        actorRowChangeEvent(NewDataSet::actorRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::actorRow^  Row {
            NewDataSet::actorRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class CACLARowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::CACLARow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        CACLARowChangeEvent(NewDataSet::CACLARow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::CACLARow^  Row {
            NewDataSet::CACLARow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class vfaRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::vfaRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        vfaRowChangeEvent(NewDataSet::vfaRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::vfaRow^  Row {
            NewDataSet::vfaRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class NOISE_WIDTHRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::NOISE_WIDTHRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NOISE_WIDTHRowChangeEvent(NewDataSet::NOISE_WIDTHRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::NOISE_WIDTHRow^  Row {
            NewDataSet::NOISE_WIDTHRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class scheduleRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::scheduleRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        scheduleRowChangeEvent(NewDataSet::scheduleRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::scheduleRow^  Row {
            NewDataSet::scheduleRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class LEARNING_RATERowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::LEARNING_RATERow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LEARNING_RATERowChangeEvent(NewDataSet::LEARNING_RATERow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::LEARNING_RATERow^  Row {
            NewDataSet::LEARNING_RATERow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class RBF_GRIDRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::RBF_GRIDRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RBF_GRIDRowChangeEvent(NewDataSet::RBF_GRIDRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::RBF_GRIDRow^  Row {
            NewDataSet::RBF_GRIDRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class dimensionRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::dimensionRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        dimensionRowChangeEvent(NewDataSet::dimensionRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::dimensionRow^  Row {
            NewDataSet::dimensionRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class PIDRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::PIDRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PIDRowChangeEvent(NewDataSet::PIDRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::PIDRow^  Row {
            NewDataSet::PIDRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class KPRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::KPRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KPRowChangeEvent(NewDataSet::KPRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::KPRow^  Row {
            NewDataSet::KPRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class KIRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::KIRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KIRowChangeEvent(NewDataSet::KIRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::KIRow^  Row {
            NewDataSet::KIRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class KDRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::KDRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KDRowChangeEvent(NewDataSet::KDRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::KDRow^  Row {
            NewDataSet::KDRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class LQRRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::LQRRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LQRRowChangeEvent(NewDataSet::LQRRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::LQRRow^  Row {
            NewDataSet::LQRRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _LQR_GAINRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::_LQR_GAINRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _LQR_GAINRowChangeEvent(NewDataSet::_LQR_GAINRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_LQR_GAINRow^  Row {
            NewDataSet::_LQR_GAINRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class jonkmanRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::jonkmanRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        jonkmanRowChangeEvent(NewDataSet::jonkmanRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::jonkmanRow^  Row {
            NewDataSet::jonkmanRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class VS_RtGnSpRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::VS_RtGnSpRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_RtGnSpRowChangeEvent(NewDataSet::VS_RtGnSpRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_RtGnSpRow^  Row {
            NewDataSet::VS_RtGnSpRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class VS_SlPcRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::VS_SlPcRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_SlPcRowChangeEvent(NewDataSet::VS_SlPcRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_SlPcRow^  Row {
            NewDataSet::VS_SlPcRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class VS_Rgn2KRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::VS_Rgn2KRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn2KRowChangeEvent(NewDataSet::VS_Rgn2KRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_Rgn2KRow^  Row {
            NewDataSet::VS_Rgn2KRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class VS_Rgn2SpRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::VS_Rgn2SpRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn2SpRowChangeEvent(NewDataSet::VS_Rgn2SpRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_Rgn2SpRow^  Row {
            NewDataSet::VS_Rgn2SpRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class VS_CtInSpRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::VS_CtInSpRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_CtInSpRowChangeEvent(NewDataSet::VS_CtInSpRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_CtInSpRow^  Row {
            NewDataSet::VS_CtInSpRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class VS_RtPwrRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::VS_RtPwrRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_RtPwrRowChangeEvent(NewDataSet::VS_RtPwrRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_RtPwrRow^  Row {
            NewDataSet::VS_RtPwrRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class VS_Rgn3MPRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::VS_Rgn3MPRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn3MPRowChangeEvent(NewDataSet::VS_Rgn3MPRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::VS_Rgn3MPRow^  Row {
            NewDataSet::VS_Rgn3MPRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class PC_KIRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::PC_KIRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KIRowChangeEvent(NewDataSet::PC_KIRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::PC_KIRow^  Row {
            NewDataSet::PC_KIRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class PC_KKRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::PC_KKRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KKRowChangeEvent(NewDataSet::PC_KKRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::PC_KKRow^  Row {
            NewDataSet::PC_KKRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class PC_KPRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::PC_KPRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KPRowChangeEvent(NewDataSet::PC_KPRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::PC_KPRow^  Row {
            NewDataSet::PC_KPRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class PC_RefSpdRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::PC_RefSpdRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_RefSpdRowChangeEvent(NewDataSet::PC_RefSpdRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::PC_RefSpdRow^  Row {
            NewDataSet::PC_RefSpdRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class vidalRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::vidalRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        vidalRowChangeEvent(NewDataSet::vidalRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::vidalRow^  Row {
            NewDataSet::vidalRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class ARowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::ARow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ARowChangeEvent(NewDataSet::ARow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::ARow^  Row {
            NewDataSet::ARow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class K_alphaRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::K_alphaRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        K_alphaRowChangeEvent(NewDataSet::K_alphaRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::K_alphaRow^  Row {
            NewDataSet::K_alphaRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class P_sRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::P_sRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        P_sRowChangeEvent(NewDataSet::P_sRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::P_sRow^  Row {
            NewDataSet::P_sRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class boukhezzarRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::boukhezzarRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        boukhezzarRowChangeEvent(NewDataSet::boukhezzarRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::boukhezzarRow^  Row {
            NewDataSet::boukhezzarRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class C_0RowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::C_0Row^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        C_0RowChangeEvent(NewDataSet::C_0Row^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::C_0Row^  Row {
            NewDataSet::C_0Row^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class K_tRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::K_tRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        K_tRowChangeEvent(NewDataSet::K_tRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::K_tRow^  Row {
            NewDataSet::K_tRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class J_tRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::J_tRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        J_tRowChangeEvent(NewDataSet::J_tRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::J_tRow^  Row {
            NewDataSet::J_tRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class criticRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::criticRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        criticRowChangeEvent(NewDataSet::criticRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::criticRow^  Row {
            NewDataSet::criticRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _TD_LambdaRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::_TD_LambdaRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _TD_LambdaRowChangeEvent(NewDataSet::_TD_LambdaRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_TD_LambdaRow^  Row {
            NewDataSet::_TD_LambdaRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _True_Online_TD_LambdaRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::_True_Online_TD_LambdaRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _True_Online_TD_LambdaRowChangeEvent(NewDataSet::_True_Online_TD_LambdaRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_True_Online_TD_LambdaRow^  Row {
            NewDataSet::_True_Online_TD_LambdaRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _TDC_LambdaRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::_TDC_LambdaRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _TDC_LambdaRowChangeEvent(NewDataSet::_TDC_LambdaRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::_TDC_LambdaRow^  Row {
            NewDataSet::_TDC_LambdaRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class controllerRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::controllerRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        controllerRowChangeEvent(NewDataSet::controllerRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::controllerRow^  Row {
            NewDataSet::controllerRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
};


inline NewDataSet::NewDataSet() {
    this->BeginInit();
    this->InitClass();
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    __super::Relations->CollectionChanged += schemaChangedHandler;
    this->EndInit();
}

inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataSet(info, context, false) {
    if (this->IsBinarySerialized(info, context) == true) {
        this->InitVars(false);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler1;
        this->Relations->CollectionChanged += schemaChangedHandler1;
        return;
    }
    ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
    if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        if (ds->Tables[L"EXPERIMENT"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::EXPERIMENTDataTable(ds->Tables[L"EXPERIMENT"])));
        }
        if (ds->Tables[L"LOG"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::LOGDataTable(ds->Tables[L"LOG"])));
        }
        if (ds->Tables[L"WORLD"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::WORLDDataTable(ds->Tables[L"WORLD"])));
        }
        if (ds->Tables[L"reward"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::rewardDataTable(ds->Tables[L"reward"])));
        }
        if (ds->Tables[L"reward-component"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::_reward_componentDataTable(ds->Tables[L"reward-component"])));
        }
        if (ds->Tables[L"wind-turbine"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::_wind_turbineDataTable(ds->Tables[L"wind-turbine"])));
        }
        if (ds->Tables[L"TRAINING_WIND_DATA_FILES"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::TRAINING_WIND_DATA_FILESDataTable(ds->Tables[L"TRAINING_WIND_DATA_FILES"])));
        }
        if (ds->Tables[L"magnetic-levitation"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::_magnetic_levitationDataTable(ds->Tables[L"magnetic-levitation"])));
        }
        if (ds->Tables[L"pitch"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::pitchDataTable(ds->Tables[L"pitch"])));
        }
        if (ds->Tables[L"underwater-vehicle"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::_underwater_vehicleDataTable(ds->Tables[L"underwater-vehicle"])));
        }
        if (ds->Tables[L"SIMGOD"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::SIMGODDataTable(ds->Tables[L"SIMGOD"])));
        }
        if (ds->Tables[L"actor"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::actorDataTable(ds->Tables[L"actor"])));
        }
        if (ds->Tables[L"CACLA"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::CACLADataTable(ds->Tables[L"CACLA"])));
        }
        if (ds->Tables[L"vfa"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::vfaDataTable(ds->Tables[L"vfa"])));
        }
        if (ds->Tables[L"NOISE_WIDTH"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::NOISE_WIDTHDataTable(ds->Tables[L"NOISE_WIDTH"])));
        }
        if (ds->Tables[L"schedule"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::scheduleDataTable(ds->Tables[L"schedule"])));
        }
        if (ds->Tables[L"LEARNING_RATE"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::LEARNING_RATEDataTable(ds->Tables[L"LEARNING_RATE"])));
        }
        if (ds->Tables[L"RBF_GRID"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::RBF_GRIDDataTable(ds->Tables[L"RBF_GRID"])));
        }
        if (ds->Tables[L"dimension"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::dimensionDataTable(ds->Tables[L"dimension"])));
        }
        if (ds->Tables[L"PID"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::PIDDataTable(ds->Tables[L"PID"])));
        }
        if (ds->Tables[L"KP"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::KPDataTable(ds->Tables[L"KP"])));
        }
        if (ds->Tables[L"KI"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::KIDataTable(ds->Tables[L"KI"])));
        }
        if (ds->Tables[L"KD"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::KDDataTable(ds->Tables[L"KD"])));
        }
        if (ds->Tables[L"LQR"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::LQRDataTable(ds->Tables[L"LQR"])));
        }
        if (ds->Tables[L"LQR-GAIN"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::_LQR_GAINDataTable(ds->Tables[L"LQR-GAIN"])));
        }
        if (ds->Tables[L"jonkman"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::jonkmanDataTable(ds->Tables[L"jonkman"])));
        }
        if (ds->Tables[L"VS_RtGnSp"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::VS_RtGnSpDataTable(ds->Tables[L"VS_RtGnSp"])));
        }
        if (ds->Tables[L"VS_SlPc"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::VS_SlPcDataTable(ds->Tables[L"VS_SlPc"])));
        }
        if (ds->Tables[L"VS_Rgn2K"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::VS_Rgn2KDataTable(ds->Tables[L"VS_Rgn2K"])));
        }
        if (ds->Tables[L"VS_Rgn2Sp"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::VS_Rgn2SpDataTable(ds->Tables[L"VS_Rgn2Sp"])));
        }
        if (ds->Tables[L"VS_CtInSp"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::VS_CtInSpDataTable(ds->Tables[L"VS_CtInSp"])));
        }
        if (ds->Tables[L"VS_RtPwr"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::VS_RtPwrDataTable(ds->Tables[L"VS_RtPwr"])));
        }
        if (ds->Tables[L"VS_Rgn3MP"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::VS_Rgn3MPDataTable(ds->Tables[L"VS_Rgn3MP"])));
        }
        if (ds->Tables[L"PC_KI"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::PC_KIDataTable(ds->Tables[L"PC_KI"])));
        }
        if (ds->Tables[L"PC_KK"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::PC_KKDataTable(ds->Tables[L"PC_KK"])));
        }
        if (ds->Tables[L"PC_KP"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::PC_KPDataTable(ds->Tables[L"PC_KP"])));
        }
        if (ds->Tables[L"PC_RefSpd"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::PC_RefSpdDataTable(ds->Tables[L"PC_RefSpd"])));
        }
        if (ds->Tables[L"vidal"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::vidalDataTable(ds->Tables[L"vidal"])));
        }
        if (ds->Tables[L"A"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::ADataTable(ds->Tables[L"A"])));
        }
        if (ds->Tables[L"K_alpha"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::K_alphaDataTable(ds->Tables[L"K_alpha"])));
        }
        if (ds->Tables[L"P_s"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::P_sDataTable(ds->Tables[L"P_s"])));
        }
        if (ds->Tables[L"boukhezzar"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::boukhezzarDataTable(ds->Tables[L"boukhezzar"])));
        }
        if (ds->Tables[L"C_0"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::C_0DataTable(ds->Tables[L"C_0"])));
        }
        if (ds->Tables[L"K_t"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::K_tDataTable(ds->Tables[L"K_t"])));
        }
        if (ds->Tables[L"J_t"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::J_tDataTable(ds->Tables[L"J_t"])));
        }
        if (ds->Tables[L"critic"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::criticDataTable(ds->Tables[L"critic"])));
        }
        if (ds->Tables[L"TD-Lambda"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::_TD_LambdaDataTable(ds->Tables[L"TD-Lambda"])));
        }
        if (ds->Tables[L"True-Online-TD-Lambda"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::_True_Online_TD_LambdaDataTable(ds->Tables[L"True-Online-TD-Lambda"])));
        }
        if (ds->Tables[L"TDC-Lambda"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::_TDC_LambdaDataTable(ds->Tables[L"TDC-Lambda"])));
        }
        if (ds->Tables[L"controller"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::controllerDataTable(ds->Tables[L"controller"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
    }
    this->GetSerializationData(info, context);
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    this->Relations->CollectionChanged += schemaChangedHandler;
}

inline NewDataSet::EXPERIMENTDataTable^  NewDataSet::EXPERIMENT::get() {
    return this->tableEXPERIMENT;
}

inline NewDataSet::LOGDataTable^  NewDataSet::LOG::get() {
    return this->tableLOG;
}

inline NewDataSet::WORLDDataTable^  NewDataSet::WORLD::get() {
    return this->tableWORLD;
}

inline NewDataSet::rewardDataTable^  NewDataSet::reward::get() {
    return this->tablereward;
}

inline NewDataSet::_reward_componentDataTable^  NewDataSet::_reward_component::get() {
    return this->table_reward_component;
}

inline NewDataSet::_wind_turbineDataTable^  NewDataSet::_wind_turbine::get() {
    return this->table_wind_turbine;
}

inline NewDataSet::TRAINING_WIND_DATA_FILESDataTable^  NewDataSet::TRAINING_WIND_DATA_FILES::get() {
    return this->tableTRAINING_WIND_DATA_FILES;
}

inline NewDataSet::_magnetic_levitationDataTable^  NewDataSet::_magnetic_levitation::get() {
    return this->table_magnetic_levitation;
}

inline NewDataSet::pitchDataTable^  NewDataSet::pitch::get() {
    return this->tablepitch;
}

inline NewDataSet::_underwater_vehicleDataTable^  NewDataSet::_underwater_vehicle::get() {
    return this->table_underwater_vehicle;
}

inline NewDataSet::SIMGODDataTable^  NewDataSet::SIMGOD::get() {
    return this->tableSIMGOD;
}

inline NewDataSet::actorDataTable^  NewDataSet::actor::get() {
    return this->tableactor;
}

inline NewDataSet::CACLADataTable^  NewDataSet::CACLA::get() {
    return this->tableCACLA;
}

inline NewDataSet::vfaDataTable^  NewDataSet::vfa::get() {
    return this->tablevfa;
}

inline NewDataSet::NOISE_WIDTHDataTable^  NewDataSet::NOISE_WIDTH::get() {
    return this->tableNOISE_WIDTH;
}

inline NewDataSet::scheduleDataTable^  NewDataSet::schedule::get() {
    return this->tableschedule;
}

inline NewDataSet::LEARNING_RATEDataTable^  NewDataSet::LEARNING_RATE::get() {
    return this->tableLEARNING_RATE;
}

inline NewDataSet::RBF_GRIDDataTable^  NewDataSet::RBF_GRID::get() {
    return this->tableRBF_GRID;
}

inline NewDataSet::dimensionDataTable^  NewDataSet::dimension::get() {
    return this->tabledimension;
}

inline NewDataSet::PIDDataTable^  NewDataSet::PID::get() {
    return this->tablePID;
}

inline NewDataSet::KPDataTable^  NewDataSet::KP::get() {
    return this->tableKP;
}

inline NewDataSet::KIDataTable^  NewDataSet::KI::get() {
    return this->tableKI;
}

inline NewDataSet::KDDataTable^  NewDataSet::KD::get() {
    return this->tableKD;
}

inline NewDataSet::LQRDataTable^  NewDataSet::LQR::get() {
    return this->tableLQR;
}

inline NewDataSet::_LQR_GAINDataTable^  NewDataSet::_LQR_GAIN::get() {
    return this->table_LQR_GAIN;
}

inline NewDataSet::jonkmanDataTable^  NewDataSet::jonkman::get() {
    return this->tablejonkman;
}

inline NewDataSet::VS_RtGnSpDataTable^  NewDataSet::VS_RtGnSp::get() {
    return this->tableVS_RtGnSp;
}

inline NewDataSet::VS_SlPcDataTable^  NewDataSet::VS_SlPc::get() {
    return this->tableVS_SlPc;
}

inline NewDataSet::VS_Rgn2KDataTable^  NewDataSet::VS_Rgn2K::get() {
    return this->tableVS_Rgn2K;
}

inline NewDataSet::VS_Rgn2SpDataTable^  NewDataSet::VS_Rgn2Sp::get() {
    return this->tableVS_Rgn2Sp;
}

inline NewDataSet::VS_CtInSpDataTable^  NewDataSet::VS_CtInSp::get() {
    return this->tableVS_CtInSp;
}

inline NewDataSet::VS_RtPwrDataTable^  NewDataSet::VS_RtPwr::get() {
    return this->tableVS_RtPwr;
}

inline NewDataSet::VS_Rgn3MPDataTable^  NewDataSet::VS_Rgn3MP::get() {
    return this->tableVS_Rgn3MP;
}

inline NewDataSet::PC_KIDataTable^  NewDataSet::PC_KI::get() {
    return this->tablePC_KI;
}

inline NewDataSet::PC_KKDataTable^  NewDataSet::PC_KK::get() {
    return this->tablePC_KK;
}

inline NewDataSet::PC_KPDataTable^  NewDataSet::PC_KP::get() {
    return this->tablePC_KP;
}

inline NewDataSet::PC_RefSpdDataTable^  NewDataSet::PC_RefSpd::get() {
    return this->tablePC_RefSpd;
}

inline NewDataSet::vidalDataTable^  NewDataSet::vidal::get() {
    return this->tablevidal;
}

inline NewDataSet::ADataTable^  NewDataSet::A::get() {
    return this->tableA;
}

inline NewDataSet::K_alphaDataTable^  NewDataSet::K_alpha::get() {
    return this->tableK_alpha;
}

inline NewDataSet::P_sDataTable^  NewDataSet::P_s::get() {
    return this->tableP_s;
}

inline NewDataSet::boukhezzarDataTable^  NewDataSet::boukhezzar::get() {
    return this->tableboukhezzar;
}

inline NewDataSet::C_0DataTable^  NewDataSet::C_0::get() {
    return this->tableC_0;
}

inline NewDataSet::K_tDataTable^  NewDataSet::K_t::get() {
    return this->tableK_t;
}

inline NewDataSet::J_tDataTable^  NewDataSet::J_t::get() {
    return this->tableJ_t;
}

inline NewDataSet::criticDataTable^  NewDataSet::critic::get() {
    return this->tablecritic;
}

inline NewDataSet::_TD_LambdaDataTable^  NewDataSet::_TD_Lambda::get() {
    return this->table_TD_Lambda;
}

inline NewDataSet::_True_Online_TD_LambdaDataTable^  NewDataSet::_True_Online_TD_Lambda::get() {
    return this->table_True_Online_TD_Lambda;
}

inline NewDataSet::_TDC_LambdaDataTable^  NewDataSet::_TDC_Lambda::get() {
    return this->table_TDC_Lambda;
}

inline NewDataSet::controllerDataTable^  NewDataSet::controller::get() {
    return this->tablecontroller;
}

inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
    return this->_schemaSerializationMode;
}
inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
    this->_schemaSerializationMode = __identifier(value);
}

inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
    return __super::Tables;
}

inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
    return __super::Relations;
}

inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline ::System::Data::DataSet^  NewDataSet::Clone() {
    NewDataSet^  cln = (cli::safe_cast<NewDataSet^  >(__super::Clone()));
    cln->InitVars();
    cln->SchemaSerializationMode = this->SchemaSerializationMode;
    return cln;
}

inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
    return false;
}

inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
    if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        this->Reset();
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXml(reader);
        if (ds->Tables[L"EXPERIMENT"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::EXPERIMENTDataTable(ds->Tables[L"EXPERIMENT"])));
        }
        if (ds->Tables[L"LOG"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::LOGDataTable(ds->Tables[L"LOG"])));
        }
        if (ds->Tables[L"WORLD"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::WORLDDataTable(ds->Tables[L"WORLD"])));
        }
        if (ds->Tables[L"reward"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::rewardDataTable(ds->Tables[L"reward"])));
        }
        if (ds->Tables[L"reward-component"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::_reward_componentDataTable(ds->Tables[L"reward-component"])));
        }
        if (ds->Tables[L"wind-turbine"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::_wind_turbineDataTable(ds->Tables[L"wind-turbine"])));
        }
        if (ds->Tables[L"TRAINING_WIND_DATA_FILES"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::TRAINING_WIND_DATA_FILESDataTable(ds->Tables[L"TRAINING_WIND_DATA_FILES"])));
        }
        if (ds->Tables[L"magnetic-levitation"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::_magnetic_levitationDataTable(ds->Tables[L"magnetic-levitation"])));
        }
        if (ds->Tables[L"pitch"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::pitchDataTable(ds->Tables[L"pitch"])));
        }
        if (ds->Tables[L"underwater-vehicle"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::_underwater_vehicleDataTable(ds->Tables[L"underwater-vehicle"])));
        }
        if (ds->Tables[L"SIMGOD"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::SIMGODDataTable(ds->Tables[L"SIMGOD"])));
        }
        if (ds->Tables[L"actor"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::actorDataTable(ds->Tables[L"actor"])));
        }
        if (ds->Tables[L"CACLA"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::CACLADataTable(ds->Tables[L"CACLA"])));
        }
        if (ds->Tables[L"vfa"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::vfaDataTable(ds->Tables[L"vfa"])));
        }
        if (ds->Tables[L"NOISE_WIDTH"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::NOISE_WIDTHDataTable(ds->Tables[L"NOISE_WIDTH"])));
        }
        if (ds->Tables[L"schedule"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::scheduleDataTable(ds->Tables[L"schedule"])));
        }
        if (ds->Tables[L"LEARNING_RATE"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::LEARNING_RATEDataTable(ds->Tables[L"LEARNING_RATE"])));
        }
        if (ds->Tables[L"RBF_GRID"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::RBF_GRIDDataTable(ds->Tables[L"RBF_GRID"])));
        }
        if (ds->Tables[L"dimension"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::dimensionDataTable(ds->Tables[L"dimension"])));
        }
        if (ds->Tables[L"PID"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::PIDDataTable(ds->Tables[L"PID"])));
        }
        if (ds->Tables[L"KP"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::KPDataTable(ds->Tables[L"KP"])));
        }
        if (ds->Tables[L"KI"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::KIDataTable(ds->Tables[L"KI"])));
        }
        if (ds->Tables[L"KD"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::KDDataTable(ds->Tables[L"KD"])));
        }
        if (ds->Tables[L"LQR"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::LQRDataTable(ds->Tables[L"LQR"])));
        }
        if (ds->Tables[L"LQR-GAIN"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::_LQR_GAINDataTable(ds->Tables[L"LQR-GAIN"])));
        }
        if (ds->Tables[L"jonkman"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::jonkmanDataTable(ds->Tables[L"jonkman"])));
        }
        if (ds->Tables[L"VS_RtGnSp"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::VS_RtGnSpDataTable(ds->Tables[L"VS_RtGnSp"])));
        }
        if (ds->Tables[L"VS_SlPc"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::VS_SlPcDataTable(ds->Tables[L"VS_SlPc"])));
        }
        if (ds->Tables[L"VS_Rgn2K"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::VS_Rgn2KDataTable(ds->Tables[L"VS_Rgn2K"])));
        }
        if (ds->Tables[L"VS_Rgn2Sp"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::VS_Rgn2SpDataTable(ds->Tables[L"VS_Rgn2Sp"])));
        }
        if (ds->Tables[L"VS_CtInSp"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::VS_CtInSpDataTable(ds->Tables[L"VS_CtInSp"])));
        }
        if (ds->Tables[L"VS_RtPwr"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::VS_RtPwrDataTable(ds->Tables[L"VS_RtPwr"])));
        }
        if (ds->Tables[L"VS_Rgn3MP"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::VS_Rgn3MPDataTable(ds->Tables[L"VS_Rgn3MP"])));
        }
        if (ds->Tables[L"PC_KI"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::PC_KIDataTable(ds->Tables[L"PC_KI"])));
        }
        if (ds->Tables[L"PC_KK"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::PC_KKDataTable(ds->Tables[L"PC_KK"])));
        }
        if (ds->Tables[L"PC_KP"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::PC_KPDataTable(ds->Tables[L"PC_KP"])));
        }
        if (ds->Tables[L"PC_RefSpd"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::PC_RefSpdDataTable(ds->Tables[L"PC_RefSpd"])));
        }
        if (ds->Tables[L"vidal"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::vidalDataTable(ds->Tables[L"vidal"])));
        }
        if (ds->Tables[L"A"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::ADataTable(ds->Tables[L"A"])));
        }
        if (ds->Tables[L"K_alpha"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::K_alphaDataTable(ds->Tables[L"K_alpha"])));
        }
        if (ds->Tables[L"P_s"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::P_sDataTable(ds->Tables[L"P_s"])));
        }
        if (ds->Tables[L"boukhezzar"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::boukhezzarDataTable(ds->Tables[L"boukhezzar"])));
        }
        if (ds->Tables[L"C_0"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::C_0DataTable(ds->Tables[L"C_0"])));
        }
        if (ds->Tables[L"K_t"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::K_tDataTable(ds->Tables[L"K_t"])));
        }
        if (ds->Tables[L"J_t"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::J_tDataTable(ds->Tables[L"J_t"])));
        }
        if (ds->Tables[L"critic"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::criticDataTable(ds->Tables[L"critic"])));
        }
        if (ds->Tables[L"TD-Lambda"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::_TD_LambdaDataTable(ds->Tables[L"TD-Lambda"])));
        }
        if (ds->Tables[L"True-Online-TD-Lambda"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::_True_Online_TD_LambdaDataTable(ds->Tables[L"True-Online-TD-Lambda"])));
        }
        if (ds->Tables[L"TDC-Lambda"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::_TDC_LambdaDataTable(ds->Tables[L"TDC-Lambda"])));
        }
        if (ds->Tables[L"controller"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::controllerDataTable(ds->Tables[L"controller"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXml(reader);
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
    ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
    this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
    stream->Position = 0;
    return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
}

inline ::System::Void NewDataSet::InitVars() {
    this->InitVars(true);
}

inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
    this->tableEXPERIMENT = (cli::safe_cast<NewDataSet::EXPERIMENTDataTable^  >(__super::Tables[L"EXPERIMENT"]));
    if (initTable == true) {
        if (this->tableEXPERIMENT != nullptr) {
            this->tableEXPERIMENT->InitVars();
        }
    }
    this->tableLOG = (cli::safe_cast<NewDataSet::LOGDataTable^  >(__super::Tables[L"LOG"]));
    if (initTable == true) {
        if (this->tableLOG != nullptr) {
            this->tableLOG->InitVars();
        }
    }
    this->tableWORLD = (cli::safe_cast<NewDataSet::WORLDDataTable^  >(__super::Tables[L"WORLD"]));
    if (initTable == true) {
        if (this->tableWORLD != nullptr) {
            this->tableWORLD->InitVars();
        }
    }
    this->tablereward = (cli::safe_cast<NewDataSet::rewardDataTable^  >(__super::Tables[L"reward"]));
    if (initTable == true) {
        if (this->tablereward != nullptr) {
            this->tablereward->InitVars();
        }
    }
    this->table_reward_component = (cli::safe_cast<NewDataSet::_reward_componentDataTable^  >(__super::Tables[L"reward-component"]));
    if (initTable == true) {
        if (this->table_reward_component != nullptr) {
            this->table_reward_component->InitVars();
        }
    }
    this->table_wind_turbine = (cli::safe_cast<NewDataSet::_wind_turbineDataTable^  >(__super::Tables[L"wind-turbine"]));
    if (initTable == true) {
        if (this->table_wind_turbine != nullptr) {
            this->table_wind_turbine->InitVars();
        }
    }
    this->tableTRAINING_WIND_DATA_FILES = (cli::safe_cast<NewDataSet::TRAINING_WIND_DATA_FILESDataTable^  >(__super::Tables[L"TRAINING_WIND_DATA_FILES"]));
    if (initTable == true) {
        if (this->tableTRAINING_WIND_DATA_FILES != nullptr) {
            this->tableTRAINING_WIND_DATA_FILES->InitVars();
        }
    }
    this->table_magnetic_levitation = (cli::safe_cast<NewDataSet::_magnetic_levitationDataTable^  >(__super::Tables[L"magnetic-levitation"]));
    if (initTable == true) {
        if (this->table_magnetic_levitation != nullptr) {
            this->table_magnetic_levitation->InitVars();
        }
    }
    this->tablepitch = (cli::safe_cast<NewDataSet::pitchDataTable^  >(__super::Tables[L"pitch"]));
    if (initTable == true) {
        if (this->tablepitch != nullptr) {
            this->tablepitch->InitVars();
        }
    }
    this->table_underwater_vehicle = (cli::safe_cast<NewDataSet::_underwater_vehicleDataTable^  >(__super::Tables[L"underwater-vehicle"]));
    if (initTable == true) {
        if (this->table_underwater_vehicle != nullptr) {
            this->table_underwater_vehicle->InitVars();
        }
    }
    this->tableSIMGOD = (cli::safe_cast<NewDataSet::SIMGODDataTable^  >(__super::Tables[L"SIMGOD"]));
    if (initTable == true) {
        if (this->tableSIMGOD != nullptr) {
            this->tableSIMGOD->InitVars();
        }
    }
    this->tableactor = (cli::safe_cast<NewDataSet::actorDataTable^  >(__super::Tables[L"actor"]));
    if (initTable == true) {
        if (this->tableactor != nullptr) {
            this->tableactor->InitVars();
        }
    }
    this->tableCACLA = (cli::safe_cast<NewDataSet::CACLADataTable^  >(__super::Tables[L"CACLA"]));
    if (initTable == true) {
        if (this->tableCACLA != nullptr) {
            this->tableCACLA->InitVars();
        }
    }
    this->tablevfa = (cli::safe_cast<NewDataSet::vfaDataTable^  >(__super::Tables[L"vfa"]));
    if (initTable == true) {
        if (this->tablevfa != nullptr) {
            this->tablevfa->InitVars();
        }
    }
    this->tableNOISE_WIDTH = (cli::safe_cast<NewDataSet::NOISE_WIDTHDataTable^  >(__super::Tables[L"NOISE_WIDTH"]));
    if (initTable == true) {
        if (this->tableNOISE_WIDTH != nullptr) {
            this->tableNOISE_WIDTH->InitVars();
        }
    }
    this->tableschedule = (cli::safe_cast<NewDataSet::scheduleDataTable^  >(__super::Tables[L"schedule"]));
    if (initTable == true) {
        if (this->tableschedule != nullptr) {
            this->tableschedule->InitVars();
        }
    }
    this->tableLEARNING_RATE = (cli::safe_cast<NewDataSet::LEARNING_RATEDataTable^  >(__super::Tables[L"LEARNING_RATE"]));
    if (initTable == true) {
        if (this->tableLEARNING_RATE != nullptr) {
            this->tableLEARNING_RATE->InitVars();
        }
    }
    this->tableRBF_GRID = (cli::safe_cast<NewDataSet::RBF_GRIDDataTable^  >(__super::Tables[L"RBF_GRID"]));
    if (initTable == true) {
        if (this->tableRBF_GRID != nullptr) {
            this->tableRBF_GRID->InitVars();
        }
    }
    this->tabledimension = (cli::safe_cast<NewDataSet::dimensionDataTable^  >(__super::Tables[L"dimension"]));
    if (initTable == true) {
        if (this->tabledimension != nullptr) {
            this->tabledimension->InitVars();
        }
    }
    this->tablePID = (cli::safe_cast<NewDataSet::PIDDataTable^  >(__super::Tables[L"PID"]));
    if (initTable == true) {
        if (this->tablePID != nullptr) {
            this->tablePID->InitVars();
        }
    }
    this->tableKP = (cli::safe_cast<NewDataSet::KPDataTable^  >(__super::Tables[L"KP"]));
    if (initTable == true) {
        if (this->tableKP != nullptr) {
            this->tableKP->InitVars();
        }
    }
    this->tableKI = (cli::safe_cast<NewDataSet::KIDataTable^  >(__super::Tables[L"KI"]));
    if (initTable == true) {
        if (this->tableKI != nullptr) {
            this->tableKI->InitVars();
        }
    }
    this->tableKD = (cli::safe_cast<NewDataSet::KDDataTable^  >(__super::Tables[L"KD"]));
    if (initTable == true) {
        if (this->tableKD != nullptr) {
            this->tableKD->InitVars();
        }
    }
    this->tableLQR = (cli::safe_cast<NewDataSet::LQRDataTable^  >(__super::Tables[L"LQR"]));
    if (initTable == true) {
        if (this->tableLQR != nullptr) {
            this->tableLQR->InitVars();
        }
    }
    this->table_LQR_GAIN = (cli::safe_cast<NewDataSet::_LQR_GAINDataTable^  >(__super::Tables[L"LQR-GAIN"]));
    if (initTable == true) {
        if (this->table_LQR_GAIN != nullptr) {
            this->table_LQR_GAIN->InitVars();
        }
    }
    this->tablejonkman = (cli::safe_cast<NewDataSet::jonkmanDataTable^  >(__super::Tables[L"jonkman"]));
    if (initTable == true) {
        if (this->tablejonkman != nullptr) {
            this->tablejonkman->InitVars();
        }
    }
    this->tableVS_RtGnSp = (cli::safe_cast<NewDataSet::VS_RtGnSpDataTable^  >(__super::Tables[L"VS_RtGnSp"]));
    if (initTable == true) {
        if (this->tableVS_RtGnSp != nullptr) {
            this->tableVS_RtGnSp->InitVars();
        }
    }
    this->tableVS_SlPc = (cli::safe_cast<NewDataSet::VS_SlPcDataTable^  >(__super::Tables[L"VS_SlPc"]));
    if (initTable == true) {
        if (this->tableVS_SlPc != nullptr) {
            this->tableVS_SlPc->InitVars();
        }
    }
    this->tableVS_Rgn2K = (cli::safe_cast<NewDataSet::VS_Rgn2KDataTable^  >(__super::Tables[L"VS_Rgn2K"]));
    if (initTable == true) {
        if (this->tableVS_Rgn2K != nullptr) {
            this->tableVS_Rgn2K->InitVars();
        }
    }
    this->tableVS_Rgn2Sp = (cli::safe_cast<NewDataSet::VS_Rgn2SpDataTable^  >(__super::Tables[L"VS_Rgn2Sp"]));
    if (initTable == true) {
        if (this->tableVS_Rgn2Sp != nullptr) {
            this->tableVS_Rgn2Sp->InitVars();
        }
    }
    this->tableVS_CtInSp = (cli::safe_cast<NewDataSet::VS_CtInSpDataTable^  >(__super::Tables[L"VS_CtInSp"]));
    if (initTable == true) {
        if (this->tableVS_CtInSp != nullptr) {
            this->tableVS_CtInSp->InitVars();
        }
    }
    this->tableVS_RtPwr = (cli::safe_cast<NewDataSet::VS_RtPwrDataTable^  >(__super::Tables[L"VS_RtPwr"]));
    if (initTable == true) {
        if (this->tableVS_RtPwr != nullptr) {
            this->tableVS_RtPwr->InitVars();
        }
    }
    this->tableVS_Rgn3MP = (cli::safe_cast<NewDataSet::VS_Rgn3MPDataTable^  >(__super::Tables[L"VS_Rgn3MP"]));
    if (initTable == true) {
        if (this->tableVS_Rgn3MP != nullptr) {
            this->tableVS_Rgn3MP->InitVars();
        }
    }
    this->tablePC_KI = (cli::safe_cast<NewDataSet::PC_KIDataTable^  >(__super::Tables[L"PC_KI"]));
    if (initTable == true) {
        if (this->tablePC_KI != nullptr) {
            this->tablePC_KI->InitVars();
        }
    }
    this->tablePC_KK = (cli::safe_cast<NewDataSet::PC_KKDataTable^  >(__super::Tables[L"PC_KK"]));
    if (initTable == true) {
        if (this->tablePC_KK != nullptr) {
            this->tablePC_KK->InitVars();
        }
    }
    this->tablePC_KP = (cli::safe_cast<NewDataSet::PC_KPDataTable^  >(__super::Tables[L"PC_KP"]));
    if (initTable == true) {
        if (this->tablePC_KP != nullptr) {
            this->tablePC_KP->InitVars();
        }
    }
    this->tablePC_RefSpd = (cli::safe_cast<NewDataSet::PC_RefSpdDataTable^  >(__super::Tables[L"PC_RefSpd"]));
    if (initTable == true) {
        if (this->tablePC_RefSpd != nullptr) {
            this->tablePC_RefSpd->InitVars();
        }
    }
    this->tablevidal = (cli::safe_cast<NewDataSet::vidalDataTable^  >(__super::Tables[L"vidal"]));
    if (initTable == true) {
        if (this->tablevidal != nullptr) {
            this->tablevidal->InitVars();
        }
    }
    this->tableA = (cli::safe_cast<NewDataSet::ADataTable^  >(__super::Tables[L"A"]));
    if (initTable == true) {
        if (this->tableA != nullptr) {
            this->tableA->InitVars();
        }
    }
    this->tableK_alpha = (cli::safe_cast<NewDataSet::K_alphaDataTable^  >(__super::Tables[L"K_alpha"]));
    if (initTable == true) {
        if (this->tableK_alpha != nullptr) {
            this->tableK_alpha->InitVars();
        }
    }
    this->tableP_s = (cli::safe_cast<NewDataSet::P_sDataTable^  >(__super::Tables[L"P_s"]));
    if (initTable == true) {
        if (this->tableP_s != nullptr) {
            this->tableP_s->InitVars();
        }
    }
    this->tableboukhezzar = (cli::safe_cast<NewDataSet::boukhezzarDataTable^  >(__super::Tables[L"boukhezzar"]));
    if (initTable == true) {
        if (this->tableboukhezzar != nullptr) {
            this->tableboukhezzar->InitVars();
        }
    }
    this->tableC_0 = (cli::safe_cast<NewDataSet::C_0DataTable^  >(__super::Tables[L"C_0"]));
    if (initTable == true) {
        if (this->tableC_0 != nullptr) {
            this->tableC_0->InitVars();
        }
    }
    this->tableK_t = (cli::safe_cast<NewDataSet::K_tDataTable^  >(__super::Tables[L"K_t"]));
    if (initTable == true) {
        if (this->tableK_t != nullptr) {
            this->tableK_t->InitVars();
        }
    }
    this->tableJ_t = (cli::safe_cast<NewDataSet::J_tDataTable^  >(__super::Tables[L"J_t"]));
    if (initTable == true) {
        if (this->tableJ_t != nullptr) {
            this->tableJ_t->InitVars();
        }
    }
    this->tablecritic = (cli::safe_cast<NewDataSet::criticDataTable^  >(__super::Tables[L"critic"]));
    if (initTable == true) {
        if (this->tablecritic != nullptr) {
            this->tablecritic->InitVars();
        }
    }
    this->table_TD_Lambda = (cli::safe_cast<NewDataSet::_TD_LambdaDataTable^  >(__super::Tables[L"TD-Lambda"]));
    if (initTable == true) {
        if (this->table_TD_Lambda != nullptr) {
            this->table_TD_Lambda->InitVars();
        }
    }
    this->table_True_Online_TD_Lambda = (cli::safe_cast<NewDataSet::_True_Online_TD_LambdaDataTable^  >(__super::Tables[L"True-Online-TD-Lambda"]));
    if (initTable == true) {
        if (this->table_True_Online_TD_Lambda != nullptr) {
            this->table_True_Online_TD_Lambda->InitVars();
        }
    }
    this->table_TDC_Lambda = (cli::safe_cast<NewDataSet::_TDC_LambdaDataTable^  >(__super::Tables[L"TDC-Lambda"]));
    if (initTable == true) {
        if (this->table_TDC_Lambda != nullptr) {
            this->table_TDC_Lambda->InitVars();
        }
    }
    this->tablecontroller = (cli::safe_cast<NewDataSet::controllerDataTable^  >(__super::Tables[L"controller"]));
    if (initTable == true) {
        if (this->tablecontroller != nullptr) {
            this->tablecontroller->InitVars();
        }
    }
    this->relationEXPERIMENT_LOG = this->Relations[L"EXPERIMENT_LOG"];
    this->relationWORLD_reward = this->Relations[L"WORLD_reward"];
    this->_relationreward_reward_component = this->Relations[L"reward_reward-component"];
    this->_relationWORLD_wind_turbine = this->Relations[L"WORLD_wind-turbine"];
    this->_relationwind_turbine_TRAINING_WIND_DATA_FILES = this->Relations[L"wind-turbine_TRAINING_WIND_DATA_FILES"];
    this->_relationWORLD_magnetic_levitation = this->Relations[L"WORLD_magnetic-levitation"];
    this->relationWORLD_pitch = this->Relations[L"WORLD_pitch"];
    this->_relationWORLD_underwater_vehicle = this->Relations[L"WORLD_underwater-vehicle"];
    this->relationSIMGOD_actor = this->Relations[L"SIMGOD_actor"];
    this->relationactor_CACLA = this->Relations[L"actor_CACLA"];
    this->relationcontroller_CACLA = this->Relations[L"controller_CACLA"];
    this->relationCACLA_vfa = this->Relations[L"CACLA_vfa"];
    this->_relationTD_Lambda_vfa = this->Relations[L"TD-Lambda_vfa"];
    this->_relationTrue_Online_TD_Lambda_vfa = this->Relations[L"True-Online-TD-Lambda_vfa"];
    this->_relationTDC_Lambda_vfa = this->Relations[L"TDC-Lambda_vfa"];
    this->relationvfa_NOISE_WIDTH = this->Relations[L"vfa_NOISE_WIDTH"];
    this->relationNOISE_WIDTH_schedule = this->Relations[L"NOISE_WIDTH_schedule"];
    this->relationLEARNING_RATE_schedule = this->Relations[L"LEARNING_RATE_schedule"];
    this->relationKP_schedule = this->Relations[L"KP_schedule"];
    this->relationKI_schedule = this->Relations[L"KI_schedule"];
    this->relationKD_schedule = this->Relations[L"KD_schedule"];
    this->relationVS_RtGnSp_schedule = this->Relations[L"VS_RtGnSp_schedule"];
    this->relationVS_SlPc_schedule = this->Relations[L"VS_SlPc_schedule"];
    this->relationVS_Rgn2K_schedule = this->Relations[L"VS_Rgn2K_schedule"];
    this->relationVS_Rgn2Sp_schedule = this->Relations[L"VS_Rgn2Sp_schedule"];
    this->relationVS_CtInSp_schedule = this->Relations[L"VS_CtInSp_schedule"];
    this->relationVS_RtPwr_schedule = this->Relations[L"VS_RtPwr_schedule"];
    this->relationVS_Rgn3MP_schedule = this->Relations[L"VS_Rgn3MP_schedule"];
    this->relationPC_KI_schedule = this->Relations[L"PC_KI_schedule"];
    this->relationPC_KK_schedule = this->Relations[L"PC_KK_schedule"];
    this->relationPC_KP_schedule = this->Relations[L"PC_KP_schedule"];
    this->relationPC_RefSpd_schedule = this->Relations[L"PC_RefSpd_schedule"];
    this->relationA_schedule = this->Relations[L"A_schedule"];
    this->relationK_alpha_schedule = this->Relations[L"K_alpha_schedule"];
    this->relationP_s_schedule = this->Relations[L"P_s_schedule"];
    this->relationC_0_schedule = this->Relations[L"C_0_schedule"];
    this->relationK_t_schedule = this->Relations[L"K_t_schedule"];
    this->relationJ_t_schedule = this->Relations[L"J_t_schedule"];
    this->relationvfa_LEARNING_RATE = this->Relations[L"vfa_LEARNING_RATE"];
    this->_relationTD_Lambda_LEARNING_RATE = this->Relations[L"TD-Lambda_LEARNING_RATE"];
    this->_relationTrue_Online_TD_Lambda_LEARNING_RATE = this->Relations[L"True-Online-TD-Lambda_LEARNING_RATE"];
    this->_relationTDC_Lambda_LEARNING_RATE = this->Relations[L"TDC-Lambda_LEARNING_RATE"];
    this->relationvfa_RBF_GRID = this->Relations[L"vfa_RBF_GRID"];
    this->relationRBF_GRID_dimension = this->Relations[L"RBF_GRID_dimension"];
    this->relationactor_PID = this->Relations[L"actor_PID"];
    this->relationcontroller_PID = this->Relations[L"controller_PID"];
    this->relationPID_KP = this->Relations[L"PID_KP"];
    this->relationvidal_KP = this->Relations[L"vidal_KP"];
    this->relationboukhezzar_KP = this->Relations[L"boukhezzar_KP"];
    this->relationPID_KI = this->Relations[L"PID_KI"];
    this->relationvidal_KI = this->Relations[L"vidal_KI"];
    this->relationboukhezzar_KI = this->Relations[L"boukhezzar_KI"];
    this->relationPID_KD = this->Relations[L"PID_KD"];
    this->relationactor_LQR = this->Relations[L"actor_LQR"];
    this->relationcontroller_LQR = this->Relations[L"controller_LQR"];
    this->_relationLQR_LQR_GAIN = this->Relations[L"LQR_LQR-GAIN"];
    this->relationactor_jonkman = this->Relations[L"actor_jonkman"];
    this->relationcontroller_jonkman = this->Relations[L"controller_jonkman"];
    this->relationjonkman_VS_RtGnSp = this->Relations[L"jonkman_VS_RtGnSp"];
    this->relationjonkman_VS_SlPc = this->Relations[L"jonkman_VS_SlPc"];
    this->relationjonkman_VS_Rgn2K = this->Relations[L"jonkman_VS_Rgn2K"];
    this->relationjonkman_VS_Rgn2Sp = this->Relations[L"jonkman_VS_Rgn2Sp"];
    this->relationjonkman_VS_CtInSp = this->Relations[L"jonkman_VS_CtInSp"];
    this->relationjonkman_VS_RtPwr = this->Relations[L"jonkman_VS_RtPwr"];
    this->relationjonkman_VS_Rgn3MP = this->Relations[L"jonkman_VS_Rgn3MP"];
    this->relationjonkman_PC_KI = this->Relations[L"jonkman_PC_KI"];
    this->relationjonkman_PC_KK = this->Relations[L"jonkman_PC_KK"];
    this->relationjonkman_PC_KP = this->Relations[L"jonkman_PC_KP"];
    this->relationjonkman_PC_RefSpd = this->Relations[L"jonkman_PC_RefSpd"];
    this->relationactor_vidal = this->Relations[L"actor_vidal"];
    this->relationcontroller_vidal = this->Relations[L"controller_vidal"];
    this->relationvidal_A = this->Relations[L"vidal_A"];
    this->relationvidal_K_alpha = this->Relations[L"vidal_K_alpha"];
    this->relationvidal_P_s = this->Relations[L"vidal_P_s"];
    this->relationactor_boukhezzar = this->Relations[L"actor_boukhezzar"];
    this->relationcontroller_boukhezzar = this->Relations[L"controller_boukhezzar"];
    this->relationboukhezzar_C_0 = this->Relations[L"boukhezzar_C_0"];
    this->relationboukhezzar_K_t = this->Relations[L"boukhezzar_K_t"];
    this->relationboukhezzar_J_t = this->Relations[L"boukhezzar_J_t"];
    this->relationSIMGOD_critic = this->Relations[L"SIMGOD_critic"];
    this->_relationcritic_TD_Lambda = this->Relations[L"critic_TD-Lambda"];
    this->_relationcritic_True_Online_TD_Lambda = this->Relations[L"critic_True-Online-TD-Lambda"];
    this->_relationcritic_TDC_Lambda = this->Relations[L"critic_TDC-Lambda"];
    this->relationSIMGOD_controller = this->Relations[L"SIMGOD_controller"];
}

inline ::System::Void NewDataSet::InitClass() {
    this->DataSetName = L"NewDataSet";
    this->Prefix = L"";
    this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
    this->EnforceConstraints = true;
    this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
    this->tableEXPERIMENT = (gcnew NewDataSet::EXPERIMENTDataTable());
    __super::Tables->Add(this->tableEXPERIMENT);
    this->tableLOG = (gcnew NewDataSet::LOGDataTable());
    __super::Tables->Add(this->tableLOG);
    this->tableWORLD = (gcnew NewDataSet::WORLDDataTable());
    __super::Tables->Add(this->tableWORLD);
    this->tablereward = (gcnew NewDataSet::rewardDataTable());
    __super::Tables->Add(this->tablereward);
    this->table_reward_component = (gcnew NewDataSet::_reward_componentDataTable());
    __super::Tables->Add(this->table_reward_component);
    this->table_wind_turbine = (gcnew NewDataSet::_wind_turbineDataTable());
    __super::Tables->Add(this->table_wind_turbine);
    this->tableTRAINING_WIND_DATA_FILES = (gcnew NewDataSet::TRAINING_WIND_DATA_FILESDataTable());
    __super::Tables->Add(this->tableTRAINING_WIND_DATA_FILES);
    this->table_magnetic_levitation = (gcnew NewDataSet::_magnetic_levitationDataTable());
    __super::Tables->Add(this->table_magnetic_levitation);
    this->tablepitch = (gcnew NewDataSet::pitchDataTable());
    __super::Tables->Add(this->tablepitch);
    this->table_underwater_vehicle = (gcnew NewDataSet::_underwater_vehicleDataTable());
    __super::Tables->Add(this->table_underwater_vehicle);
    this->tableSIMGOD = (gcnew NewDataSet::SIMGODDataTable());
    __super::Tables->Add(this->tableSIMGOD);
    this->tableactor = (gcnew NewDataSet::actorDataTable());
    __super::Tables->Add(this->tableactor);
    this->tableCACLA = (gcnew NewDataSet::CACLADataTable());
    __super::Tables->Add(this->tableCACLA);
    this->tablevfa = (gcnew NewDataSet::vfaDataTable());
    __super::Tables->Add(this->tablevfa);
    this->tableNOISE_WIDTH = (gcnew NewDataSet::NOISE_WIDTHDataTable());
    __super::Tables->Add(this->tableNOISE_WIDTH);
    this->tableschedule = (gcnew NewDataSet::scheduleDataTable());
    __super::Tables->Add(this->tableschedule);
    this->tableLEARNING_RATE = (gcnew NewDataSet::LEARNING_RATEDataTable());
    __super::Tables->Add(this->tableLEARNING_RATE);
    this->tableRBF_GRID = (gcnew NewDataSet::RBF_GRIDDataTable());
    __super::Tables->Add(this->tableRBF_GRID);
    this->tabledimension = (gcnew NewDataSet::dimensionDataTable());
    __super::Tables->Add(this->tabledimension);
    this->tablePID = (gcnew NewDataSet::PIDDataTable());
    __super::Tables->Add(this->tablePID);
    this->tableKP = (gcnew NewDataSet::KPDataTable());
    __super::Tables->Add(this->tableKP);
    this->tableKI = (gcnew NewDataSet::KIDataTable());
    __super::Tables->Add(this->tableKI);
    this->tableKD = (gcnew NewDataSet::KDDataTable());
    __super::Tables->Add(this->tableKD);
    this->tableLQR = (gcnew NewDataSet::LQRDataTable());
    __super::Tables->Add(this->tableLQR);
    this->table_LQR_GAIN = (gcnew NewDataSet::_LQR_GAINDataTable());
    __super::Tables->Add(this->table_LQR_GAIN);
    this->tablejonkman = (gcnew NewDataSet::jonkmanDataTable());
    __super::Tables->Add(this->tablejonkman);
    this->tableVS_RtGnSp = (gcnew NewDataSet::VS_RtGnSpDataTable());
    __super::Tables->Add(this->tableVS_RtGnSp);
    this->tableVS_SlPc = (gcnew NewDataSet::VS_SlPcDataTable());
    __super::Tables->Add(this->tableVS_SlPc);
    this->tableVS_Rgn2K = (gcnew NewDataSet::VS_Rgn2KDataTable());
    __super::Tables->Add(this->tableVS_Rgn2K);
    this->tableVS_Rgn2Sp = (gcnew NewDataSet::VS_Rgn2SpDataTable());
    __super::Tables->Add(this->tableVS_Rgn2Sp);
    this->tableVS_CtInSp = (gcnew NewDataSet::VS_CtInSpDataTable());
    __super::Tables->Add(this->tableVS_CtInSp);
    this->tableVS_RtPwr = (gcnew NewDataSet::VS_RtPwrDataTable());
    __super::Tables->Add(this->tableVS_RtPwr);
    this->tableVS_Rgn3MP = (gcnew NewDataSet::VS_Rgn3MPDataTable());
    __super::Tables->Add(this->tableVS_Rgn3MP);
    this->tablePC_KI = (gcnew NewDataSet::PC_KIDataTable());
    __super::Tables->Add(this->tablePC_KI);
    this->tablePC_KK = (gcnew NewDataSet::PC_KKDataTable());
    __super::Tables->Add(this->tablePC_KK);
    this->tablePC_KP = (gcnew NewDataSet::PC_KPDataTable());
    __super::Tables->Add(this->tablePC_KP);
    this->tablePC_RefSpd = (gcnew NewDataSet::PC_RefSpdDataTable());
    __super::Tables->Add(this->tablePC_RefSpd);
    this->tablevidal = (gcnew NewDataSet::vidalDataTable());
    __super::Tables->Add(this->tablevidal);
    this->tableA = (gcnew NewDataSet::ADataTable());
    __super::Tables->Add(this->tableA);
    this->tableK_alpha = (gcnew NewDataSet::K_alphaDataTable());
    __super::Tables->Add(this->tableK_alpha);
    this->tableP_s = (gcnew NewDataSet::P_sDataTable());
    __super::Tables->Add(this->tableP_s);
    this->tableboukhezzar = (gcnew NewDataSet::boukhezzarDataTable());
    __super::Tables->Add(this->tableboukhezzar);
    this->tableC_0 = (gcnew NewDataSet::C_0DataTable());
    __super::Tables->Add(this->tableC_0);
    this->tableK_t = (gcnew NewDataSet::K_tDataTable());
    __super::Tables->Add(this->tableK_t);
    this->tableJ_t = (gcnew NewDataSet::J_tDataTable());
    __super::Tables->Add(this->tableJ_t);
    this->tablecritic = (gcnew NewDataSet::criticDataTable());
    __super::Tables->Add(this->tablecritic);
    this->table_TD_Lambda = (gcnew NewDataSet::_TD_LambdaDataTable());
    __super::Tables->Add(this->table_TD_Lambda);
    this->table_True_Online_TD_Lambda = (gcnew NewDataSet::_True_Online_TD_LambdaDataTable());
    __super::Tables->Add(this->table_True_Online_TD_Lambda);
    this->table_TDC_Lambda = (gcnew NewDataSet::_TDC_LambdaDataTable());
    __super::Tables->Add(this->table_TDC_Lambda);
    this->tablecontroller = (gcnew NewDataSet::controllerDataTable());
    __super::Tables->Add(this->tablecontroller);
    ::System::Data::ForeignKeyConstraint^  fkc;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"EXPERIMENT_LOG", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXPERIMENT->EXPERIMENT_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLOG->EXPERIMENT_IdColumn}));
    this->tableLOG->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"WORLD_reward", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWORLD->WORLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablereward->WORLD_IdColumn}));
    this->tablereward->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"reward_reward-component", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablereward->reward_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_reward_component->reward_IdColumn}));
    this->table_reward_component->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"WORLD_wind-turbine", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWORLD->WORLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_wind_turbine->WORLD_IdColumn}));
    this->table_wind_turbine->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"wind-turbine_TRAINING_WIND_DATA_FILES", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_wind_turbine->_wind_turbine_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTRAINING_WIND_DATA_FILES->_wind_turbine_IdColumn}));
    this->tableTRAINING_WIND_DATA_FILES->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"WORLD_magnetic-levitation", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWORLD->WORLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_magnetic_levitation->WORLD_IdColumn}));
    this->table_magnetic_levitation->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"WORLD_pitch", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWORLD->WORLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepitch->WORLD_IdColumn}));
    this->tablepitch->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"WORLD_underwater-vehicle", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWORLD->WORLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_underwater_vehicle->WORLD_IdColumn}));
    this->table_underwater_vehicle->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"SIMGOD_actor", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSIMGOD->SIMGOD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableactor->SIMGOD_IdColumn}));
    this->tableactor->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"actor_CACLA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableactor->actor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCACLA->actor_IdColumn}));
    this->tableCACLA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"controller_CACLA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontroller->controller_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCACLA->controller_IdColumn}));
    this->tableCACLA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"CACLA_vfa", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCACLA->CACLA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevfa->CACLA_IdColumn}));
    this->tablevfa->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TD-Lambda_vfa", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TD_Lambda->_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevfa->_TD_Lambda_IdColumn}));
    this->tablevfa->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"True-Online-TD-Lambda_vfa", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_True_Online_TD_Lambda->_True_Online_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevfa->_True_Online_TD_Lambda_IdColumn}));
    this->tablevfa->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TDC-Lambda_vfa", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TDC_Lambda->_TDC_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevfa->_TDC_Lambda_IdColumn}));
    this->tablevfa->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"vfa_NOISE_WIDTH", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevfa->vfa_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableNOISE_WIDTH->vfa_IdColumn}));
    this->tableNOISE_WIDTH->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"NOISE_WIDTH_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableNOISE_WIDTH->NOISE_WIDTH_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->NOISE_WIDTH_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"LEARNING_RATE_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLEARNING_RATE->LEARNING_RATE_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->LEARNING_RATE_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"KP_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKP->KP_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->KP_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"KI_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKI->KI_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->KI_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"KD_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKD->KD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->KD_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"VS_RtGnSp_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_RtGnSp->VS_RtGnSp_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_RtGnSp_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"VS_SlPc_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_SlPc->VS_SlPc_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_SlPc_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"VS_Rgn2K_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn2K->VS_Rgn2K_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_Rgn2K_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"VS_Rgn2Sp_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn2Sp->VS_Rgn2Sp_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_Rgn2Sp_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"VS_CtInSp_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_CtInSp->VS_CtInSp_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_CtInSp_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"VS_RtPwr_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_RtPwr->VS_RtPwr_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_RtPwr_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"VS_Rgn3MP_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn3MP->VS_Rgn3MP_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_Rgn3MP_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"PC_KI_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KI->PC_KI_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->PC_KI_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"PC_KK_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KK->PC_KK_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->PC_KK_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"PC_KP_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KP->PC_KP_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->PC_KP_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"PC_RefSpd_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_RefSpd->PC_RefSpd_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->PC_RefSpd_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"A_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableA->A_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->A_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"K_alpha_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableK_alpha->K_alpha_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->K_alpha_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"P_s_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableP_s->P_s_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->P_s_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"C_0_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableC_0->C_0_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->C_0_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"K_t_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableK_t->K_t_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->K_t_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"J_t_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableJ_t->J_t_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->J_t_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"vfa_LEARNING_RATE", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevfa->vfa_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLEARNING_RATE->vfa_IdColumn}));
    this->tableLEARNING_RATE->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TD-Lambda_LEARNING_RATE", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TD_Lambda->_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLEARNING_RATE->_TD_Lambda_IdColumn}));
    this->tableLEARNING_RATE->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"True-Online-TD-Lambda_LEARNING_RATE", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_True_Online_TD_Lambda->_True_Online_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLEARNING_RATE->_True_Online_TD_Lambda_IdColumn}));
    this->tableLEARNING_RATE->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TDC-Lambda_LEARNING_RATE", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TDC_Lambda->_TDC_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLEARNING_RATE->_TDC_Lambda_IdColumn}));
    this->tableLEARNING_RATE->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"vfa_RBF_GRID", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevfa->vfa_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRBF_GRID->vfa_IdColumn}));
    this->tableRBF_GRID->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"RBF_GRID_dimension", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRBF_GRID->RBF_GRID_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledimension->RBF_GRID_IdColumn}));
    this->tabledimension->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"actor_PID", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableactor->actor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePID->actor_IdColumn}));
    this->tablePID->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"controller_PID", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontroller->controller_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePID->controller_IdColumn}));
    this->tablePID->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"PID_KP", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePID->PID_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKP->PID_IdColumn}));
    this->tableKP->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"vidal_KP", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->vidal_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKP->vidal_IdColumn}));
    this->tableKP->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"boukhezzar_KP", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->boukhezzar_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKP->boukhezzar_IdColumn}));
    this->tableKP->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"PID_KI", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePID->PID_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKI->PID_IdColumn}));
    this->tableKI->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"vidal_KI", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->vidal_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKI->vidal_IdColumn}));
    this->tableKI->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"boukhezzar_KI", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->boukhezzar_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKI->boukhezzar_IdColumn}));
    this->tableKI->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"PID_KD", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePID->PID_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKD->PID_IdColumn}));
    this->tableKD->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"actor_LQR", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableactor->actor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLQR->actor_IdColumn}));
    this->tableLQR->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"controller_LQR", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontroller->controller_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLQR->controller_IdColumn}));
    this->tableLQR->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"LQR_LQR-GAIN", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLQR->LQR_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_LQR_GAIN->LQR_IdColumn}));
    this->table_LQR_GAIN->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"actor_jonkman", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableactor->actor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->actor_IdColumn}));
    this->tablejonkman->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"controller_jonkman", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontroller->controller_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->controller_IdColumn}));
    this->tablejonkman->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_VS_RtGnSp", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_RtGnSp->jonkman_IdColumn}));
    this->tableVS_RtGnSp->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_VS_SlPc", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_SlPc->jonkman_IdColumn}));
    this->tableVS_SlPc->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_VS_Rgn2K", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn2K->jonkman_IdColumn}));
    this->tableVS_Rgn2K->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_VS_Rgn2Sp", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn2Sp->jonkman_IdColumn}));
    this->tableVS_Rgn2Sp->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_VS_CtInSp", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_CtInSp->jonkman_IdColumn}));
    this->tableVS_CtInSp->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_VS_RtPwr", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_RtPwr->jonkman_IdColumn}));
    this->tableVS_RtPwr->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_VS_Rgn3MP", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn3MP->jonkman_IdColumn}));
    this->tableVS_Rgn3MP->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_PC_KI", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KI->jonkman_IdColumn}));
    this->tablePC_KI->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_PC_KK", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KK->jonkman_IdColumn}));
    this->tablePC_KK->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_PC_KP", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KP->jonkman_IdColumn}));
    this->tablePC_KP->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_PC_RefSpd", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_RefSpd->jonkman_IdColumn}));
    this->tablePC_RefSpd->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"actor_vidal", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableactor->actor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->actor_IdColumn}));
    this->tablevidal->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"controller_vidal", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontroller->controller_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->controller_IdColumn}));
    this->tablevidal->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"vidal_A", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->vidal_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableA->vidal_IdColumn}));
    this->tableA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"vidal_K_alpha", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->vidal_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableK_alpha->vidal_IdColumn}));
    this->tableK_alpha->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"vidal_P_s", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->vidal_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableP_s->vidal_IdColumn}));
    this->tableP_s->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"actor_boukhezzar", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableactor->actor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->actor_IdColumn}));
    this->tableboukhezzar->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"controller_boukhezzar", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontroller->controller_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->controller_IdColumn}));
    this->tableboukhezzar->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"boukhezzar_C_0", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->boukhezzar_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableC_0->boukhezzar_IdColumn}));
    this->tableC_0->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"boukhezzar_K_t", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->boukhezzar_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableK_t->boukhezzar_IdColumn}));
    this->tableK_t->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"boukhezzar_J_t", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->boukhezzar_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableJ_t->boukhezzar_IdColumn}));
    this->tableJ_t->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"SIMGOD_critic", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSIMGOD->SIMGOD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecritic->SIMGOD_IdColumn}));
    this->tablecritic->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"critic_TD-Lambda", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecritic->critic_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TD_Lambda->critic_IdColumn}));
    this->table_TD_Lambda->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"critic_True-Online-TD-Lambda", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecritic->critic_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_True_Online_TD_Lambda->critic_IdColumn}));
    this->table_True_Online_TD_Lambda->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"critic_TDC-Lambda", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecritic->critic_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TDC_Lambda->critic_IdColumn}));
    this->table_TDC_Lambda->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"SIMGOD_controller", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSIMGOD->SIMGOD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontroller->SIMGOD_IdColumn}));
    this->tablecontroller->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    this->relationEXPERIMENT_LOG = (gcnew ::System::Data::DataRelation(L"EXPERIMENT_LOG", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXPERIMENT->EXPERIMENT_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLOG->EXPERIMENT_IdColumn}, false));
    this->relationEXPERIMENT_LOG->Nested = true;
    this->Relations->Add(this->relationEXPERIMENT_LOG);
    this->relationWORLD_reward = (gcnew ::System::Data::DataRelation(L"WORLD_reward", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWORLD->WORLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablereward->WORLD_IdColumn}, false));
    this->relationWORLD_reward->Nested = true;
    this->Relations->Add(this->relationWORLD_reward);
    this->_relationreward_reward_component = (gcnew ::System::Data::DataRelation(L"reward_reward-component", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablereward->reward_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_reward_component->reward_IdColumn}, false));
    this->_relationreward_reward_component->Nested = true;
    this->Relations->Add(this->_relationreward_reward_component);
    this->_relationWORLD_wind_turbine = (gcnew ::System::Data::DataRelation(L"WORLD_wind-turbine", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWORLD->WORLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_wind_turbine->WORLD_IdColumn}, false));
    this->_relationWORLD_wind_turbine->Nested = true;
    this->Relations->Add(this->_relationWORLD_wind_turbine);
    this->_relationwind_turbine_TRAINING_WIND_DATA_FILES = (gcnew ::System::Data::DataRelation(L"wind-turbine_TRAINING_WIND_DATA_FILES", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_wind_turbine->_wind_turbine_IdColumn}, gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTRAINING_WIND_DATA_FILES->_wind_turbine_IdColumn}, 
        false));
    this->_relationwind_turbine_TRAINING_WIND_DATA_FILES->Nested = true;
    this->Relations->Add(this->_relationwind_turbine_TRAINING_WIND_DATA_FILES);
    this->_relationWORLD_magnetic_levitation = (gcnew ::System::Data::DataRelation(L"WORLD_magnetic-levitation", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWORLD->WORLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_magnetic_levitation->WORLD_IdColumn}, false));
    this->_relationWORLD_magnetic_levitation->Nested = true;
    this->Relations->Add(this->_relationWORLD_magnetic_levitation);
    this->relationWORLD_pitch = (gcnew ::System::Data::DataRelation(L"WORLD_pitch", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWORLD->WORLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepitch->WORLD_IdColumn}, false));
    this->relationWORLD_pitch->Nested = true;
    this->Relations->Add(this->relationWORLD_pitch);
    this->_relationWORLD_underwater_vehicle = (gcnew ::System::Data::DataRelation(L"WORLD_underwater-vehicle", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWORLD->WORLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_underwater_vehicle->WORLD_IdColumn}, false));
    this->_relationWORLD_underwater_vehicle->Nested = true;
    this->Relations->Add(this->_relationWORLD_underwater_vehicle);
    this->relationSIMGOD_actor = (gcnew ::System::Data::DataRelation(L"SIMGOD_actor", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSIMGOD->SIMGOD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableactor->SIMGOD_IdColumn}, false));
    this->relationSIMGOD_actor->Nested = true;
    this->Relations->Add(this->relationSIMGOD_actor);
    this->relationactor_CACLA = (gcnew ::System::Data::DataRelation(L"actor_CACLA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableactor->actor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCACLA->actor_IdColumn}, false));
    this->relationactor_CACLA->Nested = true;
    this->Relations->Add(this->relationactor_CACLA);
    this->relationcontroller_CACLA = (gcnew ::System::Data::DataRelation(L"controller_CACLA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontroller->controller_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCACLA->controller_IdColumn}, false));
    this->relationcontroller_CACLA->Nested = true;
    this->Relations->Add(this->relationcontroller_CACLA);
    this->relationCACLA_vfa = (gcnew ::System::Data::DataRelation(L"CACLA_vfa", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCACLA->CACLA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevfa->CACLA_IdColumn}, false));
    this->relationCACLA_vfa->Nested = true;
    this->Relations->Add(this->relationCACLA_vfa);
    this->_relationTD_Lambda_vfa = (gcnew ::System::Data::DataRelation(L"TD-Lambda_vfa", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TD_Lambda->_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevfa->_TD_Lambda_IdColumn}, false));
    this->_relationTD_Lambda_vfa->Nested = true;
    this->Relations->Add(this->_relationTD_Lambda_vfa);
    this->_relationTrue_Online_TD_Lambda_vfa = (gcnew ::System::Data::DataRelation(L"True-Online-TD-Lambda_vfa", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_True_Online_TD_Lambda->_True_Online_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevfa->_True_Online_TD_Lambda_IdColumn}, false));
    this->_relationTrue_Online_TD_Lambda_vfa->Nested = true;
    this->Relations->Add(this->_relationTrue_Online_TD_Lambda_vfa);
    this->_relationTDC_Lambda_vfa = (gcnew ::System::Data::DataRelation(L"TDC-Lambda_vfa", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TDC_Lambda->_TDC_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevfa->_TDC_Lambda_IdColumn}, false));
    this->_relationTDC_Lambda_vfa->Nested = true;
    this->Relations->Add(this->_relationTDC_Lambda_vfa);
    this->relationvfa_NOISE_WIDTH = (gcnew ::System::Data::DataRelation(L"vfa_NOISE_WIDTH", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevfa->vfa_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableNOISE_WIDTH->vfa_IdColumn}, false));
    this->relationvfa_NOISE_WIDTH->Nested = true;
    this->Relations->Add(this->relationvfa_NOISE_WIDTH);
    this->relationNOISE_WIDTH_schedule = (gcnew ::System::Data::DataRelation(L"NOISE_WIDTH_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableNOISE_WIDTH->NOISE_WIDTH_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->NOISE_WIDTH_IdColumn}, false));
    this->relationNOISE_WIDTH_schedule->Nested = true;
    this->Relations->Add(this->relationNOISE_WIDTH_schedule);
    this->relationLEARNING_RATE_schedule = (gcnew ::System::Data::DataRelation(L"LEARNING_RATE_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLEARNING_RATE->LEARNING_RATE_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->LEARNING_RATE_IdColumn}, false));
    this->relationLEARNING_RATE_schedule->Nested = true;
    this->Relations->Add(this->relationLEARNING_RATE_schedule);
    this->relationKP_schedule = (gcnew ::System::Data::DataRelation(L"KP_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKP->KP_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->KP_IdColumn}, false));
    this->relationKP_schedule->Nested = true;
    this->Relations->Add(this->relationKP_schedule);
    this->relationKI_schedule = (gcnew ::System::Data::DataRelation(L"KI_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKI->KI_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->KI_IdColumn}, false));
    this->relationKI_schedule->Nested = true;
    this->Relations->Add(this->relationKI_schedule);
    this->relationKD_schedule = (gcnew ::System::Data::DataRelation(L"KD_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKD->KD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->KD_IdColumn}, false));
    this->relationKD_schedule->Nested = true;
    this->Relations->Add(this->relationKD_schedule);
    this->relationVS_RtGnSp_schedule = (gcnew ::System::Data::DataRelation(L"VS_RtGnSp_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_RtGnSp->VS_RtGnSp_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_RtGnSp_IdColumn}, false));
    this->relationVS_RtGnSp_schedule->Nested = true;
    this->Relations->Add(this->relationVS_RtGnSp_schedule);
    this->relationVS_SlPc_schedule = (gcnew ::System::Data::DataRelation(L"VS_SlPc_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_SlPc->VS_SlPc_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_SlPc_IdColumn}, false));
    this->relationVS_SlPc_schedule->Nested = true;
    this->Relations->Add(this->relationVS_SlPc_schedule);
    this->relationVS_Rgn2K_schedule = (gcnew ::System::Data::DataRelation(L"VS_Rgn2K_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn2K->VS_Rgn2K_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_Rgn2K_IdColumn}, false));
    this->relationVS_Rgn2K_schedule->Nested = true;
    this->Relations->Add(this->relationVS_Rgn2K_schedule);
    this->relationVS_Rgn2Sp_schedule = (gcnew ::System::Data::DataRelation(L"VS_Rgn2Sp_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn2Sp->VS_Rgn2Sp_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_Rgn2Sp_IdColumn}, false));
    this->relationVS_Rgn2Sp_schedule->Nested = true;
    this->Relations->Add(this->relationVS_Rgn2Sp_schedule);
    this->relationVS_CtInSp_schedule = (gcnew ::System::Data::DataRelation(L"VS_CtInSp_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_CtInSp->VS_CtInSp_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_CtInSp_IdColumn}, false));
    this->relationVS_CtInSp_schedule->Nested = true;
    this->Relations->Add(this->relationVS_CtInSp_schedule);
    this->relationVS_RtPwr_schedule = (gcnew ::System::Data::DataRelation(L"VS_RtPwr_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_RtPwr->VS_RtPwr_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_RtPwr_IdColumn}, false));
    this->relationVS_RtPwr_schedule->Nested = true;
    this->Relations->Add(this->relationVS_RtPwr_schedule);
    this->relationVS_Rgn3MP_schedule = (gcnew ::System::Data::DataRelation(L"VS_Rgn3MP_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn3MP->VS_Rgn3MP_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_Rgn3MP_IdColumn}, false));
    this->relationVS_Rgn3MP_schedule->Nested = true;
    this->Relations->Add(this->relationVS_Rgn3MP_schedule);
    this->relationPC_KI_schedule = (gcnew ::System::Data::DataRelation(L"PC_KI_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KI->PC_KI_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->PC_KI_IdColumn}, false));
    this->relationPC_KI_schedule->Nested = true;
    this->Relations->Add(this->relationPC_KI_schedule);
    this->relationPC_KK_schedule = (gcnew ::System::Data::DataRelation(L"PC_KK_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KK->PC_KK_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->PC_KK_IdColumn}, false));
    this->relationPC_KK_schedule->Nested = true;
    this->Relations->Add(this->relationPC_KK_schedule);
    this->relationPC_KP_schedule = (gcnew ::System::Data::DataRelation(L"PC_KP_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KP->PC_KP_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->PC_KP_IdColumn}, false));
    this->relationPC_KP_schedule->Nested = true;
    this->Relations->Add(this->relationPC_KP_schedule);
    this->relationPC_RefSpd_schedule = (gcnew ::System::Data::DataRelation(L"PC_RefSpd_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_RefSpd->PC_RefSpd_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->PC_RefSpd_IdColumn}, false));
    this->relationPC_RefSpd_schedule->Nested = true;
    this->Relations->Add(this->relationPC_RefSpd_schedule);
    this->relationA_schedule = (gcnew ::System::Data::DataRelation(L"A_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableA->A_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->A_IdColumn}, false));
    this->relationA_schedule->Nested = true;
    this->Relations->Add(this->relationA_schedule);
    this->relationK_alpha_schedule = (gcnew ::System::Data::DataRelation(L"K_alpha_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableK_alpha->K_alpha_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->K_alpha_IdColumn}, false));
    this->relationK_alpha_schedule->Nested = true;
    this->Relations->Add(this->relationK_alpha_schedule);
    this->relationP_s_schedule = (gcnew ::System::Data::DataRelation(L"P_s_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableP_s->P_s_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->P_s_IdColumn}, false));
    this->relationP_s_schedule->Nested = true;
    this->Relations->Add(this->relationP_s_schedule);
    this->relationC_0_schedule = (gcnew ::System::Data::DataRelation(L"C_0_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableC_0->C_0_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->C_0_IdColumn}, false));
    this->relationC_0_schedule->Nested = true;
    this->Relations->Add(this->relationC_0_schedule);
    this->relationK_t_schedule = (gcnew ::System::Data::DataRelation(L"K_t_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableK_t->K_t_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->K_t_IdColumn}, false));
    this->relationK_t_schedule->Nested = true;
    this->Relations->Add(this->relationK_t_schedule);
    this->relationJ_t_schedule = (gcnew ::System::Data::DataRelation(L"J_t_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableJ_t->J_t_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->J_t_IdColumn}, false));
    this->relationJ_t_schedule->Nested = true;
    this->Relations->Add(this->relationJ_t_schedule);
    this->relationvfa_LEARNING_RATE = (gcnew ::System::Data::DataRelation(L"vfa_LEARNING_RATE", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevfa->vfa_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLEARNING_RATE->vfa_IdColumn}, false));
    this->relationvfa_LEARNING_RATE->Nested = true;
    this->Relations->Add(this->relationvfa_LEARNING_RATE);
    this->_relationTD_Lambda_LEARNING_RATE = (gcnew ::System::Data::DataRelation(L"TD-Lambda_LEARNING_RATE", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TD_Lambda->_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLEARNING_RATE->_TD_Lambda_IdColumn}, false));
    this->_relationTD_Lambda_LEARNING_RATE->Nested = true;
    this->Relations->Add(this->_relationTD_Lambda_LEARNING_RATE);
    this->_relationTrue_Online_TD_Lambda_LEARNING_RATE = (gcnew ::System::Data::DataRelation(L"True-Online-TD-Lambda_LEARNING_RATE", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_True_Online_TD_Lambda->_True_Online_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLEARNING_RATE->_True_Online_TD_Lambda_IdColumn}, false));
    this->_relationTrue_Online_TD_Lambda_LEARNING_RATE->Nested = true;
    this->Relations->Add(this->_relationTrue_Online_TD_Lambda_LEARNING_RATE);
    this->_relationTDC_Lambda_LEARNING_RATE = (gcnew ::System::Data::DataRelation(L"TDC-Lambda_LEARNING_RATE", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TDC_Lambda->_TDC_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLEARNING_RATE->_TDC_Lambda_IdColumn}, false));
    this->_relationTDC_Lambda_LEARNING_RATE->Nested = true;
    this->Relations->Add(this->_relationTDC_Lambda_LEARNING_RATE);
    this->relationvfa_RBF_GRID = (gcnew ::System::Data::DataRelation(L"vfa_RBF_GRID", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevfa->vfa_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRBF_GRID->vfa_IdColumn}, false));
    this->relationvfa_RBF_GRID->Nested = true;
    this->Relations->Add(this->relationvfa_RBF_GRID);
    this->relationRBF_GRID_dimension = (gcnew ::System::Data::DataRelation(L"RBF_GRID_dimension", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRBF_GRID->RBF_GRID_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledimension->RBF_GRID_IdColumn}, false));
    this->relationRBF_GRID_dimension->Nested = true;
    this->Relations->Add(this->relationRBF_GRID_dimension);
    this->relationactor_PID = (gcnew ::System::Data::DataRelation(L"actor_PID", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableactor->actor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePID->actor_IdColumn}, false));
    this->relationactor_PID->Nested = true;
    this->Relations->Add(this->relationactor_PID);
    this->relationcontroller_PID = (gcnew ::System::Data::DataRelation(L"controller_PID", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontroller->controller_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePID->controller_IdColumn}, false));
    this->relationcontroller_PID->Nested = true;
    this->Relations->Add(this->relationcontroller_PID);
    this->relationPID_KP = (gcnew ::System::Data::DataRelation(L"PID_KP", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePID->PID_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKP->PID_IdColumn}, false));
    this->relationPID_KP->Nested = true;
    this->Relations->Add(this->relationPID_KP);
    this->relationvidal_KP = (gcnew ::System::Data::DataRelation(L"vidal_KP", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->vidal_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKP->vidal_IdColumn}, false));
    this->relationvidal_KP->Nested = true;
    this->Relations->Add(this->relationvidal_KP);
    this->relationboukhezzar_KP = (gcnew ::System::Data::DataRelation(L"boukhezzar_KP", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->boukhezzar_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKP->boukhezzar_IdColumn}, false));
    this->relationboukhezzar_KP->Nested = true;
    this->Relations->Add(this->relationboukhezzar_KP);
    this->relationPID_KI = (gcnew ::System::Data::DataRelation(L"PID_KI", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePID->PID_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKI->PID_IdColumn}, false));
    this->relationPID_KI->Nested = true;
    this->Relations->Add(this->relationPID_KI);
    this->relationvidal_KI = (gcnew ::System::Data::DataRelation(L"vidal_KI", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->vidal_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKI->vidal_IdColumn}, false));
    this->relationvidal_KI->Nested = true;
    this->Relations->Add(this->relationvidal_KI);
    this->relationboukhezzar_KI = (gcnew ::System::Data::DataRelation(L"boukhezzar_KI", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->boukhezzar_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKI->boukhezzar_IdColumn}, false));
    this->relationboukhezzar_KI->Nested = true;
    this->Relations->Add(this->relationboukhezzar_KI);
    this->relationPID_KD = (gcnew ::System::Data::DataRelation(L"PID_KD", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePID->PID_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKD->PID_IdColumn}, false));
    this->relationPID_KD->Nested = true;
    this->Relations->Add(this->relationPID_KD);
    this->relationactor_LQR = (gcnew ::System::Data::DataRelation(L"actor_LQR", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableactor->actor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLQR->actor_IdColumn}, false));
    this->relationactor_LQR->Nested = true;
    this->Relations->Add(this->relationactor_LQR);
    this->relationcontroller_LQR = (gcnew ::System::Data::DataRelation(L"controller_LQR", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontroller->controller_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLQR->controller_IdColumn}, false));
    this->relationcontroller_LQR->Nested = true;
    this->Relations->Add(this->relationcontroller_LQR);
    this->_relationLQR_LQR_GAIN = (gcnew ::System::Data::DataRelation(L"LQR_LQR-GAIN", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLQR->LQR_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_LQR_GAIN->LQR_IdColumn}, false));
    this->_relationLQR_LQR_GAIN->Nested = true;
    this->Relations->Add(this->_relationLQR_LQR_GAIN);
    this->relationactor_jonkman = (gcnew ::System::Data::DataRelation(L"actor_jonkman", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableactor->actor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->actor_IdColumn}, false));
    this->relationactor_jonkman->Nested = true;
    this->Relations->Add(this->relationactor_jonkman);
    this->relationcontroller_jonkman = (gcnew ::System::Data::DataRelation(L"controller_jonkman", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontroller->controller_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->controller_IdColumn}, false));
    this->relationcontroller_jonkman->Nested = true;
    this->Relations->Add(this->relationcontroller_jonkman);
    this->relationjonkman_VS_RtGnSp = (gcnew ::System::Data::DataRelation(L"jonkman_VS_RtGnSp", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_RtGnSp->jonkman_IdColumn}, false));
    this->relationjonkman_VS_RtGnSp->Nested = true;
    this->Relations->Add(this->relationjonkman_VS_RtGnSp);
    this->relationjonkman_VS_SlPc = (gcnew ::System::Data::DataRelation(L"jonkman_VS_SlPc", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_SlPc->jonkman_IdColumn}, false));
    this->relationjonkman_VS_SlPc->Nested = true;
    this->Relations->Add(this->relationjonkman_VS_SlPc);
    this->relationjonkman_VS_Rgn2K = (gcnew ::System::Data::DataRelation(L"jonkman_VS_Rgn2K", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn2K->jonkman_IdColumn}, false));
    this->relationjonkman_VS_Rgn2K->Nested = true;
    this->Relations->Add(this->relationjonkman_VS_Rgn2K);
    this->relationjonkman_VS_Rgn2Sp = (gcnew ::System::Data::DataRelation(L"jonkman_VS_Rgn2Sp", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn2Sp->jonkman_IdColumn}, false));
    this->relationjonkman_VS_Rgn2Sp->Nested = true;
    this->Relations->Add(this->relationjonkman_VS_Rgn2Sp);
    this->relationjonkman_VS_CtInSp = (gcnew ::System::Data::DataRelation(L"jonkman_VS_CtInSp", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_CtInSp->jonkman_IdColumn}, false));
    this->relationjonkman_VS_CtInSp->Nested = true;
    this->Relations->Add(this->relationjonkman_VS_CtInSp);
    this->relationjonkman_VS_RtPwr = (gcnew ::System::Data::DataRelation(L"jonkman_VS_RtPwr", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_RtPwr->jonkman_IdColumn}, false));
    this->relationjonkman_VS_RtPwr->Nested = true;
    this->Relations->Add(this->relationjonkman_VS_RtPwr);
    this->relationjonkman_VS_Rgn3MP = (gcnew ::System::Data::DataRelation(L"jonkman_VS_Rgn3MP", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn3MP->jonkman_IdColumn}, false));
    this->relationjonkman_VS_Rgn3MP->Nested = true;
    this->Relations->Add(this->relationjonkman_VS_Rgn3MP);
    this->relationjonkman_PC_KI = (gcnew ::System::Data::DataRelation(L"jonkman_PC_KI", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KI->jonkman_IdColumn}, false));
    this->relationjonkman_PC_KI->Nested = true;
    this->Relations->Add(this->relationjonkman_PC_KI);
    this->relationjonkman_PC_KK = (gcnew ::System::Data::DataRelation(L"jonkman_PC_KK", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KK->jonkman_IdColumn}, false));
    this->relationjonkman_PC_KK->Nested = true;
    this->Relations->Add(this->relationjonkman_PC_KK);
    this->relationjonkman_PC_KP = (gcnew ::System::Data::DataRelation(L"jonkman_PC_KP", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KP->jonkman_IdColumn}, false));
    this->relationjonkman_PC_KP->Nested = true;
    this->Relations->Add(this->relationjonkman_PC_KP);
    this->relationjonkman_PC_RefSpd = (gcnew ::System::Data::DataRelation(L"jonkman_PC_RefSpd", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_RefSpd->jonkman_IdColumn}, false));
    this->relationjonkman_PC_RefSpd->Nested = true;
    this->Relations->Add(this->relationjonkman_PC_RefSpd);
    this->relationactor_vidal = (gcnew ::System::Data::DataRelation(L"actor_vidal", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableactor->actor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->actor_IdColumn}, false));
    this->relationactor_vidal->Nested = true;
    this->Relations->Add(this->relationactor_vidal);
    this->relationcontroller_vidal = (gcnew ::System::Data::DataRelation(L"controller_vidal", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontroller->controller_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->controller_IdColumn}, false));
    this->relationcontroller_vidal->Nested = true;
    this->Relations->Add(this->relationcontroller_vidal);
    this->relationvidal_A = (gcnew ::System::Data::DataRelation(L"vidal_A", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->vidal_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableA->vidal_IdColumn}, false));
    this->relationvidal_A->Nested = true;
    this->Relations->Add(this->relationvidal_A);
    this->relationvidal_K_alpha = (gcnew ::System::Data::DataRelation(L"vidal_K_alpha", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->vidal_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableK_alpha->vidal_IdColumn}, false));
    this->relationvidal_K_alpha->Nested = true;
    this->Relations->Add(this->relationvidal_K_alpha);
    this->relationvidal_P_s = (gcnew ::System::Data::DataRelation(L"vidal_P_s", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->vidal_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableP_s->vidal_IdColumn}, false));
    this->relationvidal_P_s->Nested = true;
    this->Relations->Add(this->relationvidal_P_s);
    this->relationactor_boukhezzar = (gcnew ::System::Data::DataRelation(L"actor_boukhezzar", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableactor->actor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->actor_IdColumn}, false));
    this->relationactor_boukhezzar->Nested = true;
    this->Relations->Add(this->relationactor_boukhezzar);
    this->relationcontroller_boukhezzar = (gcnew ::System::Data::DataRelation(L"controller_boukhezzar", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontroller->controller_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->controller_IdColumn}, false));
    this->relationcontroller_boukhezzar->Nested = true;
    this->Relations->Add(this->relationcontroller_boukhezzar);
    this->relationboukhezzar_C_0 = (gcnew ::System::Data::DataRelation(L"boukhezzar_C_0", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->boukhezzar_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableC_0->boukhezzar_IdColumn}, false));
    this->relationboukhezzar_C_0->Nested = true;
    this->Relations->Add(this->relationboukhezzar_C_0);
    this->relationboukhezzar_K_t = (gcnew ::System::Data::DataRelation(L"boukhezzar_K_t", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->boukhezzar_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableK_t->boukhezzar_IdColumn}, false));
    this->relationboukhezzar_K_t->Nested = true;
    this->Relations->Add(this->relationboukhezzar_K_t);
    this->relationboukhezzar_J_t = (gcnew ::System::Data::DataRelation(L"boukhezzar_J_t", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->boukhezzar_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableJ_t->boukhezzar_IdColumn}, false));
    this->relationboukhezzar_J_t->Nested = true;
    this->Relations->Add(this->relationboukhezzar_J_t);
    this->relationSIMGOD_critic = (gcnew ::System::Data::DataRelation(L"SIMGOD_critic", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSIMGOD->SIMGOD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecritic->SIMGOD_IdColumn}, false));
    this->relationSIMGOD_critic->Nested = true;
    this->Relations->Add(this->relationSIMGOD_critic);
    this->_relationcritic_TD_Lambda = (gcnew ::System::Data::DataRelation(L"critic_TD-Lambda", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecritic->critic_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TD_Lambda->critic_IdColumn}, false));
    this->_relationcritic_TD_Lambda->Nested = true;
    this->Relations->Add(this->_relationcritic_TD_Lambda);
    this->_relationcritic_True_Online_TD_Lambda = (gcnew ::System::Data::DataRelation(L"critic_True-Online-TD-Lambda", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecritic->critic_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_True_Online_TD_Lambda->critic_IdColumn}, false));
    this->_relationcritic_True_Online_TD_Lambda->Nested = true;
    this->Relations->Add(this->_relationcritic_True_Online_TD_Lambda);
    this->_relationcritic_TDC_Lambda = (gcnew ::System::Data::DataRelation(L"critic_TDC-Lambda", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecritic->critic_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TDC_Lambda->critic_IdColumn}, false));
    this->_relationcritic_TDC_Lambda->Nested = true;
    this->Relations->Add(this->_relationcritic_TDC_Lambda);
    this->relationSIMGOD_controller = (gcnew ::System::Data::DataRelation(L"SIMGOD_controller", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSIMGOD->SIMGOD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecontroller->SIMGOD_IdColumn}, false));
    this->relationSIMGOD_controller->Nested = true;
    this->Relations->Add(this->relationSIMGOD_controller);
}

inline ::System::Boolean NewDataSet::ShouldSerializeEXPERIMENT() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeLOG() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeWORLD() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializereward() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerialize_reward_component() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerialize_wind_turbine() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeTRAINING_WIND_DATA_FILES() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerialize_magnetic_levitation() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializepitch() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerialize_underwater_vehicle() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeSIMGOD() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeactor() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeCACLA() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializevfa() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeNOISE_WIDTH() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeschedule() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeLEARNING_RATE() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeRBF_GRID() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializedimension() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializePID() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeKP() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeKI() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeKD() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeLQR() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerialize_LQR_GAIN() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializejonkman() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeVS_RtGnSp() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeVS_SlPc() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeVS_Rgn2K() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeVS_Rgn2Sp() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeVS_CtInSp() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeVS_RtPwr() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeVS_Rgn3MP() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializePC_KI() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializePC_KK() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializePC_KP() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializePC_RefSpd() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializevidal() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeA() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeK_alpha() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeP_s() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeboukhezzar() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeC_0() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeK_t() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeJ_t() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializecritic() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerialize_TD_Lambda() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerialize_True_Online_TD_Lambda() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerialize_TDC_Lambda() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializecontroller() {
    return false;
}

inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
    if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any->Namespace = ds->Namespace;
    sequence->Items->Add(any);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::EXPERIMENTDataTable::EXPERIMENTDataTable() {
    this->TableName = L"EXPERIMENT";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::EXPERIMENTDataTable::EXPERIMENTDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::EXPERIMENTDataTable::EXPERIMENTDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::EXPERIMENTDataTable::NUM_EPISODESColumn::get() {
    return this->columnNUM_EPISODES;
}

inline ::System::Data::DataColumn^  NewDataSet::EXPERIMENTDataTable::EPISODE_LENGTHColumn::get() {
    return this->columnEPISODE_LENGTH;
}

inline ::System::Data::DataColumn^  NewDataSet::EXPERIMENTDataTable::RANDOM_SEEDColumn::get() {
    return this->columnRANDOM_SEED;
}

inline ::System::Data::DataColumn^  NewDataSet::EXPERIMENTDataTable::EVAL_FREQColumn::get() {
    return this->columnEVAL_FREQ;
}

inline ::System::Data::DataColumn^  NewDataSet::EXPERIMENTDataTable::EXPERIMENT_IdColumn::get() {
    return this->columnEXPERIMENT_Id;
}

inline ::System::Int32 NewDataSet::EXPERIMENTDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::EXPERIMENTRow^  NewDataSet::EXPERIMENTDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::EXPERIMENTRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::EXPERIMENTDataTable::AddEXPERIMENTRow(NewDataSet::EXPERIMENTRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::EXPERIMENTRow^  NewDataSet::EXPERIMENTDataTable::AddEXPERIMENTRow(System::Int64 NUM_EPISODES, System::Int64 EPISODE_LENGTH, 
            System::Int64 RANDOM_SEED, System::Int64 EVAL_FREQ) {
    NewDataSet::EXPERIMENTRow^  rowEXPERIMENTRow = (cli::safe_cast<NewDataSet::EXPERIMENTRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {NUM_EPISODES, EPISODE_LENGTH, 
        RANDOM_SEED, EVAL_FREQ, nullptr};
    rowEXPERIMENTRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowEXPERIMENTRow);
    return rowEXPERIMENTRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::EXPERIMENTDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::EXPERIMENTDataTable::Clone() {
    NewDataSet::EXPERIMENTDataTable^  cln = (cli::safe_cast<NewDataSet::EXPERIMENTDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::EXPERIMENTDataTable::CreateInstance() {
    return (gcnew NewDataSet::EXPERIMENTDataTable());
}

inline ::System::Void NewDataSet::EXPERIMENTDataTable::InitVars() {
    this->columnNUM_EPISODES = __super::Columns[L"NUM_EPISODES"];
    this->columnEPISODE_LENGTH = __super::Columns[L"EPISODE_LENGTH"];
    this->columnRANDOM_SEED = __super::Columns[L"RANDOM_SEED"];
    this->columnEVAL_FREQ = __super::Columns[L"EVAL_FREQ"];
    this->columnEXPERIMENT_Id = __super::Columns[L"EXPERIMENT_Id"];
}

inline ::System::Void NewDataSet::EXPERIMENTDataTable::InitClass() {
    this->columnNUM_EPISODES = (gcnew ::System::Data::DataColumn(L"NUM_EPISODES", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnNUM_EPISODES);
    this->columnEPISODE_LENGTH = (gcnew ::System::Data::DataColumn(L"EPISODE_LENGTH", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnEPISODE_LENGTH);
    this->columnRANDOM_SEED = (gcnew ::System::Data::DataColumn(L"RANDOM_SEED", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnRANDOM_SEED);
    this->columnEVAL_FREQ = (gcnew ::System::Data::DataColumn(L"EVAL_FREQ", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnEVAL_FREQ);
    this->columnEXPERIMENT_Id = (gcnew ::System::Data::DataColumn(L"EXPERIMENT_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnEXPERIMENT_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnEXPERIMENT_Id}, 
            true)));
    this->columnNUM_EPISODES->AllowDBNull = false;
    this->columnNUM_EPISODES->DefaultValue = static_cast<System::Int64>(1);
    this->columnEPISODE_LENGTH->AllowDBNull = false;
    this->columnRANDOM_SEED->AllowDBNull = false;
    this->columnEVAL_FREQ->AllowDBNull = false;
    this->columnEXPERIMENT_Id->AutoIncrement = true;
    this->columnEXPERIMENT_Id->AllowDBNull = false;
    this->columnEXPERIMENT_Id->Unique = true;
}

inline NewDataSet::EXPERIMENTRow^  NewDataSet::EXPERIMENTDataTable::NewEXPERIMENTRow() {
    return (cli::safe_cast<NewDataSet::EXPERIMENTRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::EXPERIMENTDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::EXPERIMENTRow(builder));
}

inline ::System::Type^  NewDataSet::EXPERIMENTDataTable::GetRowType() {
    return NewDataSet::EXPERIMENTRow::typeid;
}

inline ::System::Void NewDataSet::EXPERIMENTDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->EXPERIMENTRowChanged(this, (gcnew NewDataSet::EXPERIMENTRowChangeEvent((cli::safe_cast<NewDataSet::EXPERIMENTRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::EXPERIMENTDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->EXPERIMENTRowChanging(this, (gcnew NewDataSet::EXPERIMENTRowChangeEvent((cli::safe_cast<NewDataSet::EXPERIMENTRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::EXPERIMENTDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->EXPERIMENTRowDeleted(this, (gcnew NewDataSet::EXPERIMENTRowChangeEvent((cli::safe_cast<NewDataSet::EXPERIMENTRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::EXPERIMENTDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->EXPERIMENTRowDeleting(this, (gcnew NewDataSet::EXPERIMENTRowChangeEvent((cli::safe_cast<NewDataSet::EXPERIMENTRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::EXPERIMENTDataTable::RemoveEXPERIMENTRow(NewDataSet::EXPERIMENTRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::EXPERIMENTDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"EXPERIMENTDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::LOGDataTable::LOGDataTable() {
    this->TableName = L"LOG";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::LOGDataTable::LOGDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::LOGDataTable::LOGDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::LOGDataTable::FREQColumn::get() {
    return this->columnFREQ;
}

inline ::System::Data::DataColumn^  NewDataSet::LOGDataTable::OUTPUT_DIRColumn::get() {
    return this->columnOUTPUT_DIR;
}

inline ::System::Data::DataColumn^  NewDataSet::LOGDataTable::FILE_PREFIXColumn::get() {
    return this->columnFILE_PREFIX;
}

inline ::System::Data::DataColumn^  NewDataSet::LOGDataTable::EVALUATION_EPISODESColumn::get() {
    return this->columnEVALUATION_EPISODES;
}

inline ::System::Data::DataColumn^  NewDataSet::LOGDataTable::TRAINING_EPISODESColumn::get() {
    return this->columnTRAINING_EPISODES;
}

inline ::System::Data::DataColumn^  NewDataSet::LOGDataTable::EVALUATION_AVG_REWARDSColumn::get() {
    return this->columnEVALUATION_AVG_REWARDS;
}

inline ::System::Data::DataColumn^  NewDataSet::LOGDataTable::EXPERIMENT_IdColumn::get() {
    return this->columnEXPERIMENT_Id;
}

inline ::System::Int32 NewDataSet::LOGDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::LOGRow^  NewDataSet::LOGDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::LOGRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::LOGDataTable::AddLOGRow(NewDataSet::LOGRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::LOGRow^  NewDataSet::LOGDataTable::AddLOGRow(
            System::Decimal FREQ, 
            System::String^  OUTPUT_DIR, 
            System::Int64 FILE_PREFIX, 
            System::Boolean EVALUATION_EPISODES, 
            System::Boolean TRAINING_EPISODES, 
            System::Boolean EVALUATION_AVG_REWARDS, 
            NewDataSet::EXPERIMENTRow^  parentEXPERIMENTRowByEXPERIMENT_LOG) {
    NewDataSet::LOGRow^  rowLOGRow = (cli::safe_cast<NewDataSet::LOGRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(7) {FREQ, OUTPUT_DIR, FILE_PREFIX, 
        EVALUATION_EPISODES, TRAINING_EPISODES, EVALUATION_AVG_REWARDS, nullptr};
    if (parentEXPERIMENTRowByEXPERIMENT_LOG != nullptr) {
        columnValuesArray[6] = parentEXPERIMENTRowByEXPERIMENT_LOG[4];
    }
    rowLOGRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowLOGRow);
    return rowLOGRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::LOGDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::LOGDataTable::Clone() {
    NewDataSet::LOGDataTable^  cln = (cli::safe_cast<NewDataSet::LOGDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::LOGDataTable::CreateInstance() {
    return (gcnew NewDataSet::LOGDataTable());
}

inline ::System::Void NewDataSet::LOGDataTable::InitVars() {
    this->columnFREQ = __super::Columns[L"FREQ"];
    this->columnOUTPUT_DIR = __super::Columns[L"OUTPUT_DIR"];
    this->columnFILE_PREFIX = __super::Columns[L"FILE_PREFIX"];
    this->columnEVALUATION_EPISODES = __super::Columns[L"EVALUATION_EPISODES"];
    this->columnTRAINING_EPISODES = __super::Columns[L"TRAINING_EPISODES"];
    this->columnEVALUATION_AVG_REWARDS = __super::Columns[L"EVALUATION_AVG_REWARDS"];
    this->columnEXPERIMENT_Id = __super::Columns[L"EXPERIMENT_Id"];
}

inline ::System::Void NewDataSet::LOGDataTable::InitClass() {
    this->columnFREQ = (gcnew ::System::Data::DataColumn(L"FREQ", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnFREQ);
    this->columnOUTPUT_DIR = (gcnew ::System::Data::DataColumn(L"OUTPUT_DIR", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnOUTPUT_DIR);
    this->columnFILE_PREFIX = (gcnew ::System::Data::DataColumn(L"FILE_PREFIX", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnFILE_PREFIX);
    this->columnEVALUATION_EPISODES = (gcnew ::System::Data::DataColumn(L"EVALUATION_EPISODES", ::System::Boolean::typeid, nullptr, 
        ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnEVALUATION_EPISODES);
    this->columnTRAINING_EPISODES = (gcnew ::System::Data::DataColumn(L"TRAINING_EPISODES", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTRAINING_EPISODES);
    this->columnEVALUATION_AVG_REWARDS = (gcnew ::System::Data::DataColumn(L"EVALUATION_AVG_REWARDS", ::System::Boolean::typeid, 
        nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnEVALUATION_AVG_REWARDS);
    this->columnEXPERIMENT_Id = (gcnew ::System::Data::DataColumn(L"EXPERIMENT_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnEXPERIMENT_Id);
    this->columnFREQ->AllowDBNull = false;
    this->columnOUTPUT_DIR->AllowDBNull = false;
    this->columnFILE_PREFIX->AllowDBNull = false;
    this->columnEVALUATION_EPISODES->AllowDBNull = false;
    this->columnTRAINING_EPISODES->AllowDBNull = false;
    this->columnEVALUATION_AVG_REWARDS->AllowDBNull = false;
}

inline NewDataSet::LOGRow^  NewDataSet::LOGDataTable::NewLOGRow() {
    return (cli::safe_cast<NewDataSet::LOGRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::LOGDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::LOGRow(builder));
}

inline ::System::Type^  NewDataSet::LOGDataTable::GetRowType() {
    return NewDataSet::LOGRow::typeid;
}

inline ::System::Void NewDataSet::LOGDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->LOGRowChanged(this, (gcnew NewDataSet::LOGRowChangeEvent((cli::safe_cast<NewDataSet::LOGRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::LOGDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->LOGRowChanging(this, (gcnew NewDataSet::LOGRowChangeEvent((cli::safe_cast<NewDataSet::LOGRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::LOGDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->LOGRowDeleted(this, (gcnew NewDataSet::LOGRowChangeEvent((cli::safe_cast<NewDataSet::LOGRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::LOGDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->LOGRowDeleting(this, (gcnew NewDataSet::LOGRowChangeEvent((cli::safe_cast<NewDataSet::LOGRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::LOGDataTable::RemoveLOGRow(NewDataSet::LOGRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::LOGDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"LOGDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::WORLDDataTable::WORLDDataTable() {
    this->TableName = L"WORLD";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::WORLDDataTable::WORLDDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::WORLDDataTable::WORLDDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::WORLDDataTable::_dynamic_modelColumn::get() {
    return this->column_dynamic_model;
}

inline ::System::Data::DataColumn^  NewDataSet::WORLDDataTable::DELTA_TColumn::get() {
    return this->columnDELTA_T;
}

inline ::System::Data::DataColumn^  NewDataSet::WORLDDataTable::NUM_SIMULATION_STEPSColumn::get() {
    return this->columnNUM_SIMULATION_STEPS;
}

inline ::System::Data::DataColumn^  NewDataSet::WORLDDataTable::WORLD_IdColumn::get() {
    return this->columnWORLD_Id;
}

inline ::System::Int32 NewDataSet::WORLDDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::WORLDRow^  NewDataSet::WORLDDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::WORLDRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::WORLDDataTable::AddWORLDRow(NewDataSet::WORLDRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::WORLDRow^  NewDataSet::WORLDDataTable::AddWORLDRow(System::String^  _dynamic_model, System::Decimal DELTA_T, 
            System::Int64 NUM_SIMULATION_STEPS) {
    NewDataSet::WORLDRow^  rowWORLDRow = (cli::safe_cast<NewDataSet::WORLDRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {_dynamic_model, DELTA_T, 
        NUM_SIMULATION_STEPS, nullptr};
    rowWORLDRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowWORLDRow);
    return rowWORLDRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::WORLDDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::WORLDDataTable::Clone() {
    NewDataSet::WORLDDataTable^  cln = (cli::safe_cast<NewDataSet::WORLDDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::WORLDDataTable::CreateInstance() {
    return (gcnew NewDataSet::WORLDDataTable());
}

inline ::System::Void NewDataSet::WORLDDataTable::InitVars() {
    this->column_dynamic_model = __super::Columns[L"dynamic-model"];
    this->columnDELTA_T = __super::Columns[L"DELTA_T"];
    this->columnNUM_SIMULATION_STEPS = __super::Columns[L"NUM_SIMULATION_STEPS"];
    this->columnWORLD_Id = __super::Columns[L"WORLD_Id"];
}

inline ::System::Void NewDataSet::WORLDDataTable::InitClass() {
    this->column_dynamic_model = (gcnew ::System::Data::DataColumn(L"dynamic-model", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->column_dynamic_model);
    this->columnDELTA_T = (gcnew ::System::Data::DataColumn(L"DELTA_T", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnDELTA_T);
    this->columnNUM_SIMULATION_STEPS = (gcnew ::System::Data::DataColumn(L"NUM_SIMULATION_STEPS", ::System::Int64::typeid, nullptr, 
        ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnNUM_SIMULATION_STEPS);
    this->columnWORLD_Id = (gcnew ::System::Data::DataColumn(L"WORLD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnWORLD_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnWORLD_Id}, 
            true)));
    this->column_dynamic_model->AllowDBNull = false;
    this->columnDELTA_T->AllowDBNull = false;
    this->columnNUM_SIMULATION_STEPS->AllowDBNull = false;
    this->columnWORLD_Id->AutoIncrement = true;
    this->columnWORLD_Id->AllowDBNull = false;
    this->columnWORLD_Id->Unique = true;
}

inline NewDataSet::WORLDRow^  NewDataSet::WORLDDataTable::NewWORLDRow() {
    return (cli::safe_cast<NewDataSet::WORLDRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::WORLDDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::WORLDRow(builder));
}

inline ::System::Type^  NewDataSet::WORLDDataTable::GetRowType() {
    return NewDataSet::WORLDRow::typeid;
}

inline ::System::Void NewDataSet::WORLDDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->WORLDRowChanged(this, (gcnew NewDataSet::WORLDRowChangeEvent((cli::safe_cast<NewDataSet::WORLDRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::WORLDDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->WORLDRowChanging(this, (gcnew NewDataSet::WORLDRowChangeEvent((cli::safe_cast<NewDataSet::WORLDRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::WORLDDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->WORLDRowDeleted(this, (gcnew NewDataSet::WORLDRowChangeEvent((cli::safe_cast<NewDataSet::WORLDRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::WORLDDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->WORLDRowDeleting(this, (gcnew NewDataSet::WORLDRowChangeEvent((cli::safe_cast<NewDataSet::WORLDRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::WORLDDataTable::RemoveWORLDRow(NewDataSet::WORLDRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::WORLDDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"WORLDDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::rewardDataTable::rewardDataTable() {
    this->TableName = L"reward";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::rewardDataTable::rewardDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::rewardDataTable::rewardDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::rewardDataTable::MIN_REWARDColumn::get() {
    return this->columnMIN_REWARD;
}

inline ::System::Data::DataColumn^  NewDataSet::rewardDataTable::MAX_REWARDColumn::get() {
    return this->columnMAX_REWARD;
}

inline ::System::Data::DataColumn^  NewDataSet::rewardDataTable::reward_IdColumn::get() {
    return this->columnreward_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::rewardDataTable::WORLD_IdColumn::get() {
    return this->columnWORLD_Id;
}

inline ::System::Int32 NewDataSet::rewardDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::rewardRow^  NewDataSet::rewardDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::rewardRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::rewardDataTable::AddrewardRow(NewDataSet::rewardRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::rewardRow^  NewDataSet::rewardDataTable::AddrewardRow(System::Decimal MIN_REWARD, System::Decimal MAX_REWARD, 
            NewDataSet::WORLDRow^  parentWORLDRowByWORLD_reward) {
    NewDataSet::rewardRow^  rowrewardRow = (cli::safe_cast<NewDataSet::rewardRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {MIN_REWARD, MAX_REWARD, 
        nullptr, nullptr};
    if (parentWORLDRowByWORLD_reward != nullptr) {
        columnValuesArray[3] = parentWORLDRowByWORLD_reward[3];
    }
    rowrewardRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowrewardRow);
    return rowrewardRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::rewardDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::rewardDataTable::Clone() {
    NewDataSet::rewardDataTable^  cln = (cli::safe_cast<NewDataSet::rewardDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::rewardDataTable::CreateInstance() {
    return (gcnew NewDataSet::rewardDataTable());
}

inline ::System::Void NewDataSet::rewardDataTable::InitVars() {
    this->columnMIN_REWARD = __super::Columns[L"MIN_REWARD"];
    this->columnMAX_REWARD = __super::Columns[L"MAX_REWARD"];
    this->columnreward_Id = __super::Columns[L"reward_Id"];
    this->columnWORLD_Id = __super::Columns[L"WORLD_Id"];
}

inline ::System::Void NewDataSet::rewardDataTable::InitClass() {
    this->columnMIN_REWARD = (gcnew ::System::Data::DataColumn(L"MIN_REWARD", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnMIN_REWARD);
    this->columnMAX_REWARD = (gcnew ::System::Data::DataColumn(L"MAX_REWARD", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnMAX_REWARD);
    this->columnreward_Id = (gcnew ::System::Data::DataColumn(L"reward_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnreward_Id);
    this->columnWORLD_Id = (gcnew ::System::Data::DataColumn(L"WORLD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnWORLD_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnreward_Id}, 
            true)));
    this->columnMIN_REWARD->AllowDBNull = false;
    this->columnMAX_REWARD->AllowDBNull = false;
    this->columnreward_Id->AutoIncrement = true;
    this->columnreward_Id->AllowDBNull = false;
    this->columnreward_Id->Unique = true;
}

inline NewDataSet::rewardRow^  NewDataSet::rewardDataTable::NewrewardRow() {
    return (cli::safe_cast<NewDataSet::rewardRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::rewardDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::rewardRow(builder));
}

inline ::System::Type^  NewDataSet::rewardDataTable::GetRowType() {
    return NewDataSet::rewardRow::typeid;
}

inline ::System::Void NewDataSet::rewardDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->rewardRowChanged(this, (gcnew NewDataSet::rewardRowChangeEvent((cli::safe_cast<NewDataSet::rewardRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::rewardDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->rewardRowChanging(this, (gcnew NewDataSet::rewardRowChangeEvent((cli::safe_cast<NewDataSet::rewardRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::rewardDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->rewardRowDeleted(this, (gcnew NewDataSet::rewardRowChangeEvent((cli::safe_cast<NewDataSet::rewardRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::rewardDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->rewardRowDeleting(this, (gcnew NewDataSet::rewardRowChangeEvent((cli::safe_cast<NewDataSet::rewardRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::rewardDataTable::RemoverewardRow(NewDataSet::rewardRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::rewardDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"rewardDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::_reward_componentDataTable::_reward_componentDataTable() {
    this->TableName = L"reward-component";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::_reward_componentDataTable::_reward_componentDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::_reward_componentDataTable::_reward_componentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::_reward_componentDataTable::COMPONENT_TYPEColumn::get() {
    return this->columnCOMPONENT_TYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::_reward_componentDataTable::COMPONENT_WEIGHTColumn::get() {
    return this->columnCOMPONENT_WEIGHT;
}

inline ::System::Data::DataColumn^  NewDataSet::_reward_componentDataTable::COMPONENT_TOLERANCEColumn::get() {
    return this->columnCOMPONENT_TOLERANCE;
}

inline ::System::Data::DataColumn^  NewDataSet::_reward_componentDataTable::CONTROL_ERROR_VARIABLEColumn::get() {
    return this->columnCONTROL_ERROR_VARIABLE;
}

inline ::System::Data::DataColumn^  NewDataSet::_reward_componentDataTable::reward_IdColumn::get() {
    return this->columnreward_Id;
}

inline ::System::Int32 NewDataSet::_reward_componentDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::_reward_componentRow^  NewDataSet::_reward_componentDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::_reward_componentRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::_reward_componentDataTable::Add_reward_componentRow(NewDataSet::_reward_componentRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::_reward_componentRow^  NewDataSet::_reward_componentDataTable::Add_reward_componentRow(System::String^  COMPONENT_TYPE, 
            System::Decimal COMPONENT_WEIGHT, System::Decimal COMPONENT_TOLERANCE, System::String^  CONTROL_ERROR_VARIABLE, NewDataSet::rewardRow^  _parentrewardRowByreward_reward_component) {
    NewDataSet::_reward_componentRow^  row_reward_componentRow = (cli::safe_cast<NewDataSet::_reward_componentRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {COMPONENT_TYPE, COMPONENT_WEIGHT, 
        COMPONENT_TOLERANCE, CONTROL_ERROR_VARIABLE, nullptr};
    if (_parentrewardRowByreward_reward_component != nullptr) {
        columnValuesArray[4] = _parentrewardRowByreward_reward_component[2];
    }
    row_reward_componentRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_reward_componentRow);
    return row_reward_componentRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::_reward_componentDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::_reward_componentDataTable::Clone() {
    NewDataSet::_reward_componentDataTable^  cln = (cli::safe_cast<NewDataSet::_reward_componentDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::_reward_componentDataTable::CreateInstance() {
    return (gcnew NewDataSet::_reward_componentDataTable());
}

inline ::System::Void NewDataSet::_reward_componentDataTable::InitVars() {
    this->columnCOMPONENT_TYPE = __super::Columns[L"COMPONENT_TYPE"];
    this->columnCOMPONENT_WEIGHT = __super::Columns[L"COMPONENT_WEIGHT"];
    this->columnCOMPONENT_TOLERANCE = __super::Columns[L"COMPONENT_TOLERANCE"];
    this->columnCONTROL_ERROR_VARIABLE = __super::Columns[L"CONTROL_ERROR_VARIABLE"];
    this->columnreward_Id = __super::Columns[L"reward_Id"];
}

inline ::System::Void NewDataSet::_reward_componentDataTable::InitClass() {
    this->columnCOMPONENT_TYPE = (gcnew ::System::Data::DataColumn(L"COMPONENT_TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnCOMPONENT_TYPE);
    this->columnCOMPONENT_WEIGHT = (gcnew ::System::Data::DataColumn(L"COMPONENT_WEIGHT", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnCOMPONENT_WEIGHT);
    this->columnCOMPONENT_TOLERANCE = (gcnew ::System::Data::DataColumn(L"COMPONENT_TOLERANCE", ::System::Decimal::typeid, nullptr, 
        ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnCOMPONENT_TOLERANCE);
    this->columnCONTROL_ERROR_VARIABLE = (gcnew ::System::Data::DataColumn(L"CONTROL_ERROR_VARIABLE", ::System::String::typeid, nullptr, 
        ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnCONTROL_ERROR_VARIABLE);
    this->columnreward_Id = (gcnew ::System::Data::DataColumn(L"reward_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnreward_Id);
    this->columnCOMPONENT_TYPE->AllowDBNull = false;
    this->columnCOMPONENT_WEIGHT->AllowDBNull = false;
    this->columnCOMPONENT_TOLERANCE->AllowDBNull = false;
    this->columnCONTROL_ERROR_VARIABLE->AllowDBNull = false;
}

inline NewDataSet::_reward_componentRow^  NewDataSet::_reward_componentDataTable::New_reward_componentRow() {
    return (cli::safe_cast<NewDataSet::_reward_componentRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::_reward_componentDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::_reward_componentRow(builder));
}

inline ::System::Type^  NewDataSet::_reward_componentDataTable::GetRowType() {
    return NewDataSet::_reward_componentRow::typeid;
}

inline ::System::Void NewDataSet::_reward_componentDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_reward_componentRowChanged(this, (gcnew NewDataSet::_reward_componentRowChangeEvent((cli::safe_cast<NewDataSet::_reward_componentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_reward_componentDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_reward_componentRowChanging(this, (gcnew NewDataSet::_reward_componentRowChangeEvent((cli::safe_cast<NewDataSet::_reward_componentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_reward_componentDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_reward_componentRowDeleted(this, (gcnew NewDataSet::_reward_componentRowChangeEvent((cli::safe_cast<NewDataSet::_reward_componentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_reward_componentDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_reward_componentRowDeleting(this, (gcnew NewDataSet::_reward_componentRowChangeEvent((cli::safe_cast<NewDataSet::_reward_componentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_reward_componentDataTable::Remove_reward_componentRow(NewDataSet::_reward_componentRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::_reward_componentDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_reward_componentDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::_wind_turbineDataTable::_wind_turbineDataTable() {
    this->TableName = L"wind-turbine";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::_wind_turbineDataTable::_wind_turbineDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::_wind_turbineDataTable::_wind_turbineDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::_wind_turbineDataTable::EVALUATION_WIND_DATA_FILEColumn::get() {
    return this->columnEVALUATION_WIND_DATA_FILE;
}

inline ::System::Data::DataColumn^  NewDataSet::_wind_turbineDataTable::POWER_SET_POINT_FILEColumn::get() {
    return this->columnPOWER_SET_POINT_FILE;
}

inline ::System::Data::DataColumn^  NewDataSet::_wind_turbineDataTable::_wind_turbine_IdColumn::get() {
    return this->column_wind_turbine_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::_wind_turbineDataTable::WORLD_IdColumn::get() {
    return this->columnWORLD_Id;
}

inline ::System::Int32 NewDataSet::_wind_turbineDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::_wind_turbineRow^  NewDataSet::_wind_turbineDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::_wind_turbineRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::_wind_turbineDataTable::Add_wind_turbineRow(NewDataSet::_wind_turbineRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::_wind_turbineRow^  NewDataSet::_wind_turbineDataTable::Add_wind_turbineRow(System::String^  EVALUATION_WIND_DATA_FILE, 
            System::String^  POWER_SET_POINT_FILE, NewDataSet::WORLDRow^  _parentWORLDRowByWORLD_wind_turbine) {
    NewDataSet::_wind_turbineRow^  row_wind_turbineRow = (cli::safe_cast<NewDataSet::_wind_turbineRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {EVALUATION_WIND_DATA_FILE, 
        POWER_SET_POINT_FILE, nullptr, nullptr};
    if (_parentWORLDRowByWORLD_wind_turbine != nullptr) {
        columnValuesArray[3] = _parentWORLDRowByWORLD_wind_turbine[3];
    }
    row_wind_turbineRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_wind_turbineRow);
    return row_wind_turbineRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::_wind_turbineDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::_wind_turbineDataTable::Clone() {
    NewDataSet::_wind_turbineDataTable^  cln = (cli::safe_cast<NewDataSet::_wind_turbineDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::_wind_turbineDataTable::CreateInstance() {
    return (gcnew NewDataSet::_wind_turbineDataTable());
}

inline ::System::Void NewDataSet::_wind_turbineDataTable::InitVars() {
    this->columnEVALUATION_WIND_DATA_FILE = __super::Columns[L"EVALUATION_WIND_DATA_FILE"];
    this->columnPOWER_SET_POINT_FILE = __super::Columns[L"POWER_SET_POINT_FILE"];
    this->column_wind_turbine_Id = __super::Columns[L"wind-turbine_Id"];
    this->columnWORLD_Id = __super::Columns[L"WORLD_Id"];
}

inline ::System::Void NewDataSet::_wind_turbineDataTable::InitClass() {
    this->columnEVALUATION_WIND_DATA_FILE = (gcnew ::System::Data::DataColumn(L"EVALUATION_WIND_DATA_FILE", ::System::String::typeid, 
        nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnEVALUATION_WIND_DATA_FILE);
    this->columnPOWER_SET_POINT_FILE = (gcnew ::System::Data::DataColumn(L"POWER_SET_POINT_FILE", ::System::String::typeid, nullptr, 
        ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnPOWER_SET_POINT_FILE);
    this->column_wind_turbine_Id = (gcnew ::System::Data::DataColumn(L"wind-turbine_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_wind_turbine_Id);
    this->columnWORLD_Id = (gcnew ::System::Data::DataColumn(L"WORLD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnWORLD_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->column_wind_turbine_Id}, 
            true)));
    this->columnEVALUATION_WIND_DATA_FILE->AllowDBNull = false;
    this->columnPOWER_SET_POINT_FILE->AllowDBNull = false;
    this->column_wind_turbine_Id->AutoIncrement = true;
    this->column_wind_turbine_Id->AllowDBNull = false;
    this->column_wind_turbine_Id->Unique = true;
}

inline NewDataSet::_wind_turbineRow^  NewDataSet::_wind_turbineDataTable::New_wind_turbineRow() {
    return (cli::safe_cast<NewDataSet::_wind_turbineRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::_wind_turbineDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::_wind_turbineRow(builder));
}

inline ::System::Type^  NewDataSet::_wind_turbineDataTable::GetRowType() {
    return NewDataSet::_wind_turbineRow::typeid;
}

inline ::System::Void NewDataSet::_wind_turbineDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_wind_turbineRowChanged(this, (gcnew NewDataSet::_wind_turbineRowChangeEvent((cli::safe_cast<NewDataSet::_wind_turbineRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_wind_turbineDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_wind_turbineRowChanging(this, (gcnew NewDataSet::_wind_turbineRowChangeEvent((cli::safe_cast<NewDataSet::_wind_turbineRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_wind_turbineDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_wind_turbineRowDeleted(this, (gcnew NewDataSet::_wind_turbineRowChangeEvent((cli::safe_cast<NewDataSet::_wind_turbineRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_wind_turbineDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_wind_turbineRowDeleting(this, (gcnew NewDataSet::_wind_turbineRowChangeEvent((cli::safe_cast<NewDataSet::_wind_turbineRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_wind_turbineDataTable::Remove_wind_turbineRow(NewDataSet::_wind_turbineRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::_wind_turbineDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_wind_turbineDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::TRAINING_WIND_DATA_FILESDataTable::TRAINING_WIND_DATA_FILESDataTable() {
    this->TableName = L"TRAINING_WIND_DATA_FILES";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::TRAINING_WIND_DATA_FILESDataTable::TRAINING_WIND_DATA_FILESDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::TRAINING_WIND_DATA_FILESDataTable::TRAINING_WIND_DATA_FILESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::TRAINING_WIND_DATA_FILESDataTable::TRAINING_WIND_DATA_FILES_ColumnColumn::get() {
    return this->columnTRAINING_WIND_DATA_FILES_Column;
}

inline ::System::Data::DataColumn^  NewDataSet::TRAINING_WIND_DATA_FILESDataTable::_wind_turbine_IdColumn::get() {
    return this->column_wind_turbine_Id;
}

inline ::System::Int32 NewDataSet::TRAINING_WIND_DATA_FILESDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::TRAINING_WIND_DATA_FILESRow^  NewDataSet::TRAINING_WIND_DATA_FILESDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::TRAINING_WIND_DATA_FILESRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::TRAINING_WIND_DATA_FILESDataTable::AddTRAINING_WIND_DATA_FILESRow(NewDataSet::TRAINING_WIND_DATA_FILESRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::TRAINING_WIND_DATA_FILESRow^  NewDataSet::TRAINING_WIND_DATA_FILESDataTable::AddTRAINING_WIND_DATA_FILESRow(
            System::String^  TRAINING_WIND_DATA_FILES_Column, NewDataSet::_wind_turbineRow^  _parent_wind_turbineRowBywind_turbine_TRAINING_WIND_DATA_FILES) {
    NewDataSet::TRAINING_WIND_DATA_FILESRow^  rowTRAINING_WIND_DATA_FILESRow = (cli::safe_cast<NewDataSet::TRAINING_WIND_DATA_FILESRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {TRAINING_WIND_DATA_FILES_Column, 
        nullptr};
    if (_parent_wind_turbineRowBywind_turbine_TRAINING_WIND_DATA_FILES != nullptr) {
        columnValuesArray[1] = _parent_wind_turbineRowBywind_turbine_TRAINING_WIND_DATA_FILES[2];
    }
    rowTRAINING_WIND_DATA_FILESRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowTRAINING_WIND_DATA_FILESRow);
    return rowTRAINING_WIND_DATA_FILESRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::TRAINING_WIND_DATA_FILESDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::TRAINING_WIND_DATA_FILESDataTable::Clone() {
    NewDataSet::TRAINING_WIND_DATA_FILESDataTable^  cln = (cli::safe_cast<NewDataSet::TRAINING_WIND_DATA_FILESDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::TRAINING_WIND_DATA_FILESDataTable::CreateInstance() {
    return (gcnew NewDataSet::TRAINING_WIND_DATA_FILESDataTable());
}

inline ::System::Void NewDataSet::TRAINING_WIND_DATA_FILESDataTable::InitVars() {
    this->columnTRAINING_WIND_DATA_FILES_Column = __super::Columns[L"TRAINING_WIND_DATA_FILES_Column"];
    this->column_wind_turbine_Id = __super::Columns[L"wind-turbine_Id"];
}

inline ::System::Void NewDataSet::TRAINING_WIND_DATA_FILESDataTable::InitClass() {
    this->columnTRAINING_WIND_DATA_FILES_Column = (gcnew ::System::Data::DataColumn(L"TRAINING_WIND_DATA_FILES_Column", ::System::String::typeid, 
        nullptr, ::System::Data::MappingType::SimpleContent));
    __super::Columns->Add(this->columnTRAINING_WIND_DATA_FILES_Column);
    this->column_wind_turbine_Id = (gcnew ::System::Data::DataColumn(L"wind-turbine_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_wind_turbine_Id);
    this->columnTRAINING_WIND_DATA_FILES_Column->AllowDBNull = false;
}

inline NewDataSet::TRAINING_WIND_DATA_FILESRow^  NewDataSet::TRAINING_WIND_DATA_FILESDataTable::NewTRAINING_WIND_DATA_FILESRow() {
    return (cli::safe_cast<NewDataSet::TRAINING_WIND_DATA_FILESRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::TRAINING_WIND_DATA_FILESDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::TRAINING_WIND_DATA_FILESRow(builder));
}

inline ::System::Type^  NewDataSet::TRAINING_WIND_DATA_FILESDataTable::GetRowType() {
    return NewDataSet::TRAINING_WIND_DATA_FILESRow::typeid;
}

inline ::System::Void NewDataSet::TRAINING_WIND_DATA_FILESDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->TRAINING_WIND_DATA_FILESRowChanged(this, (gcnew NewDataSet::TRAINING_WIND_DATA_FILESRowChangeEvent((cli::safe_cast<NewDataSet::TRAINING_WIND_DATA_FILESRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::TRAINING_WIND_DATA_FILESDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->TRAINING_WIND_DATA_FILESRowChanging(this, (gcnew NewDataSet::TRAINING_WIND_DATA_FILESRowChangeEvent((cli::safe_cast<NewDataSet::TRAINING_WIND_DATA_FILESRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::TRAINING_WIND_DATA_FILESDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->TRAINING_WIND_DATA_FILESRowDeleted(this, (gcnew NewDataSet::TRAINING_WIND_DATA_FILESRowChangeEvent((cli::safe_cast<NewDataSet::TRAINING_WIND_DATA_FILESRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::TRAINING_WIND_DATA_FILESDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->TRAINING_WIND_DATA_FILESRowDeleting(this, (gcnew NewDataSet::TRAINING_WIND_DATA_FILESRowChangeEvent((cli::safe_cast<NewDataSet::TRAINING_WIND_DATA_FILESRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::TRAINING_WIND_DATA_FILESDataTable::RemoveTRAINING_WIND_DATA_FILESRow(NewDataSet::TRAINING_WIND_DATA_FILESRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::TRAINING_WIND_DATA_FILESDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"TRAINING_WIND_DATA_FILESDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::_magnetic_levitationDataTable::_magnetic_levitationDataTable() {
    this->TableName = L"magnetic-levitation";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::_magnetic_levitationDataTable::_magnetic_levitationDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::_magnetic_levitationDataTable::_magnetic_levitationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::_magnetic_levitationDataTable::SET_POINT_FILEColumn::get() {
    return this->columnSET_POINT_FILE;
}

inline ::System::Data::DataColumn^  NewDataSet::_magnetic_levitationDataTable::WORLD_IdColumn::get() {
    return this->columnWORLD_Id;
}

inline ::System::Int32 NewDataSet::_magnetic_levitationDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::_magnetic_levitationRow^  NewDataSet::_magnetic_levitationDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::_magnetic_levitationRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::_magnetic_levitationDataTable::Add_magnetic_levitationRow(NewDataSet::_magnetic_levitationRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::_magnetic_levitationRow^  NewDataSet::_magnetic_levitationDataTable::Add_magnetic_levitationRow(System::String^  SET_POINT_FILE, 
            NewDataSet::WORLDRow^  _parentWORLDRowByWORLD_magnetic_levitation) {
    NewDataSet::_magnetic_levitationRow^  row_magnetic_levitationRow = (cli::safe_cast<NewDataSet::_magnetic_levitationRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {SET_POINT_FILE, nullptr};
    if (_parentWORLDRowByWORLD_magnetic_levitation != nullptr) {
        columnValuesArray[1] = _parentWORLDRowByWORLD_magnetic_levitation[3];
    }
    row_magnetic_levitationRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_magnetic_levitationRow);
    return row_magnetic_levitationRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::_magnetic_levitationDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::_magnetic_levitationDataTable::Clone() {
    NewDataSet::_magnetic_levitationDataTable^  cln = (cli::safe_cast<NewDataSet::_magnetic_levitationDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::_magnetic_levitationDataTable::CreateInstance() {
    return (gcnew NewDataSet::_magnetic_levitationDataTable());
}

inline ::System::Void NewDataSet::_magnetic_levitationDataTable::InitVars() {
    this->columnSET_POINT_FILE = __super::Columns[L"SET_POINT_FILE"];
    this->columnWORLD_Id = __super::Columns[L"WORLD_Id"];
}

inline ::System::Void NewDataSet::_magnetic_levitationDataTable::InitClass() {
    this->columnSET_POINT_FILE = (gcnew ::System::Data::DataColumn(L"SET_POINT_FILE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSET_POINT_FILE);
    this->columnWORLD_Id = (gcnew ::System::Data::DataColumn(L"WORLD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnWORLD_Id);
    this->columnSET_POINT_FILE->AllowDBNull = false;
}

inline NewDataSet::_magnetic_levitationRow^  NewDataSet::_magnetic_levitationDataTable::New_magnetic_levitationRow() {
    return (cli::safe_cast<NewDataSet::_magnetic_levitationRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::_magnetic_levitationDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::_magnetic_levitationRow(builder));
}

inline ::System::Type^  NewDataSet::_magnetic_levitationDataTable::GetRowType() {
    return NewDataSet::_magnetic_levitationRow::typeid;
}

inline ::System::Void NewDataSet::_magnetic_levitationDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_magnetic_levitationRowChanged(this, (gcnew NewDataSet::_magnetic_levitationRowChangeEvent((cli::safe_cast<NewDataSet::_magnetic_levitationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_magnetic_levitationDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_magnetic_levitationRowChanging(this, (gcnew NewDataSet::_magnetic_levitationRowChangeEvent((cli::safe_cast<NewDataSet::_magnetic_levitationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_magnetic_levitationDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_magnetic_levitationRowDeleted(this, (gcnew NewDataSet::_magnetic_levitationRowChangeEvent((cli::safe_cast<NewDataSet::_magnetic_levitationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_magnetic_levitationDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_magnetic_levitationRowDeleting(this, (gcnew NewDataSet::_magnetic_levitationRowChangeEvent((cli::safe_cast<NewDataSet::_magnetic_levitationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_magnetic_levitationDataTable::Remove_magnetic_levitationRow(NewDataSet::_magnetic_levitationRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::_magnetic_levitationDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_magnetic_levitationDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::pitchDataTable::pitchDataTable() {
    this->TableName = L"pitch";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::pitchDataTable::pitchDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::pitchDataTable::pitchDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::pitchDataTable::SET_POINT_FILEColumn::get() {
    return this->columnSET_POINT_FILE;
}

inline ::System::Data::DataColumn^  NewDataSet::pitchDataTable::WORLD_IdColumn::get() {
    return this->columnWORLD_Id;
}

inline ::System::Int32 NewDataSet::pitchDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::pitchRow^  NewDataSet::pitchDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::pitchRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::pitchDataTable::AddpitchRow(NewDataSet::pitchRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::pitchRow^  NewDataSet::pitchDataTable::AddpitchRow(System::String^  SET_POINT_FILE, NewDataSet::WORLDRow^  parentWORLDRowByWORLD_pitch) {
    NewDataSet::pitchRow^  rowpitchRow = (cli::safe_cast<NewDataSet::pitchRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {SET_POINT_FILE, nullptr};
    if (parentWORLDRowByWORLD_pitch != nullptr) {
        columnValuesArray[1] = parentWORLDRowByWORLD_pitch[3];
    }
    rowpitchRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowpitchRow);
    return rowpitchRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::pitchDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::pitchDataTable::Clone() {
    NewDataSet::pitchDataTable^  cln = (cli::safe_cast<NewDataSet::pitchDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::pitchDataTable::CreateInstance() {
    return (gcnew NewDataSet::pitchDataTable());
}

inline ::System::Void NewDataSet::pitchDataTable::InitVars() {
    this->columnSET_POINT_FILE = __super::Columns[L"SET_POINT_FILE"];
    this->columnWORLD_Id = __super::Columns[L"WORLD_Id"];
}

inline ::System::Void NewDataSet::pitchDataTable::InitClass() {
    this->columnSET_POINT_FILE = (gcnew ::System::Data::DataColumn(L"SET_POINT_FILE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSET_POINT_FILE);
    this->columnWORLD_Id = (gcnew ::System::Data::DataColumn(L"WORLD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnWORLD_Id);
    this->columnSET_POINT_FILE->AllowDBNull = false;
}

inline NewDataSet::pitchRow^  NewDataSet::pitchDataTable::NewpitchRow() {
    return (cli::safe_cast<NewDataSet::pitchRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::pitchDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::pitchRow(builder));
}

inline ::System::Type^  NewDataSet::pitchDataTable::GetRowType() {
    return NewDataSet::pitchRow::typeid;
}

inline ::System::Void NewDataSet::pitchDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->pitchRowChanged(this, (gcnew NewDataSet::pitchRowChangeEvent((cli::safe_cast<NewDataSet::pitchRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::pitchDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->pitchRowChanging(this, (gcnew NewDataSet::pitchRowChangeEvent((cli::safe_cast<NewDataSet::pitchRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::pitchDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->pitchRowDeleted(this, (gcnew NewDataSet::pitchRowChangeEvent((cli::safe_cast<NewDataSet::pitchRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::pitchDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->pitchRowDeleting(this, (gcnew NewDataSet::pitchRowChangeEvent((cli::safe_cast<NewDataSet::pitchRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::pitchDataTable::RemovepitchRow(NewDataSet::pitchRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::pitchDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"pitchDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::_underwater_vehicleDataTable::_underwater_vehicleDataTable() {
    this->TableName = L"underwater-vehicle";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::_underwater_vehicleDataTable::_underwater_vehicleDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::_underwater_vehicleDataTable::_underwater_vehicleDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::_underwater_vehicleDataTable::SET_POINT_FILEColumn::get() {
    return this->columnSET_POINT_FILE;
}

inline ::System::Data::DataColumn^  NewDataSet::_underwater_vehicleDataTable::WORLD_IdColumn::get() {
    return this->columnWORLD_Id;
}

inline ::System::Int32 NewDataSet::_underwater_vehicleDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::_underwater_vehicleRow^  NewDataSet::_underwater_vehicleDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::_underwater_vehicleRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::_underwater_vehicleDataTable::Add_underwater_vehicleRow(NewDataSet::_underwater_vehicleRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::_underwater_vehicleRow^  NewDataSet::_underwater_vehicleDataTable::Add_underwater_vehicleRow(System::String^  SET_POINT_FILE, 
            NewDataSet::WORLDRow^  _parentWORLDRowByWORLD_underwater_vehicle) {
    NewDataSet::_underwater_vehicleRow^  row_underwater_vehicleRow = (cli::safe_cast<NewDataSet::_underwater_vehicleRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {SET_POINT_FILE, nullptr};
    if (_parentWORLDRowByWORLD_underwater_vehicle != nullptr) {
        columnValuesArray[1] = _parentWORLDRowByWORLD_underwater_vehicle[3];
    }
    row_underwater_vehicleRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_underwater_vehicleRow);
    return row_underwater_vehicleRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::_underwater_vehicleDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::_underwater_vehicleDataTable::Clone() {
    NewDataSet::_underwater_vehicleDataTable^  cln = (cli::safe_cast<NewDataSet::_underwater_vehicleDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::_underwater_vehicleDataTable::CreateInstance() {
    return (gcnew NewDataSet::_underwater_vehicleDataTable());
}

inline ::System::Void NewDataSet::_underwater_vehicleDataTable::InitVars() {
    this->columnSET_POINT_FILE = __super::Columns[L"SET_POINT_FILE"];
    this->columnWORLD_Id = __super::Columns[L"WORLD_Id"];
}

inline ::System::Void NewDataSet::_underwater_vehicleDataTable::InitClass() {
    this->columnSET_POINT_FILE = (gcnew ::System::Data::DataColumn(L"SET_POINT_FILE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSET_POINT_FILE);
    this->columnWORLD_Id = (gcnew ::System::Data::DataColumn(L"WORLD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnWORLD_Id);
    this->columnSET_POINT_FILE->AllowDBNull = false;
}

inline NewDataSet::_underwater_vehicleRow^  NewDataSet::_underwater_vehicleDataTable::New_underwater_vehicleRow() {
    return (cli::safe_cast<NewDataSet::_underwater_vehicleRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::_underwater_vehicleDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::_underwater_vehicleRow(builder));
}

inline ::System::Type^  NewDataSet::_underwater_vehicleDataTable::GetRowType() {
    return NewDataSet::_underwater_vehicleRow::typeid;
}

inline ::System::Void NewDataSet::_underwater_vehicleDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_underwater_vehicleRowChanged(this, (gcnew NewDataSet::_underwater_vehicleRowChangeEvent((cli::safe_cast<NewDataSet::_underwater_vehicleRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_underwater_vehicleDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_underwater_vehicleRowChanging(this, (gcnew NewDataSet::_underwater_vehicleRowChangeEvent((cli::safe_cast<NewDataSet::_underwater_vehicleRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_underwater_vehicleDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_underwater_vehicleRowDeleted(this, (gcnew NewDataSet::_underwater_vehicleRowChangeEvent((cli::safe_cast<NewDataSet::_underwater_vehicleRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_underwater_vehicleDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_underwater_vehicleRowDeleting(this, (gcnew NewDataSet::_underwater_vehicleRowChangeEvent((cli::safe_cast<NewDataSet::_underwater_vehicleRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_underwater_vehicleDataTable::Remove_underwater_vehicleRow(NewDataSet::_underwater_vehicleRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::_underwater_vehicleDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_underwater_vehicleDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::SIMGODDataTable::SIMGODDataTable() {
    this->TableName = L"SIMGOD";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::SIMGODDataTable::SIMGODDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::SIMGODDataTable::SIMGODDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::SIMGODDataTable::SIMGOD_IdColumn::get() {
    return this->columnSIMGOD_Id;
}

inline ::System::Int32 NewDataSet::SIMGODDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::SIMGODRow^  NewDataSet::SIMGODDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::SIMGODRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::SIMGODDataTable::AddSIMGODRow(NewDataSet::SIMGODRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::SIMGODRow^  NewDataSet::SIMGODDataTable::AddSIMGODRow() {
    NewDataSet::SIMGODRow^  rowSIMGODRow = (cli::safe_cast<NewDataSet::SIMGODRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(1) {nullptr};
    rowSIMGODRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowSIMGODRow);
    return rowSIMGODRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::SIMGODDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::SIMGODDataTable::Clone() {
    NewDataSet::SIMGODDataTable^  cln = (cli::safe_cast<NewDataSet::SIMGODDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::SIMGODDataTable::CreateInstance() {
    return (gcnew NewDataSet::SIMGODDataTable());
}

inline ::System::Void NewDataSet::SIMGODDataTable::InitVars() {
    this->columnSIMGOD_Id = __super::Columns[L"SIMGOD_Id"];
}

inline ::System::Void NewDataSet::SIMGODDataTable::InitClass() {
    this->columnSIMGOD_Id = (gcnew ::System::Data::DataColumn(L"SIMGOD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnSIMGOD_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnSIMGOD_Id}, 
            true)));
    this->columnSIMGOD_Id->AutoIncrement = true;
    this->columnSIMGOD_Id->AllowDBNull = false;
    this->columnSIMGOD_Id->Unique = true;
}

inline NewDataSet::SIMGODRow^  NewDataSet::SIMGODDataTable::NewSIMGODRow() {
    return (cli::safe_cast<NewDataSet::SIMGODRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::SIMGODDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::SIMGODRow(builder));
}

inline ::System::Type^  NewDataSet::SIMGODDataTable::GetRowType() {
    return NewDataSet::SIMGODRow::typeid;
}

inline ::System::Void NewDataSet::SIMGODDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->SIMGODRowChanged(this, (gcnew NewDataSet::SIMGODRowChangeEvent((cli::safe_cast<NewDataSet::SIMGODRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::SIMGODDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->SIMGODRowChanging(this, (gcnew NewDataSet::SIMGODRowChangeEvent((cli::safe_cast<NewDataSet::SIMGODRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::SIMGODDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->SIMGODRowDeleted(this, (gcnew NewDataSet::SIMGODRowChangeEvent((cli::safe_cast<NewDataSet::SIMGODRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::SIMGODDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->SIMGODRowDeleting(this, (gcnew NewDataSet::SIMGODRowChangeEvent((cli::safe_cast<NewDataSet::SIMGODRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::SIMGODDataTable::RemoveSIMGODRow(NewDataSet::SIMGODRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::SIMGODDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"SIMGODDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::actorDataTable::actorDataTable() {
    this->TableName = L"actor";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::actorDataTable::actorDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::actorDataTable::actorDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::actorDataTable::ALGORITHMColumn::get() {
    return this->columnALGORITHM;
}

inline ::System::Data::DataColumn^  NewDataSet::actorDataTable::LOADColumn::get() {
    return this->columnLOAD;
}

inline ::System::Data::DataColumn^  NewDataSet::actorDataTable::SAVEColumn::get() {
    return this->columnSAVE;
}

inline ::System::Data::DataColumn^  NewDataSet::actorDataTable::actor_IdColumn::get() {
    return this->columnactor_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::actorDataTable::SIMGOD_IdColumn::get() {
    return this->columnSIMGOD_Id;
}

inline ::System::Int32 NewDataSet::actorDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::actorRow^  NewDataSet::actorDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::actorRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::actorDataTable::AddactorRow(NewDataSet::actorRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::actorRow^  NewDataSet::actorDataTable::AddactorRow(System::String^  ALGORITHM, System::String^  LOAD, 
            System::String^  SAVE, NewDataSet::SIMGODRow^  parentSIMGODRowBySIMGOD_actor) {
    NewDataSet::actorRow^  rowactorRow = (cli::safe_cast<NewDataSet::actorRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {ALGORITHM, LOAD, SAVE, 
        nullptr, nullptr};
    if (parentSIMGODRowBySIMGOD_actor != nullptr) {
        columnValuesArray[4] = parentSIMGODRowBySIMGOD_actor[0];
    }
    rowactorRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowactorRow);
    return rowactorRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::actorDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::actorDataTable::Clone() {
    NewDataSet::actorDataTable^  cln = (cli::safe_cast<NewDataSet::actorDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::actorDataTable::CreateInstance() {
    return (gcnew NewDataSet::actorDataTable());
}

inline ::System::Void NewDataSet::actorDataTable::InitVars() {
    this->columnALGORITHM = __super::Columns[L"ALGORITHM"];
    this->columnLOAD = __super::Columns[L"LOAD"];
    this->columnSAVE = __super::Columns[L"SAVE"];
    this->columnactor_Id = __super::Columns[L"actor_Id"];
    this->columnSIMGOD_Id = __super::Columns[L"SIMGOD_Id"];
}

inline ::System::Void NewDataSet::actorDataTable::InitClass() {
    this->columnALGORITHM = (gcnew ::System::Data::DataColumn(L"ALGORITHM", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnALGORITHM);
    this->columnLOAD = (gcnew ::System::Data::DataColumn(L"LOAD", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnLOAD);
    this->columnSAVE = (gcnew ::System::Data::DataColumn(L"SAVE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSAVE);
    this->columnactor_Id = (gcnew ::System::Data::DataColumn(L"actor_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnactor_Id);
    this->columnSIMGOD_Id = (gcnew ::System::Data::DataColumn(L"SIMGOD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnSIMGOD_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnactor_Id}, 
            true)));
    this->columnALGORITHM->AllowDBNull = false;
    this->columnLOAD->AllowDBNull = false;
    this->columnLOAD->DefaultValue = (cli::safe_cast<System::String^  >(L""));
    this->columnSAVE->AllowDBNull = false;
    this->columnSAVE->DefaultValue = (cli::safe_cast<System::String^  >(L""));
    this->columnactor_Id->AutoIncrement = true;
    this->columnactor_Id->AllowDBNull = false;
    this->columnactor_Id->Unique = true;
}

inline NewDataSet::actorRow^  NewDataSet::actorDataTable::NewactorRow() {
    return (cli::safe_cast<NewDataSet::actorRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::actorDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::actorRow(builder));
}

inline ::System::Type^  NewDataSet::actorDataTable::GetRowType() {
    return NewDataSet::actorRow::typeid;
}

inline ::System::Void NewDataSet::actorDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->actorRowChanged(this, (gcnew NewDataSet::actorRowChangeEvent((cli::safe_cast<NewDataSet::actorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::actorDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->actorRowChanging(this, (gcnew NewDataSet::actorRowChangeEvent((cli::safe_cast<NewDataSet::actorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::actorDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->actorRowDeleted(this, (gcnew NewDataSet::actorRowChangeEvent((cli::safe_cast<NewDataSet::actorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::actorDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->actorRowDeleting(this, (gcnew NewDataSet::actorRowChangeEvent((cli::safe_cast<NewDataSet::actorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::actorDataTable::RemoveactorRow(NewDataSet::actorRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::actorDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"actorDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::CACLADataTable::CACLADataTable() {
    this->TableName = L"CACLA";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::CACLADataTable::CACLADataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::CACLADataTable::CACLADataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::CACLADataTable::CACLA_IdColumn::get() {
    return this->columnCACLA_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::CACLADataTable::actor_IdColumn::get() {
    return this->columnactor_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::CACLADataTable::controller_IdColumn::get() {
    return this->columncontroller_Id;
}

inline ::System::Int32 NewDataSet::CACLADataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::CACLARow^  NewDataSet::CACLADataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::CACLARow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::CACLADataTable::AddCACLARow(NewDataSet::CACLARow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::CACLARow^  NewDataSet::CACLADataTable::AddCACLARow(NewDataSet::actorRow^  parentactorRowByactor_CACLA, 
            NewDataSet::controllerRow^  parentcontrollerRowBycontroller_CACLA) {
    NewDataSet::CACLARow^  rowCACLARow = (cli::safe_cast<NewDataSet::CACLARow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {nullptr, nullptr, nullptr};
    if (parentactorRowByactor_CACLA != nullptr) {
        columnValuesArray[1] = parentactorRowByactor_CACLA[3];
    }
    if (parentcontrollerRowBycontroller_CACLA != nullptr) {
        columnValuesArray[2] = parentcontrollerRowBycontroller_CACLA[3];
    }
    rowCACLARow->ItemArray = columnValuesArray;
    this->Rows->Add(rowCACLARow);
    return rowCACLARow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::CACLADataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::CACLADataTable::Clone() {
    NewDataSet::CACLADataTable^  cln = (cli::safe_cast<NewDataSet::CACLADataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::CACLADataTable::CreateInstance() {
    return (gcnew NewDataSet::CACLADataTable());
}

inline ::System::Void NewDataSet::CACLADataTable::InitVars() {
    this->columnCACLA_Id = __super::Columns[L"CACLA_Id"];
    this->columnactor_Id = __super::Columns[L"actor_Id"];
    this->columncontroller_Id = __super::Columns[L"controller_Id"];
}

inline ::System::Void NewDataSet::CACLADataTable::InitClass() {
    this->columnCACLA_Id = (gcnew ::System::Data::DataColumn(L"CACLA_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnCACLA_Id);
    this->columnactor_Id = (gcnew ::System::Data::DataColumn(L"actor_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnactor_Id);
    this->columncontroller_Id = (gcnew ::System::Data::DataColumn(L"controller_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columncontroller_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnCACLA_Id}, 
            true)));
    this->columnCACLA_Id->AutoIncrement = true;
    this->columnCACLA_Id->AllowDBNull = false;
    this->columnCACLA_Id->Unique = true;
}

inline NewDataSet::CACLARow^  NewDataSet::CACLADataTable::NewCACLARow() {
    return (cli::safe_cast<NewDataSet::CACLARow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::CACLADataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::CACLARow(builder));
}

inline ::System::Type^  NewDataSet::CACLADataTable::GetRowType() {
    return NewDataSet::CACLARow::typeid;
}

inline ::System::Void NewDataSet::CACLADataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->CACLARowChanged(this, (gcnew NewDataSet::CACLARowChangeEvent((cli::safe_cast<NewDataSet::CACLARow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::CACLADataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->CACLARowChanging(this, (gcnew NewDataSet::CACLARowChangeEvent((cli::safe_cast<NewDataSet::CACLARow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::CACLADataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->CACLARowDeleted(this, (gcnew NewDataSet::CACLARowChangeEvent((cli::safe_cast<NewDataSet::CACLARow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::CACLADataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->CACLARowDeleting(this, (gcnew NewDataSet::CACLARowChangeEvent((cli::safe_cast<NewDataSet::CACLARow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::CACLADataTable::RemoveCACLARow(NewDataSet::CACLARow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::CACLADataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"CACLADataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::vfaDataTable::vfaDataTable() {
    this->TableName = L"vfa";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::vfaDataTable::vfaDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::vfaDataTable::vfaDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::vfaDataTable::vfa_IdColumn::get() {
    return this->columnvfa_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::vfaDataTable::CACLA_IdColumn::get() {
    return this->columnCACLA_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::vfaDataTable::_TD_Lambda_IdColumn::get() {
    return this->column_TD_Lambda_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::vfaDataTable::_True_Online_TD_Lambda_IdColumn::get() {
    return this->column_True_Online_TD_Lambda_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::vfaDataTable::_TDC_Lambda_IdColumn::get() {
    return this->column_TDC_Lambda_Id;
}

inline ::System::Int32 NewDataSet::vfaDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::vfaRow^  NewDataSet::vfaDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::vfaRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::vfaDataTable::AddvfaRow(NewDataSet::vfaRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::vfaRow^  NewDataSet::vfaDataTable::AddvfaRow(NewDataSet::CACLARow^  parentCACLARowByCACLA_vfa, NewDataSet::_TD_LambdaRow^  _parent_TD_LambdaRowByTD_Lambda_vfa, 
            NewDataSet::_True_Online_TD_LambdaRow^  _parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_vfa, NewDataSet::_TDC_LambdaRow^  _parent_TDC_LambdaRowByTDC_Lambda_vfa) {
    NewDataSet::vfaRow^  rowvfaRow = (cli::safe_cast<NewDataSet::vfaRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {nullptr, nullptr, nullptr, 
        nullptr, nullptr};
    if (parentCACLARowByCACLA_vfa != nullptr) {
        columnValuesArray[1] = parentCACLARowByCACLA_vfa[0];
    }
    if (_parent_TD_LambdaRowByTD_Lambda_vfa != nullptr) {
        columnValuesArray[2] = _parent_TD_LambdaRowByTD_Lambda_vfa[0];
    }
    if (_parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_vfa != nullptr) {
        columnValuesArray[3] = _parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_vfa[0];
    }
    if (_parent_TDC_LambdaRowByTDC_Lambda_vfa != nullptr) {
        columnValuesArray[4] = _parent_TDC_LambdaRowByTDC_Lambda_vfa[0];
    }
    rowvfaRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowvfaRow);
    return rowvfaRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::vfaDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::vfaDataTable::Clone() {
    NewDataSet::vfaDataTable^  cln = (cli::safe_cast<NewDataSet::vfaDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::vfaDataTable::CreateInstance() {
    return (gcnew NewDataSet::vfaDataTable());
}

inline ::System::Void NewDataSet::vfaDataTable::InitVars() {
    this->columnvfa_Id = __super::Columns[L"vfa_Id"];
    this->columnCACLA_Id = __super::Columns[L"CACLA_Id"];
    this->column_TD_Lambda_Id = __super::Columns[L"TD-Lambda_Id"];
    this->column_True_Online_TD_Lambda_Id = __super::Columns[L"True-Online-TD-Lambda_Id"];
    this->column_TDC_Lambda_Id = __super::Columns[L"TDC-Lambda_Id"];
}

inline ::System::Void NewDataSet::vfaDataTable::InitClass() {
    this->columnvfa_Id = (gcnew ::System::Data::DataColumn(L"vfa_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnvfa_Id);
    this->columnCACLA_Id = (gcnew ::System::Data::DataColumn(L"CACLA_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnCACLA_Id);
    this->column_TD_Lambda_Id = (gcnew ::System::Data::DataColumn(L"TD-Lambda_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_TD_Lambda_Id);
    this->column_True_Online_TD_Lambda_Id = (gcnew ::System::Data::DataColumn(L"True-Online-TD-Lambda_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_True_Online_TD_Lambda_Id);
    this->column_TDC_Lambda_Id = (gcnew ::System::Data::DataColumn(L"TDC-Lambda_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_TDC_Lambda_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnvfa_Id}, 
            true)));
    this->columnvfa_Id->AutoIncrement = true;
    this->columnvfa_Id->AllowDBNull = false;
    this->columnvfa_Id->Unique = true;
}

inline NewDataSet::vfaRow^  NewDataSet::vfaDataTable::NewvfaRow() {
    return (cli::safe_cast<NewDataSet::vfaRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::vfaDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::vfaRow(builder));
}

inline ::System::Type^  NewDataSet::vfaDataTable::GetRowType() {
    return NewDataSet::vfaRow::typeid;
}

inline ::System::Void NewDataSet::vfaDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->vfaRowChanged(this, (gcnew NewDataSet::vfaRowChangeEvent((cli::safe_cast<NewDataSet::vfaRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::vfaDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->vfaRowChanging(this, (gcnew NewDataSet::vfaRowChangeEvent((cli::safe_cast<NewDataSet::vfaRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::vfaDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->vfaRowDeleted(this, (gcnew NewDataSet::vfaRowChangeEvent((cli::safe_cast<NewDataSet::vfaRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::vfaDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->vfaRowDeleting(this, (gcnew NewDataSet::vfaRowChangeEvent((cli::safe_cast<NewDataSet::vfaRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::vfaDataTable::RemovevfaRow(NewDataSet::vfaRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::vfaDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"vfaDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::NOISE_WIDTHDataTable::NOISE_WIDTHDataTable() {
    this->TableName = L"NOISE_WIDTH";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::NOISE_WIDTHDataTable::NOISE_WIDTHDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::NOISE_WIDTHDataTable::NOISE_WIDTHDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::NOISE_WIDTHDataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::NOISE_WIDTHDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::NOISE_WIDTHDataTable::NOISE_WIDTH_IdColumn::get() {
    return this->columnNOISE_WIDTH_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::NOISE_WIDTHDataTable::vfa_IdColumn::get() {
    return this->columnvfa_Id;
}

inline ::System::Int32 NewDataSet::NOISE_WIDTHDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::NOISE_WIDTHRow^  NewDataSet::NOISE_WIDTHDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::NOISE_WIDTHRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::NOISE_WIDTHDataTable::AddNOISE_WIDTHRow(NewDataSet::NOISE_WIDTHRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::NOISE_WIDTHRow^  NewDataSet::NOISE_WIDTHDataTable::AddNOISE_WIDTHRow(System::String^  TYPE, System::Decimal decimal, 
            NewDataSet::vfaRow^  parentvfaRowByvfa_NOISE_WIDTH) {
    NewDataSet::NOISE_WIDTHRow^  rowNOISE_WIDTHRow = (cli::safe_cast<NewDataSet::NOISE_WIDTHRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {TYPE, decimal, nullptr, 
        nullptr};
    if (parentvfaRowByvfa_NOISE_WIDTH != nullptr) {
        columnValuesArray[3] = parentvfaRowByvfa_NOISE_WIDTH[0];
    }
    rowNOISE_WIDTHRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowNOISE_WIDTHRow);
    return rowNOISE_WIDTHRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::NOISE_WIDTHDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::NOISE_WIDTHDataTable::Clone() {
    NewDataSet::NOISE_WIDTHDataTable^  cln = (cli::safe_cast<NewDataSet::NOISE_WIDTHDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::NOISE_WIDTHDataTable::CreateInstance() {
    return (gcnew NewDataSet::NOISE_WIDTHDataTable());
}

inline ::System::Void NewDataSet::NOISE_WIDTHDataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnNOISE_WIDTH_Id = __super::Columns[L"NOISE_WIDTH_Id"];
    this->columnvfa_Id = __super::Columns[L"vfa_Id"];
}

inline ::System::Void NewDataSet::NOISE_WIDTHDataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnNOISE_WIDTH_Id = (gcnew ::System::Data::DataColumn(L"NOISE_WIDTH_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnNOISE_WIDTH_Id);
    this->columnvfa_Id = (gcnew ::System::Data::DataColumn(L"vfa_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnvfa_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnNOISE_WIDTH_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnNOISE_WIDTH_Id->AutoIncrement = true;
    this->columnNOISE_WIDTH_Id->AllowDBNull = false;
    this->columnNOISE_WIDTH_Id->Unique = true;
}

inline NewDataSet::NOISE_WIDTHRow^  NewDataSet::NOISE_WIDTHDataTable::NewNOISE_WIDTHRow() {
    return (cli::safe_cast<NewDataSet::NOISE_WIDTHRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::NOISE_WIDTHDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::NOISE_WIDTHRow(builder));
}

inline ::System::Type^  NewDataSet::NOISE_WIDTHDataTable::GetRowType() {
    return NewDataSet::NOISE_WIDTHRow::typeid;
}

inline ::System::Void NewDataSet::NOISE_WIDTHDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->NOISE_WIDTHRowChanged(this, (gcnew NewDataSet::NOISE_WIDTHRowChangeEvent((cli::safe_cast<NewDataSet::NOISE_WIDTHRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::NOISE_WIDTHDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->NOISE_WIDTHRowChanging(this, (gcnew NewDataSet::NOISE_WIDTHRowChangeEvent((cli::safe_cast<NewDataSet::NOISE_WIDTHRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::NOISE_WIDTHDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->NOISE_WIDTHRowDeleted(this, (gcnew NewDataSet::NOISE_WIDTHRowChangeEvent((cli::safe_cast<NewDataSet::NOISE_WIDTHRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::NOISE_WIDTHDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->NOISE_WIDTHRowDeleting(this, (gcnew NewDataSet::NOISE_WIDTHRowChangeEvent((cli::safe_cast<NewDataSet::NOISE_WIDTHRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::NOISE_WIDTHDataTable::RemoveNOISE_WIDTHRow(NewDataSet::NOISE_WIDTHRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::NOISE_WIDTHDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"NOISE_WIDTHDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::scheduleDataTable::scheduleDataTable() {
    this->TableName = L"schedule";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::scheduleDataTable::scheduleDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::scheduleDataTable::scheduleDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::INITIAL_VALUEColumn::get() {
    return this->columnINITIAL_VALUE;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::FINAL_VALUEColumn::get() {
    return this->columnFINAL_VALUE;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::EVALUATION_EPISODE_VALUEColumn::get() {
    return this->columnEVALUATION_EPISODE_VALUE;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::INTERPOLATIONColumn::get() {
    return this->columnINTERPOLATION;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::NOISE_WIDTH_IdColumn::get() {
    return this->columnNOISE_WIDTH_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::LEARNING_RATE_IdColumn::get() {
    return this->columnLEARNING_RATE_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::KP_IdColumn::get() {
    return this->columnKP_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::KI_IdColumn::get() {
    return this->columnKI_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::KD_IdColumn::get() {
    return this->columnKD_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::VS_RtGnSp_IdColumn::get() {
    return this->columnVS_RtGnSp_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::VS_SlPc_IdColumn::get() {
    return this->columnVS_SlPc_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::VS_Rgn2K_IdColumn::get() {
    return this->columnVS_Rgn2K_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::VS_Rgn2Sp_IdColumn::get() {
    return this->columnVS_Rgn2Sp_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::VS_CtInSp_IdColumn::get() {
    return this->columnVS_CtInSp_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::VS_RtPwr_IdColumn::get() {
    return this->columnVS_RtPwr_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::VS_Rgn3MP_IdColumn::get() {
    return this->columnVS_Rgn3MP_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::PC_KI_IdColumn::get() {
    return this->columnPC_KI_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::PC_KK_IdColumn::get() {
    return this->columnPC_KK_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::PC_KP_IdColumn::get() {
    return this->columnPC_KP_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::PC_RefSpd_IdColumn::get() {
    return this->columnPC_RefSpd_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::A_IdColumn::get() {
    return this->columnA_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::K_alpha_IdColumn::get() {
    return this->columnK_alpha_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::P_s_IdColumn::get() {
    return this->columnP_s_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::C_0_IdColumn::get() {
    return this->columnC_0_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::K_t_IdColumn::get() {
    return this->columnK_t_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::scheduleDataTable::J_t_IdColumn::get() {
    return this->columnJ_t_Id;
}

inline ::System::Int32 NewDataSet::scheduleDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::scheduleRow^  NewDataSet::scheduleDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::scheduleRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::scheduleDataTable::AddscheduleRow(NewDataSet::scheduleRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::scheduleRow^  NewDataSet::scheduleDataTable::AddscheduleRow(
            System::Decimal INITIAL_VALUE, 
            System::Decimal FINAL_VALUE, 
            System::Decimal EVALUATION_EPISODE_VALUE, 
            System::String^  INTERPOLATION, 
            NewDataSet::NOISE_WIDTHRow^  parentNOISE_WIDTHRowByNOISE_WIDTH_schedule, 
            NewDataSet::LEARNING_RATERow^  parentLEARNING_RATERowByLEARNING_RATE_schedule, 
            NewDataSet::KPRow^  parentKPRowByKP_schedule, 
            NewDataSet::KIRow^  parentKIRowByKI_schedule, 
            NewDataSet::KDRow^  parentKDRowByKD_schedule, 
            NewDataSet::VS_RtGnSpRow^  parentVS_RtGnSpRowByVS_RtGnSp_schedule, 
            NewDataSet::VS_SlPcRow^  parentVS_SlPcRowByVS_SlPc_schedule, 
            NewDataSet::VS_Rgn2KRow^  parentVS_Rgn2KRowByVS_Rgn2K_schedule, 
            NewDataSet::VS_Rgn2SpRow^  parentVS_Rgn2SpRowByVS_Rgn2Sp_schedule, 
            NewDataSet::VS_CtInSpRow^  parentVS_CtInSpRowByVS_CtInSp_schedule, 
            NewDataSet::VS_RtPwrRow^  parentVS_RtPwrRowByVS_RtPwr_schedule, 
            NewDataSet::VS_Rgn3MPRow^  parentVS_Rgn3MPRowByVS_Rgn3MP_schedule, 
            NewDataSet::PC_KIRow^  parentPC_KIRowByPC_KI_schedule, 
            NewDataSet::PC_KKRow^  parentPC_KKRowByPC_KK_schedule, 
            NewDataSet::PC_KPRow^  parentPC_KPRowByPC_KP_schedule, 
            NewDataSet::PC_RefSpdRow^  parentPC_RefSpdRowByPC_RefSpd_schedule, 
            NewDataSet::ARow^  parentARowByA_schedule, 
            NewDataSet::K_alphaRow^  parentK_alphaRowByK_alpha_schedule, 
            NewDataSet::P_sRow^  parentP_sRowByP_s_schedule, 
            NewDataSet::C_0Row^  parentC_0RowByC_0_schedule, 
            NewDataSet::K_tRow^  parentK_tRowByK_t_schedule, 
            NewDataSet::J_tRow^  parentJ_tRowByJ_t_schedule) {
    NewDataSet::scheduleRow^  rowscheduleRow = (cli::safe_cast<NewDataSet::scheduleRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(26) {INITIAL_VALUE, FINAL_VALUE, 
        EVALUATION_EPISODE_VALUE, INTERPOLATION, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, 
        nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr};
    if (parentNOISE_WIDTHRowByNOISE_WIDTH_schedule != nullptr) {
        columnValuesArray[4] = parentNOISE_WIDTHRowByNOISE_WIDTH_schedule[2];
    }
    if (parentLEARNING_RATERowByLEARNING_RATE_schedule != nullptr) {
        columnValuesArray[5] = parentLEARNING_RATERowByLEARNING_RATE_schedule[2];
    }
    if (parentKPRowByKP_schedule != nullptr) {
        columnValuesArray[6] = parentKPRowByKP_schedule[2];
    }
    if (parentKIRowByKI_schedule != nullptr) {
        columnValuesArray[7] = parentKIRowByKI_schedule[2];
    }
    if (parentKDRowByKD_schedule != nullptr) {
        columnValuesArray[8] = parentKDRowByKD_schedule[2];
    }
    if (parentVS_RtGnSpRowByVS_RtGnSp_schedule != nullptr) {
        columnValuesArray[9] = parentVS_RtGnSpRowByVS_RtGnSp_schedule[2];
    }
    if (parentVS_SlPcRowByVS_SlPc_schedule != nullptr) {
        columnValuesArray[10] = parentVS_SlPcRowByVS_SlPc_schedule[2];
    }
    if (parentVS_Rgn2KRowByVS_Rgn2K_schedule != nullptr) {
        columnValuesArray[11] = parentVS_Rgn2KRowByVS_Rgn2K_schedule[2];
    }
    if (parentVS_Rgn2SpRowByVS_Rgn2Sp_schedule != nullptr) {
        columnValuesArray[12] = parentVS_Rgn2SpRowByVS_Rgn2Sp_schedule[2];
    }
    if (parentVS_CtInSpRowByVS_CtInSp_schedule != nullptr) {
        columnValuesArray[13] = parentVS_CtInSpRowByVS_CtInSp_schedule[2];
    }
    if (parentVS_RtPwrRowByVS_RtPwr_schedule != nullptr) {
        columnValuesArray[14] = parentVS_RtPwrRowByVS_RtPwr_schedule[2];
    }
    if (parentVS_Rgn3MPRowByVS_Rgn3MP_schedule != nullptr) {
        columnValuesArray[15] = parentVS_Rgn3MPRowByVS_Rgn3MP_schedule[2];
    }
    if (parentPC_KIRowByPC_KI_schedule != nullptr) {
        columnValuesArray[16] = parentPC_KIRowByPC_KI_schedule[2];
    }
    if (parentPC_KKRowByPC_KK_schedule != nullptr) {
        columnValuesArray[17] = parentPC_KKRowByPC_KK_schedule[2];
    }
    if (parentPC_KPRowByPC_KP_schedule != nullptr) {
        columnValuesArray[18] = parentPC_KPRowByPC_KP_schedule[2];
    }
    if (parentPC_RefSpdRowByPC_RefSpd_schedule != nullptr) {
        columnValuesArray[19] = parentPC_RefSpdRowByPC_RefSpd_schedule[2];
    }
    if (parentARowByA_schedule != nullptr) {
        columnValuesArray[20] = parentARowByA_schedule[2];
    }
    if (parentK_alphaRowByK_alpha_schedule != nullptr) {
        columnValuesArray[21] = parentK_alphaRowByK_alpha_schedule[2];
    }
    if (parentP_sRowByP_s_schedule != nullptr) {
        columnValuesArray[22] = parentP_sRowByP_s_schedule[2];
    }
    if (parentC_0RowByC_0_schedule != nullptr) {
        columnValuesArray[23] = parentC_0RowByC_0_schedule[2];
    }
    if (parentK_tRowByK_t_schedule != nullptr) {
        columnValuesArray[24] = parentK_tRowByK_t_schedule[2];
    }
    if (parentJ_tRowByJ_t_schedule != nullptr) {
        columnValuesArray[25] = parentJ_tRowByJ_t_schedule[2];
    }
    rowscheduleRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowscheduleRow);
    return rowscheduleRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::scheduleDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::scheduleDataTable::Clone() {
    NewDataSet::scheduleDataTable^  cln = (cli::safe_cast<NewDataSet::scheduleDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::scheduleDataTable::CreateInstance() {
    return (gcnew NewDataSet::scheduleDataTable());
}

inline ::System::Void NewDataSet::scheduleDataTable::InitVars() {
    this->columnINITIAL_VALUE = __super::Columns[L"INITIAL_VALUE"];
    this->columnFINAL_VALUE = __super::Columns[L"FINAL_VALUE"];
    this->columnEVALUATION_EPISODE_VALUE = __super::Columns[L"EVALUATION_EPISODE_VALUE"];
    this->columnINTERPOLATION = __super::Columns[L"INTERPOLATION"];
    this->columnNOISE_WIDTH_Id = __super::Columns[L"NOISE_WIDTH_Id"];
    this->columnLEARNING_RATE_Id = __super::Columns[L"LEARNING_RATE_Id"];
    this->columnKP_Id = __super::Columns[L"KP_Id"];
    this->columnKI_Id = __super::Columns[L"KI_Id"];
    this->columnKD_Id = __super::Columns[L"KD_Id"];
    this->columnVS_RtGnSp_Id = __super::Columns[L"VS_RtGnSp_Id"];
    this->columnVS_SlPc_Id = __super::Columns[L"VS_SlPc_Id"];
    this->columnVS_Rgn2K_Id = __super::Columns[L"VS_Rgn2K_Id"];
    this->columnVS_Rgn2Sp_Id = __super::Columns[L"VS_Rgn2Sp_Id"];
    this->columnVS_CtInSp_Id = __super::Columns[L"VS_CtInSp_Id"];
    this->columnVS_RtPwr_Id = __super::Columns[L"VS_RtPwr_Id"];
    this->columnVS_Rgn3MP_Id = __super::Columns[L"VS_Rgn3MP_Id"];
    this->columnPC_KI_Id = __super::Columns[L"PC_KI_Id"];
    this->columnPC_KK_Id = __super::Columns[L"PC_KK_Id"];
    this->columnPC_KP_Id = __super::Columns[L"PC_KP_Id"];
    this->columnPC_RefSpd_Id = __super::Columns[L"PC_RefSpd_Id"];
    this->columnA_Id = __super::Columns[L"A_Id"];
    this->columnK_alpha_Id = __super::Columns[L"K_alpha_Id"];
    this->columnP_s_Id = __super::Columns[L"P_s_Id"];
    this->columnC_0_Id = __super::Columns[L"C_0_Id"];
    this->columnK_t_Id = __super::Columns[L"K_t_Id"];
    this->columnJ_t_Id = __super::Columns[L"J_t_Id"];
}

inline ::System::Void NewDataSet::scheduleDataTable::InitClass() {
    this->columnINITIAL_VALUE = (gcnew ::System::Data::DataColumn(L"INITIAL_VALUE", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnINITIAL_VALUE);
    this->columnFINAL_VALUE = (gcnew ::System::Data::DataColumn(L"FINAL_VALUE", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnFINAL_VALUE);
    this->columnEVALUATION_EPISODE_VALUE = (gcnew ::System::Data::DataColumn(L"EVALUATION_EPISODE_VALUE", ::System::Decimal::typeid, 
        nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnEVALUATION_EPISODE_VALUE);
    this->columnINTERPOLATION = (gcnew ::System::Data::DataColumn(L"INTERPOLATION", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnINTERPOLATION);
    this->columnNOISE_WIDTH_Id = (gcnew ::System::Data::DataColumn(L"NOISE_WIDTH_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnNOISE_WIDTH_Id);
    this->columnLEARNING_RATE_Id = (gcnew ::System::Data::DataColumn(L"LEARNING_RATE_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnLEARNING_RATE_Id);
    this->columnKP_Id = (gcnew ::System::Data::DataColumn(L"KP_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnKP_Id);
    this->columnKI_Id = (gcnew ::System::Data::DataColumn(L"KI_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnKI_Id);
    this->columnKD_Id = (gcnew ::System::Data::DataColumn(L"KD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnKD_Id);
    this->columnVS_RtGnSp_Id = (gcnew ::System::Data::DataColumn(L"VS_RtGnSp_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_RtGnSp_Id);
    this->columnVS_SlPc_Id = (gcnew ::System::Data::DataColumn(L"VS_SlPc_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_SlPc_Id);
    this->columnVS_Rgn2K_Id = (gcnew ::System::Data::DataColumn(L"VS_Rgn2K_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_Rgn2K_Id);
    this->columnVS_Rgn2Sp_Id = (gcnew ::System::Data::DataColumn(L"VS_Rgn2Sp_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_Rgn2Sp_Id);
    this->columnVS_CtInSp_Id = (gcnew ::System::Data::DataColumn(L"VS_CtInSp_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_CtInSp_Id);
    this->columnVS_RtPwr_Id = (gcnew ::System::Data::DataColumn(L"VS_RtPwr_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_RtPwr_Id);
    this->columnVS_Rgn3MP_Id = (gcnew ::System::Data::DataColumn(L"VS_Rgn3MP_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_Rgn3MP_Id);
    this->columnPC_KI_Id = (gcnew ::System::Data::DataColumn(L"PC_KI_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPC_KI_Id);
    this->columnPC_KK_Id = (gcnew ::System::Data::DataColumn(L"PC_KK_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPC_KK_Id);
    this->columnPC_KP_Id = (gcnew ::System::Data::DataColumn(L"PC_KP_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPC_KP_Id);
    this->columnPC_RefSpd_Id = (gcnew ::System::Data::DataColumn(L"PC_RefSpd_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPC_RefSpd_Id);
    this->columnA_Id = (gcnew ::System::Data::DataColumn(L"A_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnA_Id);
    this->columnK_alpha_Id = (gcnew ::System::Data::DataColumn(L"K_alpha_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnK_alpha_Id);
    this->columnP_s_Id = (gcnew ::System::Data::DataColumn(L"P_s_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnP_s_Id);
    this->columnC_0_Id = (gcnew ::System::Data::DataColumn(L"C_0_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnC_0_Id);
    this->columnK_t_Id = (gcnew ::System::Data::DataColumn(L"K_t_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnK_t_Id);
    this->columnJ_t_Id = (gcnew ::System::Data::DataColumn(L"J_t_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnJ_t_Id);
    this->columnINITIAL_VALUE->AllowDBNull = false;
    this->columnFINAL_VALUE->AllowDBNull = false;
    this->columnEVALUATION_EPISODE_VALUE->AllowDBNull = false;
    this->columnINTERPOLATION->AllowDBNull = false;
}

inline NewDataSet::scheduleRow^  NewDataSet::scheduleDataTable::NewscheduleRow() {
    return (cli::safe_cast<NewDataSet::scheduleRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::scheduleDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::scheduleRow(builder));
}

inline ::System::Type^  NewDataSet::scheduleDataTable::GetRowType() {
    return NewDataSet::scheduleRow::typeid;
}

inline ::System::Void NewDataSet::scheduleDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->scheduleRowChanged(this, (gcnew NewDataSet::scheduleRowChangeEvent((cli::safe_cast<NewDataSet::scheduleRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::scheduleDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->scheduleRowChanging(this, (gcnew NewDataSet::scheduleRowChangeEvent((cli::safe_cast<NewDataSet::scheduleRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::scheduleDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->scheduleRowDeleted(this, (gcnew NewDataSet::scheduleRowChangeEvent((cli::safe_cast<NewDataSet::scheduleRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::scheduleDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->scheduleRowDeleting(this, (gcnew NewDataSet::scheduleRowChangeEvent((cli::safe_cast<NewDataSet::scheduleRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::scheduleDataTable::RemovescheduleRow(NewDataSet::scheduleRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::scheduleDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"scheduleDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::LEARNING_RATEDataTable::LEARNING_RATEDataTable() {
    this->TableName = L"LEARNING_RATE";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::LEARNING_RATEDataTable::LEARNING_RATEDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::LEARNING_RATEDataTable::LEARNING_RATEDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::LEARNING_RATEDataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::LEARNING_RATEDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::LEARNING_RATEDataTable::LEARNING_RATE_IdColumn::get() {
    return this->columnLEARNING_RATE_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::LEARNING_RATEDataTable::vfa_IdColumn::get() {
    return this->columnvfa_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::LEARNING_RATEDataTable::_TD_Lambda_IdColumn::get() {
    return this->column_TD_Lambda_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::LEARNING_RATEDataTable::_True_Online_TD_Lambda_IdColumn::get() {
    return this->column_True_Online_TD_Lambda_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::LEARNING_RATEDataTable::_TDC_Lambda_IdColumn::get() {
    return this->column_TDC_Lambda_Id;
}

inline ::System::Int32 NewDataSet::LEARNING_RATEDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::LEARNING_RATERow^  NewDataSet::LEARNING_RATEDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::LEARNING_RATERow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::LEARNING_RATEDataTable::AddLEARNING_RATERow(NewDataSet::LEARNING_RATERow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::LEARNING_RATERow^  NewDataSet::LEARNING_RATEDataTable::AddLEARNING_RATERow(
            System::String^  TYPE, 
            System::Decimal decimal, 
            NewDataSet::vfaRow^  parentvfaRowByvfa_LEARNING_RATE, 
            NewDataSet::_TD_LambdaRow^  _parent_TD_LambdaRowByTD_Lambda_LEARNING_RATE, 
            NewDataSet::_True_Online_TD_LambdaRow^  _parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_LEARNING_RATE, 
            NewDataSet::_TDC_LambdaRow^  _parent_TDC_LambdaRowByTDC_Lambda_LEARNING_RATE) {
    NewDataSet::LEARNING_RATERow^  rowLEARNING_RATERow = (cli::safe_cast<NewDataSet::LEARNING_RATERow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(7) {TYPE, decimal, nullptr, 
        nullptr, nullptr, nullptr, nullptr};
    if (parentvfaRowByvfa_LEARNING_RATE != nullptr) {
        columnValuesArray[3] = parentvfaRowByvfa_LEARNING_RATE[0];
    }
    if (_parent_TD_LambdaRowByTD_Lambda_LEARNING_RATE != nullptr) {
        columnValuesArray[4] = _parent_TD_LambdaRowByTD_Lambda_LEARNING_RATE[0];
    }
    if (_parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_LEARNING_RATE != nullptr) {
        columnValuesArray[5] = _parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_LEARNING_RATE[0];
    }
    if (_parent_TDC_LambdaRowByTDC_Lambda_LEARNING_RATE != nullptr) {
        columnValuesArray[6] = _parent_TDC_LambdaRowByTDC_Lambda_LEARNING_RATE[0];
    }
    rowLEARNING_RATERow->ItemArray = columnValuesArray;
    this->Rows->Add(rowLEARNING_RATERow);
    return rowLEARNING_RATERow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::LEARNING_RATEDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::LEARNING_RATEDataTable::Clone() {
    NewDataSet::LEARNING_RATEDataTable^  cln = (cli::safe_cast<NewDataSet::LEARNING_RATEDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::LEARNING_RATEDataTable::CreateInstance() {
    return (gcnew NewDataSet::LEARNING_RATEDataTable());
}

inline ::System::Void NewDataSet::LEARNING_RATEDataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnLEARNING_RATE_Id = __super::Columns[L"LEARNING_RATE_Id"];
    this->columnvfa_Id = __super::Columns[L"vfa_Id"];
    this->column_TD_Lambda_Id = __super::Columns[L"TD-Lambda_Id"];
    this->column_True_Online_TD_Lambda_Id = __super::Columns[L"True-Online-TD-Lambda_Id"];
    this->column_TDC_Lambda_Id = __super::Columns[L"TDC-Lambda_Id"];
}

inline ::System::Void NewDataSet::LEARNING_RATEDataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnLEARNING_RATE_Id = (gcnew ::System::Data::DataColumn(L"LEARNING_RATE_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnLEARNING_RATE_Id);
    this->columnvfa_Id = (gcnew ::System::Data::DataColumn(L"vfa_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnvfa_Id);
    this->column_TD_Lambda_Id = (gcnew ::System::Data::DataColumn(L"TD-Lambda_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_TD_Lambda_Id);
    this->column_True_Online_TD_Lambda_Id = (gcnew ::System::Data::DataColumn(L"True-Online-TD-Lambda_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_True_Online_TD_Lambda_Id);
    this->column_TDC_Lambda_Id = (gcnew ::System::Data::DataColumn(L"TDC-Lambda_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_TDC_Lambda_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnLEARNING_RATE_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnLEARNING_RATE_Id->AutoIncrement = true;
    this->columnLEARNING_RATE_Id->AllowDBNull = false;
    this->columnLEARNING_RATE_Id->Unique = true;
}

inline NewDataSet::LEARNING_RATERow^  NewDataSet::LEARNING_RATEDataTable::NewLEARNING_RATERow() {
    return (cli::safe_cast<NewDataSet::LEARNING_RATERow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::LEARNING_RATEDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::LEARNING_RATERow(builder));
}

inline ::System::Type^  NewDataSet::LEARNING_RATEDataTable::GetRowType() {
    return NewDataSet::LEARNING_RATERow::typeid;
}

inline ::System::Void NewDataSet::LEARNING_RATEDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->LEARNING_RATERowChanged(this, (gcnew NewDataSet::LEARNING_RATERowChangeEvent((cli::safe_cast<NewDataSet::LEARNING_RATERow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::LEARNING_RATEDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->LEARNING_RATERowChanging(this, (gcnew NewDataSet::LEARNING_RATERowChangeEvent((cli::safe_cast<NewDataSet::LEARNING_RATERow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::LEARNING_RATEDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->LEARNING_RATERowDeleted(this, (gcnew NewDataSet::LEARNING_RATERowChangeEvent((cli::safe_cast<NewDataSet::LEARNING_RATERow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::LEARNING_RATEDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->LEARNING_RATERowDeleting(this, (gcnew NewDataSet::LEARNING_RATERowChangeEvent((cli::safe_cast<NewDataSet::LEARNING_RATERow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::LEARNING_RATEDataTable::RemoveLEARNING_RATERow(NewDataSet::LEARNING_RATERow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::LEARNING_RATEDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"LEARNING_RATEDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::RBF_GRIDDataTable::RBF_GRIDDataTable() {
    this->TableName = L"RBF_GRID";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::RBF_GRIDDataTable::RBF_GRIDDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::RBF_GRIDDataTable::RBF_GRIDDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::RBF_GRIDDataTable::RBF_GRID_IdColumn::get() {
    return this->columnRBF_GRID_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::RBF_GRIDDataTable::vfa_IdColumn::get() {
    return this->columnvfa_Id;
}

inline ::System::Int32 NewDataSet::RBF_GRIDDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::RBF_GRIDRow^  NewDataSet::RBF_GRIDDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::RBF_GRIDRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::RBF_GRIDDataTable::AddRBF_GRIDRow(NewDataSet::RBF_GRIDRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::RBF_GRIDRow^  NewDataSet::RBF_GRIDDataTable::AddRBF_GRIDRow(NewDataSet::vfaRow^  parentvfaRowByvfa_RBF_GRID) {
    NewDataSet::RBF_GRIDRow^  rowRBF_GRIDRow = (cli::safe_cast<NewDataSet::RBF_GRIDRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentvfaRowByvfa_RBF_GRID != nullptr) {
        columnValuesArray[1] = parentvfaRowByvfa_RBF_GRID[0];
    }
    rowRBF_GRIDRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowRBF_GRIDRow);
    return rowRBF_GRIDRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::RBF_GRIDDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::RBF_GRIDDataTable::Clone() {
    NewDataSet::RBF_GRIDDataTable^  cln = (cli::safe_cast<NewDataSet::RBF_GRIDDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::RBF_GRIDDataTable::CreateInstance() {
    return (gcnew NewDataSet::RBF_GRIDDataTable());
}

inline ::System::Void NewDataSet::RBF_GRIDDataTable::InitVars() {
    this->columnRBF_GRID_Id = __super::Columns[L"RBF_GRID_Id"];
    this->columnvfa_Id = __super::Columns[L"vfa_Id"];
}

inline ::System::Void NewDataSet::RBF_GRIDDataTable::InitClass() {
    this->columnRBF_GRID_Id = (gcnew ::System::Data::DataColumn(L"RBF_GRID_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnRBF_GRID_Id);
    this->columnvfa_Id = (gcnew ::System::Data::DataColumn(L"vfa_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnvfa_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnRBF_GRID_Id}, 
            true)));
    this->columnRBF_GRID_Id->AutoIncrement = true;
    this->columnRBF_GRID_Id->AllowDBNull = false;
    this->columnRBF_GRID_Id->Unique = true;
}

inline NewDataSet::RBF_GRIDRow^  NewDataSet::RBF_GRIDDataTable::NewRBF_GRIDRow() {
    return (cli::safe_cast<NewDataSet::RBF_GRIDRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::RBF_GRIDDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::RBF_GRIDRow(builder));
}

inline ::System::Type^  NewDataSet::RBF_GRIDDataTable::GetRowType() {
    return NewDataSet::RBF_GRIDRow::typeid;
}

inline ::System::Void NewDataSet::RBF_GRIDDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->RBF_GRIDRowChanged(this, (gcnew NewDataSet::RBF_GRIDRowChangeEvent((cli::safe_cast<NewDataSet::RBF_GRIDRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::RBF_GRIDDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->RBF_GRIDRowChanging(this, (gcnew NewDataSet::RBF_GRIDRowChangeEvent((cli::safe_cast<NewDataSet::RBF_GRIDRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::RBF_GRIDDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->RBF_GRIDRowDeleted(this, (gcnew NewDataSet::RBF_GRIDRowChangeEvent((cli::safe_cast<NewDataSet::RBF_GRIDRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::RBF_GRIDDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->RBF_GRIDRowDeleting(this, (gcnew NewDataSet::RBF_GRIDRowChangeEvent((cli::safe_cast<NewDataSet::RBF_GRIDRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::RBF_GRIDDataTable::RemoveRBF_GRIDRow(NewDataSet::RBF_GRIDRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::RBF_GRIDDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"RBF_GRIDDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::dimensionDataTable::dimensionDataTable() {
    this->TableName = L"dimension";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::dimensionDataTable::dimensionDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::dimensionDataTable::dimensionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::dimensionDataTable::_state_action_variableColumn::get() {
    return this->column_state_action_variable;
}

inline ::System::Data::DataColumn^  NewDataSet::dimensionDataTable::_dimension_num_featuresColumn::get() {
    return this->column_dimension_num_features;
}

inline ::System::Data::DataColumn^  NewDataSet::dimensionDataTable::_feature_distributionColumn::get() {
    return this->column_feature_distribution;
}

inline ::System::Data::DataColumn^  NewDataSet::dimensionDataTable::RBF_GRID_IdColumn::get() {
    return this->columnRBF_GRID_Id;
}

inline ::System::Int32 NewDataSet::dimensionDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::dimensionRow^  NewDataSet::dimensionDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::dimensionRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::dimensionDataTable::AdddimensionRow(NewDataSet::dimensionRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::dimensionRow^  NewDataSet::dimensionDataTable::AdddimensionRow(System::String^  _state_action_variable, 
            System::Int64 _dimension_num_features, System::String^  _feature_distribution, NewDataSet::RBF_GRIDRow^  parentRBF_GRIDRowByRBF_GRID_dimension) {
    NewDataSet::dimensionRow^  rowdimensionRow = (cli::safe_cast<NewDataSet::dimensionRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {_state_action_variable, 
        _dimension_num_features, _feature_distribution, nullptr};
    if (parentRBF_GRIDRowByRBF_GRID_dimension != nullptr) {
        columnValuesArray[3] = parentRBF_GRIDRowByRBF_GRID_dimension[0];
    }
    rowdimensionRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowdimensionRow);
    return rowdimensionRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::dimensionDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::dimensionDataTable::Clone() {
    NewDataSet::dimensionDataTable^  cln = (cli::safe_cast<NewDataSet::dimensionDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::dimensionDataTable::CreateInstance() {
    return (gcnew NewDataSet::dimensionDataTable());
}

inline ::System::Void NewDataSet::dimensionDataTable::InitVars() {
    this->column_state_action_variable = __super::Columns[L"state-action-variable"];
    this->column_dimension_num_features = __super::Columns[L"dimension-num-features"];
    this->column_feature_distribution = __super::Columns[L"feature-distribution"];
    this->columnRBF_GRID_Id = __super::Columns[L"RBF_GRID_Id"];
}

inline ::System::Void NewDataSet::dimensionDataTable::InitClass() {
    this->column_state_action_variable = (gcnew ::System::Data::DataColumn(L"state-action-variable", ::System::String::typeid, nullptr, 
        ::System::Data::MappingType::Element));
    __super::Columns->Add(this->column_state_action_variable);
    this->column_dimension_num_features = (gcnew ::System::Data::DataColumn(L"dimension-num-features", ::System::Int64::typeid, nullptr, 
        ::System::Data::MappingType::Element));
    __super::Columns->Add(this->column_dimension_num_features);
    this->column_feature_distribution = (gcnew ::System::Data::DataColumn(L"feature-distribution", ::System::String::typeid, nullptr, 
        ::System::Data::MappingType::Element));
    __super::Columns->Add(this->column_feature_distribution);
    this->columnRBF_GRID_Id = (gcnew ::System::Data::DataColumn(L"RBF_GRID_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnRBF_GRID_Id);
    this->column_state_action_variable->AllowDBNull = false;
    this->column_dimension_num_features->AllowDBNull = false;
    this->column_feature_distribution->AllowDBNull = false;
}

inline NewDataSet::dimensionRow^  NewDataSet::dimensionDataTable::NewdimensionRow() {
    return (cli::safe_cast<NewDataSet::dimensionRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::dimensionDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::dimensionRow(builder));
}

inline ::System::Type^  NewDataSet::dimensionDataTable::GetRowType() {
    return NewDataSet::dimensionRow::typeid;
}

inline ::System::Void NewDataSet::dimensionDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->dimensionRowChanged(this, (gcnew NewDataSet::dimensionRowChangeEvent((cli::safe_cast<NewDataSet::dimensionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::dimensionDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->dimensionRowChanging(this, (gcnew NewDataSet::dimensionRowChangeEvent((cli::safe_cast<NewDataSet::dimensionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::dimensionDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->dimensionRowDeleted(this, (gcnew NewDataSet::dimensionRowChangeEvent((cli::safe_cast<NewDataSet::dimensionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::dimensionDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->dimensionRowDeleting(this, (gcnew NewDataSet::dimensionRowChangeEvent((cli::safe_cast<NewDataSet::dimensionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::dimensionDataTable::RemovedimensionRow(NewDataSet::dimensionRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::dimensionDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"dimensionDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::PIDDataTable::PIDDataTable() {
    this->TableName = L"PID";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::PIDDataTable::PIDDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::PIDDataTable::PIDDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::PIDDataTable::ERROR_VARIABLEColumn::get() {
    return this->columnERROR_VARIABLE;
}

inline ::System::Data::DataColumn^  NewDataSet::PIDDataTable::PID_IdColumn::get() {
    return this->columnPID_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::PIDDataTable::actor_IdColumn::get() {
    return this->columnactor_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::PIDDataTable::controller_IdColumn::get() {
    return this->columncontroller_Id;
}

inline ::System::Int32 NewDataSet::PIDDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::PIDRow^  NewDataSet::PIDDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::PIDRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::PIDDataTable::AddPIDRow(NewDataSet::PIDRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::PIDRow^  NewDataSet::PIDDataTable::AddPIDRow(System::String^  ERROR_VARIABLE, NewDataSet::actorRow^  parentactorRowByactor_PID, 
            NewDataSet::controllerRow^  parentcontrollerRowBycontroller_PID) {
    NewDataSet::PIDRow^  rowPIDRow = (cli::safe_cast<NewDataSet::PIDRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {ERROR_VARIABLE, nullptr, 
        nullptr, nullptr};
    if (parentactorRowByactor_PID != nullptr) {
        columnValuesArray[2] = parentactorRowByactor_PID[3];
    }
    if (parentcontrollerRowBycontroller_PID != nullptr) {
        columnValuesArray[3] = parentcontrollerRowBycontroller_PID[3];
    }
    rowPIDRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowPIDRow);
    return rowPIDRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::PIDDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::PIDDataTable::Clone() {
    NewDataSet::PIDDataTable^  cln = (cli::safe_cast<NewDataSet::PIDDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::PIDDataTable::CreateInstance() {
    return (gcnew NewDataSet::PIDDataTable());
}

inline ::System::Void NewDataSet::PIDDataTable::InitVars() {
    this->columnERROR_VARIABLE = __super::Columns[L"ERROR_VARIABLE"];
    this->columnPID_Id = __super::Columns[L"PID_Id"];
    this->columnactor_Id = __super::Columns[L"actor_Id"];
    this->columncontroller_Id = __super::Columns[L"controller_Id"];
}

inline ::System::Void NewDataSet::PIDDataTable::InitClass() {
    this->columnERROR_VARIABLE = (gcnew ::System::Data::DataColumn(L"ERROR_VARIABLE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnERROR_VARIABLE);
    this->columnPID_Id = (gcnew ::System::Data::DataColumn(L"PID_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPID_Id);
    this->columnactor_Id = (gcnew ::System::Data::DataColumn(L"actor_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnactor_Id);
    this->columncontroller_Id = (gcnew ::System::Data::DataColumn(L"controller_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columncontroller_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnPID_Id}, 
            true)));
    this->columnERROR_VARIABLE->AllowDBNull = false;
    this->columnPID_Id->AutoIncrement = true;
    this->columnPID_Id->AllowDBNull = false;
    this->columnPID_Id->Unique = true;
}

inline NewDataSet::PIDRow^  NewDataSet::PIDDataTable::NewPIDRow() {
    return (cli::safe_cast<NewDataSet::PIDRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::PIDDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::PIDRow(builder));
}

inline ::System::Type^  NewDataSet::PIDDataTable::GetRowType() {
    return NewDataSet::PIDRow::typeid;
}

inline ::System::Void NewDataSet::PIDDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->PIDRowChanged(this, (gcnew NewDataSet::PIDRowChangeEvent((cli::safe_cast<NewDataSet::PIDRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::PIDDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->PIDRowChanging(this, (gcnew NewDataSet::PIDRowChangeEvent((cli::safe_cast<NewDataSet::PIDRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::PIDDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->PIDRowDeleted(this, (gcnew NewDataSet::PIDRowChangeEvent((cli::safe_cast<NewDataSet::PIDRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::PIDDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->PIDRowDeleting(this, (gcnew NewDataSet::PIDRowChangeEvent((cli::safe_cast<NewDataSet::PIDRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::PIDDataTable::RemovePIDRow(NewDataSet::PIDRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::PIDDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"PIDDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::KPDataTable::KPDataTable() {
    this->TableName = L"KP";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::KPDataTable::KPDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::KPDataTable::KPDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::KPDataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::KPDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::KPDataTable::KP_IdColumn::get() {
    return this->columnKP_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::KPDataTable::PID_IdColumn::get() {
    return this->columnPID_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::KPDataTable::vidal_IdColumn::get() {
    return this->columnvidal_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::KPDataTable::boukhezzar_IdColumn::get() {
    return this->columnboukhezzar_Id;
}

inline ::System::Int32 NewDataSet::KPDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::KPRow^  NewDataSet::KPDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::KPRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::KPDataTable::AddKPRow(NewDataSet::KPRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::KPRow^  NewDataSet::KPDataTable::AddKPRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::PIDRow^  parentPIDRowByPID_KP, 
            NewDataSet::vidalRow^  parentvidalRowByvidal_KP, NewDataSet::boukhezzarRow^  parentboukhezzarRowByboukhezzar_KP) {
    NewDataSet::KPRow^  rowKPRow = (cli::safe_cast<NewDataSet::KPRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(6) {TYPE, decimal, nullptr, 
        nullptr, nullptr, nullptr};
    if (parentPIDRowByPID_KP != nullptr) {
        columnValuesArray[3] = parentPIDRowByPID_KP[1];
    }
    if (parentvidalRowByvidal_KP != nullptr) {
        columnValuesArray[4] = parentvidalRowByvidal_KP[0];
    }
    if (parentboukhezzarRowByboukhezzar_KP != nullptr) {
        columnValuesArray[5] = parentboukhezzarRowByboukhezzar_KP[0];
    }
    rowKPRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowKPRow);
    return rowKPRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::KPDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::KPDataTable::Clone() {
    NewDataSet::KPDataTable^  cln = (cli::safe_cast<NewDataSet::KPDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::KPDataTable::CreateInstance() {
    return (gcnew NewDataSet::KPDataTable());
}

inline ::System::Void NewDataSet::KPDataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnKP_Id = __super::Columns[L"KP_Id"];
    this->columnPID_Id = __super::Columns[L"PID_Id"];
    this->columnvidal_Id = __super::Columns[L"vidal_Id"];
    this->columnboukhezzar_Id = __super::Columns[L"boukhezzar_Id"];
}

inline ::System::Void NewDataSet::KPDataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnKP_Id = (gcnew ::System::Data::DataColumn(L"KP_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnKP_Id);
    this->columnPID_Id = (gcnew ::System::Data::DataColumn(L"PID_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPID_Id);
    this->columnvidal_Id = (gcnew ::System::Data::DataColumn(L"vidal_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnvidal_Id);
    this->columnboukhezzar_Id = (gcnew ::System::Data::DataColumn(L"boukhezzar_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnboukhezzar_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnKP_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnKP_Id->AutoIncrement = true;
    this->columnKP_Id->AllowDBNull = false;
    this->columnKP_Id->Unique = true;
}

inline NewDataSet::KPRow^  NewDataSet::KPDataTable::NewKPRow() {
    return (cli::safe_cast<NewDataSet::KPRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::KPDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::KPRow(builder));
}

inline ::System::Type^  NewDataSet::KPDataTable::GetRowType() {
    return NewDataSet::KPRow::typeid;
}

inline ::System::Void NewDataSet::KPDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->KPRowChanged(this, (gcnew NewDataSet::KPRowChangeEvent((cli::safe_cast<NewDataSet::KPRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::KPDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->KPRowChanging(this, (gcnew NewDataSet::KPRowChangeEvent((cli::safe_cast<NewDataSet::KPRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::KPDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->KPRowDeleted(this, (gcnew NewDataSet::KPRowChangeEvent((cli::safe_cast<NewDataSet::KPRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::KPDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->KPRowDeleting(this, (gcnew NewDataSet::KPRowChangeEvent((cli::safe_cast<NewDataSet::KPRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::KPDataTable::RemoveKPRow(NewDataSet::KPRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::KPDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"KPDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::KIDataTable::KIDataTable() {
    this->TableName = L"KI";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::KIDataTable::KIDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::KIDataTable::KIDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::KIDataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::KIDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::KIDataTable::KI_IdColumn::get() {
    return this->columnKI_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::KIDataTable::PID_IdColumn::get() {
    return this->columnPID_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::KIDataTable::vidal_IdColumn::get() {
    return this->columnvidal_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::KIDataTable::boukhezzar_IdColumn::get() {
    return this->columnboukhezzar_Id;
}

inline ::System::Int32 NewDataSet::KIDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::KIRow^  NewDataSet::KIDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::KIRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::KIDataTable::AddKIRow(NewDataSet::KIRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::KIRow^  NewDataSet::KIDataTable::AddKIRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::PIDRow^  parentPIDRowByPID_KI, 
            NewDataSet::vidalRow^  parentvidalRowByvidal_KI, NewDataSet::boukhezzarRow^  parentboukhezzarRowByboukhezzar_KI) {
    NewDataSet::KIRow^  rowKIRow = (cli::safe_cast<NewDataSet::KIRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(6) {TYPE, decimal, nullptr, 
        nullptr, nullptr, nullptr};
    if (parentPIDRowByPID_KI != nullptr) {
        columnValuesArray[3] = parentPIDRowByPID_KI[1];
    }
    if (parentvidalRowByvidal_KI != nullptr) {
        columnValuesArray[4] = parentvidalRowByvidal_KI[0];
    }
    if (parentboukhezzarRowByboukhezzar_KI != nullptr) {
        columnValuesArray[5] = parentboukhezzarRowByboukhezzar_KI[0];
    }
    rowKIRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowKIRow);
    return rowKIRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::KIDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::KIDataTable::Clone() {
    NewDataSet::KIDataTable^  cln = (cli::safe_cast<NewDataSet::KIDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::KIDataTable::CreateInstance() {
    return (gcnew NewDataSet::KIDataTable());
}

inline ::System::Void NewDataSet::KIDataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnKI_Id = __super::Columns[L"KI_Id"];
    this->columnPID_Id = __super::Columns[L"PID_Id"];
    this->columnvidal_Id = __super::Columns[L"vidal_Id"];
    this->columnboukhezzar_Id = __super::Columns[L"boukhezzar_Id"];
}

inline ::System::Void NewDataSet::KIDataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnKI_Id = (gcnew ::System::Data::DataColumn(L"KI_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnKI_Id);
    this->columnPID_Id = (gcnew ::System::Data::DataColumn(L"PID_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPID_Id);
    this->columnvidal_Id = (gcnew ::System::Data::DataColumn(L"vidal_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnvidal_Id);
    this->columnboukhezzar_Id = (gcnew ::System::Data::DataColumn(L"boukhezzar_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnboukhezzar_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnKI_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnKI_Id->AutoIncrement = true;
    this->columnKI_Id->AllowDBNull = false;
    this->columnKI_Id->Unique = true;
}

inline NewDataSet::KIRow^  NewDataSet::KIDataTable::NewKIRow() {
    return (cli::safe_cast<NewDataSet::KIRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::KIDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::KIRow(builder));
}

inline ::System::Type^  NewDataSet::KIDataTable::GetRowType() {
    return NewDataSet::KIRow::typeid;
}

inline ::System::Void NewDataSet::KIDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->KIRowChanged(this, (gcnew NewDataSet::KIRowChangeEvent((cli::safe_cast<NewDataSet::KIRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::KIDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->KIRowChanging(this, (gcnew NewDataSet::KIRowChangeEvent((cli::safe_cast<NewDataSet::KIRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::KIDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->KIRowDeleted(this, (gcnew NewDataSet::KIRowChangeEvent((cli::safe_cast<NewDataSet::KIRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::KIDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->KIRowDeleting(this, (gcnew NewDataSet::KIRowChangeEvent((cli::safe_cast<NewDataSet::KIRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::KIDataTable::RemoveKIRow(NewDataSet::KIRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::KIDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"KIDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::KDDataTable::KDDataTable() {
    this->TableName = L"KD";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::KDDataTable::KDDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::KDDataTable::KDDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::KDDataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::KDDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::KDDataTable::KD_IdColumn::get() {
    return this->columnKD_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::KDDataTable::PID_IdColumn::get() {
    return this->columnPID_Id;
}

inline ::System::Int32 NewDataSet::KDDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::KDRow^  NewDataSet::KDDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::KDRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::KDDataTable::AddKDRow(NewDataSet::KDRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::KDRow^  NewDataSet::KDDataTable::AddKDRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::PIDRow^  parentPIDRowByPID_KD) {
    NewDataSet::KDRow^  rowKDRow = (cli::safe_cast<NewDataSet::KDRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {TYPE, decimal, nullptr, 
        nullptr};
    if (parentPIDRowByPID_KD != nullptr) {
        columnValuesArray[3] = parentPIDRowByPID_KD[1];
    }
    rowKDRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowKDRow);
    return rowKDRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::KDDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::KDDataTable::Clone() {
    NewDataSet::KDDataTable^  cln = (cli::safe_cast<NewDataSet::KDDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::KDDataTable::CreateInstance() {
    return (gcnew NewDataSet::KDDataTable());
}

inline ::System::Void NewDataSet::KDDataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnKD_Id = __super::Columns[L"KD_Id"];
    this->columnPID_Id = __super::Columns[L"PID_Id"];
}

inline ::System::Void NewDataSet::KDDataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnKD_Id = (gcnew ::System::Data::DataColumn(L"KD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnKD_Id);
    this->columnPID_Id = (gcnew ::System::Data::DataColumn(L"PID_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPID_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnKD_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnKD_Id->AutoIncrement = true;
    this->columnKD_Id->AllowDBNull = false;
    this->columnKD_Id->Unique = true;
}

inline NewDataSet::KDRow^  NewDataSet::KDDataTable::NewKDRow() {
    return (cli::safe_cast<NewDataSet::KDRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::KDDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::KDRow(builder));
}

inline ::System::Type^  NewDataSet::KDDataTable::GetRowType() {
    return NewDataSet::KDRow::typeid;
}

inline ::System::Void NewDataSet::KDDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->KDRowChanged(this, (gcnew NewDataSet::KDRowChangeEvent((cli::safe_cast<NewDataSet::KDRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::KDDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->KDRowChanging(this, (gcnew NewDataSet::KDRowChangeEvent((cli::safe_cast<NewDataSet::KDRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::KDDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->KDRowDeleted(this, (gcnew NewDataSet::KDRowChangeEvent((cli::safe_cast<NewDataSet::KDRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::KDDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->KDRowDeleting(this, (gcnew NewDataSet::KDRowChangeEvent((cli::safe_cast<NewDataSet::KDRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::KDDataTable::RemoveKDRow(NewDataSet::KDRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::KDDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"KDDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::LQRDataTable::LQRDataTable() {
    this->TableName = L"LQR";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::LQRDataTable::LQRDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::LQRDataTable::LQRDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::LQRDataTable::LQR_IdColumn::get() {
    return this->columnLQR_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::LQRDataTable::actor_IdColumn::get() {
    return this->columnactor_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::LQRDataTable::controller_IdColumn::get() {
    return this->columncontroller_Id;
}

inline ::System::Int32 NewDataSet::LQRDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::LQRRow^  NewDataSet::LQRDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::LQRRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::LQRDataTable::AddLQRRow(NewDataSet::LQRRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::LQRRow^  NewDataSet::LQRDataTable::AddLQRRow(NewDataSet::actorRow^  parentactorRowByactor_LQR, NewDataSet::controllerRow^  parentcontrollerRowBycontroller_LQR) {
    NewDataSet::LQRRow^  rowLQRRow = (cli::safe_cast<NewDataSet::LQRRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {nullptr, nullptr, nullptr};
    if (parentactorRowByactor_LQR != nullptr) {
        columnValuesArray[1] = parentactorRowByactor_LQR[3];
    }
    if (parentcontrollerRowBycontroller_LQR != nullptr) {
        columnValuesArray[2] = parentcontrollerRowBycontroller_LQR[3];
    }
    rowLQRRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowLQRRow);
    return rowLQRRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::LQRDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::LQRDataTable::Clone() {
    NewDataSet::LQRDataTable^  cln = (cli::safe_cast<NewDataSet::LQRDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::LQRDataTable::CreateInstance() {
    return (gcnew NewDataSet::LQRDataTable());
}

inline ::System::Void NewDataSet::LQRDataTable::InitVars() {
    this->columnLQR_Id = __super::Columns[L"LQR_Id"];
    this->columnactor_Id = __super::Columns[L"actor_Id"];
    this->columncontroller_Id = __super::Columns[L"controller_Id"];
}

inline ::System::Void NewDataSet::LQRDataTable::InitClass() {
    this->columnLQR_Id = (gcnew ::System::Data::DataColumn(L"LQR_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnLQR_Id);
    this->columnactor_Id = (gcnew ::System::Data::DataColumn(L"actor_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnactor_Id);
    this->columncontroller_Id = (gcnew ::System::Data::DataColumn(L"controller_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columncontroller_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnLQR_Id}, 
            true)));
    this->columnLQR_Id->AutoIncrement = true;
    this->columnLQR_Id->AllowDBNull = false;
    this->columnLQR_Id->Unique = true;
}

inline NewDataSet::LQRRow^  NewDataSet::LQRDataTable::NewLQRRow() {
    return (cli::safe_cast<NewDataSet::LQRRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::LQRDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::LQRRow(builder));
}

inline ::System::Type^  NewDataSet::LQRDataTable::GetRowType() {
    return NewDataSet::LQRRow::typeid;
}

inline ::System::Void NewDataSet::LQRDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->LQRRowChanged(this, (gcnew NewDataSet::LQRRowChangeEvent((cli::safe_cast<NewDataSet::LQRRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::LQRDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->LQRRowChanging(this, (gcnew NewDataSet::LQRRowChangeEvent((cli::safe_cast<NewDataSet::LQRRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::LQRDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->LQRRowDeleted(this, (gcnew NewDataSet::LQRRowChangeEvent((cli::safe_cast<NewDataSet::LQRRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::LQRDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->LQRRowDeleting(this, (gcnew NewDataSet::LQRRowChangeEvent((cli::safe_cast<NewDataSet::LQRRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::LQRDataTable::RemoveLQRRow(NewDataSet::LQRRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::LQRDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"LQRDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::_LQR_GAINDataTable::_LQR_GAINDataTable() {
    this->TableName = L"LQR-GAIN";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::_LQR_GAINDataTable::_LQR_GAINDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::_LQR_GAINDataTable::_LQR_GAINDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::_LQR_GAINDataTable::_state_variableColumn::get() {
    return this->column_state_variable;
}

inline ::System::Data::DataColumn^  NewDataSet::_LQR_GAINDataTable::gainColumn::get() {
    return this->columngain;
}

inline ::System::Data::DataColumn^  NewDataSet::_LQR_GAINDataTable::LQR_IdColumn::get() {
    return this->columnLQR_Id;
}

inline ::System::Int32 NewDataSet::_LQR_GAINDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::_LQR_GAINRow^  NewDataSet::_LQR_GAINDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::_LQR_GAINRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::_LQR_GAINDataTable::Add_LQR_GAINRow(NewDataSet::_LQR_GAINRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::_LQR_GAINRow^  NewDataSet::_LQR_GAINDataTable::Add_LQR_GAINRow(System::String^  _state_variable, System::Decimal gain, 
            NewDataSet::LQRRow^  _parentLQRRowByLQR_LQR_GAIN) {
    NewDataSet::_LQR_GAINRow^  row_LQR_GAINRow = (cli::safe_cast<NewDataSet::_LQR_GAINRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {_state_variable, gain, 
        nullptr};
    if (_parentLQRRowByLQR_LQR_GAIN != nullptr) {
        columnValuesArray[2] = _parentLQRRowByLQR_LQR_GAIN[0];
    }
    row_LQR_GAINRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_LQR_GAINRow);
    return row_LQR_GAINRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::_LQR_GAINDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::_LQR_GAINDataTable::Clone() {
    NewDataSet::_LQR_GAINDataTable^  cln = (cli::safe_cast<NewDataSet::_LQR_GAINDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::_LQR_GAINDataTable::CreateInstance() {
    return (gcnew NewDataSet::_LQR_GAINDataTable());
}

inline ::System::Void NewDataSet::_LQR_GAINDataTable::InitVars() {
    this->column_state_variable = __super::Columns[L"state-variable"];
    this->columngain = __super::Columns[L"gain"];
    this->columnLQR_Id = __super::Columns[L"LQR_Id"];
}

inline ::System::Void NewDataSet::_LQR_GAINDataTable::InitClass() {
    this->column_state_variable = (gcnew ::System::Data::DataColumn(L"state-variable", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->column_state_variable);
    this->columngain = (gcnew ::System::Data::DataColumn(L"gain", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columngain);
    this->columnLQR_Id = (gcnew ::System::Data::DataColumn(L"LQR_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnLQR_Id);
    this->column_state_variable->AllowDBNull = false;
    this->columngain->AllowDBNull = false;
}

inline NewDataSet::_LQR_GAINRow^  NewDataSet::_LQR_GAINDataTable::New_LQR_GAINRow() {
    return (cli::safe_cast<NewDataSet::_LQR_GAINRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::_LQR_GAINDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::_LQR_GAINRow(builder));
}

inline ::System::Type^  NewDataSet::_LQR_GAINDataTable::GetRowType() {
    return NewDataSet::_LQR_GAINRow::typeid;
}

inline ::System::Void NewDataSet::_LQR_GAINDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_LQR_GAINRowChanged(this, (gcnew NewDataSet::_LQR_GAINRowChangeEvent((cli::safe_cast<NewDataSet::_LQR_GAINRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_LQR_GAINDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_LQR_GAINRowChanging(this, (gcnew NewDataSet::_LQR_GAINRowChangeEvent((cli::safe_cast<NewDataSet::_LQR_GAINRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_LQR_GAINDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_LQR_GAINRowDeleted(this, (gcnew NewDataSet::_LQR_GAINRowChangeEvent((cli::safe_cast<NewDataSet::_LQR_GAINRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_LQR_GAINDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_LQR_GAINRowDeleting(this, (gcnew NewDataSet::_LQR_GAINRowChangeEvent((cli::safe_cast<NewDataSet::_LQR_GAINRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_LQR_GAINDataTable::Remove_LQR_GAINRow(NewDataSet::_LQR_GAINRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::_LQR_GAINDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_LQR_GAINDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::jonkmanDataTable::jonkmanDataTable() {
    this->TableName = L"jonkman";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::jonkmanDataTable::jonkmanDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::jonkmanDataTable::jonkmanDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::jonkmanDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::jonkmanDataTable::actor_IdColumn::get() {
    return this->columnactor_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::jonkmanDataTable::controller_IdColumn::get() {
    return this->columncontroller_Id;
}

inline ::System::Int32 NewDataSet::jonkmanDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::jonkmanRow^  NewDataSet::jonkmanDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::jonkmanRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::jonkmanDataTable::AddjonkmanRow(NewDataSet::jonkmanRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::jonkmanRow^  NewDataSet::jonkmanDataTable::AddjonkmanRow(NewDataSet::actorRow^  parentactorRowByactor_jonkman, 
            NewDataSet::controllerRow^  parentcontrollerRowBycontroller_jonkman) {
    NewDataSet::jonkmanRow^  rowjonkmanRow = (cli::safe_cast<NewDataSet::jonkmanRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {nullptr, nullptr, nullptr};
    if (parentactorRowByactor_jonkman != nullptr) {
        columnValuesArray[1] = parentactorRowByactor_jonkman[3];
    }
    if (parentcontrollerRowBycontroller_jonkman != nullptr) {
        columnValuesArray[2] = parentcontrollerRowBycontroller_jonkman[3];
    }
    rowjonkmanRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowjonkmanRow);
    return rowjonkmanRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::jonkmanDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::jonkmanDataTable::Clone() {
    NewDataSet::jonkmanDataTable^  cln = (cli::safe_cast<NewDataSet::jonkmanDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::jonkmanDataTable::CreateInstance() {
    return (gcnew NewDataSet::jonkmanDataTable());
}

inline ::System::Void NewDataSet::jonkmanDataTable::InitVars() {
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
    this->columnactor_Id = __super::Columns[L"actor_Id"];
    this->columncontroller_Id = __super::Columns[L"controller_Id"];
}

inline ::System::Void NewDataSet::jonkmanDataTable::InitClass() {
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->columnactor_Id = (gcnew ::System::Data::DataColumn(L"actor_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnactor_Id);
    this->columncontroller_Id = (gcnew ::System::Data::DataColumn(L"controller_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columncontroller_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnjonkman_Id}, 
            true)));
    this->columnjonkman_Id->AutoIncrement = true;
    this->columnjonkman_Id->AllowDBNull = false;
    this->columnjonkman_Id->Unique = true;
}

inline NewDataSet::jonkmanRow^  NewDataSet::jonkmanDataTable::NewjonkmanRow() {
    return (cli::safe_cast<NewDataSet::jonkmanRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::jonkmanDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::jonkmanRow(builder));
}

inline ::System::Type^  NewDataSet::jonkmanDataTable::GetRowType() {
    return NewDataSet::jonkmanRow::typeid;
}

inline ::System::Void NewDataSet::jonkmanDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->jonkmanRowChanged(this, (gcnew NewDataSet::jonkmanRowChangeEvent((cli::safe_cast<NewDataSet::jonkmanRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::jonkmanDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->jonkmanRowChanging(this, (gcnew NewDataSet::jonkmanRowChangeEvent((cli::safe_cast<NewDataSet::jonkmanRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::jonkmanDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->jonkmanRowDeleted(this, (gcnew NewDataSet::jonkmanRowChangeEvent((cli::safe_cast<NewDataSet::jonkmanRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::jonkmanDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->jonkmanRowDeleting(this, (gcnew NewDataSet::jonkmanRowChangeEvent((cli::safe_cast<NewDataSet::jonkmanRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::jonkmanDataTable::RemovejonkmanRow(NewDataSet::jonkmanRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::jonkmanDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"jonkmanDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::VS_RtGnSpDataTable::VS_RtGnSpDataTable() {
    this->TableName = L"VS_RtGnSp";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::VS_RtGnSpDataTable::VS_RtGnSpDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::VS_RtGnSpDataTable::VS_RtGnSpDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::VS_RtGnSpDataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_RtGnSpDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_RtGnSpDataTable::VS_RtGnSp_IdColumn::get() {
    return this->columnVS_RtGnSp_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_RtGnSpDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 NewDataSet::VS_RtGnSpDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::VS_RtGnSpRow^  NewDataSet::VS_RtGnSpDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::VS_RtGnSpRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::VS_RtGnSpDataTable::AddVS_RtGnSpRow(NewDataSet::VS_RtGnSpRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::VS_RtGnSpRow^  NewDataSet::VS_RtGnSpDataTable::AddVS_RtGnSpRow(System::String^  TYPE, System::Decimal decimal, 
            NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_VS_RtGnSp) {
    NewDataSet::VS_RtGnSpRow^  rowVS_RtGnSpRow = (cli::safe_cast<NewDataSet::VS_RtGnSpRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {TYPE, decimal, nullptr, 
        nullptr};
    if (parentjonkmanRowByjonkman_VS_RtGnSp != nullptr) {
        columnValuesArray[3] = parentjonkmanRowByjonkman_VS_RtGnSp[0];
    }
    rowVS_RtGnSpRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowVS_RtGnSpRow);
    return rowVS_RtGnSpRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::VS_RtGnSpDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::VS_RtGnSpDataTable::Clone() {
    NewDataSet::VS_RtGnSpDataTable^  cln = (cli::safe_cast<NewDataSet::VS_RtGnSpDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::VS_RtGnSpDataTable::CreateInstance() {
    return (gcnew NewDataSet::VS_RtGnSpDataTable());
}

inline ::System::Void NewDataSet::VS_RtGnSpDataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnVS_RtGnSp_Id = __super::Columns[L"VS_RtGnSp_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void NewDataSet::VS_RtGnSpDataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnVS_RtGnSp_Id = (gcnew ::System::Data::DataColumn(L"VS_RtGnSp_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_RtGnSp_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnVS_RtGnSp_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnVS_RtGnSp_Id->AutoIncrement = true;
    this->columnVS_RtGnSp_Id->AllowDBNull = false;
    this->columnVS_RtGnSp_Id->Unique = true;
}

inline NewDataSet::VS_RtGnSpRow^  NewDataSet::VS_RtGnSpDataTable::NewVS_RtGnSpRow() {
    return (cli::safe_cast<NewDataSet::VS_RtGnSpRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::VS_RtGnSpDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::VS_RtGnSpRow(builder));
}

inline ::System::Type^  NewDataSet::VS_RtGnSpDataTable::GetRowType() {
    return NewDataSet::VS_RtGnSpRow::typeid;
}

inline ::System::Void NewDataSet::VS_RtGnSpDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->VS_RtGnSpRowChanged(this, (gcnew NewDataSet::VS_RtGnSpRowChangeEvent((cli::safe_cast<NewDataSet::VS_RtGnSpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_RtGnSpDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->VS_RtGnSpRowChanging(this, (gcnew NewDataSet::VS_RtGnSpRowChangeEvent((cli::safe_cast<NewDataSet::VS_RtGnSpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_RtGnSpDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->VS_RtGnSpRowDeleted(this, (gcnew NewDataSet::VS_RtGnSpRowChangeEvent((cli::safe_cast<NewDataSet::VS_RtGnSpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_RtGnSpDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->VS_RtGnSpRowDeleting(this, (gcnew NewDataSet::VS_RtGnSpRowChangeEvent((cli::safe_cast<NewDataSet::VS_RtGnSpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_RtGnSpDataTable::RemoveVS_RtGnSpRow(NewDataSet::VS_RtGnSpRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::VS_RtGnSpDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"VS_RtGnSpDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::VS_SlPcDataTable::VS_SlPcDataTable() {
    this->TableName = L"VS_SlPc";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::VS_SlPcDataTable::VS_SlPcDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::VS_SlPcDataTable::VS_SlPcDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::VS_SlPcDataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_SlPcDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_SlPcDataTable::VS_SlPc_IdColumn::get() {
    return this->columnVS_SlPc_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_SlPcDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 NewDataSet::VS_SlPcDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::VS_SlPcRow^  NewDataSet::VS_SlPcDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::VS_SlPcRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::VS_SlPcDataTable::AddVS_SlPcRow(NewDataSet::VS_SlPcRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::VS_SlPcRow^  NewDataSet::VS_SlPcDataTable::AddVS_SlPcRow(System::String^  TYPE, System::Decimal decimal, 
            NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_VS_SlPc) {
    NewDataSet::VS_SlPcRow^  rowVS_SlPcRow = (cli::safe_cast<NewDataSet::VS_SlPcRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {TYPE, decimal, nullptr, 
        nullptr};
    if (parentjonkmanRowByjonkman_VS_SlPc != nullptr) {
        columnValuesArray[3] = parentjonkmanRowByjonkman_VS_SlPc[0];
    }
    rowVS_SlPcRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowVS_SlPcRow);
    return rowVS_SlPcRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::VS_SlPcDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::VS_SlPcDataTable::Clone() {
    NewDataSet::VS_SlPcDataTable^  cln = (cli::safe_cast<NewDataSet::VS_SlPcDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::VS_SlPcDataTable::CreateInstance() {
    return (gcnew NewDataSet::VS_SlPcDataTable());
}

inline ::System::Void NewDataSet::VS_SlPcDataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnVS_SlPc_Id = __super::Columns[L"VS_SlPc_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void NewDataSet::VS_SlPcDataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnVS_SlPc_Id = (gcnew ::System::Data::DataColumn(L"VS_SlPc_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_SlPc_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnVS_SlPc_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnVS_SlPc_Id->AutoIncrement = true;
    this->columnVS_SlPc_Id->AllowDBNull = false;
    this->columnVS_SlPc_Id->Unique = true;
}

inline NewDataSet::VS_SlPcRow^  NewDataSet::VS_SlPcDataTable::NewVS_SlPcRow() {
    return (cli::safe_cast<NewDataSet::VS_SlPcRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::VS_SlPcDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::VS_SlPcRow(builder));
}

inline ::System::Type^  NewDataSet::VS_SlPcDataTable::GetRowType() {
    return NewDataSet::VS_SlPcRow::typeid;
}

inline ::System::Void NewDataSet::VS_SlPcDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->VS_SlPcRowChanged(this, (gcnew NewDataSet::VS_SlPcRowChangeEvent((cli::safe_cast<NewDataSet::VS_SlPcRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_SlPcDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->VS_SlPcRowChanging(this, (gcnew NewDataSet::VS_SlPcRowChangeEvent((cli::safe_cast<NewDataSet::VS_SlPcRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_SlPcDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->VS_SlPcRowDeleted(this, (gcnew NewDataSet::VS_SlPcRowChangeEvent((cli::safe_cast<NewDataSet::VS_SlPcRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_SlPcDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->VS_SlPcRowDeleting(this, (gcnew NewDataSet::VS_SlPcRowChangeEvent((cli::safe_cast<NewDataSet::VS_SlPcRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_SlPcDataTable::RemoveVS_SlPcRow(NewDataSet::VS_SlPcRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::VS_SlPcDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"VS_SlPcDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::VS_Rgn2KDataTable::VS_Rgn2KDataTable() {
    this->TableName = L"VS_Rgn2K";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::VS_Rgn2KDataTable::VS_Rgn2KDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::VS_Rgn2KDataTable::VS_Rgn2KDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::VS_Rgn2KDataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_Rgn2KDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_Rgn2KDataTable::VS_Rgn2K_IdColumn::get() {
    return this->columnVS_Rgn2K_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_Rgn2KDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 NewDataSet::VS_Rgn2KDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::VS_Rgn2KRow^  NewDataSet::VS_Rgn2KDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::VS_Rgn2KRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::VS_Rgn2KDataTable::AddVS_Rgn2KRow(NewDataSet::VS_Rgn2KRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::VS_Rgn2KRow^  NewDataSet::VS_Rgn2KDataTable::AddVS_Rgn2KRow(System::String^  TYPE, System::Decimal decimal, 
            NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_VS_Rgn2K) {
    NewDataSet::VS_Rgn2KRow^  rowVS_Rgn2KRow = (cli::safe_cast<NewDataSet::VS_Rgn2KRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {TYPE, decimal, nullptr, 
        nullptr};
    if (parentjonkmanRowByjonkman_VS_Rgn2K != nullptr) {
        columnValuesArray[3] = parentjonkmanRowByjonkman_VS_Rgn2K[0];
    }
    rowVS_Rgn2KRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowVS_Rgn2KRow);
    return rowVS_Rgn2KRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::VS_Rgn2KDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::VS_Rgn2KDataTable::Clone() {
    NewDataSet::VS_Rgn2KDataTable^  cln = (cli::safe_cast<NewDataSet::VS_Rgn2KDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::VS_Rgn2KDataTable::CreateInstance() {
    return (gcnew NewDataSet::VS_Rgn2KDataTable());
}

inline ::System::Void NewDataSet::VS_Rgn2KDataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnVS_Rgn2K_Id = __super::Columns[L"VS_Rgn2K_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void NewDataSet::VS_Rgn2KDataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnVS_Rgn2K_Id = (gcnew ::System::Data::DataColumn(L"VS_Rgn2K_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_Rgn2K_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnVS_Rgn2K_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnVS_Rgn2K_Id->AutoIncrement = true;
    this->columnVS_Rgn2K_Id->AllowDBNull = false;
    this->columnVS_Rgn2K_Id->Unique = true;
}

inline NewDataSet::VS_Rgn2KRow^  NewDataSet::VS_Rgn2KDataTable::NewVS_Rgn2KRow() {
    return (cli::safe_cast<NewDataSet::VS_Rgn2KRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::VS_Rgn2KDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::VS_Rgn2KRow(builder));
}

inline ::System::Type^  NewDataSet::VS_Rgn2KDataTable::GetRowType() {
    return NewDataSet::VS_Rgn2KRow::typeid;
}

inline ::System::Void NewDataSet::VS_Rgn2KDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->VS_Rgn2KRowChanged(this, (gcnew NewDataSet::VS_Rgn2KRowChangeEvent((cli::safe_cast<NewDataSet::VS_Rgn2KRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_Rgn2KDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->VS_Rgn2KRowChanging(this, (gcnew NewDataSet::VS_Rgn2KRowChangeEvent((cli::safe_cast<NewDataSet::VS_Rgn2KRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_Rgn2KDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->VS_Rgn2KRowDeleted(this, (gcnew NewDataSet::VS_Rgn2KRowChangeEvent((cli::safe_cast<NewDataSet::VS_Rgn2KRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_Rgn2KDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->VS_Rgn2KRowDeleting(this, (gcnew NewDataSet::VS_Rgn2KRowChangeEvent((cli::safe_cast<NewDataSet::VS_Rgn2KRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_Rgn2KDataTable::RemoveVS_Rgn2KRow(NewDataSet::VS_Rgn2KRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::VS_Rgn2KDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"VS_Rgn2KDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::VS_Rgn2SpDataTable::VS_Rgn2SpDataTable() {
    this->TableName = L"VS_Rgn2Sp";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::VS_Rgn2SpDataTable::VS_Rgn2SpDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::VS_Rgn2SpDataTable::VS_Rgn2SpDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::VS_Rgn2SpDataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_Rgn2SpDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_Rgn2SpDataTable::VS_Rgn2Sp_IdColumn::get() {
    return this->columnVS_Rgn2Sp_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_Rgn2SpDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 NewDataSet::VS_Rgn2SpDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::VS_Rgn2SpRow^  NewDataSet::VS_Rgn2SpDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::VS_Rgn2SpRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::VS_Rgn2SpDataTable::AddVS_Rgn2SpRow(NewDataSet::VS_Rgn2SpRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::VS_Rgn2SpRow^  NewDataSet::VS_Rgn2SpDataTable::AddVS_Rgn2SpRow(System::String^  TYPE, System::Decimal decimal, 
            NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_VS_Rgn2Sp) {
    NewDataSet::VS_Rgn2SpRow^  rowVS_Rgn2SpRow = (cli::safe_cast<NewDataSet::VS_Rgn2SpRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {TYPE, decimal, nullptr, 
        nullptr};
    if (parentjonkmanRowByjonkman_VS_Rgn2Sp != nullptr) {
        columnValuesArray[3] = parentjonkmanRowByjonkman_VS_Rgn2Sp[0];
    }
    rowVS_Rgn2SpRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowVS_Rgn2SpRow);
    return rowVS_Rgn2SpRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::VS_Rgn2SpDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::VS_Rgn2SpDataTable::Clone() {
    NewDataSet::VS_Rgn2SpDataTable^  cln = (cli::safe_cast<NewDataSet::VS_Rgn2SpDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::VS_Rgn2SpDataTable::CreateInstance() {
    return (gcnew NewDataSet::VS_Rgn2SpDataTable());
}

inline ::System::Void NewDataSet::VS_Rgn2SpDataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnVS_Rgn2Sp_Id = __super::Columns[L"VS_Rgn2Sp_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void NewDataSet::VS_Rgn2SpDataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnVS_Rgn2Sp_Id = (gcnew ::System::Data::DataColumn(L"VS_Rgn2Sp_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_Rgn2Sp_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnVS_Rgn2Sp_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnVS_Rgn2Sp_Id->AutoIncrement = true;
    this->columnVS_Rgn2Sp_Id->AllowDBNull = false;
    this->columnVS_Rgn2Sp_Id->Unique = true;
}

inline NewDataSet::VS_Rgn2SpRow^  NewDataSet::VS_Rgn2SpDataTable::NewVS_Rgn2SpRow() {
    return (cli::safe_cast<NewDataSet::VS_Rgn2SpRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::VS_Rgn2SpDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::VS_Rgn2SpRow(builder));
}

inline ::System::Type^  NewDataSet::VS_Rgn2SpDataTable::GetRowType() {
    return NewDataSet::VS_Rgn2SpRow::typeid;
}

inline ::System::Void NewDataSet::VS_Rgn2SpDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->VS_Rgn2SpRowChanged(this, (gcnew NewDataSet::VS_Rgn2SpRowChangeEvent((cli::safe_cast<NewDataSet::VS_Rgn2SpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_Rgn2SpDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->VS_Rgn2SpRowChanging(this, (gcnew NewDataSet::VS_Rgn2SpRowChangeEvent((cli::safe_cast<NewDataSet::VS_Rgn2SpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_Rgn2SpDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->VS_Rgn2SpRowDeleted(this, (gcnew NewDataSet::VS_Rgn2SpRowChangeEvent((cli::safe_cast<NewDataSet::VS_Rgn2SpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_Rgn2SpDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->VS_Rgn2SpRowDeleting(this, (gcnew NewDataSet::VS_Rgn2SpRowChangeEvent((cli::safe_cast<NewDataSet::VS_Rgn2SpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_Rgn2SpDataTable::RemoveVS_Rgn2SpRow(NewDataSet::VS_Rgn2SpRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::VS_Rgn2SpDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"VS_Rgn2SpDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::VS_CtInSpDataTable::VS_CtInSpDataTable() {
    this->TableName = L"VS_CtInSp";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::VS_CtInSpDataTable::VS_CtInSpDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::VS_CtInSpDataTable::VS_CtInSpDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::VS_CtInSpDataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_CtInSpDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_CtInSpDataTable::VS_CtInSp_IdColumn::get() {
    return this->columnVS_CtInSp_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_CtInSpDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 NewDataSet::VS_CtInSpDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::VS_CtInSpRow^  NewDataSet::VS_CtInSpDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::VS_CtInSpRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::VS_CtInSpDataTable::AddVS_CtInSpRow(NewDataSet::VS_CtInSpRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::VS_CtInSpRow^  NewDataSet::VS_CtInSpDataTable::AddVS_CtInSpRow(System::String^  TYPE, System::Decimal decimal, 
            NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_VS_CtInSp) {
    NewDataSet::VS_CtInSpRow^  rowVS_CtInSpRow = (cli::safe_cast<NewDataSet::VS_CtInSpRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {TYPE, decimal, nullptr, 
        nullptr};
    if (parentjonkmanRowByjonkman_VS_CtInSp != nullptr) {
        columnValuesArray[3] = parentjonkmanRowByjonkman_VS_CtInSp[0];
    }
    rowVS_CtInSpRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowVS_CtInSpRow);
    return rowVS_CtInSpRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::VS_CtInSpDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::VS_CtInSpDataTable::Clone() {
    NewDataSet::VS_CtInSpDataTable^  cln = (cli::safe_cast<NewDataSet::VS_CtInSpDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::VS_CtInSpDataTable::CreateInstance() {
    return (gcnew NewDataSet::VS_CtInSpDataTable());
}

inline ::System::Void NewDataSet::VS_CtInSpDataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnVS_CtInSp_Id = __super::Columns[L"VS_CtInSp_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void NewDataSet::VS_CtInSpDataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnVS_CtInSp_Id = (gcnew ::System::Data::DataColumn(L"VS_CtInSp_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_CtInSp_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnVS_CtInSp_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnVS_CtInSp_Id->AutoIncrement = true;
    this->columnVS_CtInSp_Id->AllowDBNull = false;
    this->columnVS_CtInSp_Id->Unique = true;
}

inline NewDataSet::VS_CtInSpRow^  NewDataSet::VS_CtInSpDataTable::NewVS_CtInSpRow() {
    return (cli::safe_cast<NewDataSet::VS_CtInSpRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::VS_CtInSpDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::VS_CtInSpRow(builder));
}

inline ::System::Type^  NewDataSet::VS_CtInSpDataTable::GetRowType() {
    return NewDataSet::VS_CtInSpRow::typeid;
}

inline ::System::Void NewDataSet::VS_CtInSpDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->VS_CtInSpRowChanged(this, (gcnew NewDataSet::VS_CtInSpRowChangeEvent((cli::safe_cast<NewDataSet::VS_CtInSpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_CtInSpDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->VS_CtInSpRowChanging(this, (gcnew NewDataSet::VS_CtInSpRowChangeEvent((cli::safe_cast<NewDataSet::VS_CtInSpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_CtInSpDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->VS_CtInSpRowDeleted(this, (gcnew NewDataSet::VS_CtInSpRowChangeEvent((cli::safe_cast<NewDataSet::VS_CtInSpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_CtInSpDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->VS_CtInSpRowDeleting(this, (gcnew NewDataSet::VS_CtInSpRowChangeEvent((cli::safe_cast<NewDataSet::VS_CtInSpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_CtInSpDataTable::RemoveVS_CtInSpRow(NewDataSet::VS_CtInSpRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::VS_CtInSpDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"VS_CtInSpDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::VS_RtPwrDataTable::VS_RtPwrDataTable() {
    this->TableName = L"VS_RtPwr";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::VS_RtPwrDataTable::VS_RtPwrDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::VS_RtPwrDataTable::VS_RtPwrDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::VS_RtPwrDataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_RtPwrDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_RtPwrDataTable::VS_RtPwr_IdColumn::get() {
    return this->columnVS_RtPwr_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_RtPwrDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 NewDataSet::VS_RtPwrDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::VS_RtPwrRow^  NewDataSet::VS_RtPwrDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::VS_RtPwrRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::VS_RtPwrDataTable::AddVS_RtPwrRow(NewDataSet::VS_RtPwrRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::VS_RtPwrRow^  NewDataSet::VS_RtPwrDataTable::AddVS_RtPwrRow(System::String^  TYPE, System::Decimal decimal, 
            NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_VS_RtPwr) {
    NewDataSet::VS_RtPwrRow^  rowVS_RtPwrRow = (cli::safe_cast<NewDataSet::VS_RtPwrRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {TYPE, decimal, nullptr, 
        nullptr};
    if (parentjonkmanRowByjonkman_VS_RtPwr != nullptr) {
        columnValuesArray[3] = parentjonkmanRowByjonkman_VS_RtPwr[0];
    }
    rowVS_RtPwrRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowVS_RtPwrRow);
    return rowVS_RtPwrRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::VS_RtPwrDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::VS_RtPwrDataTable::Clone() {
    NewDataSet::VS_RtPwrDataTable^  cln = (cli::safe_cast<NewDataSet::VS_RtPwrDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::VS_RtPwrDataTable::CreateInstance() {
    return (gcnew NewDataSet::VS_RtPwrDataTable());
}

inline ::System::Void NewDataSet::VS_RtPwrDataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnVS_RtPwr_Id = __super::Columns[L"VS_RtPwr_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void NewDataSet::VS_RtPwrDataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnVS_RtPwr_Id = (gcnew ::System::Data::DataColumn(L"VS_RtPwr_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_RtPwr_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnVS_RtPwr_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnVS_RtPwr_Id->AutoIncrement = true;
    this->columnVS_RtPwr_Id->AllowDBNull = false;
    this->columnVS_RtPwr_Id->Unique = true;
}

inline NewDataSet::VS_RtPwrRow^  NewDataSet::VS_RtPwrDataTable::NewVS_RtPwrRow() {
    return (cli::safe_cast<NewDataSet::VS_RtPwrRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::VS_RtPwrDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::VS_RtPwrRow(builder));
}

inline ::System::Type^  NewDataSet::VS_RtPwrDataTable::GetRowType() {
    return NewDataSet::VS_RtPwrRow::typeid;
}

inline ::System::Void NewDataSet::VS_RtPwrDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->VS_RtPwrRowChanged(this, (gcnew NewDataSet::VS_RtPwrRowChangeEvent((cli::safe_cast<NewDataSet::VS_RtPwrRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_RtPwrDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->VS_RtPwrRowChanging(this, (gcnew NewDataSet::VS_RtPwrRowChangeEvent((cli::safe_cast<NewDataSet::VS_RtPwrRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_RtPwrDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->VS_RtPwrRowDeleted(this, (gcnew NewDataSet::VS_RtPwrRowChangeEvent((cli::safe_cast<NewDataSet::VS_RtPwrRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_RtPwrDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->VS_RtPwrRowDeleting(this, (gcnew NewDataSet::VS_RtPwrRowChangeEvent((cli::safe_cast<NewDataSet::VS_RtPwrRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_RtPwrDataTable::RemoveVS_RtPwrRow(NewDataSet::VS_RtPwrRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::VS_RtPwrDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"VS_RtPwrDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::VS_Rgn3MPDataTable::VS_Rgn3MPDataTable() {
    this->TableName = L"VS_Rgn3MP";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::VS_Rgn3MPDataTable::VS_Rgn3MPDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::VS_Rgn3MPDataTable::VS_Rgn3MPDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::VS_Rgn3MPDataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_Rgn3MPDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_Rgn3MPDataTable::VS_Rgn3MP_IdColumn::get() {
    return this->columnVS_Rgn3MP_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::VS_Rgn3MPDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 NewDataSet::VS_Rgn3MPDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::VS_Rgn3MPRow^  NewDataSet::VS_Rgn3MPDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::VS_Rgn3MPRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::VS_Rgn3MPDataTable::AddVS_Rgn3MPRow(NewDataSet::VS_Rgn3MPRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::VS_Rgn3MPRow^  NewDataSet::VS_Rgn3MPDataTable::AddVS_Rgn3MPRow(System::String^  TYPE, System::Decimal decimal, 
            NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_VS_Rgn3MP) {
    NewDataSet::VS_Rgn3MPRow^  rowVS_Rgn3MPRow = (cli::safe_cast<NewDataSet::VS_Rgn3MPRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {TYPE, decimal, nullptr, 
        nullptr};
    if (parentjonkmanRowByjonkman_VS_Rgn3MP != nullptr) {
        columnValuesArray[3] = parentjonkmanRowByjonkman_VS_Rgn3MP[0];
    }
    rowVS_Rgn3MPRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowVS_Rgn3MPRow);
    return rowVS_Rgn3MPRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::VS_Rgn3MPDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::VS_Rgn3MPDataTable::Clone() {
    NewDataSet::VS_Rgn3MPDataTable^  cln = (cli::safe_cast<NewDataSet::VS_Rgn3MPDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::VS_Rgn3MPDataTable::CreateInstance() {
    return (gcnew NewDataSet::VS_Rgn3MPDataTable());
}

inline ::System::Void NewDataSet::VS_Rgn3MPDataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnVS_Rgn3MP_Id = __super::Columns[L"VS_Rgn3MP_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void NewDataSet::VS_Rgn3MPDataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnVS_Rgn3MP_Id = (gcnew ::System::Data::DataColumn(L"VS_Rgn3MP_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_Rgn3MP_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnVS_Rgn3MP_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnVS_Rgn3MP_Id->AutoIncrement = true;
    this->columnVS_Rgn3MP_Id->AllowDBNull = false;
    this->columnVS_Rgn3MP_Id->Unique = true;
}

inline NewDataSet::VS_Rgn3MPRow^  NewDataSet::VS_Rgn3MPDataTable::NewVS_Rgn3MPRow() {
    return (cli::safe_cast<NewDataSet::VS_Rgn3MPRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::VS_Rgn3MPDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::VS_Rgn3MPRow(builder));
}

inline ::System::Type^  NewDataSet::VS_Rgn3MPDataTable::GetRowType() {
    return NewDataSet::VS_Rgn3MPRow::typeid;
}

inline ::System::Void NewDataSet::VS_Rgn3MPDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->VS_Rgn3MPRowChanged(this, (gcnew NewDataSet::VS_Rgn3MPRowChangeEvent((cli::safe_cast<NewDataSet::VS_Rgn3MPRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_Rgn3MPDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->VS_Rgn3MPRowChanging(this, (gcnew NewDataSet::VS_Rgn3MPRowChangeEvent((cli::safe_cast<NewDataSet::VS_Rgn3MPRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_Rgn3MPDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->VS_Rgn3MPRowDeleted(this, (gcnew NewDataSet::VS_Rgn3MPRowChangeEvent((cli::safe_cast<NewDataSet::VS_Rgn3MPRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_Rgn3MPDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->VS_Rgn3MPRowDeleting(this, (gcnew NewDataSet::VS_Rgn3MPRowChangeEvent((cli::safe_cast<NewDataSet::VS_Rgn3MPRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::VS_Rgn3MPDataTable::RemoveVS_Rgn3MPRow(NewDataSet::VS_Rgn3MPRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::VS_Rgn3MPDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"VS_Rgn3MPDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::PC_KIDataTable::PC_KIDataTable() {
    this->TableName = L"PC_KI";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::PC_KIDataTable::PC_KIDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::PC_KIDataTable::PC_KIDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::PC_KIDataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::PC_KIDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::PC_KIDataTable::PC_KI_IdColumn::get() {
    return this->columnPC_KI_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::PC_KIDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 NewDataSet::PC_KIDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::PC_KIRow^  NewDataSet::PC_KIDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::PC_KIRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::PC_KIDataTable::AddPC_KIRow(NewDataSet::PC_KIRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::PC_KIRow^  NewDataSet::PC_KIDataTable::AddPC_KIRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_PC_KI) {
    NewDataSet::PC_KIRow^  rowPC_KIRow = (cli::safe_cast<NewDataSet::PC_KIRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {TYPE, decimal, nullptr, 
        nullptr};
    if (parentjonkmanRowByjonkman_PC_KI != nullptr) {
        columnValuesArray[3] = parentjonkmanRowByjonkman_PC_KI[0];
    }
    rowPC_KIRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowPC_KIRow);
    return rowPC_KIRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::PC_KIDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::PC_KIDataTable::Clone() {
    NewDataSet::PC_KIDataTable^  cln = (cli::safe_cast<NewDataSet::PC_KIDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::PC_KIDataTable::CreateInstance() {
    return (gcnew NewDataSet::PC_KIDataTable());
}

inline ::System::Void NewDataSet::PC_KIDataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnPC_KI_Id = __super::Columns[L"PC_KI_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void NewDataSet::PC_KIDataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnPC_KI_Id = (gcnew ::System::Data::DataColumn(L"PC_KI_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPC_KI_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnPC_KI_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnPC_KI_Id->AutoIncrement = true;
    this->columnPC_KI_Id->AllowDBNull = false;
    this->columnPC_KI_Id->Unique = true;
}

inline NewDataSet::PC_KIRow^  NewDataSet::PC_KIDataTable::NewPC_KIRow() {
    return (cli::safe_cast<NewDataSet::PC_KIRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::PC_KIDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::PC_KIRow(builder));
}

inline ::System::Type^  NewDataSet::PC_KIDataTable::GetRowType() {
    return NewDataSet::PC_KIRow::typeid;
}

inline ::System::Void NewDataSet::PC_KIDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->PC_KIRowChanged(this, (gcnew NewDataSet::PC_KIRowChangeEvent((cli::safe_cast<NewDataSet::PC_KIRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PC_KIDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->PC_KIRowChanging(this, (gcnew NewDataSet::PC_KIRowChangeEvent((cli::safe_cast<NewDataSet::PC_KIRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PC_KIDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->PC_KIRowDeleted(this, (gcnew NewDataSet::PC_KIRowChangeEvent((cli::safe_cast<NewDataSet::PC_KIRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PC_KIDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->PC_KIRowDeleting(this, (gcnew NewDataSet::PC_KIRowChangeEvent((cli::safe_cast<NewDataSet::PC_KIRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PC_KIDataTable::RemovePC_KIRow(NewDataSet::PC_KIRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::PC_KIDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"PC_KIDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::PC_KKDataTable::PC_KKDataTable() {
    this->TableName = L"PC_KK";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::PC_KKDataTable::PC_KKDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::PC_KKDataTable::PC_KKDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::PC_KKDataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::PC_KKDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::PC_KKDataTable::PC_KK_IdColumn::get() {
    return this->columnPC_KK_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::PC_KKDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 NewDataSet::PC_KKDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::PC_KKRow^  NewDataSet::PC_KKDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::PC_KKRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::PC_KKDataTable::AddPC_KKRow(NewDataSet::PC_KKRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::PC_KKRow^  NewDataSet::PC_KKDataTable::AddPC_KKRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_PC_KK) {
    NewDataSet::PC_KKRow^  rowPC_KKRow = (cli::safe_cast<NewDataSet::PC_KKRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {TYPE, decimal, nullptr, 
        nullptr};
    if (parentjonkmanRowByjonkman_PC_KK != nullptr) {
        columnValuesArray[3] = parentjonkmanRowByjonkman_PC_KK[0];
    }
    rowPC_KKRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowPC_KKRow);
    return rowPC_KKRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::PC_KKDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::PC_KKDataTable::Clone() {
    NewDataSet::PC_KKDataTable^  cln = (cli::safe_cast<NewDataSet::PC_KKDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::PC_KKDataTable::CreateInstance() {
    return (gcnew NewDataSet::PC_KKDataTable());
}

inline ::System::Void NewDataSet::PC_KKDataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnPC_KK_Id = __super::Columns[L"PC_KK_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void NewDataSet::PC_KKDataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnPC_KK_Id = (gcnew ::System::Data::DataColumn(L"PC_KK_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPC_KK_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnPC_KK_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnPC_KK_Id->AutoIncrement = true;
    this->columnPC_KK_Id->AllowDBNull = false;
    this->columnPC_KK_Id->Unique = true;
}

inline NewDataSet::PC_KKRow^  NewDataSet::PC_KKDataTable::NewPC_KKRow() {
    return (cli::safe_cast<NewDataSet::PC_KKRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::PC_KKDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::PC_KKRow(builder));
}

inline ::System::Type^  NewDataSet::PC_KKDataTable::GetRowType() {
    return NewDataSet::PC_KKRow::typeid;
}

inline ::System::Void NewDataSet::PC_KKDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->PC_KKRowChanged(this, (gcnew NewDataSet::PC_KKRowChangeEvent((cli::safe_cast<NewDataSet::PC_KKRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PC_KKDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->PC_KKRowChanging(this, (gcnew NewDataSet::PC_KKRowChangeEvent((cli::safe_cast<NewDataSet::PC_KKRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PC_KKDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->PC_KKRowDeleted(this, (gcnew NewDataSet::PC_KKRowChangeEvent((cli::safe_cast<NewDataSet::PC_KKRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PC_KKDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->PC_KKRowDeleting(this, (gcnew NewDataSet::PC_KKRowChangeEvent((cli::safe_cast<NewDataSet::PC_KKRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PC_KKDataTable::RemovePC_KKRow(NewDataSet::PC_KKRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::PC_KKDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"PC_KKDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::PC_KPDataTable::PC_KPDataTable() {
    this->TableName = L"PC_KP";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::PC_KPDataTable::PC_KPDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::PC_KPDataTable::PC_KPDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::PC_KPDataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::PC_KPDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::PC_KPDataTable::PC_KP_IdColumn::get() {
    return this->columnPC_KP_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::PC_KPDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 NewDataSet::PC_KPDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::PC_KPRow^  NewDataSet::PC_KPDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::PC_KPRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::PC_KPDataTable::AddPC_KPRow(NewDataSet::PC_KPRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::PC_KPRow^  NewDataSet::PC_KPDataTable::AddPC_KPRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_PC_KP) {
    NewDataSet::PC_KPRow^  rowPC_KPRow = (cli::safe_cast<NewDataSet::PC_KPRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {TYPE, decimal, nullptr, 
        nullptr};
    if (parentjonkmanRowByjonkman_PC_KP != nullptr) {
        columnValuesArray[3] = parentjonkmanRowByjonkman_PC_KP[0];
    }
    rowPC_KPRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowPC_KPRow);
    return rowPC_KPRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::PC_KPDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::PC_KPDataTable::Clone() {
    NewDataSet::PC_KPDataTable^  cln = (cli::safe_cast<NewDataSet::PC_KPDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::PC_KPDataTable::CreateInstance() {
    return (gcnew NewDataSet::PC_KPDataTable());
}

inline ::System::Void NewDataSet::PC_KPDataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnPC_KP_Id = __super::Columns[L"PC_KP_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void NewDataSet::PC_KPDataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnPC_KP_Id = (gcnew ::System::Data::DataColumn(L"PC_KP_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPC_KP_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnPC_KP_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnPC_KP_Id->AutoIncrement = true;
    this->columnPC_KP_Id->AllowDBNull = false;
    this->columnPC_KP_Id->Unique = true;
}

inline NewDataSet::PC_KPRow^  NewDataSet::PC_KPDataTable::NewPC_KPRow() {
    return (cli::safe_cast<NewDataSet::PC_KPRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::PC_KPDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::PC_KPRow(builder));
}

inline ::System::Type^  NewDataSet::PC_KPDataTable::GetRowType() {
    return NewDataSet::PC_KPRow::typeid;
}

inline ::System::Void NewDataSet::PC_KPDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->PC_KPRowChanged(this, (gcnew NewDataSet::PC_KPRowChangeEvent((cli::safe_cast<NewDataSet::PC_KPRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PC_KPDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->PC_KPRowChanging(this, (gcnew NewDataSet::PC_KPRowChangeEvent((cli::safe_cast<NewDataSet::PC_KPRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PC_KPDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->PC_KPRowDeleted(this, (gcnew NewDataSet::PC_KPRowChangeEvent((cli::safe_cast<NewDataSet::PC_KPRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PC_KPDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->PC_KPRowDeleting(this, (gcnew NewDataSet::PC_KPRowChangeEvent((cli::safe_cast<NewDataSet::PC_KPRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PC_KPDataTable::RemovePC_KPRow(NewDataSet::PC_KPRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::PC_KPDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"PC_KPDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::PC_RefSpdDataTable::PC_RefSpdDataTable() {
    this->TableName = L"PC_RefSpd";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::PC_RefSpdDataTable::PC_RefSpdDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::PC_RefSpdDataTable::PC_RefSpdDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::PC_RefSpdDataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::PC_RefSpdDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::PC_RefSpdDataTable::PC_RefSpd_IdColumn::get() {
    return this->columnPC_RefSpd_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::PC_RefSpdDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 NewDataSet::PC_RefSpdDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::PC_RefSpdRow^  NewDataSet::PC_RefSpdDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::PC_RefSpdRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::PC_RefSpdDataTable::AddPC_RefSpdRow(NewDataSet::PC_RefSpdRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::PC_RefSpdRow^  NewDataSet::PC_RefSpdDataTable::AddPC_RefSpdRow(System::String^  TYPE, System::Decimal decimal, 
            NewDataSet::jonkmanRow^  parentjonkmanRowByjonkman_PC_RefSpd) {
    NewDataSet::PC_RefSpdRow^  rowPC_RefSpdRow = (cli::safe_cast<NewDataSet::PC_RefSpdRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {TYPE, decimal, nullptr, 
        nullptr};
    if (parentjonkmanRowByjonkman_PC_RefSpd != nullptr) {
        columnValuesArray[3] = parentjonkmanRowByjonkman_PC_RefSpd[0];
    }
    rowPC_RefSpdRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowPC_RefSpdRow);
    return rowPC_RefSpdRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::PC_RefSpdDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::PC_RefSpdDataTable::Clone() {
    NewDataSet::PC_RefSpdDataTable^  cln = (cli::safe_cast<NewDataSet::PC_RefSpdDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::PC_RefSpdDataTable::CreateInstance() {
    return (gcnew NewDataSet::PC_RefSpdDataTable());
}

inline ::System::Void NewDataSet::PC_RefSpdDataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnPC_RefSpd_Id = __super::Columns[L"PC_RefSpd_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void NewDataSet::PC_RefSpdDataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnPC_RefSpd_Id = (gcnew ::System::Data::DataColumn(L"PC_RefSpd_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPC_RefSpd_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnPC_RefSpd_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnPC_RefSpd_Id->AutoIncrement = true;
    this->columnPC_RefSpd_Id->AllowDBNull = false;
    this->columnPC_RefSpd_Id->Unique = true;
}

inline NewDataSet::PC_RefSpdRow^  NewDataSet::PC_RefSpdDataTable::NewPC_RefSpdRow() {
    return (cli::safe_cast<NewDataSet::PC_RefSpdRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::PC_RefSpdDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::PC_RefSpdRow(builder));
}

inline ::System::Type^  NewDataSet::PC_RefSpdDataTable::GetRowType() {
    return NewDataSet::PC_RefSpdRow::typeid;
}

inline ::System::Void NewDataSet::PC_RefSpdDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->PC_RefSpdRowChanged(this, (gcnew NewDataSet::PC_RefSpdRowChangeEvent((cli::safe_cast<NewDataSet::PC_RefSpdRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PC_RefSpdDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->PC_RefSpdRowChanging(this, (gcnew NewDataSet::PC_RefSpdRowChangeEvent((cli::safe_cast<NewDataSet::PC_RefSpdRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PC_RefSpdDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->PC_RefSpdRowDeleted(this, (gcnew NewDataSet::PC_RefSpdRowChangeEvent((cli::safe_cast<NewDataSet::PC_RefSpdRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PC_RefSpdDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->PC_RefSpdRowDeleting(this, (gcnew NewDataSet::PC_RefSpdRowChangeEvent((cli::safe_cast<NewDataSet::PC_RefSpdRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::PC_RefSpdDataTable::RemovePC_RefSpdRow(NewDataSet::PC_RefSpdRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::PC_RefSpdDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"PC_RefSpdDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::vidalDataTable::vidalDataTable() {
    this->TableName = L"vidal";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::vidalDataTable::vidalDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::vidalDataTable::vidalDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::vidalDataTable::vidal_IdColumn::get() {
    return this->columnvidal_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::vidalDataTable::actor_IdColumn::get() {
    return this->columnactor_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::vidalDataTable::controller_IdColumn::get() {
    return this->columncontroller_Id;
}

inline ::System::Int32 NewDataSet::vidalDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::vidalRow^  NewDataSet::vidalDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::vidalRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::vidalDataTable::AddvidalRow(NewDataSet::vidalRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::vidalRow^  NewDataSet::vidalDataTable::AddvidalRow(NewDataSet::actorRow^  parentactorRowByactor_vidal, 
            NewDataSet::controllerRow^  parentcontrollerRowBycontroller_vidal) {
    NewDataSet::vidalRow^  rowvidalRow = (cli::safe_cast<NewDataSet::vidalRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {nullptr, nullptr, nullptr};
    if (parentactorRowByactor_vidal != nullptr) {
        columnValuesArray[1] = parentactorRowByactor_vidal[3];
    }
    if (parentcontrollerRowBycontroller_vidal != nullptr) {
        columnValuesArray[2] = parentcontrollerRowBycontroller_vidal[3];
    }
    rowvidalRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowvidalRow);
    return rowvidalRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::vidalDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::vidalDataTable::Clone() {
    NewDataSet::vidalDataTable^  cln = (cli::safe_cast<NewDataSet::vidalDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::vidalDataTable::CreateInstance() {
    return (gcnew NewDataSet::vidalDataTable());
}

inline ::System::Void NewDataSet::vidalDataTable::InitVars() {
    this->columnvidal_Id = __super::Columns[L"vidal_Id"];
    this->columnactor_Id = __super::Columns[L"actor_Id"];
    this->columncontroller_Id = __super::Columns[L"controller_Id"];
}

inline ::System::Void NewDataSet::vidalDataTable::InitClass() {
    this->columnvidal_Id = (gcnew ::System::Data::DataColumn(L"vidal_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnvidal_Id);
    this->columnactor_Id = (gcnew ::System::Data::DataColumn(L"actor_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnactor_Id);
    this->columncontroller_Id = (gcnew ::System::Data::DataColumn(L"controller_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columncontroller_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnvidal_Id}, 
            true)));
    this->columnvidal_Id->AutoIncrement = true;
    this->columnvidal_Id->AllowDBNull = false;
    this->columnvidal_Id->Unique = true;
}

inline NewDataSet::vidalRow^  NewDataSet::vidalDataTable::NewvidalRow() {
    return (cli::safe_cast<NewDataSet::vidalRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::vidalDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::vidalRow(builder));
}

inline ::System::Type^  NewDataSet::vidalDataTable::GetRowType() {
    return NewDataSet::vidalRow::typeid;
}

inline ::System::Void NewDataSet::vidalDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->vidalRowChanged(this, (gcnew NewDataSet::vidalRowChangeEvent((cli::safe_cast<NewDataSet::vidalRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::vidalDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->vidalRowChanging(this, (gcnew NewDataSet::vidalRowChangeEvent((cli::safe_cast<NewDataSet::vidalRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::vidalDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->vidalRowDeleted(this, (gcnew NewDataSet::vidalRowChangeEvent((cli::safe_cast<NewDataSet::vidalRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::vidalDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->vidalRowDeleting(this, (gcnew NewDataSet::vidalRowChangeEvent((cli::safe_cast<NewDataSet::vidalRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::vidalDataTable::RemovevidalRow(NewDataSet::vidalRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::vidalDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"vidalDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::ADataTable::ADataTable() {
    this->TableName = L"A";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::ADataTable::ADataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::ADataTable::ADataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::ADataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::ADataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::ADataTable::A_IdColumn::get() {
    return this->columnA_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::ADataTable::vidal_IdColumn::get() {
    return this->columnvidal_Id;
}

inline ::System::Int32 NewDataSet::ADataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::ARow^  NewDataSet::ADataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::ARow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::ADataTable::AddARow(NewDataSet::ARow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::ARow^  NewDataSet::ADataTable::AddARow(System::String^  TYPE, System::Decimal decimal, NewDataSet::vidalRow^  parentvidalRowByvidal_A) {
    NewDataSet::ARow^  rowARow = (cli::safe_cast<NewDataSet::ARow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {TYPE, decimal, nullptr, 
        nullptr};
    if (parentvidalRowByvidal_A != nullptr) {
        columnValuesArray[3] = parentvidalRowByvidal_A[0];
    }
    rowARow->ItemArray = columnValuesArray;
    this->Rows->Add(rowARow);
    return rowARow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::ADataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::ADataTable::Clone() {
    NewDataSet::ADataTable^  cln = (cli::safe_cast<NewDataSet::ADataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::ADataTable::CreateInstance() {
    return (gcnew NewDataSet::ADataTable());
}

inline ::System::Void NewDataSet::ADataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnA_Id = __super::Columns[L"A_Id"];
    this->columnvidal_Id = __super::Columns[L"vidal_Id"];
}

inline ::System::Void NewDataSet::ADataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnA_Id = (gcnew ::System::Data::DataColumn(L"A_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnA_Id);
    this->columnvidal_Id = (gcnew ::System::Data::DataColumn(L"vidal_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnvidal_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnA_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnA_Id->AutoIncrement = true;
    this->columnA_Id->AllowDBNull = false;
    this->columnA_Id->Unique = true;
}

inline NewDataSet::ARow^  NewDataSet::ADataTable::NewARow() {
    return (cli::safe_cast<NewDataSet::ARow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::ADataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::ARow(builder));
}

inline ::System::Type^  NewDataSet::ADataTable::GetRowType() {
    return NewDataSet::ARow::typeid;
}

inline ::System::Void NewDataSet::ADataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->ARowChanged(this, (gcnew NewDataSet::ARowChangeEvent((cli::safe_cast<NewDataSet::ARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::ADataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->ARowChanging(this, (gcnew NewDataSet::ARowChangeEvent((cli::safe_cast<NewDataSet::ARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::ADataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->ARowDeleted(this, (gcnew NewDataSet::ARowChangeEvent((cli::safe_cast<NewDataSet::ARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::ADataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->ARowDeleting(this, (gcnew NewDataSet::ARowChangeEvent((cli::safe_cast<NewDataSet::ARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::ADataTable::RemoveARow(NewDataSet::ARow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::ADataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"ADataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::K_alphaDataTable::K_alphaDataTable() {
    this->TableName = L"K_alpha";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::K_alphaDataTable::K_alphaDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::K_alphaDataTable::K_alphaDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::K_alphaDataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::K_alphaDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::K_alphaDataTable::K_alpha_IdColumn::get() {
    return this->columnK_alpha_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::K_alphaDataTable::vidal_IdColumn::get() {
    return this->columnvidal_Id;
}

inline ::System::Int32 NewDataSet::K_alphaDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::K_alphaRow^  NewDataSet::K_alphaDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::K_alphaRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::K_alphaDataTable::AddK_alphaRow(NewDataSet::K_alphaRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::K_alphaRow^  NewDataSet::K_alphaDataTable::AddK_alphaRow(System::String^  TYPE, System::Decimal decimal, 
            NewDataSet::vidalRow^  parentvidalRowByvidal_K_alpha) {
    NewDataSet::K_alphaRow^  rowK_alphaRow = (cli::safe_cast<NewDataSet::K_alphaRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {TYPE, decimal, nullptr, 
        nullptr};
    if (parentvidalRowByvidal_K_alpha != nullptr) {
        columnValuesArray[3] = parentvidalRowByvidal_K_alpha[0];
    }
    rowK_alphaRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowK_alphaRow);
    return rowK_alphaRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::K_alphaDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::K_alphaDataTable::Clone() {
    NewDataSet::K_alphaDataTable^  cln = (cli::safe_cast<NewDataSet::K_alphaDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::K_alphaDataTable::CreateInstance() {
    return (gcnew NewDataSet::K_alphaDataTable());
}

inline ::System::Void NewDataSet::K_alphaDataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnK_alpha_Id = __super::Columns[L"K_alpha_Id"];
    this->columnvidal_Id = __super::Columns[L"vidal_Id"];
}

inline ::System::Void NewDataSet::K_alphaDataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnK_alpha_Id = (gcnew ::System::Data::DataColumn(L"K_alpha_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnK_alpha_Id);
    this->columnvidal_Id = (gcnew ::System::Data::DataColumn(L"vidal_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnvidal_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnK_alpha_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnK_alpha_Id->AutoIncrement = true;
    this->columnK_alpha_Id->AllowDBNull = false;
    this->columnK_alpha_Id->Unique = true;
}

inline NewDataSet::K_alphaRow^  NewDataSet::K_alphaDataTable::NewK_alphaRow() {
    return (cli::safe_cast<NewDataSet::K_alphaRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::K_alphaDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::K_alphaRow(builder));
}

inline ::System::Type^  NewDataSet::K_alphaDataTable::GetRowType() {
    return NewDataSet::K_alphaRow::typeid;
}

inline ::System::Void NewDataSet::K_alphaDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->K_alphaRowChanged(this, (gcnew NewDataSet::K_alphaRowChangeEvent((cli::safe_cast<NewDataSet::K_alphaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::K_alphaDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->K_alphaRowChanging(this, (gcnew NewDataSet::K_alphaRowChangeEvent((cli::safe_cast<NewDataSet::K_alphaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::K_alphaDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->K_alphaRowDeleted(this, (gcnew NewDataSet::K_alphaRowChangeEvent((cli::safe_cast<NewDataSet::K_alphaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::K_alphaDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->K_alphaRowDeleting(this, (gcnew NewDataSet::K_alphaRowChangeEvent((cli::safe_cast<NewDataSet::K_alphaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::K_alphaDataTable::RemoveK_alphaRow(NewDataSet::K_alphaRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::K_alphaDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"K_alphaDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::P_sDataTable::P_sDataTable() {
    this->TableName = L"P_s";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::P_sDataTable::P_sDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::P_sDataTable::P_sDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::P_sDataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::P_sDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::P_sDataTable::P_s_IdColumn::get() {
    return this->columnP_s_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::P_sDataTable::vidal_IdColumn::get() {
    return this->columnvidal_Id;
}

inline ::System::Int32 NewDataSet::P_sDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::P_sRow^  NewDataSet::P_sDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::P_sRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::P_sDataTable::AddP_sRow(NewDataSet::P_sRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::P_sRow^  NewDataSet::P_sDataTable::AddP_sRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::vidalRow^  parentvidalRowByvidal_P_s) {
    NewDataSet::P_sRow^  rowP_sRow = (cli::safe_cast<NewDataSet::P_sRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {TYPE, decimal, nullptr, 
        nullptr};
    if (parentvidalRowByvidal_P_s != nullptr) {
        columnValuesArray[3] = parentvidalRowByvidal_P_s[0];
    }
    rowP_sRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowP_sRow);
    return rowP_sRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::P_sDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::P_sDataTable::Clone() {
    NewDataSet::P_sDataTable^  cln = (cli::safe_cast<NewDataSet::P_sDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::P_sDataTable::CreateInstance() {
    return (gcnew NewDataSet::P_sDataTable());
}

inline ::System::Void NewDataSet::P_sDataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnP_s_Id = __super::Columns[L"P_s_Id"];
    this->columnvidal_Id = __super::Columns[L"vidal_Id"];
}

inline ::System::Void NewDataSet::P_sDataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnP_s_Id = (gcnew ::System::Data::DataColumn(L"P_s_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnP_s_Id);
    this->columnvidal_Id = (gcnew ::System::Data::DataColumn(L"vidal_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnvidal_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnP_s_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnP_s_Id->AutoIncrement = true;
    this->columnP_s_Id->AllowDBNull = false;
    this->columnP_s_Id->Unique = true;
}

inline NewDataSet::P_sRow^  NewDataSet::P_sDataTable::NewP_sRow() {
    return (cli::safe_cast<NewDataSet::P_sRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::P_sDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::P_sRow(builder));
}

inline ::System::Type^  NewDataSet::P_sDataTable::GetRowType() {
    return NewDataSet::P_sRow::typeid;
}

inline ::System::Void NewDataSet::P_sDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->P_sRowChanged(this, (gcnew NewDataSet::P_sRowChangeEvent((cli::safe_cast<NewDataSet::P_sRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::P_sDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->P_sRowChanging(this, (gcnew NewDataSet::P_sRowChangeEvent((cli::safe_cast<NewDataSet::P_sRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::P_sDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->P_sRowDeleted(this, (gcnew NewDataSet::P_sRowChangeEvent((cli::safe_cast<NewDataSet::P_sRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::P_sDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->P_sRowDeleting(this, (gcnew NewDataSet::P_sRowChangeEvent((cli::safe_cast<NewDataSet::P_sRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::P_sDataTable::RemoveP_sRow(NewDataSet::P_sRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::P_sDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"P_sDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::boukhezzarDataTable::boukhezzarDataTable() {
    this->TableName = L"boukhezzar";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::boukhezzarDataTable::boukhezzarDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::boukhezzarDataTable::boukhezzarDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::boukhezzarDataTable::boukhezzar_IdColumn::get() {
    return this->columnboukhezzar_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::boukhezzarDataTable::actor_IdColumn::get() {
    return this->columnactor_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::boukhezzarDataTable::controller_IdColumn::get() {
    return this->columncontroller_Id;
}

inline ::System::Int32 NewDataSet::boukhezzarDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::boukhezzarRow^  NewDataSet::boukhezzarDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::boukhezzarRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::boukhezzarDataTable::AddboukhezzarRow(NewDataSet::boukhezzarRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::boukhezzarRow^  NewDataSet::boukhezzarDataTable::AddboukhezzarRow(NewDataSet::actorRow^  parentactorRowByactor_boukhezzar, 
            NewDataSet::controllerRow^  parentcontrollerRowBycontroller_boukhezzar) {
    NewDataSet::boukhezzarRow^  rowboukhezzarRow = (cli::safe_cast<NewDataSet::boukhezzarRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {nullptr, nullptr, nullptr};
    if (parentactorRowByactor_boukhezzar != nullptr) {
        columnValuesArray[1] = parentactorRowByactor_boukhezzar[3];
    }
    if (parentcontrollerRowBycontroller_boukhezzar != nullptr) {
        columnValuesArray[2] = parentcontrollerRowBycontroller_boukhezzar[3];
    }
    rowboukhezzarRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowboukhezzarRow);
    return rowboukhezzarRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::boukhezzarDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::boukhezzarDataTable::Clone() {
    NewDataSet::boukhezzarDataTable^  cln = (cli::safe_cast<NewDataSet::boukhezzarDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::boukhezzarDataTable::CreateInstance() {
    return (gcnew NewDataSet::boukhezzarDataTable());
}

inline ::System::Void NewDataSet::boukhezzarDataTable::InitVars() {
    this->columnboukhezzar_Id = __super::Columns[L"boukhezzar_Id"];
    this->columnactor_Id = __super::Columns[L"actor_Id"];
    this->columncontroller_Id = __super::Columns[L"controller_Id"];
}

inline ::System::Void NewDataSet::boukhezzarDataTable::InitClass() {
    this->columnboukhezzar_Id = (gcnew ::System::Data::DataColumn(L"boukhezzar_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnboukhezzar_Id);
    this->columnactor_Id = (gcnew ::System::Data::DataColumn(L"actor_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnactor_Id);
    this->columncontroller_Id = (gcnew ::System::Data::DataColumn(L"controller_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columncontroller_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnboukhezzar_Id}, 
            true)));
    this->columnboukhezzar_Id->AutoIncrement = true;
    this->columnboukhezzar_Id->AllowDBNull = false;
    this->columnboukhezzar_Id->Unique = true;
}

inline NewDataSet::boukhezzarRow^  NewDataSet::boukhezzarDataTable::NewboukhezzarRow() {
    return (cli::safe_cast<NewDataSet::boukhezzarRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::boukhezzarDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::boukhezzarRow(builder));
}

inline ::System::Type^  NewDataSet::boukhezzarDataTable::GetRowType() {
    return NewDataSet::boukhezzarRow::typeid;
}

inline ::System::Void NewDataSet::boukhezzarDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->boukhezzarRowChanged(this, (gcnew NewDataSet::boukhezzarRowChangeEvent((cli::safe_cast<NewDataSet::boukhezzarRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::boukhezzarDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->boukhezzarRowChanging(this, (gcnew NewDataSet::boukhezzarRowChangeEvent((cli::safe_cast<NewDataSet::boukhezzarRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::boukhezzarDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->boukhezzarRowDeleted(this, (gcnew NewDataSet::boukhezzarRowChangeEvent((cli::safe_cast<NewDataSet::boukhezzarRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::boukhezzarDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->boukhezzarRowDeleting(this, (gcnew NewDataSet::boukhezzarRowChangeEvent((cli::safe_cast<NewDataSet::boukhezzarRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::boukhezzarDataTable::RemoveboukhezzarRow(NewDataSet::boukhezzarRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::boukhezzarDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"boukhezzarDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::C_0DataTable::C_0DataTable() {
    this->TableName = L"C_0";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::C_0DataTable::C_0DataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::C_0DataTable::C_0DataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::C_0DataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::C_0DataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::C_0DataTable::C_0_IdColumn::get() {
    return this->columnC_0_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::C_0DataTable::boukhezzar_IdColumn::get() {
    return this->columnboukhezzar_Id;
}

inline ::System::Int32 NewDataSet::C_0DataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::C_0Row^  NewDataSet::C_0DataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::C_0Row^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::C_0DataTable::AddC_0Row(NewDataSet::C_0Row^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::C_0Row^  NewDataSet::C_0DataTable::AddC_0Row(System::String^  TYPE, System::Decimal decimal, NewDataSet::boukhezzarRow^  parentboukhezzarRowByboukhezzar_C_0) {
    NewDataSet::C_0Row^  rowC_0Row = (cli::safe_cast<NewDataSet::C_0Row^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {TYPE, decimal, nullptr, 
        nullptr};
    if (parentboukhezzarRowByboukhezzar_C_0 != nullptr) {
        columnValuesArray[3] = parentboukhezzarRowByboukhezzar_C_0[0];
    }
    rowC_0Row->ItemArray = columnValuesArray;
    this->Rows->Add(rowC_0Row);
    return rowC_0Row;
}

inline ::System::Collections::IEnumerator^  NewDataSet::C_0DataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::C_0DataTable::Clone() {
    NewDataSet::C_0DataTable^  cln = (cli::safe_cast<NewDataSet::C_0DataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::C_0DataTable::CreateInstance() {
    return (gcnew NewDataSet::C_0DataTable());
}

inline ::System::Void NewDataSet::C_0DataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnC_0_Id = __super::Columns[L"C_0_Id"];
    this->columnboukhezzar_Id = __super::Columns[L"boukhezzar_Id"];
}

inline ::System::Void NewDataSet::C_0DataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnC_0_Id = (gcnew ::System::Data::DataColumn(L"C_0_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnC_0_Id);
    this->columnboukhezzar_Id = (gcnew ::System::Data::DataColumn(L"boukhezzar_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnboukhezzar_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnC_0_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnC_0_Id->AutoIncrement = true;
    this->columnC_0_Id->AllowDBNull = false;
    this->columnC_0_Id->Unique = true;
}

inline NewDataSet::C_0Row^  NewDataSet::C_0DataTable::NewC_0Row() {
    return (cli::safe_cast<NewDataSet::C_0Row^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::C_0DataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::C_0Row(builder));
}

inline ::System::Type^  NewDataSet::C_0DataTable::GetRowType() {
    return NewDataSet::C_0Row::typeid;
}

inline ::System::Void NewDataSet::C_0DataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->C_0RowChanged(this, (gcnew NewDataSet::C_0RowChangeEvent((cli::safe_cast<NewDataSet::C_0Row^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::C_0DataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->C_0RowChanging(this, (gcnew NewDataSet::C_0RowChangeEvent((cli::safe_cast<NewDataSet::C_0Row^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::C_0DataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->C_0RowDeleted(this, (gcnew NewDataSet::C_0RowChangeEvent((cli::safe_cast<NewDataSet::C_0Row^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::C_0DataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->C_0RowDeleting(this, (gcnew NewDataSet::C_0RowChangeEvent((cli::safe_cast<NewDataSet::C_0Row^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::C_0DataTable::RemoveC_0Row(NewDataSet::C_0Row^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::C_0DataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"C_0DataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::K_tDataTable::K_tDataTable() {
    this->TableName = L"K_t";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::K_tDataTable::K_tDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::K_tDataTable::K_tDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::K_tDataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::K_tDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::K_tDataTable::K_t_IdColumn::get() {
    return this->columnK_t_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::K_tDataTable::boukhezzar_IdColumn::get() {
    return this->columnboukhezzar_Id;
}

inline ::System::Int32 NewDataSet::K_tDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::K_tRow^  NewDataSet::K_tDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::K_tRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::K_tDataTable::AddK_tRow(NewDataSet::K_tRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::K_tRow^  NewDataSet::K_tDataTable::AddK_tRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::boukhezzarRow^  parentboukhezzarRowByboukhezzar_K_t) {
    NewDataSet::K_tRow^  rowK_tRow = (cli::safe_cast<NewDataSet::K_tRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {TYPE, decimal, nullptr, 
        nullptr};
    if (parentboukhezzarRowByboukhezzar_K_t != nullptr) {
        columnValuesArray[3] = parentboukhezzarRowByboukhezzar_K_t[0];
    }
    rowK_tRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowK_tRow);
    return rowK_tRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::K_tDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::K_tDataTable::Clone() {
    NewDataSet::K_tDataTable^  cln = (cli::safe_cast<NewDataSet::K_tDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::K_tDataTable::CreateInstance() {
    return (gcnew NewDataSet::K_tDataTable());
}

inline ::System::Void NewDataSet::K_tDataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnK_t_Id = __super::Columns[L"K_t_Id"];
    this->columnboukhezzar_Id = __super::Columns[L"boukhezzar_Id"];
}

inline ::System::Void NewDataSet::K_tDataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnK_t_Id = (gcnew ::System::Data::DataColumn(L"K_t_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnK_t_Id);
    this->columnboukhezzar_Id = (gcnew ::System::Data::DataColumn(L"boukhezzar_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnboukhezzar_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnK_t_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnK_t_Id->AutoIncrement = true;
    this->columnK_t_Id->AllowDBNull = false;
    this->columnK_t_Id->Unique = true;
}

inline NewDataSet::K_tRow^  NewDataSet::K_tDataTable::NewK_tRow() {
    return (cli::safe_cast<NewDataSet::K_tRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::K_tDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::K_tRow(builder));
}

inline ::System::Type^  NewDataSet::K_tDataTable::GetRowType() {
    return NewDataSet::K_tRow::typeid;
}

inline ::System::Void NewDataSet::K_tDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->K_tRowChanged(this, (gcnew NewDataSet::K_tRowChangeEvent((cli::safe_cast<NewDataSet::K_tRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::K_tDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->K_tRowChanging(this, (gcnew NewDataSet::K_tRowChangeEvent((cli::safe_cast<NewDataSet::K_tRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::K_tDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->K_tRowDeleted(this, (gcnew NewDataSet::K_tRowChangeEvent((cli::safe_cast<NewDataSet::K_tRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::K_tDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->K_tRowDeleting(this, (gcnew NewDataSet::K_tRowChangeEvent((cli::safe_cast<NewDataSet::K_tRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::K_tDataTable::RemoveK_tRow(NewDataSet::K_tRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::K_tDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"K_tDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::J_tDataTable::J_tDataTable() {
    this->TableName = L"J_t";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::J_tDataTable::J_tDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::J_tDataTable::J_tDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::J_tDataTable::TYPEColumn::get() {
    return this->columnTYPE;
}

inline ::System::Data::DataColumn^  NewDataSet::J_tDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  NewDataSet::J_tDataTable::J_t_IdColumn::get() {
    return this->columnJ_t_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::J_tDataTable::boukhezzar_IdColumn::get() {
    return this->columnboukhezzar_Id;
}

inline ::System::Int32 NewDataSet::J_tDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::J_tRow^  NewDataSet::J_tDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::J_tRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::J_tDataTable::AddJ_tRow(NewDataSet::J_tRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::J_tRow^  NewDataSet::J_tDataTable::AddJ_tRow(System::String^  TYPE, System::Decimal decimal, NewDataSet::boukhezzarRow^  parentboukhezzarRowByboukhezzar_J_t) {
    NewDataSet::J_tRow^  rowJ_tRow = (cli::safe_cast<NewDataSet::J_tRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {TYPE, decimal, nullptr, 
        nullptr};
    if (parentboukhezzarRowByboukhezzar_J_t != nullptr) {
        columnValuesArray[3] = parentboukhezzarRowByboukhezzar_J_t[0];
    }
    rowJ_tRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowJ_tRow);
    return rowJ_tRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::J_tDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::J_tDataTable::Clone() {
    NewDataSet::J_tDataTable^  cln = (cli::safe_cast<NewDataSet::J_tDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::J_tDataTable::CreateInstance() {
    return (gcnew NewDataSet::J_tDataTable());
}

inline ::System::Void NewDataSet::J_tDataTable::InitVars() {
    this->columnTYPE = __super::Columns[L"TYPE"];
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnJ_t_Id = __super::Columns[L"J_t_Id"];
    this->columnboukhezzar_Id = __super::Columns[L"boukhezzar_Id"];
}

inline ::System::Void NewDataSet::J_tDataTable::InitClass() {
    this->columnTYPE = (gcnew ::System::Data::DataColumn(L"TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTYPE);
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnJ_t_Id = (gcnew ::System::Data::DataColumn(L"J_t_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnJ_t_Id);
    this->columnboukhezzar_Id = (gcnew ::System::Data::DataColumn(L"boukhezzar_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnboukhezzar_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnJ_t_Id}, 
            true)));
    this->columnTYPE->AllowDBNull = false;
    this->columndecimal->AllowDBNull = false;
    this->columnJ_t_Id->AutoIncrement = true;
    this->columnJ_t_Id->AllowDBNull = false;
    this->columnJ_t_Id->Unique = true;
}

inline NewDataSet::J_tRow^  NewDataSet::J_tDataTable::NewJ_tRow() {
    return (cli::safe_cast<NewDataSet::J_tRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::J_tDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::J_tRow(builder));
}

inline ::System::Type^  NewDataSet::J_tDataTable::GetRowType() {
    return NewDataSet::J_tRow::typeid;
}

inline ::System::Void NewDataSet::J_tDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->J_tRowChanged(this, (gcnew NewDataSet::J_tRowChangeEvent((cli::safe_cast<NewDataSet::J_tRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::J_tDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->J_tRowChanging(this, (gcnew NewDataSet::J_tRowChangeEvent((cli::safe_cast<NewDataSet::J_tRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::J_tDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->J_tRowDeleted(this, (gcnew NewDataSet::J_tRowChangeEvent((cli::safe_cast<NewDataSet::J_tRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::J_tDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->J_tRowDeleting(this, (gcnew NewDataSet::J_tRowChangeEvent((cli::safe_cast<NewDataSet::J_tRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void NewDataSet::J_tDataTable::RemoveJ_tRow(NewDataSet::J_tRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::J_tDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"J_tDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::criticDataTable::criticDataTable() {
    this->TableName = L"critic";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::criticDataTable::criticDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::criticDataTable::criticDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::criticDataTable::ALGORITHMColumn::get() {
    return this->columnALGORITHM;
}

inline ::System::Data::DataColumn^  NewDataSet::criticDataTable::LOADColumn::get() {
    return this->columnLOAD;
}

inline ::System::Data::DataColumn^  NewDataSet::criticDataTable::SAVEColumn::get() {
    return this->columnSAVE;
}

inline ::System::Data::DataColumn^  NewDataSet::criticDataTable::critic_IdColumn::get() {
    return this->columncritic_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::criticDataTable::SIMGOD_IdColumn::get() {
    return this->columnSIMGOD_Id;
}

inline ::System::Int32 NewDataSet::criticDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::criticRow^  NewDataSet::criticDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::criticRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::criticDataTable::AddcriticRow(NewDataSet::criticRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::criticRow^  NewDataSet::criticDataTable::AddcriticRow(System::String^  ALGORITHM, System::String^  LOAD, 
            System::String^  SAVE, NewDataSet::SIMGODRow^  parentSIMGODRowBySIMGOD_critic) {
    NewDataSet::criticRow^  rowcriticRow = (cli::safe_cast<NewDataSet::criticRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {ALGORITHM, LOAD, SAVE, 
        nullptr, nullptr};
    if (parentSIMGODRowBySIMGOD_critic != nullptr) {
        columnValuesArray[4] = parentSIMGODRowBySIMGOD_critic[0];
    }
    rowcriticRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowcriticRow);
    return rowcriticRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::criticDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::criticDataTable::Clone() {
    NewDataSet::criticDataTable^  cln = (cli::safe_cast<NewDataSet::criticDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::criticDataTable::CreateInstance() {
    return (gcnew NewDataSet::criticDataTable());
}

inline ::System::Void NewDataSet::criticDataTable::InitVars() {
    this->columnALGORITHM = __super::Columns[L"ALGORITHM"];
    this->columnLOAD = __super::Columns[L"LOAD"];
    this->columnSAVE = __super::Columns[L"SAVE"];
    this->columncritic_Id = __super::Columns[L"critic_Id"];
    this->columnSIMGOD_Id = __super::Columns[L"SIMGOD_Id"];
}

inline ::System::Void NewDataSet::criticDataTable::InitClass() {
    this->columnALGORITHM = (gcnew ::System::Data::DataColumn(L"ALGORITHM", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnALGORITHM);
    this->columnLOAD = (gcnew ::System::Data::DataColumn(L"LOAD", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnLOAD);
    this->columnSAVE = (gcnew ::System::Data::DataColumn(L"SAVE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSAVE);
    this->columncritic_Id = (gcnew ::System::Data::DataColumn(L"critic_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columncritic_Id);
    this->columnSIMGOD_Id = (gcnew ::System::Data::DataColumn(L"SIMGOD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnSIMGOD_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columncritic_Id}, 
            true)));
    this->columnALGORITHM->AllowDBNull = false;
    this->columncritic_Id->AutoIncrement = true;
    this->columncritic_Id->AllowDBNull = false;
    this->columncritic_Id->Unique = true;
}

inline NewDataSet::criticRow^  NewDataSet::criticDataTable::NewcriticRow() {
    return (cli::safe_cast<NewDataSet::criticRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::criticDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::criticRow(builder));
}

inline ::System::Type^  NewDataSet::criticDataTable::GetRowType() {
    return NewDataSet::criticRow::typeid;
}

inline ::System::Void NewDataSet::criticDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->criticRowChanged(this, (gcnew NewDataSet::criticRowChangeEvent((cli::safe_cast<NewDataSet::criticRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::criticDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->criticRowChanging(this, (gcnew NewDataSet::criticRowChangeEvent((cli::safe_cast<NewDataSet::criticRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::criticDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->criticRowDeleted(this, (gcnew NewDataSet::criticRowChangeEvent((cli::safe_cast<NewDataSet::criticRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::criticDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->criticRowDeleting(this, (gcnew NewDataSet::criticRowChangeEvent((cli::safe_cast<NewDataSet::criticRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::criticDataTable::RemovecriticRow(NewDataSet::criticRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::criticDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"criticDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::_TD_LambdaDataTable::_TD_LambdaDataTable() {
    this->TableName = L"TD-Lambda";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::_TD_LambdaDataTable::_TD_LambdaDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::_TD_LambdaDataTable::_TD_LambdaDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::_TD_LambdaDataTable::_TD_Lambda_IdColumn::get() {
    return this->column_TD_Lambda_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::_TD_LambdaDataTable::critic_IdColumn::get() {
    return this->columncritic_Id;
}

inline ::System::Int32 NewDataSet::_TD_LambdaDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::_TD_LambdaRow^  NewDataSet::_TD_LambdaDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::_TD_LambdaRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::_TD_LambdaDataTable::Add_TD_LambdaRow(NewDataSet::_TD_LambdaRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::_TD_LambdaRow^  NewDataSet::_TD_LambdaDataTable::Add_TD_LambdaRow(NewDataSet::criticRow^  _parentcriticRowBycritic_TD_Lambda) {
    NewDataSet::_TD_LambdaRow^  row_TD_LambdaRow = (cli::safe_cast<NewDataSet::_TD_LambdaRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (_parentcriticRowBycritic_TD_Lambda != nullptr) {
        columnValuesArray[1] = _parentcriticRowBycritic_TD_Lambda[3];
    }
    row_TD_LambdaRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_TD_LambdaRow);
    return row_TD_LambdaRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::_TD_LambdaDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::_TD_LambdaDataTable::Clone() {
    NewDataSet::_TD_LambdaDataTable^  cln = (cli::safe_cast<NewDataSet::_TD_LambdaDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::_TD_LambdaDataTable::CreateInstance() {
    return (gcnew NewDataSet::_TD_LambdaDataTable());
}

inline ::System::Void NewDataSet::_TD_LambdaDataTable::InitVars() {
    this->column_TD_Lambda_Id = __super::Columns[L"TD-Lambda_Id"];
    this->columncritic_Id = __super::Columns[L"critic_Id"];
}

inline ::System::Void NewDataSet::_TD_LambdaDataTable::InitClass() {
    this->column_TD_Lambda_Id = (gcnew ::System::Data::DataColumn(L"TD-Lambda_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_TD_Lambda_Id);
    this->columncritic_Id = (gcnew ::System::Data::DataColumn(L"critic_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columncritic_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->column_TD_Lambda_Id}, 
            true)));
    this->column_TD_Lambda_Id->AutoIncrement = true;
    this->column_TD_Lambda_Id->AllowDBNull = false;
    this->column_TD_Lambda_Id->Unique = true;
}

inline NewDataSet::_TD_LambdaRow^  NewDataSet::_TD_LambdaDataTable::New_TD_LambdaRow() {
    return (cli::safe_cast<NewDataSet::_TD_LambdaRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::_TD_LambdaDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::_TD_LambdaRow(builder));
}

inline ::System::Type^  NewDataSet::_TD_LambdaDataTable::GetRowType() {
    return NewDataSet::_TD_LambdaRow::typeid;
}

inline ::System::Void NewDataSet::_TD_LambdaDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_TD_LambdaRowChanged(this, (gcnew NewDataSet::_TD_LambdaRowChangeEvent((cli::safe_cast<NewDataSet::_TD_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_TD_LambdaDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_TD_LambdaRowChanging(this, (gcnew NewDataSet::_TD_LambdaRowChangeEvent((cli::safe_cast<NewDataSet::_TD_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_TD_LambdaDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_TD_LambdaRowDeleted(this, (gcnew NewDataSet::_TD_LambdaRowChangeEvent((cli::safe_cast<NewDataSet::_TD_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_TD_LambdaDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_TD_LambdaRowDeleting(this, (gcnew NewDataSet::_TD_LambdaRowChangeEvent((cli::safe_cast<NewDataSet::_TD_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_TD_LambdaDataTable::Remove_TD_LambdaRow(NewDataSet::_TD_LambdaRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::_TD_LambdaDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_TD_LambdaDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::_True_Online_TD_LambdaDataTable::_True_Online_TD_LambdaDataTable() {
    this->TableName = L"True-Online-TD-Lambda";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::_True_Online_TD_LambdaDataTable::_True_Online_TD_LambdaDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::_True_Online_TD_LambdaDataTable::_True_Online_TD_LambdaDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::_True_Online_TD_LambdaDataTable::_True_Online_TD_Lambda_IdColumn::get() {
    return this->column_True_Online_TD_Lambda_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::_True_Online_TD_LambdaDataTable::critic_IdColumn::get() {
    return this->columncritic_Id;
}

inline ::System::Int32 NewDataSet::_True_Online_TD_LambdaDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::_True_Online_TD_LambdaRow^  NewDataSet::_True_Online_TD_LambdaDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::_True_Online_TD_LambdaRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::_True_Online_TD_LambdaDataTable::Add_True_Online_TD_LambdaRow(NewDataSet::_True_Online_TD_LambdaRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::_True_Online_TD_LambdaRow^  NewDataSet::_True_Online_TD_LambdaDataTable::Add_True_Online_TD_LambdaRow(
            NewDataSet::criticRow^  _parentcriticRowBycritic_True_Online_TD_Lambda) {
    NewDataSet::_True_Online_TD_LambdaRow^  row_True_Online_TD_LambdaRow = (cli::safe_cast<NewDataSet::_True_Online_TD_LambdaRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (_parentcriticRowBycritic_True_Online_TD_Lambda != nullptr) {
        columnValuesArray[1] = _parentcriticRowBycritic_True_Online_TD_Lambda[3];
    }
    row_True_Online_TD_LambdaRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_True_Online_TD_LambdaRow);
    return row_True_Online_TD_LambdaRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::_True_Online_TD_LambdaDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::_True_Online_TD_LambdaDataTable::Clone() {
    NewDataSet::_True_Online_TD_LambdaDataTable^  cln = (cli::safe_cast<NewDataSet::_True_Online_TD_LambdaDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::_True_Online_TD_LambdaDataTable::CreateInstance() {
    return (gcnew NewDataSet::_True_Online_TD_LambdaDataTable());
}

inline ::System::Void NewDataSet::_True_Online_TD_LambdaDataTable::InitVars() {
    this->column_True_Online_TD_Lambda_Id = __super::Columns[L"True-Online-TD-Lambda_Id"];
    this->columncritic_Id = __super::Columns[L"critic_Id"];
}

inline ::System::Void NewDataSet::_True_Online_TD_LambdaDataTable::InitClass() {
    this->column_True_Online_TD_Lambda_Id = (gcnew ::System::Data::DataColumn(L"True-Online-TD-Lambda_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_True_Online_TD_Lambda_Id);
    this->columncritic_Id = (gcnew ::System::Data::DataColumn(L"critic_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columncritic_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->column_True_Online_TD_Lambda_Id}, 
            true)));
    this->column_True_Online_TD_Lambda_Id->AutoIncrement = true;
    this->column_True_Online_TD_Lambda_Id->AllowDBNull = false;
    this->column_True_Online_TD_Lambda_Id->Unique = true;
}

inline NewDataSet::_True_Online_TD_LambdaRow^  NewDataSet::_True_Online_TD_LambdaDataTable::New_True_Online_TD_LambdaRow() {
    return (cli::safe_cast<NewDataSet::_True_Online_TD_LambdaRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::_True_Online_TD_LambdaDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::_True_Online_TD_LambdaRow(builder));
}

inline ::System::Type^  NewDataSet::_True_Online_TD_LambdaDataTable::GetRowType() {
    return NewDataSet::_True_Online_TD_LambdaRow::typeid;
}

inline ::System::Void NewDataSet::_True_Online_TD_LambdaDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_True_Online_TD_LambdaRowChanged(this, (gcnew NewDataSet::_True_Online_TD_LambdaRowChangeEvent((cli::safe_cast<NewDataSet::_True_Online_TD_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_True_Online_TD_LambdaDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_True_Online_TD_LambdaRowChanging(this, (gcnew NewDataSet::_True_Online_TD_LambdaRowChangeEvent((cli::safe_cast<NewDataSet::_True_Online_TD_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_True_Online_TD_LambdaDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_True_Online_TD_LambdaRowDeleted(this, (gcnew NewDataSet::_True_Online_TD_LambdaRowChangeEvent((cli::safe_cast<NewDataSet::_True_Online_TD_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_True_Online_TD_LambdaDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_True_Online_TD_LambdaRowDeleting(this, (gcnew NewDataSet::_True_Online_TD_LambdaRowChangeEvent((cli::safe_cast<NewDataSet::_True_Online_TD_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_True_Online_TD_LambdaDataTable::Remove_True_Online_TD_LambdaRow(NewDataSet::_True_Online_TD_LambdaRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::_True_Online_TD_LambdaDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_True_Online_TD_LambdaDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::_TDC_LambdaDataTable::_TDC_LambdaDataTable() {
    this->TableName = L"TDC-Lambda";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::_TDC_LambdaDataTable::_TDC_LambdaDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::_TDC_LambdaDataTable::_TDC_LambdaDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::_TDC_LambdaDataTable::_TDC_Lambda_IdColumn::get() {
    return this->column_TDC_Lambda_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::_TDC_LambdaDataTable::critic_IdColumn::get() {
    return this->columncritic_Id;
}

inline ::System::Int32 NewDataSet::_TDC_LambdaDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::_TDC_LambdaRow^  NewDataSet::_TDC_LambdaDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::_TDC_LambdaRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::_TDC_LambdaDataTable::Add_TDC_LambdaRow(NewDataSet::_TDC_LambdaRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::_TDC_LambdaRow^  NewDataSet::_TDC_LambdaDataTable::Add_TDC_LambdaRow(NewDataSet::criticRow^  _parentcriticRowBycritic_TDC_Lambda) {
    NewDataSet::_TDC_LambdaRow^  row_TDC_LambdaRow = (cli::safe_cast<NewDataSet::_TDC_LambdaRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (_parentcriticRowBycritic_TDC_Lambda != nullptr) {
        columnValuesArray[1] = _parentcriticRowBycritic_TDC_Lambda[3];
    }
    row_TDC_LambdaRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_TDC_LambdaRow);
    return row_TDC_LambdaRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::_TDC_LambdaDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::_TDC_LambdaDataTable::Clone() {
    NewDataSet::_TDC_LambdaDataTable^  cln = (cli::safe_cast<NewDataSet::_TDC_LambdaDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::_TDC_LambdaDataTable::CreateInstance() {
    return (gcnew NewDataSet::_TDC_LambdaDataTable());
}

inline ::System::Void NewDataSet::_TDC_LambdaDataTable::InitVars() {
    this->column_TDC_Lambda_Id = __super::Columns[L"TDC-Lambda_Id"];
    this->columncritic_Id = __super::Columns[L"critic_Id"];
}

inline ::System::Void NewDataSet::_TDC_LambdaDataTable::InitClass() {
    this->column_TDC_Lambda_Id = (gcnew ::System::Data::DataColumn(L"TDC-Lambda_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_TDC_Lambda_Id);
    this->columncritic_Id = (gcnew ::System::Data::DataColumn(L"critic_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columncritic_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->column_TDC_Lambda_Id}, 
            true)));
    this->column_TDC_Lambda_Id->AutoIncrement = true;
    this->column_TDC_Lambda_Id->AllowDBNull = false;
    this->column_TDC_Lambda_Id->Unique = true;
}

inline NewDataSet::_TDC_LambdaRow^  NewDataSet::_TDC_LambdaDataTable::New_TDC_LambdaRow() {
    return (cli::safe_cast<NewDataSet::_TDC_LambdaRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::_TDC_LambdaDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::_TDC_LambdaRow(builder));
}

inline ::System::Type^  NewDataSet::_TDC_LambdaDataTable::GetRowType() {
    return NewDataSet::_TDC_LambdaRow::typeid;
}

inline ::System::Void NewDataSet::_TDC_LambdaDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_TDC_LambdaRowChanged(this, (gcnew NewDataSet::_TDC_LambdaRowChangeEvent((cli::safe_cast<NewDataSet::_TDC_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_TDC_LambdaDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_TDC_LambdaRowChanging(this, (gcnew NewDataSet::_TDC_LambdaRowChangeEvent((cli::safe_cast<NewDataSet::_TDC_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_TDC_LambdaDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_TDC_LambdaRowDeleted(this, (gcnew NewDataSet::_TDC_LambdaRowChangeEvent((cli::safe_cast<NewDataSet::_TDC_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_TDC_LambdaDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_TDC_LambdaRowDeleting(this, (gcnew NewDataSet::_TDC_LambdaRowChangeEvent((cli::safe_cast<NewDataSet::_TDC_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::_TDC_LambdaDataTable::Remove_TDC_LambdaRow(NewDataSet::_TDC_LambdaRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::_TDC_LambdaDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_TDC_LambdaDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::controllerDataTable::controllerDataTable() {
    this->TableName = L"controller";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::controllerDataTable::controllerDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::controllerDataTable::controllerDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::controllerDataTable::ALGORITHMColumn::get() {
    return this->columnALGORITHM;
}

inline ::System::Data::DataColumn^  NewDataSet::controllerDataTable::LOADColumn::get() {
    return this->columnLOAD;
}

inline ::System::Data::DataColumn^  NewDataSet::controllerDataTable::SAVEColumn::get() {
    return this->columnSAVE;
}

inline ::System::Data::DataColumn^  NewDataSet::controllerDataTable::controller_IdColumn::get() {
    return this->columncontroller_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::controllerDataTable::SIMGOD_IdColumn::get() {
    return this->columnSIMGOD_Id;
}

inline ::System::Int32 NewDataSet::controllerDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::controllerRow^  NewDataSet::controllerDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::controllerRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::controllerDataTable::AddcontrollerRow(NewDataSet::controllerRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::controllerRow^  NewDataSet::controllerDataTable::AddcontrollerRow(System::String^  ALGORITHM, System::String^  LOAD, 
            System::String^  SAVE, NewDataSet::SIMGODRow^  parentSIMGODRowBySIMGOD_controller) {
    NewDataSet::controllerRow^  rowcontrollerRow = (cli::safe_cast<NewDataSet::controllerRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {ALGORITHM, LOAD, SAVE, 
        nullptr, nullptr};
    if (parentSIMGODRowBySIMGOD_controller != nullptr) {
        columnValuesArray[4] = parentSIMGODRowBySIMGOD_controller[0];
    }
    rowcontrollerRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowcontrollerRow);
    return rowcontrollerRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::controllerDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::controllerDataTable::Clone() {
    NewDataSet::controllerDataTable^  cln = (cli::safe_cast<NewDataSet::controllerDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::controllerDataTable::CreateInstance() {
    return (gcnew NewDataSet::controllerDataTable());
}

inline ::System::Void NewDataSet::controllerDataTable::InitVars() {
    this->columnALGORITHM = __super::Columns[L"ALGORITHM"];
    this->columnLOAD = __super::Columns[L"LOAD"];
    this->columnSAVE = __super::Columns[L"SAVE"];
    this->columncontroller_Id = __super::Columns[L"controller_Id"];
    this->columnSIMGOD_Id = __super::Columns[L"SIMGOD_Id"];
}

inline ::System::Void NewDataSet::controllerDataTable::InitClass() {
    this->columnALGORITHM = (gcnew ::System::Data::DataColumn(L"ALGORITHM", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnALGORITHM);
    this->columnLOAD = (gcnew ::System::Data::DataColumn(L"LOAD", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnLOAD);
    this->columnSAVE = (gcnew ::System::Data::DataColumn(L"SAVE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSAVE);
    this->columncontroller_Id = (gcnew ::System::Data::DataColumn(L"controller_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columncontroller_Id);
    this->columnSIMGOD_Id = (gcnew ::System::Data::DataColumn(L"SIMGOD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnSIMGOD_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columncontroller_Id}, 
            true)));
    this->columnALGORITHM->AllowDBNull = false;
    this->columnLOAD->AllowDBNull = false;
    this->columnLOAD->DefaultValue = (cli::safe_cast<System::String^  >(L""));
    this->columnSAVE->AllowDBNull = false;
    this->columnSAVE->DefaultValue = (cli::safe_cast<System::String^  >(L""));
    this->columncontroller_Id->AutoIncrement = true;
    this->columncontroller_Id->AllowDBNull = false;
    this->columncontroller_Id->Unique = true;
}

inline NewDataSet::controllerRow^  NewDataSet::controllerDataTable::NewcontrollerRow() {
    return (cli::safe_cast<NewDataSet::controllerRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::controllerDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::controllerRow(builder));
}

inline ::System::Type^  NewDataSet::controllerDataTable::GetRowType() {
    return NewDataSet::controllerRow::typeid;
}

inline ::System::Void NewDataSet::controllerDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->controllerRowChanged(this, (gcnew NewDataSet::controllerRowChangeEvent((cli::safe_cast<NewDataSet::controllerRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::controllerDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->controllerRowChanging(this, (gcnew NewDataSet::controllerRowChangeEvent((cli::safe_cast<NewDataSet::controllerRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::controllerDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->controllerRowDeleted(this, (gcnew NewDataSet::controllerRowChangeEvent((cli::safe_cast<NewDataSet::controllerRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::controllerDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->controllerRowDeleting(this, (gcnew NewDataSet::controllerRowChangeEvent((cli::safe_cast<NewDataSet::controllerRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::controllerDataTable::RemovecontrollerRow(NewDataSet::controllerRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::controllerDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"controllerDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::EXPERIMENTRow::EXPERIMENTRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableEXPERIMENT = (cli::safe_cast<NewDataSet::EXPERIMENTDataTable^  >(this->Table));
}

inline System::Int64 NewDataSet::EXPERIMENTRow::NUM_EPISODES::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableEXPERIMENT->NUM_EPISODESColumn]));
}
inline System::Void NewDataSet::EXPERIMENTRow::NUM_EPISODES::set(System::Int64 value) {
    this[this->tableEXPERIMENT->NUM_EPISODESColumn] = value;
}

inline System::Int64 NewDataSet::EXPERIMENTRow::EPISODE_LENGTH::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableEXPERIMENT->EPISODE_LENGTHColumn]));
}
inline System::Void NewDataSet::EXPERIMENTRow::EPISODE_LENGTH::set(System::Int64 value) {
    this[this->tableEXPERIMENT->EPISODE_LENGTHColumn] = value;
}

inline System::Int64 NewDataSet::EXPERIMENTRow::RANDOM_SEED::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableEXPERIMENT->RANDOM_SEEDColumn]));
}
inline System::Void NewDataSet::EXPERIMENTRow::RANDOM_SEED::set(System::Int64 value) {
    this[this->tableEXPERIMENT->RANDOM_SEEDColumn] = value;
}

inline System::Int64 NewDataSet::EXPERIMENTRow::EVAL_FREQ::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableEXPERIMENT->EVAL_FREQColumn]));
}
inline System::Void NewDataSet::EXPERIMENTRow::EVAL_FREQ::set(System::Int64 value) {
    this[this->tableEXPERIMENT->EVAL_FREQColumn] = value;
}

inline System::Int32 NewDataSet::EXPERIMENTRow::EXPERIMENT_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableEXPERIMENT->EXPERIMENT_IdColumn]));
}
inline System::Void NewDataSet::EXPERIMENTRow::EXPERIMENT_Id::set(System::Int32 value) {
    this[this->tableEXPERIMENT->EXPERIMENT_IdColumn] = value;
}

inline cli::array< NewDataSet::LOGRow^  >^  NewDataSet::EXPERIMENTRow::GetLOGRows() {
    if (this->Table->ChildRelations[L"EXPERIMENT_LOG"] == nullptr) {
        return gcnew cli::array< NewDataSet::LOGRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::LOGRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"EXPERIMENT_LOG"])));
    }
}


inline NewDataSet::LOGRow::LOGRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableLOG = (cli::safe_cast<NewDataSet::LOGDataTable^  >(this->Table));
}

inline System::Decimal NewDataSet::LOGRow::FREQ::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableLOG->FREQColumn]));
}
inline System::Void NewDataSet::LOGRow::FREQ::set(System::Decimal value) {
    this[this->tableLOG->FREQColumn] = value;
}

inline System::String^  NewDataSet::LOGRow::OUTPUT_DIR::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableLOG->OUTPUT_DIRColumn]));
}
inline System::Void NewDataSet::LOGRow::OUTPUT_DIR::set(System::String^  value) {
    this[this->tableLOG->OUTPUT_DIRColumn] = value;
}

inline System::Int64 NewDataSet::LOGRow::FILE_PREFIX::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableLOG->FILE_PREFIXColumn]));
}
inline System::Void NewDataSet::LOGRow::FILE_PREFIX::set(System::Int64 value) {
    this[this->tableLOG->FILE_PREFIXColumn] = value;
}

inline System::Boolean NewDataSet::LOGRow::EVALUATION_EPISODES::get() {
    return (cli::safe_cast<::System::Boolean >(this[this->tableLOG->EVALUATION_EPISODESColumn]));
}
inline System::Void NewDataSet::LOGRow::EVALUATION_EPISODES::set(System::Boolean value) {
    this[this->tableLOG->EVALUATION_EPISODESColumn] = value;
}

inline System::Boolean NewDataSet::LOGRow::TRAINING_EPISODES::get() {
    return (cli::safe_cast<::System::Boolean >(this[this->tableLOG->TRAINING_EPISODESColumn]));
}
inline System::Void NewDataSet::LOGRow::TRAINING_EPISODES::set(System::Boolean value) {
    this[this->tableLOG->TRAINING_EPISODESColumn] = value;
}

inline System::Boolean NewDataSet::LOGRow::EVALUATION_AVG_REWARDS::get() {
    return (cli::safe_cast<::System::Boolean >(this[this->tableLOG->EVALUATION_AVG_REWARDSColumn]));
}
inline System::Void NewDataSet::LOGRow::EVALUATION_AVG_REWARDS::set(System::Boolean value) {
    this[this->tableLOG->EVALUATION_AVG_REWARDSColumn] = value;
}

inline System::Int32 NewDataSet::LOGRow::EXPERIMENT_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableLOG->EXPERIMENT_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'EXPERIMENT_Id\' in table \'LOG\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::LOGRow::EXPERIMENT_Id::set(System::Int32 value) {
    this[this->tableLOG->EXPERIMENT_IdColumn] = value;
}

inline NewDataSet::EXPERIMENTRow^  NewDataSet::LOGRow::EXPERIMENTRow::get() {
    return (cli::safe_cast<NewDataSet::EXPERIMENTRow^  >(this->GetParentRow(this->Table->ParentRelations[L"EXPERIMENT_LOG"])));
}
inline System::Void NewDataSet::LOGRow::EXPERIMENTRow::set(NewDataSet::EXPERIMENTRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"EXPERIMENT_LOG"]);
}

inline ::System::Boolean NewDataSet::LOGRow::IsEXPERIMENT_IdNull() {
    return this->IsNull(this->tableLOG->EXPERIMENT_IdColumn);
}

inline ::System::Void NewDataSet::LOGRow::SetEXPERIMENT_IdNull() {
    this[this->tableLOG->EXPERIMENT_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::WORLDRow::WORLDRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableWORLD = (cli::safe_cast<NewDataSet::WORLDDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::WORLDRow::_dynamic_model::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableWORLD->_dynamic_modelColumn]));
}
inline System::Void NewDataSet::WORLDRow::_dynamic_model::set(System::String^  value) {
    this[this->tableWORLD->_dynamic_modelColumn] = value;
}

inline System::Decimal NewDataSet::WORLDRow::DELTA_T::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableWORLD->DELTA_TColumn]));
}
inline System::Void NewDataSet::WORLDRow::DELTA_T::set(System::Decimal value) {
    this[this->tableWORLD->DELTA_TColumn] = value;
}

inline System::Int64 NewDataSet::WORLDRow::NUM_SIMULATION_STEPS::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableWORLD->NUM_SIMULATION_STEPSColumn]));
}
inline System::Void NewDataSet::WORLDRow::NUM_SIMULATION_STEPS::set(System::Int64 value) {
    this[this->tableWORLD->NUM_SIMULATION_STEPSColumn] = value;
}

inline System::Int32 NewDataSet::WORLDRow::WORLD_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableWORLD->WORLD_IdColumn]));
}
inline System::Void NewDataSet::WORLDRow::WORLD_Id::set(System::Int32 value) {
    this[this->tableWORLD->WORLD_IdColumn] = value;
}

inline cli::array< NewDataSet::rewardRow^  >^  NewDataSet::WORLDRow::GetrewardRows() {
    if (this->Table->ChildRelations[L"WORLD_reward"] == nullptr) {
        return gcnew cli::array< NewDataSet::rewardRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::rewardRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"WORLD_reward"])));
    }
}

inline cli::array< NewDataSet::_wind_turbineRow^  >^  NewDataSet::WORLDRow::_Getwind_turbineRows() {
    if (this->Table->ChildRelations[L"WORLD_wind-turbine"] == nullptr) {
        return gcnew cli::array< NewDataSet::_wind_turbineRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::_wind_turbineRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"WORLD_wind-turbine"])));
    }
}

inline cli::array< NewDataSet::_magnetic_levitationRow^  >^  NewDataSet::WORLDRow::_Getmagnetic_levitationRows() {
    if (this->Table->ChildRelations[L"WORLD_magnetic-levitation"] == nullptr) {
        return gcnew cli::array< NewDataSet::_magnetic_levitationRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::_magnetic_levitationRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"WORLD_magnetic-levitation"])));
    }
}

inline cli::array< NewDataSet::pitchRow^  >^  NewDataSet::WORLDRow::GetpitchRows() {
    if (this->Table->ChildRelations[L"WORLD_pitch"] == nullptr) {
        return gcnew cli::array< NewDataSet::pitchRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::pitchRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"WORLD_pitch"])));
    }
}

inline cli::array< NewDataSet::_underwater_vehicleRow^  >^  NewDataSet::WORLDRow::_Getunderwater_vehicleRows() {
    if (this->Table->ChildRelations[L"WORLD_underwater-vehicle"] == nullptr) {
        return gcnew cli::array< NewDataSet::_underwater_vehicleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::_underwater_vehicleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"WORLD_underwater-vehicle"])));
    }
}


inline NewDataSet::rewardRow::rewardRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablereward = (cli::safe_cast<NewDataSet::rewardDataTable^  >(this->Table));
}

inline System::Decimal NewDataSet::rewardRow::MIN_REWARD::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tablereward->MIN_REWARDColumn]));
}
inline System::Void NewDataSet::rewardRow::MIN_REWARD::set(System::Decimal value) {
    this[this->tablereward->MIN_REWARDColumn] = value;
}

inline System::Decimal NewDataSet::rewardRow::MAX_REWARD::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tablereward->MAX_REWARDColumn]));
}
inline System::Void NewDataSet::rewardRow::MAX_REWARD::set(System::Decimal value) {
    this[this->tablereward->MAX_REWARDColumn] = value;
}

inline System::Int32 NewDataSet::rewardRow::reward_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablereward->reward_IdColumn]));
}
inline System::Void NewDataSet::rewardRow::reward_Id::set(System::Int32 value) {
    this[this->tablereward->reward_IdColumn] = value;
}

inline System::Int32 NewDataSet::rewardRow::WORLD_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablereward->WORLD_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'WORLD_Id\' in table \'reward\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::rewardRow::WORLD_Id::set(System::Int32 value) {
    this[this->tablereward->WORLD_IdColumn] = value;
}

inline NewDataSet::WORLDRow^  NewDataSet::rewardRow::WORLDRow::get() {
    return (cli::safe_cast<NewDataSet::WORLDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"WORLD_reward"])));
}
inline System::Void NewDataSet::rewardRow::WORLDRow::set(NewDataSet::WORLDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"WORLD_reward"]);
}

inline ::System::Boolean NewDataSet::rewardRow::IsWORLD_IdNull() {
    return this->IsNull(this->tablereward->WORLD_IdColumn);
}

inline ::System::Void NewDataSet::rewardRow::SetWORLD_IdNull() {
    this[this->tablereward->WORLD_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::_reward_componentRow^  >^  NewDataSet::rewardRow::_Getreward_componentRows() {
    if (this->Table->ChildRelations[L"reward_reward-component"] == nullptr) {
        return gcnew cli::array< NewDataSet::_reward_componentRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::_reward_componentRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"reward_reward-component"])));
    }
}


inline NewDataSet::_reward_componentRow::_reward_componentRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_reward_component = (cli::safe_cast<NewDataSet::_reward_componentDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::_reward_componentRow::COMPONENT_TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->table_reward_component->COMPONENT_TYPEColumn]));
}
inline System::Void NewDataSet::_reward_componentRow::COMPONENT_TYPE::set(System::String^  value) {
    this[this->table_reward_component->COMPONENT_TYPEColumn] = value;
}

inline System::Decimal NewDataSet::_reward_componentRow::COMPONENT_WEIGHT::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->table_reward_component->COMPONENT_WEIGHTColumn]));
}
inline System::Void NewDataSet::_reward_componentRow::COMPONENT_WEIGHT::set(System::Decimal value) {
    this[this->table_reward_component->COMPONENT_WEIGHTColumn] = value;
}

inline System::Decimal NewDataSet::_reward_componentRow::COMPONENT_TOLERANCE::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->table_reward_component->COMPONENT_TOLERANCEColumn]));
}
inline System::Void NewDataSet::_reward_componentRow::COMPONENT_TOLERANCE::set(System::Decimal value) {
    this[this->table_reward_component->COMPONENT_TOLERANCEColumn] = value;
}

inline System::String^  NewDataSet::_reward_componentRow::CONTROL_ERROR_VARIABLE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->table_reward_component->CONTROL_ERROR_VARIABLEColumn]));
}
inline System::Void NewDataSet::_reward_componentRow::CONTROL_ERROR_VARIABLE::set(System::String^  value) {
    this[this->table_reward_component->CONTROL_ERROR_VARIABLEColumn] = value;
}

inline System::Int32 NewDataSet::_reward_componentRow::reward_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_reward_component->reward_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'reward_Id\' in table \'reward-component\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::_reward_componentRow::reward_Id::set(System::Int32 value) {
    this[this->table_reward_component->reward_IdColumn] = value;
}

inline NewDataSet::rewardRow^  NewDataSet::_reward_componentRow::rewardRow::get() {
    return (cli::safe_cast<NewDataSet::rewardRow^  >(this->GetParentRow(this->Table->ParentRelations[L"reward_reward-component"])));
}
inline System::Void NewDataSet::_reward_componentRow::rewardRow::set(NewDataSet::rewardRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"reward_reward-component"]);
}

inline ::System::Boolean NewDataSet::_reward_componentRow::Isreward_IdNull() {
    return this->IsNull(this->table_reward_component->reward_IdColumn);
}

inline ::System::Void NewDataSet::_reward_componentRow::Setreward_IdNull() {
    this[this->table_reward_component->reward_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::_wind_turbineRow::_wind_turbineRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_wind_turbine = (cli::safe_cast<NewDataSet::_wind_turbineDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::_wind_turbineRow::EVALUATION_WIND_DATA_FILE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->table_wind_turbine->EVALUATION_WIND_DATA_FILEColumn]));
}
inline System::Void NewDataSet::_wind_turbineRow::EVALUATION_WIND_DATA_FILE::set(System::String^  value) {
    this[this->table_wind_turbine->EVALUATION_WIND_DATA_FILEColumn] = value;
}

inline System::String^  NewDataSet::_wind_turbineRow::POWER_SET_POINT_FILE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->table_wind_turbine->POWER_SET_POINT_FILEColumn]));
}
inline System::Void NewDataSet::_wind_turbineRow::POWER_SET_POINT_FILE::set(System::String^  value) {
    this[this->table_wind_turbine->POWER_SET_POINT_FILEColumn] = value;
}

inline System::Int32 NewDataSet::_wind_turbineRow::_wind_turbine_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->table_wind_turbine->_wind_turbine_IdColumn]));
}
inline System::Void NewDataSet::_wind_turbineRow::_wind_turbine_Id::set(System::Int32 value) {
    this[this->table_wind_turbine->_wind_turbine_IdColumn] = value;
}

inline System::Int32 NewDataSet::_wind_turbineRow::WORLD_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_wind_turbine->WORLD_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'WORLD_Id\' in table \'wind-turbine\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::_wind_turbineRow::WORLD_Id::set(System::Int32 value) {
    this[this->table_wind_turbine->WORLD_IdColumn] = value;
}

inline NewDataSet::WORLDRow^  NewDataSet::_wind_turbineRow::WORLDRow::get() {
    return (cli::safe_cast<NewDataSet::WORLDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"WORLD_wind-turbine"])));
}
inline System::Void NewDataSet::_wind_turbineRow::WORLDRow::set(NewDataSet::WORLDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"WORLD_wind-turbine"]);
}

inline ::System::Boolean NewDataSet::_wind_turbineRow::IsWORLD_IdNull() {
    return this->IsNull(this->table_wind_turbine->WORLD_IdColumn);
}

inline ::System::Void NewDataSet::_wind_turbineRow::SetWORLD_IdNull() {
    this[this->table_wind_turbine->WORLD_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::TRAINING_WIND_DATA_FILESRow^  >^  NewDataSet::_wind_turbineRow::GetTRAINING_WIND_DATA_FILESRows() {
    if (this->Table->ChildRelations[L"wind-turbine_TRAINING_WIND_DATA_FILES"] == nullptr) {
        return gcnew cli::array< NewDataSet::TRAINING_WIND_DATA_FILESRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::TRAINING_WIND_DATA_FILESRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"wind-turbine_TRAINING_WIND_DATA_FILES"])));
    }
}


inline NewDataSet::TRAINING_WIND_DATA_FILESRow::TRAINING_WIND_DATA_FILESRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableTRAINING_WIND_DATA_FILES = (cli::safe_cast<NewDataSet::TRAINING_WIND_DATA_FILESDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::TRAINING_WIND_DATA_FILESRow::TRAINING_WIND_DATA_FILES_Column::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableTRAINING_WIND_DATA_FILES->TRAINING_WIND_DATA_FILES_ColumnColumn]));
}
inline System::Void NewDataSet::TRAINING_WIND_DATA_FILESRow::TRAINING_WIND_DATA_FILES_Column::set(System::String^  value) {
    this[this->tableTRAINING_WIND_DATA_FILES->TRAINING_WIND_DATA_FILES_ColumnColumn] = value;
}

inline System::Int32 NewDataSet::TRAINING_WIND_DATA_FILESRow::_wind_turbine_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableTRAINING_WIND_DATA_FILES->_wind_turbine_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'wind-turbine_Id\' in table \'TRAINING_WIND_DATA_FILES\' is DBN" 
L"ull.", 
            e));
    }
}
inline System::Void NewDataSet::TRAINING_WIND_DATA_FILESRow::_wind_turbine_Id::set(System::Int32 value) {
    this[this->tableTRAINING_WIND_DATA_FILES->_wind_turbine_IdColumn] = value;
}

inline NewDataSet::_wind_turbineRow^  NewDataSet::TRAINING_WIND_DATA_FILESRow::_wind_turbineRow::get() {
    return (cli::safe_cast<NewDataSet::_wind_turbineRow^  >(this->GetParentRow(this->Table->ParentRelations[L"wind-turbine_TRAINING_WIND_DATA_FILES"])));
}
inline System::Void NewDataSet::TRAINING_WIND_DATA_FILESRow::_wind_turbineRow::set(NewDataSet::_wind_turbineRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"wind-turbine_TRAINING_WIND_DATA_FILES"]);
}

inline ::System::Boolean NewDataSet::TRAINING_WIND_DATA_FILESRow::Is_wind_turbine_IdNull() {
    return this->IsNull(this->tableTRAINING_WIND_DATA_FILES->_wind_turbine_IdColumn);
}

inline ::System::Void NewDataSet::TRAINING_WIND_DATA_FILESRow::Set_wind_turbine_IdNull() {
    this[this->tableTRAINING_WIND_DATA_FILES->_wind_turbine_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::_magnetic_levitationRow::_magnetic_levitationRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_magnetic_levitation = (cli::safe_cast<NewDataSet::_magnetic_levitationDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::_magnetic_levitationRow::SET_POINT_FILE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->table_magnetic_levitation->SET_POINT_FILEColumn]));
}
inline System::Void NewDataSet::_magnetic_levitationRow::SET_POINT_FILE::set(System::String^  value) {
    this[this->table_magnetic_levitation->SET_POINT_FILEColumn] = value;
}

inline System::Int32 NewDataSet::_magnetic_levitationRow::WORLD_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_magnetic_levitation->WORLD_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'WORLD_Id\' in table \'magnetic-levitation\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::_magnetic_levitationRow::WORLD_Id::set(System::Int32 value) {
    this[this->table_magnetic_levitation->WORLD_IdColumn] = value;
}

inline NewDataSet::WORLDRow^  NewDataSet::_magnetic_levitationRow::WORLDRow::get() {
    return (cli::safe_cast<NewDataSet::WORLDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"WORLD_magnetic-levitation"])));
}
inline System::Void NewDataSet::_magnetic_levitationRow::WORLDRow::set(NewDataSet::WORLDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"WORLD_magnetic-levitation"]);
}

inline ::System::Boolean NewDataSet::_magnetic_levitationRow::IsWORLD_IdNull() {
    return this->IsNull(this->table_magnetic_levitation->WORLD_IdColumn);
}

inline ::System::Void NewDataSet::_magnetic_levitationRow::SetWORLD_IdNull() {
    this[this->table_magnetic_levitation->WORLD_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::pitchRow::pitchRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablepitch = (cli::safe_cast<NewDataSet::pitchDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::pitchRow::SET_POINT_FILE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablepitch->SET_POINT_FILEColumn]));
}
inline System::Void NewDataSet::pitchRow::SET_POINT_FILE::set(System::String^  value) {
    this[this->tablepitch->SET_POINT_FILEColumn] = value;
}

inline System::Int32 NewDataSet::pitchRow::WORLD_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablepitch->WORLD_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'WORLD_Id\' in table \'pitch\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::pitchRow::WORLD_Id::set(System::Int32 value) {
    this[this->tablepitch->WORLD_IdColumn] = value;
}

inline NewDataSet::WORLDRow^  NewDataSet::pitchRow::WORLDRow::get() {
    return (cli::safe_cast<NewDataSet::WORLDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"WORLD_pitch"])));
}
inline System::Void NewDataSet::pitchRow::WORLDRow::set(NewDataSet::WORLDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"WORLD_pitch"]);
}

inline ::System::Boolean NewDataSet::pitchRow::IsWORLD_IdNull() {
    return this->IsNull(this->tablepitch->WORLD_IdColumn);
}

inline ::System::Void NewDataSet::pitchRow::SetWORLD_IdNull() {
    this[this->tablepitch->WORLD_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::_underwater_vehicleRow::_underwater_vehicleRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_underwater_vehicle = (cli::safe_cast<NewDataSet::_underwater_vehicleDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::_underwater_vehicleRow::SET_POINT_FILE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->table_underwater_vehicle->SET_POINT_FILEColumn]));
}
inline System::Void NewDataSet::_underwater_vehicleRow::SET_POINT_FILE::set(System::String^  value) {
    this[this->table_underwater_vehicle->SET_POINT_FILEColumn] = value;
}

inline System::Int32 NewDataSet::_underwater_vehicleRow::WORLD_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_underwater_vehicle->WORLD_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'WORLD_Id\' in table \'underwater-vehicle\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::_underwater_vehicleRow::WORLD_Id::set(System::Int32 value) {
    this[this->table_underwater_vehicle->WORLD_IdColumn] = value;
}

inline NewDataSet::WORLDRow^  NewDataSet::_underwater_vehicleRow::WORLDRow::get() {
    return (cli::safe_cast<NewDataSet::WORLDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"WORLD_underwater-vehicle"])));
}
inline System::Void NewDataSet::_underwater_vehicleRow::WORLDRow::set(NewDataSet::WORLDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"WORLD_underwater-vehicle"]);
}

inline ::System::Boolean NewDataSet::_underwater_vehicleRow::IsWORLD_IdNull() {
    return this->IsNull(this->table_underwater_vehicle->WORLD_IdColumn);
}

inline ::System::Void NewDataSet::_underwater_vehicleRow::SetWORLD_IdNull() {
    this[this->table_underwater_vehicle->WORLD_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::SIMGODRow::SIMGODRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableSIMGOD = (cli::safe_cast<NewDataSet::SIMGODDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::SIMGODRow::SIMGOD_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableSIMGOD->SIMGOD_IdColumn]));
}
inline System::Void NewDataSet::SIMGODRow::SIMGOD_Id::set(System::Int32 value) {
    this[this->tableSIMGOD->SIMGOD_IdColumn] = value;
}

inline cli::array< NewDataSet::actorRow^  >^  NewDataSet::SIMGODRow::GetactorRows() {
    if (this->Table->ChildRelations[L"SIMGOD_actor"] == nullptr) {
        return gcnew cli::array< NewDataSet::actorRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::actorRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"SIMGOD_actor"])));
    }
}

inline cli::array< NewDataSet::criticRow^  >^  NewDataSet::SIMGODRow::GetcriticRows() {
    if (this->Table->ChildRelations[L"SIMGOD_critic"] == nullptr) {
        return gcnew cli::array< NewDataSet::criticRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::criticRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"SIMGOD_critic"])));
    }
}

inline cli::array< NewDataSet::controllerRow^  >^  NewDataSet::SIMGODRow::GetcontrollerRows() {
    if (this->Table->ChildRelations[L"SIMGOD_controller"] == nullptr) {
        return gcnew cli::array< NewDataSet::controllerRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::controllerRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"SIMGOD_controller"])));
    }
}


inline NewDataSet::actorRow::actorRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableactor = (cli::safe_cast<NewDataSet::actorDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::actorRow::ALGORITHM::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableactor->ALGORITHMColumn]));
}
inline System::Void NewDataSet::actorRow::ALGORITHM::set(System::String^  value) {
    this[this->tableactor->ALGORITHMColumn] = value;
}

inline System::String^  NewDataSet::actorRow::LOAD::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableactor->LOADColumn]));
}
inline System::Void NewDataSet::actorRow::LOAD::set(System::String^  value) {
    this[this->tableactor->LOADColumn] = value;
}

inline System::String^  NewDataSet::actorRow::SAVE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableactor->SAVEColumn]));
}
inline System::Void NewDataSet::actorRow::SAVE::set(System::String^  value) {
    this[this->tableactor->SAVEColumn] = value;
}

inline System::Int32 NewDataSet::actorRow::actor_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableactor->actor_IdColumn]));
}
inline System::Void NewDataSet::actorRow::actor_Id::set(System::Int32 value) {
    this[this->tableactor->actor_IdColumn] = value;
}

inline System::Int32 NewDataSet::actorRow::SIMGOD_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableactor->SIMGOD_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'SIMGOD_Id\' in table \'actor\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::actorRow::SIMGOD_Id::set(System::Int32 value) {
    this[this->tableactor->SIMGOD_IdColumn] = value;
}

inline NewDataSet::SIMGODRow^  NewDataSet::actorRow::SIMGODRow::get() {
    return (cli::safe_cast<NewDataSet::SIMGODRow^  >(this->GetParentRow(this->Table->ParentRelations[L"SIMGOD_actor"])));
}
inline System::Void NewDataSet::actorRow::SIMGODRow::set(NewDataSet::SIMGODRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"SIMGOD_actor"]);
}

inline ::System::Boolean NewDataSet::actorRow::IsSIMGOD_IdNull() {
    return this->IsNull(this->tableactor->SIMGOD_IdColumn);
}

inline ::System::Void NewDataSet::actorRow::SetSIMGOD_IdNull() {
    this[this->tableactor->SIMGOD_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::CACLARow^  >^  NewDataSet::actorRow::GetCACLARows() {
    if (this->Table->ChildRelations[L"actor_CACLA"] == nullptr) {
        return gcnew cli::array< NewDataSet::CACLARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::CACLARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"actor_CACLA"])));
    }
}

inline cli::array< NewDataSet::PIDRow^  >^  NewDataSet::actorRow::GetPIDRows() {
    if (this->Table->ChildRelations[L"actor_PID"] == nullptr) {
        return gcnew cli::array< NewDataSet::PIDRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::PIDRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"actor_PID"])));
    }
}

inline cli::array< NewDataSet::LQRRow^  >^  NewDataSet::actorRow::GetLQRRows() {
    if (this->Table->ChildRelations[L"actor_LQR"] == nullptr) {
        return gcnew cli::array< NewDataSet::LQRRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::LQRRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"actor_LQR"])));
    }
}

inline cli::array< NewDataSet::jonkmanRow^  >^  NewDataSet::actorRow::GetjonkmanRows() {
    if (this->Table->ChildRelations[L"actor_jonkman"] == nullptr) {
        return gcnew cli::array< NewDataSet::jonkmanRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::jonkmanRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"actor_jonkman"])));
    }
}

inline cli::array< NewDataSet::vidalRow^  >^  NewDataSet::actorRow::GetvidalRows() {
    if (this->Table->ChildRelations[L"actor_vidal"] == nullptr) {
        return gcnew cli::array< NewDataSet::vidalRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::vidalRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"actor_vidal"])));
    }
}

inline cli::array< NewDataSet::boukhezzarRow^  >^  NewDataSet::actorRow::GetboukhezzarRows() {
    if (this->Table->ChildRelations[L"actor_boukhezzar"] == nullptr) {
        return gcnew cli::array< NewDataSet::boukhezzarRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::boukhezzarRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"actor_boukhezzar"])));
    }
}


inline NewDataSet::CACLARow::CACLARow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableCACLA = (cli::safe_cast<NewDataSet::CACLADataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::CACLARow::CACLA_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableCACLA->CACLA_IdColumn]));
}
inline System::Void NewDataSet::CACLARow::CACLA_Id::set(System::Int32 value) {
    this[this->tableCACLA->CACLA_IdColumn] = value;
}

inline System::Int32 NewDataSet::CACLARow::actor_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableCACLA->actor_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'actor_Id\' in table \'CACLA\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::CACLARow::actor_Id::set(System::Int32 value) {
    this[this->tableCACLA->actor_IdColumn] = value;
}

inline System::Int32 NewDataSet::CACLARow::controller_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableCACLA->controller_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'controller_Id\' in table \'CACLA\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::CACLARow::controller_Id::set(System::Int32 value) {
    this[this->tableCACLA->controller_IdColumn] = value;
}

inline NewDataSet::actorRow^  NewDataSet::CACLARow::actorRow::get() {
    return (cli::safe_cast<NewDataSet::actorRow^  >(this->GetParentRow(this->Table->ParentRelations[L"actor_CACLA"])));
}
inline System::Void NewDataSet::CACLARow::actorRow::set(NewDataSet::actorRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"actor_CACLA"]);
}

inline NewDataSet::controllerRow^  NewDataSet::CACLARow::controllerRow::get() {
    return (cli::safe_cast<NewDataSet::controllerRow^  >(this->GetParentRow(this->Table->ParentRelations[L"controller_CACLA"])));
}
inline System::Void NewDataSet::CACLARow::controllerRow::set(NewDataSet::controllerRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"controller_CACLA"]);
}

inline ::System::Boolean NewDataSet::CACLARow::Isactor_IdNull() {
    return this->IsNull(this->tableCACLA->actor_IdColumn);
}

inline ::System::Void NewDataSet::CACLARow::Setactor_IdNull() {
    this[this->tableCACLA->actor_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::CACLARow::Iscontroller_IdNull() {
    return this->IsNull(this->tableCACLA->controller_IdColumn);
}

inline ::System::Void NewDataSet::CACLARow::Setcontroller_IdNull() {
    this[this->tableCACLA->controller_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::vfaRow^  >^  NewDataSet::CACLARow::GetvfaRows() {
    if (this->Table->ChildRelations[L"CACLA_vfa"] == nullptr) {
        return gcnew cli::array< NewDataSet::vfaRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::vfaRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"CACLA_vfa"])));
    }
}


inline NewDataSet::vfaRow::vfaRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablevfa = (cli::safe_cast<NewDataSet::vfaDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::vfaRow::vfa_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablevfa->vfa_IdColumn]));
}
inline System::Void NewDataSet::vfaRow::vfa_Id::set(System::Int32 value) {
    this[this->tablevfa->vfa_IdColumn] = value;
}

inline System::Int32 NewDataSet::vfaRow::CACLA_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablevfa->CACLA_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CACLA_Id\' in table \'vfa\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::vfaRow::CACLA_Id::set(System::Int32 value) {
    this[this->tablevfa->CACLA_IdColumn] = value;
}

inline System::Int32 NewDataSet::vfaRow::_TD_Lambda_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablevfa->_TD_Lambda_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TD-Lambda_Id\' in table \'vfa\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::vfaRow::_TD_Lambda_Id::set(System::Int32 value) {
    this[this->tablevfa->_TD_Lambda_IdColumn] = value;
}

inline System::Int32 NewDataSet::vfaRow::_True_Online_TD_Lambda_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablevfa->_True_Online_TD_Lambda_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'True-Online-TD-Lambda_Id\' in table \'vfa\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::vfaRow::_True_Online_TD_Lambda_Id::set(System::Int32 value) {
    this[this->tablevfa->_True_Online_TD_Lambda_IdColumn] = value;
}

inline System::Int32 NewDataSet::vfaRow::_TDC_Lambda_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablevfa->_TDC_Lambda_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TDC-Lambda_Id\' in table \'vfa\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::vfaRow::_TDC_Lambda_Id::set(System::Int32 value) {
    this[this->tablevfa->_TDC_Lambda_IdColumn] = value;
}

inline NewDataSet::CACLARow^  NewDataSet::vfaRow::CACLARow::get() {
    return (cli::safe_cast<NewDataSet::CACLARow^  >(this->GetParentRow(this->Table->ParentRelations[L"CACLA_vfa"])));
}
inline System::Void NewDataSet::vfaRow::CACLARow::set(NewDataSet::CACLARow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"CACLA_vfa"]);
}

inline NewDataSet::_TD_LambdaRow^  NewDataSet::vfaRow::_TD_LambdaRow::get() {
    return (cli::safe_cast<NewDataSet::_TD_LambdaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TD-Lambda_vfa"])));
}
inline System::Void NewDataSet::vfaRow::_TD_LambdaRow::set(NewDataSet::_TD_LambdaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"TD-Lambda_vfa"]);
}

inline NewDataSet::_True_Online_TD_LambdaRow^  NewDataSet::vfaRow::_True_Online_TD_LambdaRow::get() {
    return (cli::safe_cast<NewDataSet::_True_Online_TD_LambdaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"True-Online-TD-Lambda_vfa"])));
}
inline System::Void NewDataSet::vfaRow::_True_Online_TD_LambdaRow::set(NewDataSet::_True_Online_TD_LambdaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"True-Online-TD-Lambda_vfa"]);
}

inline NewDataSet::_TDC_LambdaRow^  NewDataSet::vfaRow::_TDC_LambdaRow::get() {
    return (cli::safe_cast<NewDataSet::_TDC_LambdaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TDC-Lambda_vfa"])));
}
inline System::Void NewDataSet::vfaRow::_TDC_LambdaRow::set(NewDataSet::_TDC_LambdaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"TDC-Lambda_vfa"]);
}

inline ::System::Boolean NewDataSet::vfaRow::IsCACLA_IdNull() {
    return this->IsNull(this->tablevfa->CACLA_IdColumn);
}

inline ::System::Void NewDataSet::vfaRow::SetCACLA_IdNull() {
    this[this->tablevfa->CACLA_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::vfaRow::Is_TD_Lambda_IdNull() {
    return this->IsNull(this->tablevfa->_TD_Lambda_IdColumn);
}

inline ::System::Void NewDataSet::vfaRow::Set_TD_Lambda_IdNull() {
    this[this->tablevfa->_TD_Lambda_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::vfaRow::Is_True_Online_TD_Lambda_IdNull() {
    return this->IsNull(this->tablevfa->_True_Online_TD_Lambda_IdColumn);
}

inline ::System::Void NewDataSet::vfaRow::Set_True_Online_TD_Lambda_IdNull() {
    this[this->tablevfa->_True_Online_TD_Lambda_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::vfaRow::Is_TDC_Lambda_IdNull() {
    return this->IsNull(this->tablevfa->_TDC_Lambda_IdColumn);
}

inline ::System::Void NewDataSet::vfaRow::Set_TDC_Lambda_IdNull() {
    this[this->tablevfa->_TDC_Lambda_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::NOISE_WIDTHRow^  >^  NewDataSet::vfaRow::GetNOISE_WIDTHRows() {
    if (this->Table->ChildRelations[L"vfa_NOISE_WIDTH"] == nullptr) {
        return gcnew cli::array< NewDataSet::NOISE_WIDTHRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::NOISE_WIDTHRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"vfa_NOISE_WIDTH"])));
    }
}

inline cli::array< NewDataSet::LEARNING_RATERow^  >^  NewDataSet::vfaRow::GetLEARNING_RATERows() {
    if (this->Table->ChildRelations[L"vfa_LEARNING_RATE"] == nullptr) {
        return gcnew cli::array< NewDataSet::LEARNING_RATERow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::LEARNING_RATERow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"vfa_LEARNING_RATE"])));
    }
}

inline cli::array< NewDataSet::RBF_GRIDRow^  >^  NewDataSet::vfaRow::GetRBF_GRIDRows() {
    if (this->Table->ChildRelations[L"vfa_RBF_GRID"] == nullptr) {
        return gcnew cli::array< NewDataSet::RBF_GRIDRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::RBF_GRIDRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"vfa_RBF_GRID"])));
    }
}


inline NewDataSet::NOISE_WIDTHRow::NOISE_WIDTHRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableNOISE_WIDTH = (cli::safe_cast<NewDataSet::NOISE_WIDTHDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::NOISE_WIDTHRow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableNOISE_WIDTH->TYPEColumn]));
}
inline System::Void NewDataSet::NOISE_WIDTHRow::TYPE::set(System::String^  value) {
    this[this->tableNOISE_WIDTH->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::NOISE_WIDTHRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableNOISE_WIDTH->decimalColumn]));
}
inline System::Void NewDataSet::NOISE_WIDTHRow::decimal::set(System::Decimal value) {
    this[this->tableNOISE_WIDTH->decimalColumn] = value;
}

inline System::Int32 NewDataSet::NOISE_WIDTHRow::NOISE_WIDTH_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableNOISE_WIDTH->NOISE_WIDTH_IdColumn]));
}
inline System::Void NewDataSet::NOISE_WIDTHRow::NOISE_WIDTH_Id::set(System::Int32 value) {
    this[this->tableNOISE_WIDTH->NOISE_WIDTH_IdColumn] = value;
}

inline System::Int32 NewDataSet::NOISE_WIDTHRow::vfa_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableNOISE_WIDTH->vfa_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'vfa_Id\' in table \'NOISE_WIDTH\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::NOISE_WIDTHRow::vfa_Id::set(System::Int32 value) {
    this[this->tableNOISE_WIDTH->vfa_IdColumn] = value;
}

inline NewDataSet::vfaRow^  NewDataSet::NOISE_WIDTHRow::vfaRow::get() {
    return (cli::safe_cast<NewDataSet::vfaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"vfa_NOISE_WIDTH"])));
}
inline System::Void NewDataSet::NOISE_WIDTHRow::vfaRow::set(NewDataSet::vfaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"vfa_NOISE_WIDTH"]);
}

inline ::System::Boolean NewDataSet::NOISE_WIDTHRow::Isvfa_IdNull() {
    return this->IsNull(this->tableNOISE_WIDTH->vfa_IdColumn);
}

inline ::System::Void NewDataSet::NOISE_WIDTHRow::Setvfa_IdNull() {
    this[this->tableNOISE_WIDTH->vfa_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::NOISE_WIDTHRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"NOISE_WIDTH_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"NOISE_WIDTH_schedule"])));
    }
}


inline NewDataSet::scheduleRow::scheduleRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableschedule = (cli::safe_cast<NewDataSet::scheduleDataTable^  >(this->Table));
}

inline System::Decimal NewDataSet::scheduleRow::INITIAL_VALUE::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableschedule->INITIAL_VALUEColumn]));
}
inline System::Void NewDataSet::scheduleRow::INITIAL_VALUE::set(System::Decimal value) {
    this[this->tableschedule->INITIAL_VALUEColumn] = value;
}

inline System::Decimal NewDataSet::scheduleRow::FINAL_VALUE::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableschedule->FINAL_VALUEColumn]));
}
inline System::Void NewDataSet::scheduleRow::FINAL_VALUE::set(System::Decimal value) {
    this[this->tableschedule->FINAL_VALUEColumn] = value;
}

inline System::Decimal NewDataSet::scheduleRow::EVALUATION_EPISODE_VALUE::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableschedule->EVALUATION_EPISODE_VALUEColumn]));
}
inline System::Void NewDataSet::scheduleRow::EVALUATION_EPISODE_VALUE::set(System::Decimal value) {
    this[this->tableschedule->EVALUATION_EPISODE_VALUEColumn] = value;
}

inline System::String^  NewDataSet::scheduleRow::INTERPOLATION::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableschedule->INTERPOLATIONColumn]));
}
inline System::Void NewDataSet::scheduleRow::INTERPOLATION::set(System::String^  value) {
    this[this->tableschedule->INTERPOLATIONColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::NOISE_WIDTH_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->NOISE_WIDTH_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'NOISE_WIDTH_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::scheduleRow::NOISE_WIDTH_Id::set(System::Int32 value) {
    this[this->tableschedule->NOISE_WIDTH_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::LEARNING_RATE_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->LEARNING_RATE_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'LEARNING_RATE_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::scheduleRow::LEARNING_RATE_Id::set(System::Int32 value) {
    this[this->tableschedule->LEARNING_RATE_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::KP_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->KP_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'KP_Id\' in table \'schedule\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::scheduleRow::KP_Id::set(System::Int32 value) {
    this[this->tableschedule->KP_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::KI_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->KI_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'KI_Id\' in table \'schedule\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::scheduleRow::KI_Id::set(System::Int32 value) {
    this[this->tableschedule->KI_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::KD_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->KD_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'KD_Id\' in table \'schedule\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::scheduleRow::KD_Id::set(System::Int32 value) {
    this[this->tableschedule->KD_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::VS_RtGnSp_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->VS_RtGnSp_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VS_RtGnSp_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::scheduleRow::VS_RtGnSp_Id::set(System::Int32 value) {
    this[this->tableschedule->VS_RtGnSp_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::VS_SlPc_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->VS_SlPc_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VS_SlPc_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::scheduleRow::VS_SlPc_Id::set(System::Int32 value) {
    this[this->tableschedule->VS_SlPc_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::VS_Rgn2K_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->VS_Rgn2K_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VS_Rgn2K_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::scheduleRow::VS_Rgn2K_Id::set(System::Int32 value) {
    this[this->tableschedule->VS_Rgn2K_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::VS_Rgn2Sp_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->VS_Rgn2Sp_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VS_Rgn2Sp_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::scheduleRow::VS_Rgn2Sp_Id::set(System::Int32 value) {
    this[this->tableschedule->VS_Rgn2Sp_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::VS_CtInSp_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->VS_CtInSp_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VS_CtInSp_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::scheduleRow::VS_CtInSp_Id::set(System::Int32 value) {
    this[this->tableschedule->VS_CtInSp_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::VS_RtPwr_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->VS_RtPwr_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VS_RtPwr_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::scheduleRow::VS_RtPwr_Id::set(System::Int32 value) {
    this[this->tableschedule->VS_RtPwr_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::VS_Rgn3MP_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->VS_Rgn3MP_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VS_Rgn3MP_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::scheduleRow::VS_Rgn3MP_Id::set(System::Int32 value) {
    this[this->tableschedule->VS_Rgn3MP_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::PC_KI_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->PC_KI_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PC_KI_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::scheduleRow::PC_KI_Id::set(System::Int32 value) {
    this[this->tableschedule->PC_KI_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::PC_KK_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->PC_KK_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PC_KK_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::scheduleRow::PC_KK_Id::set(System::Int32 value) {
    this[this->tableschedule->PC_KK_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::PC_KP_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->PC_KP_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PC_KP_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::scheduleRow::PC_KP_Id::set(System::Int32 value) {
    this[this->tableschedule->PC_KP_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::PC_RefSpd_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->PC_RefSpd_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PC_RefSpd_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::scheduleRow::PC_RefSpd_Id::set(System::Int32 value) {
    this[this->tableschedule->PC_RefSpd_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::A_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->A_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'A_Id\' in table \'schedule\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::scheduleRow::A_Id::set(System::Int32 value) {
    this[this->tableschedule->A_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::K_alpha_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->K_alpha_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'K_alpha_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::scheduleRow::K_alpha_Id::set(System::Int32 value) {
    this[this->tableschedule->K_alpha_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::P_s_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->P_s_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'P_s_Id\' in table \'schedule\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::scheduleRow::P_s_Id::set(System::Int32 value) {
    this[this->tableschedule->P_s_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::C_0_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->C_0_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'C_0_Id\' in table \'schedule\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::scheduleRow::C_0_Id::set(System::Int32 value) {
    this[this->tableschedule->C_0_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::K_t_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->K_t_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'K_t_Id\' in table \'schedule\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::scheduleRow::K_t_Id::set(System::Int32 value) {
    this[this->tableschedule->K_t_IdColumn] = value;
}

inline System::Int32 NewDataSet::scheduleRow::J_t_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->J_t_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'J_t_Id\' in table \'schedule\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::scheduleRow::J_t_Id::set(System::Int32 value) {
    this[this->tableschedule->J_t_IdColumn] = value;
}

inline NewDataSet::NOISE_WIDTHRow^  NewDataSet::scheduleRow::NOISE_WIDTHRow::get() {
    return (cli::safe_cast<NewDataSet::NOISE_WIDTHRow^  >(this->GetParentRow(this->Table->ParentRelations[L"NOISE_WIDTH_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::NOISE_WIDTHRow::set(NewDataSet::NOISE_WIDTHRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"NOISE_WIDTH_schedule"]);
}

inline NewDataSet::LEARNING_RATERow^  NewDataSet::scheduleRow::LEARNING_RATERow::get() {
    return (cli::safe_cast<NewDataSet::LEARNING_RATERow^  >(this->GetParentRow(this->Table->ParentRelations[L"LEARNING_RATE_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::LEARNING_RATERow::set(NewDataSet::LEARNING_RATERow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"LEARNING_RATE_schedule"]);
}

inline NewDataSet::KPRow^  NewDataSet::scheduleRow::KPRow::get() {
    return (cli::safe_cast<NewDataSet::KPRow^  >(this->GetParentRow(this->Table->ParentRelations[L"KP_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::KPRow::set(NewDataSet::KPRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"KP_schedule"]);
}

inline NewDataSet::KIRow^  NewDataSet::scheduleRow::KIRow::get() {
    return (cli::safe_cast<NewDataSet::KIRow^  >(this->GetParentRow(this->Table->ParentRelations[L"KI_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::KIRow::set(NewDataSet::KIRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"KI_schedule"]);
}

inline NewDataSet::KDRow^  NewDataSet::scheduleRow::KDRow::get() {
    return (cli::safe_cast<NewDataSet::KDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"KD_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::KDRow::set(NewDataSet::KDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"KD_schedule"]);
}

inline NewDataSet::VS_RtGnSpRow^  NewDataSet::scheduleRow::VS_RtGnSpRow::get() {
    return (cli::safe_cast<NewDataSet::VS_RtGnSpRow^  >(this->GetParentRow(this->Table->ParentRelations[L"VS_RtGnSp_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::VS_RtGnSpRow::set(NewDataSet::VS_RtGnSpRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"VS_RtGnSp_schedule"]);
}

inline NewDataSet::VS_SlPcRow^  NewDataSet::scheduleRow::VS_SlPcRow::get() {
    return (cli::safe_cast<NewDataSet::VS_SlPcRow^  >(this->GetParentRow(this->Table->ParentRelations[L"VS_SlPc_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::VS_SlPcRow::set(NewDataSet::VS_SlPcRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"VS_SlPc_schedule"]);
}

inline NewDataSet::VS_Rgn2KRow^  NewDataSet::scheduleRow::VS_Rgn2KRow::get() {
    return (cli::safe_cast<NewDataSet::VS_Rgn2KRow^  >(this->GetParentRow(this->Table->ParentRelations[L"VS_Rgn2K_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::VS_Rgn2KRow::set(NewDataSet::VS_Rgn2KRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"VS_Rgn2K_schedule"]);
}

inline NewDataSet::VS_Rgn2SpRow^  NewDataSet::scheduleRow::VS_Rgn2SpRow::get() {
    return (cli::safe_cast<NewDataSet::VS_Rgn2SpRow^  >(this->GetParentRow(this->Table->ParentRelations[L"VS_Rgn2Sp_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::VS_Rgn2SpRow::set(NewDataSet::VS_Rgn2SpRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"VS_Rgn2Sp_schedule"]);
}

inline NewDataSet::VS_CtInSpRow^  NewDataSet::scheduleRow::VS_CtInSpRow::get() {
    return (cli::safe_cast<NewDataSet::VS_CtInSpRow^  >(this->GetParentRow(this->Table->ParentRelations[L"VS_CtInSp_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::VS_CtInSpRow::set(NewDataSet::VS_CtInSpRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"VS_CtInSp_schedule"]);
}

inline NewDataSet::VS_RtPwrRow^  NewDataSet::scheduleRow::VS_RtPwrRow::get() {
    return (cli::safe_cast<NewDataSet::VS_RtPwrRow^  >(this->GetParentRow(this->Table->ParentRelations[L"VS_RtPwr_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::VS_RtPwrRow::set(NewDataSet::VS_RtPwrRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"VS_RtPwr_schedule"]);
}

inline NewDataSet::VS_Rgn3MPRow^  NewDataSet::scheduleRow::VS_Rgn3MPRow::get() {
    return (cli::safe_cast<NewDataSet::VS_Rgn3MPRow^  >(this->GetParentRow(this->Table->ParentRelations[L"VS_Rgn3MP_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::VS_Rgn3MPRow::set(NewDataSet::VS_Rgn3MPRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"VS_Rgn3MP_schedule"]);
}

inline NewDataSet::PC_KIRow^  NewDataSet::scheduleRow::PC_KIRow::get() {
    return (cli::safe_cast<NewDataSet::PC_KIRow^  >(this->GetParentRow(this->Table->ParentRelations[L"PC_KI_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::PC_KIRow::set(NewDataSet::PC_KIRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"PC_KI_schedule"]);
}

inline NewDataSet::PC_KKRow^  NewDataSet::scheduleRow::PC_KKRow::get() {
    return (cli::safe_cast<NewDataSet::PC_KKRow^  >(this->GetParentRow(this->Table->ParentRelations[L"PC_KK_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::PC_KKRow::set(NewDataSet::PC_KKRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"PC_KK_schedule"]);
}

inline NewDataSet::PC_KPRow^  NewDataSet::scheduleRow::PC_KPRow::get() {
    return (cli::safe_cast<NewDataSet::PC_KPRow^  >(this->GetParentRow(this->Table->ParentRelations[L"PC_KP_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::PC_KPRow::set(NewDataSet::PC_KPRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"PC_KP_schedule"]);
}

inline NewDataSet::PC_RefSpdRow^  NewDataSet::scheduleRow::PC_RefSpdRow::get() {
    return (cli::safe_cast<NewDataSet::PC_RefSpdRow^  >(this->GetParentRow(this->Table->ParentRelations[L"PC_RefSpd_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::PC_RefSpdRow::set(NewDataSet::PC_RefSpdRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"PC_RefSpd_schedule"]);
}

inline NewDataSet::ARow^  NewDataSet::scheduleRow::ARow::get() {
    return (cli::safe_cast<NewDataSet::ARow^  >(this->GetParentRow(this->Table->ParentRelations[L"A_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::ARow::set(NewDataSet::ARow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"A_schedule"]);
}

inline NewDataSet::K_alphaRow^  NewDataSet::scheduleRow::K_alphaRow::get() {
    return (cli::safe_cast<NewDataSet::K_alphaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"K_alpha_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::K_alphaRow::set(NewDataSet::K_alphaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"K_alpha_schedule"]);
}

inline NewDataSet::P_sRow^  NewDataSet::scheduleRow::P_sRow::get() {
    return (cli::safe_cast<NewDataSet::P_sRow^  >(this->GetParentRow(this->Table->ParentRelations[L"P_s_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::P_sRow::set(NewDataSet::P_sRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"P_s_schedule"]);
}

inline NewDataSet::C_0Row^  NewDataSet::scheduleRow::C_0Row::get() {
    return (cli::safe_cast<NewDataSet::C_0Row^  >(this->GetParentRow(this->Table->ParentRelations[L"C_0_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::C_0Row::set(NewDataSet::C_0Row^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"C_0_schedule"]);
}

inline NewDataSet::K_tRow^  NewDataSet::scheduleRow::K_tRow::get() {
    return (cli::safe_cast<NewDataSet::K_tRow^  >(this->GetParentRow(this->Table->ParentRelations[L"K_t_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::K_tRow::set(NewDataSet::K_tRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"K_t_schedule"]);
}

inline NewDataSet::J_tRow^  NewDataSet::scheduleRow::J_tRow::get() {
    return (cli::safe_cast<NewDataSet::J_tRow^  >(this->GetParentRow(this->Table->ParentRelations[L"J_t_schedule"])));
}
inline System::Void NewDataSet::scheduleRow::J_tRow::set(NewDataSet::J_tRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"J_t_schedule"]);
}

inline ::System::Boolean NewDataSet::scheduleRow::IsNOISE_WIDTH_IdNull() {
    return this->IsNull(this->tableschedule->NOISE_WIDTH_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetNOISE_WIDTH_IdNull() {
    this[this->tableschedule->NOISE_WIDTH_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsLEARNING_RATE_IdNull() {
    return this->IsNull(this->tableschedule->LEARNING_RATE_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetLEARNING_RATE_IdNull() {
    this[this->tableschedule->LEARNING_RATE_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsKP_IdNull() {
    return this->IsNull(this->tableschedule->KP_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetKP_IdNull() {
    this[this->tableschedule->KP_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsKI_IdNull() {
    return this->IsNull(this->tableschedule->KI_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetKI_IdNull() {
    this[this->tableschedule->KI_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsKD_IdNull() {
    return this->IsNull(this->tableschedule->KD_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetKD_IdNull() {
    this[this->tableschedule->KD_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsVS_RtGnSp_IdNull() {
    return this->IsNull(this->tableschedule->VS_RtGnSp_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetVS_RtGnSp_IdNull() {
    this[this->tableschedule->VS_RtGnSp_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsVS_SlPc_IdNull() {
    return this->IsNull(this->tableschedule->VS_SlPc_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetVS_SlPc_IdNull() {
    this[this->tableschedule->VS_SlPc_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsVS_Rgn2K_IdNull() {
    return this->IsNull(this->tableschedule->VS_Rgn2K_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetVS_Rgn2K_IdNull() {
    this[this->tableschedule->VS_Rgn2K_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsVS_Rgn2Sp_IdNull() {
    return this->IsNull(this->tableschedule->VS_Rgn2Sp_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetVS_Rgn2Sp_IdNull() {
    this[this->tableschedule->VS_Rgn2Sp_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsVS_CtInSp_IdNull() {
    return this->IsNull(this->tableschedule->VS_CtInSp_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetVS_CtInSp_IdNull() {
    this[this->tableschedule->VS_CtInSp_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsVS_RtPwr_IdNull() {
    return this->IsNull(this->tableschedule->VS_RtPwr_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetVS_RtPwr_IdNull() {
    this[this->tableschedule->VS_RtPwr_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsVS_Rgn3MP_IdNull() {
    return this->IsNull(this->tableschedule->VS_Rgn3MP_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetVS_Rgn3MP_IdNull() {
    this[this->tableschedule->VS_Rgn3MP_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsPC_KI_IdNull() {
    return this->IsNull(this->tableschedule->PC_KI_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetPC_KI_IdNull() {
    this[this->tableschedule->PC_KI_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsPC_KK_IdNull() {
    return this->IsNull(this->tableschedule->PC_KK_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetPC_KK_IdNull() {
    this[this->tableschedule->PC_KK_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsPC_KP_IdNull() {
    return this->IsNull(this->tableschedule->PC_KP_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetPC_KP_IdNull() {
    this[this->tableschedule->PC_KP_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsPC_RefSpd_IdNull() {
    return this->IsNull(this->tableschedule->PC_RefSpd_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetPC_RefSpd_IdNull() {
    this[this->tableschedule->PC_RefSpd_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsA_IdNull() {
    return this->IsNull(this->tableschedule->A_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetA_IdNull() {
    this[this->tableschedule->A_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsK_alpha_IdNull() {
    return this->IsNull(this->tableschedule->K_alpha_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetK_alpha_IdNull() {
    this[this->tableschedule->K_alpha_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsP_s_IdNull() {
    return this->IsNull(this->tableschedule->P_s_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetP_s_IdNull() {
    this[this->tableschedule->P_s_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsC_0_IdNull() {
    return this->IsNull(this->tableschedule->C_0_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetC_0_IdNull() {
    this[this->tableschedule->C_0_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsK_t_IdNull() {
    return this->IsNull(this->tableschedule->K_t_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetK_t_IdNull() {
    this[this->tableschedule->K_t_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::scheduleRow::IsJ_t_IdNull() {
    return this->IsNull(this->tableschedule->J_t_IdColumn);
}

inline ::System::Void NewDataSet::scheduleRow::SetJ_t_IdNull() {
    this[this->tableschedule->J_t_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::LEARNING_RATERow::LEARNING_RATERow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableLEARNING_RATE = (cli::safe_cast<NewDataSet::LEARNING_RATEDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::LEARNING_RATERow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableLEARNING_RATE->TYPEColumn]));
}
inline System::Void NewDataSet::LEARNING_RATERow::TYPE::set(System::String^  value) {
    this[this->tableLEARNING_RATE->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::LEARNING_RATERow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableLEARNING_RATE->decimalColumn]));
}
inline System::Void NewDataSet::LEARNING_RATERow::decimal::set(System::Decimal value) {
    this[this->tableLEARNING_RATE->decimalColumn] = value;
}

inline System::Int32 NewDataSet::LEARNING_RATERow::LEARNING_RATE_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableLEARNING_RATE->LEARNING_RATE_IdColumn]));
}
inline System::Void NewDataSet::LEARNING_RATERow::LEARNING_RATE_Id::set(System::Int32 value) {
    this[this->tableLEARNING_RATE->LEARNING_RATE_IdColumn] = value;
}

inline System::Int32 NewDataSet::LEARNING_RATERow::vfa_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableLEARNING_RATE->vfa_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'vfa_Id\' in table \'LEARNING_RATE\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::LEARNING_RATERow::vfa_Id::set(System::Int32 value) {
    this[this->tableLEARNING_RATE->vfa_IdColumn] = value;
}

inline System::Int32 NewDataSet::LEARNING_RATERow::_TD_Lambda_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableLEARNING_RATE->_TD_Lambda_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TD-Lambda_Id\' in table \'LEARNING_RATE\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::LEARNING_RATERow::_TD_Lambda_Id::set(System::Int32 value) {
    this[this->tableLEARNING_RATE->_TD_Lambda_IdColumn] = value;
}

inline System::Int32 NewDataSet::LEARNING_RATERow::_True_Online_TD_Lambda_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableLEARNING_RATE->_True_Online_TD_Lambda_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'True-Online-TD-Lambda_Id\' in table \'LEARNING_RATE\' is DBNul" 
L"l.", 
            e));
    }
}
inline System::Void NewDataSet::LEARNING_RATERow::_True_Online_TD_Lambda_Id::set(System::Int32 value) {
    this[this->tableLEARNING_RATE->_True_Online_TD_Lambda_IdColumn] = value;
}

inline System::Int32 NewDataSet::LEARNING_RATERow::_TDC_Lambda_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableLEARNING_RATE->_TDC_Lambda_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TDC-Lambda_Id\' in table \'LEARNING_RATE\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::LEARNING_RATERow::_TDC_Lambda_Id::set(System::Int32 value) {
    this[this->tableLEARNING_RATE->_TDC_Lambda_IdColumn] = value;
}

inline NewDataSet::vfaRow^  NewDataSet::LEARNING_RATERow::vfaRow::get() {
    return (cli::safe_cast<NewDataSet::vfaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"vfa_LEARNING_RATE"])));
}
inline System::Void NewDataSet::LEARNING_RATERow::vfaRow::set(NewDataSet::vfaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"vfa_LEARNING_RATE"]);
}

inline NewDataSet::_TD_LambdaRow^  NewDataSet::LEARNING_RATERow::_TD_LambdaRow::get() {
    return (cli::safe_cast<NewDataSet::_TD_LambdaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TD-Lambda_LEARNING_RATE"])));
}
inline System::Void NewDataSet::LEARNING_RATERow::_TD_LambdaRow::set(NewDataSet::_TD_LambdaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"TD-Lambda_LEARNING_RATE"]);
}

inline NewDataSet::_True_Online_TD_LambdaRow^  NewDataSet::LEARNING_RATERow::_True_Online_TD_LambdaRow::get() {
    return (cli::safe_cast<NewDataSet::_True_Online_TD_LambdaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"True-Online-TD-Lambda_LEARNING_RATE"])));
}
inline System::Void NewDataSet::LEARNING_RATERow::_True_Online_TD_LambdaRow::set(NewDataSet::_True_Online_TD_LambdaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"True-Online-TD-Lambda_LEARNING_RATE"]);
}

inline NewDataSet::_TDC_LambdaRow^  NewDataSet::LEARNING_RATERow::_TDC_LambdaRow::get() {
    return (cli::safe_cast<NewDataSet::_TDC_LambdaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TDC-Lambda_LEARNING_RATE"])));
}
inline System::Void NewDataSet::LEARNING_RATERow::_TDC_LambdaRow::set(NewDataSet::_TDC_LambdaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"TDC-Lambda_LEARNING_RATE"]);
}

inline ::System::Boolean NewDataSet::LEARNING_RATERow::Isvfa_IdNull() {
    return this->IsNull(this->tableLEARNING_RATE->vfa_IdColumn);
}

inline ::System::Void NewDataSet::LEARNING_RATERow::Setvfa_IdNull() {
    this[this->tableLEARNING_RATE->vfa_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::LEARNING_RATERow::Is_TD_Lambda_IdNull() {
    return this->IsNull(this->tableLEARNING_RATE->_TD_Lambda_IdColumn);
}

inline ::System::Void NewDataSet::LEARNING_RATERow::Set_TD_Lambda_IdNull() {
    this[this->tableLEARNING_RATE->_TD_Lambda_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::LEARNING_RATERow::Is_True_Online_TD_Lambda_IdNull() {
    return this->IsNull(this->tableLEARNING_RATE->_True_Online_TD_Lambda_IdColumn);
}

inline ::System::Void NewDataSet::LEARNING_RATERow::Set_True_Online_TD_Lambda_IdNull() {
    this[this->tableLEARNING_RATE->_True_Online_TD_Lambda_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::LEARNING_RATERow::Is_TDC_Lambda_IdNull() {
    return this->IsNull(this->tableLEARNING_RATE->_TDC_Lambda_IdColumn);
}

inline ::System::Void NewDataSet::LEARNING_RATERow::Set_TDC_Lambda_IdNull() {
    this[this->tableLEARNING_RATE->_TDC_Lambda_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::LEARNING_RATERow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"LEARNING_RATE_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"LEARNING_RATE_schedule"])));
    }
}


inline NewDataSet::RBF_GRIDRow::RBF_GRIDRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableRBF_GRID = (cli::safe_cast<NewDataSet::RBF_GRIDDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::RBF_GRIDRow::RBF_GRID_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableRBF_GRID->RBF_GRID_IdColumn]));
}
inline System::Void NewDataSet::RBF_GRIDRow::RBF_GRID_Id::set(System::Int32 value) {
    this[this->tableRBF_GRID->RBF_GRID_IdColumn] = value;
}

inline System::Int32 NewDataSet::RBF_GRIDRow::vfa_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableRBF_GRID->vfa_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'vfa_Id\' in table \'RBF_GRID\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::RBF_GRIDRow::vfa_Id::set(System::Int32 value) {
    this[this->tableRBF_GRID->vfa_IdColumn] = value;
}

inline NewDataSet::vfaRow^  NewDataSet::RBF_GRIDRow::vfaRow::get() {
    return (cli::safe_cast<NewDataSet::vfaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"vfa_RBF_GRID"])));
}
inline System::Void NewDataSet::RBF_GRIDRow::vfaRow::set(NewDataSet::vfaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"vfa_RBF_GRID"]);
}

inline ::System::Boolean NewDataSet::RBF_GRIDRow::Isvfa_IdNull() {
    return this->IsNull(this->tableRBF_GRID->vfa_IdColumn);
}

inline ::System::Void NewDataSet::RBF_GRIDRow::Setvfa_IdNull() {
    this[this->tableRBF_GRID->vfa_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::dimensionRow^  >^  NewDataSet::RBF_GRIDRow::GetdimensionRows() {
    if (this->Table->ChildRelations[L"RBF_GRID_dimension"] == nullptr) {
        return gcnew cli::array< NewDataSet::dimensionRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::dimensionRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"RBF_GRID_dimension"])));
    }
}


inline NewDataSet::dimensionRow::dimensionRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tabledimension = (cli::safe_cast<NewDataSet::dimensionDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::dimensionRow::_state_action_variable::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tabledimension->_state_action_variableColumn]));
}
inline System::Void NewDataSet::dimensionRow::_state_action_variable::set(System::String^  value) {
    this[this->tabledimension->_state_action_variableColumn] = value;
}

inline System::Int64 NewDataSet::dimensionRow::_dimension_num_features::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tabledimension->_dimension_num_featuresColumn]));
}
inline System::Void NewDataSet::dimensionRow::_dimension_num_features::set(System::Int64 value) {
    this[this->tabledimension->_dimension_num_featuresColumn] = value;
}

inline System::String^  NewDataSet::dimensionRow::_feature_distribution::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tabledimension->_feature_distributionColumn]));
}
inline System::Void NewDataSet::dimensionRow::_feature_distribution::set(System::String^  value) {
    this[this->tabledimension->_feature_distributionColumn] = value;
}

inline System::Int32 NewDataSet::dimensionRow::RBF_GRID_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tabledimension->RBF_GRID_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'RBF_GRID_Id\' in table \'dimension\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::dimensionRow::RBF_GRID_Id::set(System::Int32 value) {
    this[this->tabledimension->RBF_GRID_IdColumn] = value;
}

inline NewDataSet::RBF_GRIDRow^  NewDataSet::dimensionRow::RBF_GRIDRow::get() {
    return (cli::safe_cast<NewDataSet::RBF_GRIDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"RBF_GRID_dimension"])));
}
inline System::Void NewDataSet::dimensionRow::RBF_GRIDRow::set(NewDataSet::RBF_GRIDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"RBF_GRID_dimension"]);
}

inline ::System::Boolean NewDataSet::dimensionRow::IsRBF_GRID_IdNull() {
    return this->IsNull(this->tabledimension->RBF_GRID_IdColumn);
}

inline ::System::Void NewDataSet::dimensionRow::SetRBF_GRID_IdNull() {
    this[this->tabledimension->RBF_GRID_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::PIDRow::PIDRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablePID = (cli::safe_cast<NewDataSet::PIDDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::PIDRow::ERROR_VARIABLE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablePID->ERROR_VARIABLEColumn]));
}
inline System::Void NewDataSet::PIDRow::ERROR_VARIABLE::set(System::String^  value) {
    this[this->tablePID->ERROR_VARIABLEColumn] = value;
}

inline System::Int32 NewDataSet::PIDRow::PID_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablePID->PID_IdColumn]));
}
inline System::Void NewDataSet::PIDRow::PID_Id::set(System::Int32 value) {
    this[this->tablePID->PID_IdColumn] = value;
}

inline System::Int32 NewDataSet::PIDRow::actor_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablePID->actor_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'actor_Id\' in table \'PID\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::PIDRow::actor_Id::set(System::Int32 value) {
    this[this->tablePID->actor_IdColumn] = value;
}

inline System::Int32 NewDataSet::PIDRow::controller_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablePID->controller_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'controller_Id\' in table \'PID\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::PIDRow::controller_Id::set(System::Int32 value) {
    this[this->tablePID->controller_IdColumn] = value;
}

inline NewDataSet::actorRow^  NewDataSet::PIDRow::actorRow::get() {
    return (cli::safe_cast<NewDataSet::actorRow^  >(this->GetParentRow(this->Table->ParentRelations[L"actor_PID"])));
}
inline System::Void NewDataSet::PIDRow::actorRow::set(NewDataSet::actorRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"actor_PID"]);
}

inline NewDataSet::controllerRow^  NewDataSet::PIDRow::controllerRow::get() {
    return (cli::safe_cast<NewDataSet::controllerRow^  >(this->GetParentRow(this->Table->ParentRelations[L"controller_PID"])));
}
inline System::Void NewDataSet::PIDRow::controllerRow::set(NewDataSet::controllerRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"controller_PID"]);
}

inline ::System::Boolean NewDataSet::PIDRow::Isactor_IdNull() {
    return this->IsNull(this->tablePID->actor_IdColumn);
}

inline ::System::Void NewDataSet::PIDRow::Setactor_IdNull() {
    this[this->tablePID->actor_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::PIDRow::Iscontroller_IdNull() {
    return this->IsNull(this->tablePID->controller_IdColumn);
}

inline ::System::Void NewDataSet::PIDRow::Setcontroller_IdNull() {
    this[this->tablePID->controller_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::KPRow^  >^  NewDataSet::PIDRow::GetKPRows() {
    if (this->Table->ChildRelations[L"PID_KP"] == nullptr) {
        return gcnew cli::array< NewDataSet::KPRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::KPRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"PID_KP"])));
    }
}

inline cli::array< NewDataSet::KIRow^  >^  NewDataSet::PIDRow::GetKIRows() {
    if (this->Table->ChildRelations[L"PID_KI"] == nullptr) {
        return gcnew cli::array< NewDataSet::KIRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::KIRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"PID_KI"])));
    }
}

inline cli::array< NewDataSet::KDRow^  >^  NewDataSet::PIDRow::GetKDRows() {
    if (this->Table->ChildRelations[L"PID_KD"] == nullptr) {
        return gcnew cli::array< NewDataSet::KDRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::KDRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"PID_KD"])));
    }
}


inline NewDataSet::KPRow::KPRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableKP = (cli::safe_cast<NewDataSet::KPDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::KPRow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableKP->TYPEColumn]));
}
inline System::Void NewDataSet::KPRow::TYPE::set(System::String^  value) {
    this[this->tableKP->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::KPRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableKP->decimalColumn]));
}
inline System::Void NewDataSet::KPRow::decimal::set(System::Decimal value) {
    this[this->tableKP->decimalColumn] = value;
}

inline System::Int32 NewDataSet::KPRow::KP_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableKP->KP_IdColumn]));
}
inline System::Void NewDataSet::KPRow::KP_Id::set(System::Int32 value) {
    this[this->tableKP->KP_IdColumn] = value;
}

inline System::Int32 NewDataSet::KPRow::PID_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableKP->PID_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PID_Id\' in table \'KP\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::KPRow::PID_Id::set(System::Int32 value) {
    this[this->tableKP->PID_IdColumn] = value;
}

inline System::Int32 NewDataSet::KPRow::vidal_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableKP->vidal_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'vidal_Id\' in table \'KP\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::KPRow::vidal_Id::set(System::Int32 value) {
    this[this->tableKP->vidal_IdColumn] = value;
}

inline System::Int32 NewDataSet::KPRow::boukhezzar_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableKP->boukhezzar_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'boukhezzar_Id\' in table \'KP\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::KPRow::boukhezzar_Id::set(System::Int32 value) {
    this[this->tableKP->boukhezzar_IdColumn] = value;
}

inline NewDataSet::PIDRow^  NewDataSet::KPRow::PIDRow::get() {
    return (cli::safe_cast<NewDataSet::PIDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"PID_KP"])));
}
inline System::Void NewDataSet::KPRow::PIDRow::set(NewDataSet::PIDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"PID_KP"]);
}

inline NewDataSet::vidalRow^  NewDataSet::KPRow::vidalRow::get() {
    return (cli::safe_cast<NewDataSet::vidalRow^  >(this->GetParentRow(this->Table->ParentRelations[L"vidal_KP"])));
}
inline System::Void NewDataSet::KPRow::vidalRow::set(NewDataSet::vidalRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"vidal_KP"]);
}

inline NewDataSet::boukhezzarRow^  NewDataSet::KPRow::boukhezzarRow::get() {
    return (cli::safe_cast<NewDataSet::boukhezzarRow^  >(this->GetParentRow(this->Table->ParentRelations[L"boukhezzar_KP"])));
}
inline System::Void NewDataSet::KPRow::boukhezzarRow::set(NewDataSet::boukhezzarRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"boukhezzar_KP"]);
}

inline ::System::Boolean NewDataSet::KPRow::IsPID_IdNull() {
    return this->IsNull(this->tableKP->PID_IdColumn);
}

inline ::System::Void NewDataSet::KPRow::SetPID_IdNull() {
    this[this->tableKP->PID_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::KPRow::Isvidal_IdNull() {
    return this->IsNull(this->tableKP->vidal_IdColumn);
}

inline ::System::Void NewDataSet::KPRow::Setvidal_IdNull() {
    this[this->tableKP->vidal_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::KPRow::Isboukhezzar_IdNull() {
    return this->IsNull(this->tableKP->boukhezzar_IdColumn);
}

inline ::System::Void NewDataSet::KPRow::Setboukhezzar_IdNull() {
    this[this->tableKP->boukhezzar_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::KPRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"KP_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"KP_schedule"])));
    }
}


inline NewDataSet::KIRow::KIRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableKI = (cli::safe_cast<NewDataSet::KIDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::KIRow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableKI->TYPEColumn]));
}
inline System::Void NewDataSet::KIRow::TYPE::set(System::String^  value) {
    this[this->tableKI->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::KIRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableKI->decimalColumn]));
}
inline System::Void NewDataSet::KIRow::decimal::set(System::Decimal value) {
    this[this->tableKI->decimalColumn] = value;
}

inline System::Int32 NewDataSet::KIRow::KI_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableKI->KI_IdColumn]));
}
inline System::Void NewDataSet::KIRow::KI_Id::set(System::Int32 value) {
    this[this->tableKI->KI_IdColumn] = value;
}

inline System::Int32 NewDataSet::KIRow::PID_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableKI->PID_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PID_Id\' in table \'KI\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::KIRow::PID_Id::set(System::Int32 value) {
    this[this->tableKI->PID_IdColumn] = value;
}

inline System::Int32 NewDataSet::KIRow::vidal_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableKI->vidal_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'vidal_Id\' in table \'KI\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::KIRow::vidal_Id::set(System::Int32 value) {
    this[this->tableKI->vidal_IdColumn] = value;
}

inline System::Int32 NewDataSet::KIRow::boukhezzar_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableKI->boukhezzar_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'boukhezzar_Id\' in table \'KI\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::KIRow::boukhezzar_Id::set(System::Int32 value) {
    this[this->tableKI->boukhezzar_IdColumn] = value;
}

inline NewDataSet::PIDRow^  NewDataSet::KIRow::PIDRow::get() {
    return (cli::safe_cast<NewDataSet::PIDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"PID_KI"])));
}
inline System::Void NewDataSet::KIRow::PIDRow::set(NewDataSet::PIDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"PID_KI"]);
}

inline NewDataSet::vidalRow^  NewDataSet::KIRow::vidalRow::get() {
    return (cli::safe_cast<NewDataSet::vidalRow^  >(this->GetParentRow(this->Table->ParentRelations[L"vidal_KI"])));
}
inline System::Void NewDataSet::KIRow::vidalRow::set(NewDataSet::vidalRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"vidal_KI"]);
}

inline NewDataSet::boukhezzarRow^  NewDataSet::KIRow::boukhezzarRow::get() {
    return (cli::safe_cast<NewDataSet::boukhezzarRow^  >(this->GetParentRow(this->Table->ParentRelations[L"boukhezzar_KI"])));
}
inline System::Void NewDataSet::KIRow::boukhezzarRow::set(NewDataSet::boukhezzarRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"boukhezzar_KI"]);
}

inline ::System::Boolean NewDataSet::KIRow::IsPID_IdNull() {
    return this->IsNull(this->tableKI->PID_IdColumn);
}

inline ::System::Void NewDataSet::KIRow::SetPID_IdNull() {
    this[this->tableKI->PID_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::KIRow::Isvidal_IdNull() {
    return this->IsNull(this->tableKI->vidal_IdColumn);
}

inline ::System::Void NewDataSet::KIRow::Setvidal_IdNull() {
    this[this->tableKI->vidal_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::KIRow::Isboukhezzar_IdNull() {
    return this->IsNull(this->tableKI->boukhezzar_IdColumn);
}

inline ::System::Void NewDataSet::KIRow::Setboukhezzar_IdNull() {
    this[this->tableKI->boukhezzar_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::KIRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"KI_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"KI_schedule"])));
    }
}


inline NewDataSet::KDRow::KDRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableKD = (cli::safe_cast<NewDataSet::KDDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::KDRow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableKD->TYPEColumn]));
}
inline System::Void NewDataSet::KDRow::TYPE::set(System::String^  value) {
    this[this->tableKD->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::KDRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableKD->decimalColumn]));
}
inline System::Void NewDataSet::KDRow::decimal::set(System::Decimal value) {
    this[this->tableKD->decimalColumn] = value;
}

inline System::Int32 NewDataSet::KDRow::KD_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableKD->KD_IdColumn]));
}
inline System::Void NewDataSet::KDRow::KD_Id::set(System::Int32 value) {
    this[this->tableKD->KD_IdColumn] = value;
}

inline System::Int32 NewDataSet::KDRow::PID_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableKD->PID_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PID_Id\' in table \'KD\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::KDRow::PID_Id::set(System::Int32 value) {
    this[this->tableKD->PID_IdColumn] = value;
}

inline NewDataSet::PIDRow^  NewDataSet::KDRow::PIDRow::get() {
    return (cli::safe_cast<NewDataSet::PIDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"PID_KD"])));
}
inline System::Void NewDataSet::KDRow::PIDRow::set(NewDataSet::PIDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"PID_KD"]);
}

inline ::System::Boolean NewDataSet::KDRow::IsPID_IdNull() {
    return this->IsNull(this->tableKD->PID_IdColumn);
}

inline ::System::Void NewDataSet::KDRow::SetPID_IdNull() {
    this[this->tableKD->PID_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::KDRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"KD_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"KD_schedule"])));
    }
}


inline NewDataSet::LQRRow::LQRRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableLQR = (cli::safe_cast<NewDataSet::LQRDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::LQRRow::LQR_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableLQR->LQR_IdColumn]));
}
inline System::Void NewDataSet::LQRRow::LQR_Id::set(System::Int32 value) {
    this[this->tableLQR->LQR_IdColumn] = value;
}

inline System::Int32 NewDataSet::LQRRow::actor_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableLQR->actor_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'actor_Id\' in table \'LQR\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::LQRRow::actor_Id::set(System::Int32 value) {
    this[this->tableLQR->actor_IdColumn] = value;
}

inline System::Int32 NewDataSet::LQRRow::controller_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableLQR->controller_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'controller_Id\' in table \'LQR\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::LQRRow::controller_Id::set(System::Int32 value) {
    this[this->tableLQR->controller_IdColumn] = value;
}

inline NewDataSet::actorRow^  NewDataSet::LQRRow::actorRow::get() {
    return (cli::safe_cast<NewDataSet::actorRow^  >(this->GetParentRow(this->Table->ParentRelations[L"actor_LQR"])));
}
inline System::Void NewDataSet::LQRRow::actorRow::set(NewDataSet::actorRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"actor_LQR"]);
}

inline NewDataSet::controllerRow^  NewDataSet::LQRRow::controllerRow::get() {
    return (cli::safe_cast<NewDataSet::controllerRow^  >(this->GetParentRow(this->Table->ParentRelations[L"controller_LQR"])));
}
inline System::Void NewDataSet::LQRRow::controllerRow::set(NewDataSet::controllerRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"controller_LQR"]);
}

inline ::System::Boolean NewDataSet::LQRRow::Isactor_IdNull() {
    return this->IsNull(this->tableLQR->actor_IdColumn);
}

inline ::System::Void NewDataSet::LQRRow::Setactor_IdNull() {
    this[this->tableLQR->actor_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::LQRRow::Iscontroller_IdNull() {
    return this->IsNull(this->tableLQR->controller_IdColumn);
}

inline ::System::Void NewDataSet::LQRRow::Setcontroller_IdNull() {
    this[this->tableLQR->controller_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::_LQR_GAINRow^  >^  NewDataSet::LQRRow::_GetLQR_GAINRows() {
    if (this->Table->ChildRelations[L"LQR_LQR-GAIN"] == nullptr) {
        return gcnew cli::array< NewDataSet::_LQR_GAINRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::_LQR_GAINRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"LQR_LQR-GAIN"])));
    }
}


inline NewDataSet::_LQR_GAINRow::_LQR_GAINRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_LQR_GAIN = (cli::safe_cast<NewDataSet::_LQR_GAINDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::_LQR_GAINRow::_state_variable::get() {
    return (cli::safe_cast<::System::String^  >(this[this->table_LQR_GAIN->_state_variableColumn]));
}
inline System::Void NewDataSet::_LQR_GAINRow::_state_variable::set(System::String^  value) {
    this[this->table_LQR_GAIN->_state_variableColumn] = value;
}

inline System::Decimal NewDataSet::_LQR_GAINRow::gain::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->table_LQR_GAIN->gainColumn]));
}
inline System::Void NewDataSet::_LQR_GAINRow::gain::set(System::Decimal value) {
    this[this->table_LQR_GAIN->gainColumn] = value;
}

inline System::Int32 NewDataSet::_LQR_GAINRow::LQR_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_LQR_GAIN->LQR_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'LQR_Id\' in table \'LQR-GAIN\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::_LQR_GAINRow::LQR_Id::set(System::Int32 value) {
    this[this->table_LQR_GAIN->LQR_IdColumn] = value;
}

inline NewDataSet::LQRRow^  NewDataSet::_LQR_GAINRow::LQRRow::get() {
    return (cli::safe_cast<NewDataSet::LQRRow^  >(this->GetParentRow(this->Table->ParentRelations[L"LQR_LQR-GAIN"])));
}
inline System::Void NewDataSet::_LQR_GAINRow::LQRRow::set(NewDataSet::LQRRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"LQR_LQR-GAIN"]);
}

inline ::System::Boolean NewDataSet::_LQR_GAINRow::IsLQR_IdNull() {
    return this->IsNull(this->table_LQR_GAIN->LQR_IdColumn);
}

inline ::System::Void NewDataSet::_LQR_GAINRow::SetLQR_IdNull() {
    this[this->table_LQR_GAIN->LQR_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::jonkmanRow::jonkmanRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablejonkman = (cli::safe_cast<NewDataSet::jonkmanDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::jonkmanRow::jonkman_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablejonkman->jonkman_IdColumn]));
}
inline System::Void NewDataSet::jonkmanRow::jonkman_Id::set(System::Int32 value) {
    this[this->tablejonkman->jonkman_IdColumn] = value;
}

inline System::Int32 NewDataSet::jonkmanRow::actor_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablejonkman->actor_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'actor_Id\' in table \'jonkman\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::jonkmanRow::actor_Id::set(System::Int32 value) {
    this[this->tablejonkman->actor_IdColumn] = value;
}

inline System::Int32 NewDataSet::jonkmanRow::controller_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablejonkman->controller_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'controller_Id\' in table \'jonkman\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::jonkmanRow::controller_Id::set(System::Int32 value) {
    this[this->tablejonkman->controller_IdColumn] = value;
}

inline NewDataSet::actorRow^  NewDataSet::jonkmanRow::actorRow::get() {
    return (cli::safe_cast<NewDataSet::actorRow^  >(this->GetParentRow(this->Table->ParentRelations[L"actor_jonkman"])));
}
inline System::Void NewDataSet::jonkmanRow::actorRow::set(NewDataSet::actorRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"actor_jonkman"]);
}

inline NewDataSet::controllerRow^  NewDataSet::jonkmanRow::controllerRow::get() {
    return (cli::safe_cast<NewDataSet::controllerRow^  >(this->GetParentRow(this->Table->ParentRelations[L"controller_jonkman"])));
}
inline System::Void NewDataSet::jonkmanRow::controllerRow::set(NewDataSet::controllerRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"controller_jonkman"]);
}

inline ::System::Boolean NewDataSet::jonkmanRow::Isactor_IdNull() {
    return this->IsNull(this->tablejonkman->actor_IdColumn);
}

inline ::System::Void NewDataSet::jonkmanRow::Setactor_IdNull() {
    this[this->tablejonkman->actor_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::jonkmanRow::Iscontroller_IdNull() {
    return this->IsNull(this->tablejonkman->controller_IdColumn);
}

inline ::System::Void NewDataSet::jonkmanRow::Setcontroller_IdNull() {
    this[this->tablejonkman->controller_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::VS_RtGnSpRow^  >^  NewDataSet::jonkmanRow::GetVS_RtGnSpRows() {
    if (this->Table->ChildRelations[L"jonkman_VS_RtGnSp"] == nullptr) {
        return gcnew cli::array< NewDataSet::VS_RtGnSpRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::VS_RtGnSpRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_VS_RtGnSp"])));
    }
}

inline cli::array< NewDataSet::VS_SlPcRow^  >^  NewDataSet::jonkmanRow::GetVS_SlPcRows() {
    if (this->Table->ChildRelations[L"jonkman_VS_SlPc"] == nullptr) {
        return gcnew cli::array< NewDataSet::VS_SlPcRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::VS_SlPcRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_VS_SlPc"])));
    }
}

inline cli::array< NewDataSet::VS_Rgn2KRow^  >^  NewDataSet::jonkmanRow::GetVS_Rgn2KRows() {
    if (this->Table->ChildRelations[L"jonkman_VS_Rgn2K"] == nullptr) {
        return gcnew cli::array< NewDataSet::VS_Rgn2KRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::VS_Rgn2KRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_VS_Rgn2K"])));
    }
}

inline cli::array< NewDataSet::VS_Rgn2SpRow^  >^  NewDataSet::jonkmanRow::GetVS_Rgn2SpRows() {
    if (this->Table->ChildRelations[L"jonkman_VS_Rgn2Sp"] == nullptr) {
        return gcnew cli::array< NewDataSet::VS_Rgn2SpRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::VS_Rgn2SpRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_VS_Rgn2Sp"])));
    }
}

inline cli::array< NewDataSet::VS_CtInSpRow^  >^  NewDataSet::jonkmanRow::GetVS_CtInSpRows() {
    if (this->Table->ChildRelations[L"jonkman_VS_CtInSp"] == nullptr) {
        return gcnew cli::array< NewDataSet::VS_CtInSpRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::VS_CtInSpRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_VS_CtInSp"])));
    }
}

inline cli::array< NewDataSet::VS_RtPwrRow^  >^  NewDataSet::jonkmanRow::GetVS_RtPwrRows() {
    if (this->Table->ChildRelations[L"jonkman_VS_RtPwr"] == nullptr) {
        return gcnew cli::array< NewDataSet::VS_RtPwrRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::VS_RtPwrRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_VS_RtPwr"])));
    }
}

inline cli::array< NewDataSet::VS_Rgn3MPRow^  >^  NewDataSet::jonkmanRow::GetVS_Rgn3MPRows() {
    if (this->Table->ChildRelations[L"jonkman_VS_Rgn3MP"] == nullptr) {
        return gcnew cli::array< NewDataSet::VS_Rgn3MPRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::VS_Rgn3MPRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_VS_Rgn3MP"])));
    }
}

inline cli::array< NewDataSet::PC_KIRow^  >^  NewDataSet::jonkmanRow::GetPC_KIRows() {
    if (this->Table->ChildRelations[L"jonkman_PC_KI"] == nullptr) {
        return gcnew cli::array< NewDataSet::PC_KIRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::PC_KIRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_PC_KI"])));
    }
}

inline cli::array< NewDataSet::PC_KKRow^  >^  NewDataSet::jonkmanRow::GetPC_KKRows() {
    if (this->Table->ChildRelations[L"jonkman_PC_KK"] == nullptr) {
        return gcnew cli::array< NewDataSet::PC_KKRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::PC_KKRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_PC_KK"])));
    }
}

inline cli::array< NewDataSet::PC_KPRow^  >^  NewDataSet::jonkmanRow::GetPC_KPRows() {
    if (this->Table->ChildRelations[L"jonkman_PC_KP"] == nullptr) {
        return gcnew cli::array< NewDataSet::PC_KPRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::PC_KPRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_PC_KP"])));
    }
}

inline cli::array< NewDataSet::PC_RefSpdRow^  >^  NewDataSet::jonkmanRow::GetPC_RefSpdRows() {
    if (this->Table->ChildRelations[L"jonkman_PC_RefSpd"] == nullptr) {
        return gcnew cli::array< NewDataSet::PC_RefSpdRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::PC_RefSpdRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_PC_RefSpd"])));
    }
}


inline NewDataSet::VS_RtGnSpRow::VS_RtGnSpRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableVS_RtGnSp = (cli::safe_cast<NewDataSet::VS_RtGnSpDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::VS_RtGnSpRow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableVS_RtGnSp->TYPEColumn]));
}
inline System::Void NewDataSet::VS_RtGnSpRow::TYPE::set(System::String^  value) {
    this[this->tableVS_RtGnSp->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::VS_RtGnSpRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableVS_RtGnSp->decimalColumn]));
}
inline System::Void NewDataSet::VS_RtGnSpRow::decimal::set(System::Decimal value) {
    this[this->tableVS_RtGnSp->decimalColumn] = value;
}

inline System::Int32 NewDataSet::VS_RtGnSpRow::VS_RtGnSp_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableVS_RtGnSp->VS_RtGnSp_IdColumn]));
}
inline System::Void NewDataSet::VS_RtGnSpRow::VS_RtGnSp_Id::set(System::Int32 value) {
    this[this->tableVS_RtGnSp->VS_RtGnSp_IdColumn] = value;
}

inline System::Int32 NewDataSet::VS_RtGnSpRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableVS_RtGnSp->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'VS_RtGnSp\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::VS_RtGnSpRow::jonkman_Id::set(System::Int32 value) {
    this[this->tableVS_RtGnSp->jonkman_IdColumn] = value;
}

inline NewDataSet::jonkmanRow^  NewDataSet::VS_RtGnSpRow::jonkmanRow::get() {
    return (cli::safe_cast<NewDataSet::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_VS_RtGnSp"])));
}
inline System::Void NewDataSet::VS_RtGnSpRow::jonkmanRow::set(NewDataSet::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_VS_RtGnSp"]);
}

inline ::System::Boolean NewDataSet::VS_RtGnSpRow::Isjonkman_IdNull() {
    return this->IsNull(this->tableVS_RtGnSp->jonkman_IdColumn);
}

inline ::System::Void NewDataSet::VS_RtGnSpRow::Setjonkman_IdNull() {
    this[this->tableVS_RtGnSp->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::VS_RtGnSpRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"VS_RtGnSp_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"VS_RtGnSp_schedule"])));
    }
}


inline NewDataSet::VS_SlPcRow::VS_SlPcRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableVS_SlPc = (cli::safe_cast<NewDataSet::VS_SlPcDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::VS_SlPcRow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableVS_SlPc->TYPEColumn]));
}
inline System::Void NewDataSet::VS_SlPcRow::TYPE::set(System::String^  value) {
    this[this->tableVS_SlPc->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::VS_SlPcRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableVS_SlPc->decimalColumn]));
}
inline System::Void NewDataSet::VS_SlPcRow::decimal::set(System::Decimal value) {
    this[this->tableVS_SlPc->decimalColumn] = value;
}

inline System::Int32 NewDataSet::VS_SlPcRow::VS_SlPc_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableVS_SlPc->VS_SlPc_IdColumn]));
}
inline System::Void NewDataSet::VS_SlPcRow::VS_SlPc_Id::set(System::Int32 value) {
    this[this->tableVS_SlPc->VS_SlPc_IdColumn] = value;
}

inline System::Int32 NewDataSet::VS_SlPcRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableVS_SlPc->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'VS_SlPc\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::VS_SlPcRow::jonkman_Id::set(System::Int32 value) {
    this[this->tableVS_SlPc->jonkman_IdColumn] = value;
}

inline NewDataSet::jonkmanRow^  NewDataSet::VS_SlPcRow::jonkmanRow::get() {
    return (cli::safe_cast<NewDataSet::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_VS_SlPc"])));
}
inline System::Void NewDataSet::VS_SlPcRow::jonkmanRow::set(NewDataSet::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_VS_SlPc"]);
}

inline ::System::Boolean NewDataSet::VS_SlPcRow::Isjonkman_IdNull() {
    return this->IsNull(this->tableVS_SlPc->jonkman_IdColumn);
}

inline ::System::Void NewDataSet::VS_SlPcRow::Setjonkman_IdNull() {
    this[this->tableVS_SlPc->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::VS_SlPcRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"VS_SlPc_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"VS_SlPc_schedule"])));
    }
}


inline NewDataSet::VS_Rgn2KRow::VS_Rgn2KRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableVS_Rgn2K = (cli::safe_cast<NewDataSet::VS_Rgn2KDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::VS_Rgn2KRow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableVS_Rgn2K->TYPEColumn]));
}
inline System::Void NewDataSet::VS_Rgn2KRow::TYPE::set(System::String^  value) {
    this[this->tableVS_Rgn2K->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::VS_Rgn2KRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableVS_Rgn2K->decimalColumn]));
}
inline System::Void NewDataSet::VS_Rgn2KRow::decimal::set(System::Decimal value) {
    this[this->tableVS_Rgn2K->decimalColumn] = value;
}

inline System::Int32 NewDataSet::VS_Rgn2KRow::VS_Rgn2K_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableVS_Rgn2K->VS_Rgn2K_IdColumn]));
}
inline System::Void NewDataSet::VS_Rgn2KRow::VS_Rgn2K_Id::set(System::Int32 value) {
    this[this->tableVS_Rgn2K->VS_Rgn2K_IdColumn] = value;
}

inline System::Int32 NewDataSet::VS_Rgn2KRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableVS_Rgn2K->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'VS_Rgn2K\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::VS_Rgn2KRow::jonkman_Id::set(System::Int32 value) {
    this[this->tableVS_Rgn2K->jonkman_IdColumn] = value;
}

inline NewDataSet::jonkmanRow^  NewDataSet::VS_Rgn2KRow::jonkmanRow::get() {
    return (cli::safe_cast<NewDataSet::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_VS_Rgn2K"])));
}
inline System::Void NewDataSet::VS_Rgn2KRow::jonkmanRow::set(NewDataSet::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_VS_Rgn2K"]);
}

inline ::System::Boolean NewDataSet::VS_Rgn2KRow::Isjonkman_IdNull() {
    return this->IsNull(this->tableVS_Rgn2K->jonkman_IdColumn);
}

inline ::System::Void NewDataSet::VS_Rgn2KRow::Setjonkman_IdNull() {
    this[this->tableVS_Rgn2K->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::VS_Rgn2KRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"VS_Rgn2K_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"VS_Rgn2K_schedule"])));
    }
}


inline NewDataSet::VS_Rgn2SpRow::VS_Rgn2SpRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableVS_Rgn2Sp = (cli::safe_cast<NewDataSet::VS_Rgn2SpDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::VS_Rgn2SpRow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableVS_Rgn2Sp->TYPEColumn]));
}
inline System::Void NewDataSet::VS_Rgn2SpRow::TYPE::set(System::String^  value) {
    this[this->tableVS_Rgn2Sp->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::VS_Rgn2SpRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableVS_Rgn2Sp->decimalColumn]));
}
inline System::Void NewDataSet::VS_Rgn2SpRow::decimal::set(System::Decimal value) {
    this[this->tableVS_Rgn2Sp->decimalColumn] = value;
}

inline System::Int32 NewDataSet::VS_Rgn2SpRow::VS_Rgn2Sp_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableVS_Rgn2Sp->VS_Rgn2Sp_IdColumn]));
}
inline System::Void NewDataSet::VS_Rgn2SpRow::VS_Rgn2Sp_Id::set(System::Int32 value) {
    this[this->tableVS_Rgn2Sp->VS_Rgn2Sp_IdColumn] = value;
}

inline System::Int32 NewDataSet::VS_Rgn2SpRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableVS_Rgn2Sp->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'VS_Rgn2Sp\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::VS_Rgn2SpRow::jonkman_Id::set(System::Int32 value) {
    this[this->tableVS_Rgn2Sp->jonkman_IdColumn] = value;
}

inline NewDataSet::jonkmanRow^  NewDataSet::VS_Rgn2SpRow::jonkmanRow::get() {
    return (cli::safe_cast<NewDataSet::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_VS_Rgn2Sp"])));
}
inline System::Void NewDataSet::VS_Rgn2SpRow::jonkmanRow::set(NewDataSet::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_VS_Rgn2Sp"]);
}

inline ::System::Boolean NewDataSet::VS_Rgn2SpRow::Isjonkman_IdNull() {
    return this->IsNull(this->tableVS_Rgn2Sp->jonkman_IdColumn);
}

inline ::System::Void NewDataSet::VS_Rgn2SpRow::Setjonkman_IdNull() {
    this[this->tableVS_Rgn2Sp->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::VS_Rgn2SpRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"VS_Rgn2Sp_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"VS_Rgn2Sp_schedule"])));
    }
}


inline NewDataSet::VS_CtInSpRow::VS_CtInSpRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableVS_CtInSp = (cli::safe_cast<NewDataSet::VS_CtInSpDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::VS_CtInSpRow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableVS_CtInSp->TYPEColumn]));
}
inline System::Void NewDataSet::VS_CtInSpRow::TYPE::set(System::String^  value) {
    this[this->tableVS_CtInSp->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::VS_CtInSpRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableVS_CtInSp->decimalColumn]));
}
inline System::Void NewDataSet::VS_CtInSpRow::decimal::set(System::Decimal value) {
    this[this->tableVS_CtInSp->decimalColumn] = value;
}

inline System::Int32 NewDataSet::VS_CtInSpRow::VS_CtInSp_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableVS_CtInSp->VS_CtInSp_IdColumn]));
}
inline System::Void NewDataSet::VS_CtInSpRow::VS_CtInSp_Id::set(System::Int32 value) {
    this[this->tableVS_CtInSp->VS_CtInSp_IdColumn] = value;
}

inline System::Int32 NewDataSet::VS_CtInSpRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableVS_CtInSp->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'VS_CtInSp\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::VS_CtInSpRow::jonkman_Id::set(System::Int32 value) {
    this[this->tableVS_CtInSp->jonkman_IdColumn] = value;
}

inline NewDataSet::jonkmanRow^  NewDataSet::VS_CtInSpRow::jonkmanRow::get() {
    return (cli::safe_cast<NewDataSet::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_VS_CtInSp"])));
}
inline System::Void NewDataSet::VS_CtInSpRow::jonkmanRow::set(NewDataSet::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_VS_CtInSp"]);
}

inline ::System::Boolean NewDataSet::VS_CtInSpRow::Isjonkman_IdNull() {
    return this->IsNull(this->tableVS_CtInSp->jonkman_IdColumn);
}

inline ::System::Void NewDataSet::VS_CtInSpRow::Setjonkman_IdNull() {
    this[this->tableVS_CtInSp->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::VS_CtInSpRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"VS_CtInSp_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"VS_CtInSp_schedule"])));
    }
}


inline NewDataSet::VS_RtPwrRow::VS_RtPwrRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableVS_RtPwr = (cli::safe_cast<NewDataSet::VS_RtPwrDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::VS_RtPwrRow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableVS_RtPwr->TYPEColumn]));
}
inline System::Void NewDataSet::VS_RtPwrRow::TYPE::set(System::String^  value) {
    this[this->tableVS_RtPwr->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::VS_RtPwrRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableVS_RtPwr->decimalColumn]));
}
inline System::Void NewDataSet::VS_RtPwrRow::decimal::set(System::Decimal value) {
    this[this->tableVS_RtPwr->decimalColumn] = value;
}

inline System::Int32 NewDataSet::VS_RtPwrRow::VS_RtPwr_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableVS_RtPwr->VS_RtPwr_IdColumn]));
}
inline System::Void NewDataSet::VS_RtPwrRow::VS_RtPwr_Id::set(System::Int32 value) {
    this[this->tableVS_RtPwr->VS_RtPwr_IdColumn] = value;
}

inline System::Int32 NewDataSet::VS_RtPwrRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableVS_RtPwr->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'VS_RtPwr\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::VS_RtPwrRow::jonkman_Id::set(System::Int32 value) {
    this[this->tableVS_RtPwr->jonkman_IdColumn] = value;
}

inline NewDataSet::jonkmanRow^  NewDataSet::VS_RtPwrRow::jonkmanRow::get() {
    return (cli::safe_cast<NewDataSet::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_VS_RtPwr"])));
}
inline System::Void NewDataSet::VS_RtPwrRow::jonkmanRow::set(NewDataSet::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_VS_RtPwr"]);
}

inline ::System::Boolean NewDataSet::VS_RtPwrRow::Isjonkman_IdNull() {
    return this->IsNull(this->tableVS_RtPwr->jonkman_IdColumn);
}

inline ::System::Void NewDataSet::VS_RtPwrRow::Setjonkman_IdNull() {
    this[this->tableVS_RtPwr->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::VS_RtPwrRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"VS_RtPwr_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"VS_RtPwr_schedule"])));
    }
}


inline NewDataSet::VS_Rgn3MPRow::VS_Rgn3MPRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableVS_Rgn3MP = (cli::safe_cast<NewDataSet::VS_Rgn3MPDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::VS_Rgn3MPRow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableVS_Rgn3MP->TYPEColumn]));
}
inline System::Void NewDataSet::VS_Rgn3MPRow::TYPE::set(System::String^  value) {
    this[this->tableVS_Rgn3MP->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::VS_Rgn3MPRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableVS_Rgn3MP->decimalColumn]));
}
inline System::Void NewDataSet::VS_Rgn3MPRow::decimal::set(System::Decimal value) {
    this[this->tableVS_Rgn3MP->decimalColumn] = value;
}

inline System::Int32 NewDataSet::VS_Rgn3MPRow::VS_Rgn3MP_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableVS_Rgn3MP->VS_Rgn3MP_IdColumn]));
}
inline System::Void NewDataSet::VS_Rgn3MPRow::VS_Rgn3MP_Id::set(System::Int32 value) {
    this[this->tableVS_Rgn3MP->VS_Rgn3MP_IdColumn] = value;
}

inline System::Int32 NewDataSet::VS_Rgn3MPRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableVS_Rgn3MP->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'VS_Rgn3MP\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::VS_Rgn3MPRow::jonkman_Id::set(System::Int32 value) {
    this[this->tableVS_Rgn3MP->jonkman_IdColumn] = value;
}

inline NewDataSet::jonkmanRow^  NewDataSet::VS_Rgn3MPRow::jonkmanRow::get() {
    return (cli::safe_cast<NewDataSet::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_VS_Rgn3MP"])));
}
inline System::Void NewDataSet::VS_Rgn3MPRow::jonkmanRow::set(NewDataSet::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_VS_Rgn3MP"]);
}

inline ::System::Boolean NewDataSet::VS_Rgn3MPRow::Isjonkman_IdNull() {
    return this->IsNull(this->tableVS_Rgn3MP->jonkman_IdColumn);
}

inline ::System::Void NewDataSet::VS_Rgn3MPRow::Setjonkman_IdNull() {
    this[this->tableVS_Rgn3MP->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::VS_Rgn3MPRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"VS_Rgn3MP_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"VS_Rgn3MP_schedule"])));
    }
}


inline NewDataSet::PC_KIRow::PC_KIRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablePC_KI = (cli::safe_cast<NewDataSet::PC_KIDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::PC_KIRow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablePC_KI->TYPEColumn]));
}
inline System::Void NewDataSet::PC_KIRow::TYPE::set(System::String^  value) {
    this[this->tablePC_KI->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::PC_KIRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tablePC_KI->decimalColumn]));
}
inline System::Void NewDataSet::PC_KIRow::decimal::set(System::Decimal value) {
    this[this->tablePC_KI->decimalColumn] = value;
}

inline System::Int32 NewDataSet::PC_KIRow::PC_KI_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablePC_KI->PC_KI_IdColumn]));
}
inline System::Void NewDataSet::PC_KIRow::PC_KI_Id::set(System::Int32 value) {
    this[this->tablePC_KI->PC_KI_IdColumn] = value;
}

inline System::Int32 NewDataSet::PC_KIRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablePC_KI->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'PC_KI\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::PC_KIRow::jonkman_Id::set(System::Int32 value) {
    this[this->tablePC_KI->jonkman_IdColumn] = value;
}

inline NewDataSet::jonkmanRow^  NewDataSet::PC_KIRow::jonkmanRow::get() {
    return (cli::safe_cast<NewDataSet::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_PC_KI"])));
}
inline System::Void NewDataSet::PC_KIRow::jonkmanRow::set(NewDataSet::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_PC_KI"]);
}

inline ::System::Boolean NewDataSet::PC_KIRow::Isjonkman_IdNull() {
    return this->IsNull(this->tablePC_KI->jonkman_IdColumn);
}

inline ::System::Void NewDataSet::PC_KIRow::Setjonkman_IdNull() {
    this[this->tablePC_KI->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::PC_KIRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"PC_KI_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"PC_KI_schedule"])));
    }
}


inline NewDataSet::PC_KKRow::PC_KKRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablePC_KK = (cli::safe_cast<NewDataSet::PC_KKDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::PC_KKRow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablePC_KK->TYPEColumn]));
}
inline System::Void NewDataSet::PC_KKRow::TYPE::set(System::String^  value) {
    this[this->tablePC_KK->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::PC_KKRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tablePC_KK->decimalColumn]));
}
inline System::Void NewDataSet::PC_KKRow::decimal::set(System::Decimal value) {
    this[this->tablePC_KK->decimalColumn] = value;
}

inline System::Int32 NewDataSet::PC_KKRow::PC_KK_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablePC_KK->PC_KK_IdColumn]));
}
inline System::Void NewDataSet::PC_KKRow::PC_KK_Id::set(System::Int32 value) {
    this[this->tablePC_KK->PC_KK_IdColumn] = value;
}

inline System::Int32 NewDataSet::PC_KKRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablePC_KK->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'PC_KK\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::PC_KKRow::jonkman_Id::set(System::Int32 value) {
    this[this->tablePC_KK->jonkman_IdColumn] = value;
}

inline NewDataSet::jonkmanRow^  NewDataSet::PC_KKRow::jonkmanRow::get() {
    return (cli::safe_cast<NewDataSet::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_PC_KK"])));
}
inline System::Void NewDataSet::PC_KKRow::jonkmanRow::set(NewDataSet::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_PC_KK"]);
}

inline ::System::Boolean NewDataSet::PC_KKRow::Isjonkman_IdNull() {
    return this->IsNull(this->tablePC_KK->jonkman_IdColumn);
}

inline ::System::Void NewDataSet::PC_KKRow::Setjonkman_IdNull() {
    this[this->tablePC_KK->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::PC_KKRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"PC_KK_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"PC_KK_schedule"])));
    }
}


inline NewDataSet::PC_KPRow::PC_KPRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablePC_KP = (cli::safe_cast<NewDataSet::PC_KPDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::PC_KPRow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablePC_KP->TYPEColumn]));
}
inline System::Void NewDataSet::PC_KPRow::TYPE::set(System::String^  value) {
    this[this->tablePC_KP->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::PC_KPRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tablePC_KP->decimalColumn]));
}
inline System::Void NewDataSet::PC_KPRow::decimal::set(System::Decimal value) {
    this[this->tablePC_KP->decimalColumn] = value;
}

inline System::Int32 NewDataSet::PC_KPRow::PC_KP_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablePC_KP->PC_KP_IdColumn]));
}
inline System::Void NewDataSet::PC_KPRow::PC_KP_Id::set(System::Int32 value) {
    this[this->tablePC_KP->PC_KP_IdColumn] = value;
}

inline System::Int32 NewDataSet::PC_KPRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablePC_KP->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'PC_KP\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::PC_KPRow::jonkman_Id::set(System::Int32 value) {
    this[this->tablePC_KP->jonkman_IdColumn] = value;
}

inline NewDataSet::jonkmanRow^  NewDataSet::PC_KPRow::jonkmanRow::get() {
    return (cli::safe_cast<NewDataSet::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_PC_KP"])));
}
inline System::Void NewDataSet::PC_KPRow::jonkmanRow::set(NewDataSet::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_PC_KP"]);
}

inline ::System::Boolean NewDataSet::PC_KPRow::Isjonkman_IdNull() {
    return this->IsNull(this->tablePC_KP->jonkman_IdColumn);
}

inline ::System::Void NewDataSet::PC_KPRow::Setjonkman_IdNull() {
    this[this->tablePC_KP->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::PC_KPRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"PC_KP_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"PC_KP_schedule"])));
    }
}


inline NewDataSet::PC_RefSpdRow::PC_RefSpdRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablePC_RefSpd = (cli::safe_cast<NewDataSet::PC_RefSpdDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::PC_RefSpdRow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablePC_RefSpd->TYPEColumn]));
}
inline System::Void NewDataSet::PC_RefSpdRow::TYPE::set(System::String^  value) {
    this[this->tablePC_RefSpd->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::PC_RefSpdRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tablePC_RefSpd->decimalColumn]));
}
inline System::Void NewDataSet::PC_RefSpdRow::decimal::set(System::Decimal value) {
    this[this->tablePC_RefSpd->decimalColumn] = value;
}

inline System::Int32 NewDataSet::PC_RefSpdRow::PC_RefSpd_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablePC_RefSpd->PC_RefSpd_IdColumn]));
}
inline System::Void NewDataSet::PC_RefSpdRow::PC_RefSpd_Id::set(System::Int32 value) {
    this[this->tablePC_RefSpd->PC_RefSpd_IdColumn] = value;
}

inline System::Int32 NewDataSet::PC_RefSpdRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablePC_RefSpd->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'PC_RefSpd\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::PC_RefSpdRow::jonkman_Id::set(System::Int32 value) {
    this[this->tablePC_RefSpd->jonkman_IdColumn] = value;
}

inline NewDataSet::jonkmanRow^  NewDataSet::PC_RefSpdRow::jonkmanRow::get() {
    return (cli::safe_cast<NewDataSet::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_PC_RefSpd"])));
}
inline System::Void NewDataSet::PC_RefSpdRow::jonkmanRow::set(NewDataSet::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_PC_RefSpd"]);
}

inline ::System::Boolean NewDataSet::PC_RefSpdRow::Isjonkman_IdNull() {
    return this->IsNull(this->tablePC_RefSpd->jonkman_IdColumn);
}

inline ::System::Void NewDataSet::PC_RefSpdRow::Setjonkman_IdNull() {
    this[this->tablePC_RefSpd->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::PC_RefSpdRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"PC_RefSpd_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"PC_RefSpd_schedule"])));
    }
}


inline NewDataSet::vidalRow::vidalRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablevidal = (cli::safe_cast<NewDataSet::vidalDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::vidalRow::vidal_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablevidal->vidal_IdColumn]));
}
inline System::Void NewDataSet::vidalRow::vidal_Id::set(System::Int32 value) {
    this[this->tablevidal->vidal_IdColumn] = value;
}

inline System::Int32 NewDataSet::vidalRow::actor_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablevidal->actor_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'actor_Id\' in table \'vidal\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::vidalRow::actor_Id::set(System::Int32 value) {
    this[this->tablevidal->actor_IdColumn] = value;
}

inline System::Int32 NewDataSet::vidalRow::controller_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablevidal->controller_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'controller_Id\' in table \'vidal\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::vidalRow::controller_Id::set(System::Int32 value) {
    this[this->tablevidal->controller_IdColumn] = value;
}

inline NewDataSet::actorRow^  NewDataSet::vidalRow::actorRow::get() {
    return (cli::safe_cast<NewDataSet::actorRow^  >(this->GetParentRow(this->Table->ParentRelations[L"actor_vidal"])));
}
inline System::Void NewDataSet::vidalRow::actorRow::set(NewDataSet::actorRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"actor_vidal"]);
}

inline NewDataSet::controllerRow^  NewDataSet::vidalRow::controllerRow::get() {
    return (cli::safe_cast<NewDataSet::controllerRow^  >(this->GetParentRow(this->Table->ParentRelations[L"controller_vidal"])));
}
inline System::Void NewDataSet::vidalRow::controllerRow::set(NewDataSet::controllerRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"controller_vidal"]);
}

inline ::System::Boolean NewDataSet::vidalRow::Isactor_IdNull() {
    return this->IsNull(this->tablevidal->actor_IdColumn);
}

inline ::System::Void NewDataSet::vidalRow::Setactor_IdNull() {
    this[this->tablevidal->actor_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::vidalRow::Iscontroller_IdNull() {
    return this->IsNull(this->tablevidal->controller_IdColumn);
}

inline ::System::Void NewDataSet::vidalRow::Setcontroller_IdNull() {
    this[this->tablevidal->controller_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::ARow^  >^  NewDataSet::vidalRow::GetARows() {
    if (this->Table->ChildRelations[L"vidal_A"] == nullptr) {
        return gcnew cli::array< NewDataSet::ARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::ARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"vidal_A"])));
    }
}

inline cli::array< NewDataSet::K_alphaRow^  >^  NewDataSet::vidalRow::GetK_alphaRows() {
    if (this->Table->ChildRelations[L"vidal_K_alpha"] == nullptr) {
        return gcnew cli::array< NewDataSet::K_alphaRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::K_alphaRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"vidal_K_alpha"])));
    }
}

inline cli::array< NewDataSet::KPRow^  >^  NewDataSet::vidalRow::GetKPRows() {
    if (this->Table->ChildRelations[L"vidal_KP"] == nullptr) {
        return gcnew cli::array< NewDataSet::KPRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::KPRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"vidal_KP"])));
    }
}

inline cli::array< NewDataSet::KIRow^  >^  NewDataSet::vidalRow::GetKIRows() {
    if (this->Table->ChildRelations[L"vidal_KI"] == nullptr) {
        return gcnew cli::array< NewDataSet::KIRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::KIRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"vidal_KI"])));
    }
}

inline cli::array< NewDataSet::P_sRow^  >^  NewDataSet::vidalRow::GetP_sRows() {
    if (this->Table->ChildRelations[L"vidal_P_s"] == nullptr) {
        return gcnew cli::array< NewDataSet::P_sRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::P_sRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"vidal_P_s"])));
    }
}


inline NewDataSet::ARow::ARow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableA = (cli::safe_cast<NewDataSet::ADataTable^  >(this->Table));
}

inline System::String^  NewDataSet::ARow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableA->TYPEColumn]));
}
inline System::Void NewDataSet::ARow::TYPE::set(System::String^  value) {
    this[this->tableA->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::ARow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableA->decimalColumn]));
}
inline System::Void NewDataSet::ARow::decimal::set(System::Decimal value) {
    this[this->tableA->decimalColumn] = value;
}

inline System::Int32 NewDataSet::ARow::A_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableA->A_IdColumn]));
}
inline System::Void NewDataSet::ARow::A_Id::set(System::Int32 value) {
    this[this->tableA->A_IdColumn] = value;
}

inline System::Int32 NewDataSet::ARow::vidal_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableA->vidal_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'vidal_Id\' in table \'A\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::ARow::vidal_Id::set(System::Int32 value) {
    this[this->tableA->vidal_IdColumn] = value;
}

inline NewDataSet::vidalRow^  NewDataSet::ARow::vidalRow::get() {
    return (cli::safe_cast<NewDataSet::vidalRow^  >(this->GetParentRow(this->Table->ParentRelations[L"vidal_A"])));
}
inline System::Void NewDataSet::ARow::vidalRow::set(NewDataSet::vidalRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"vidal_A"]);
}

inline ::System::Boolean NewDataSet::ARow::Isvidal_IdNull() {
    return this->IsNull(this->tableA->vidal_IdColumn);
}

inline ::System::Void NewDataSet::ARow::Setvidal_IdNull() {
    this[this->tableA->vidal_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::ARow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"A_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"A_schedule"])));
    }
}


inline NewDataSet::K_alphaRow::K_alphaRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableK_alpha = (cli::safe_cast<NewDataSet::K_alphaDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::K_alphaRow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableK_alpha->TYPEColumn]));
}
inline System::Void NewDataSet::K_alphaRow::TYPE::set(System::String^  value) {
    this[this->tableK_alpha->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::K_alphaRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableK_alpha->decimalColumn]));
}
inline System::Void NewDataSet::K_alphaRow::decimal::set(System::Decimal value) {
    this[this->tableK_alpha->decimalColumn] = value;
}

inline System::Int32 NewDataSet::K_alphaRow::K_alpha_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableK_alpha->K_alpha_IdColumn]));
}
inline System::Void NewDataSet::K_alphaRow::K_alpha_Id::set(System::Int32 value) {
    this[this->tableK_alpha->K_alpha_IdColumn] = value;
}

inline System::Int32 NewDataSet::K_alphaRow::vidal_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableK_alpha->vidal_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'vidal_Id\' in table \'K_alpha\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::K_alphaRow::vidal_Id::set(System::Int32 value) {
    this[this->tableK_alpha->vidal_IdColumn] = value;
}

inline NewDataSet::vidalRow^  NewDataSet::K_alphaRow::vidalRow::get() {
    return (cli::safe_cast<NewDataSet::vidalRow^  >(this->GetParentRow(this->Table->ParentRelations[L"vidal_K_alpha"])));
}
inline System::Void NewDataSet::K_alphaRow::vidalRow::set(NewDataSet::vidalRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"vidal_K_alpha"]);
}

inline ::System::Boolean NewDataSet::K_alphaRow::Isvidal_IdNull() {
    return this->IsNull(this->tableK_alpha->vidal_IdColumn);
}

inline ::System::Void NewDataSet::K_alphaRow::Setvidal_IdNull() {
    this[this->tableK_alpha->vidal_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::K_alphaRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"K_alpha_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"K_alpha_schedule"])));
    }
}


inline NewDataSet::P_sRow::P_sRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableP_s = (cli::safe_cast<NewDataSet::P_sDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::P_sRow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableP_s->TYPEColumn]));
}
inline System::Void NewDataSet::P_sRow::TYPE::set(System::String^  value) {
    this[this->tableP_s->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::P_sRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableP_s->decimalColumn]));
}
inline System::Void NewDataSet::P_sRow::decimal::set(System::Decimal value) {
    this[this->tableP_s->decimalColumn] = value;
}

inline System::Int32 NewDataSet::P_sRow::P_s_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableP_s->P_s_IdColumn]));
}
inline System::Void NewDataSet::P_sRow::P_s_Id::set(System::Int32 value) {
    this[this->tableP_s->P_s_IdColumn] = value;
}

inline System::Int32 NewDataSet::P_sRow::vidal_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableP_s->vidal_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'vidal_Id\' in table \'P_s\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::P_sRow::vidal_Id::set(System::Int32 value) {
    this[this->tableP_s->vidal_IdColumn] = value;
}

inline NewDataSet::vidalRow^  NewDataSet::P_sRow::vidalRow::get() {
    return (cli::safe_cast<NewDataSet::vidalRow^  >(this->GetParentRow(this->Table->ParentRelations[L"vidal_P_s"])));
}
inline System::Void NewDataSet::P_sRow::vidalRow::set(NewDataSet::vidalRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"vidal_P_s"]);
}

inline ::System::Boolean NewDataSet::P_sRow::Isvidal_IdNull() {
    return this->IsNull(this->tableP_s->vidal_IdColumn);
}

inline ::System::Void NewDataSet::P_sRow::Setvidal_IdNull() {
    this[this->tableP_s->vidal_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::P_sRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"P_s_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"P_s_schedule"])));
    }
}


inline NewDataSet::boukhezzarRow::boukhezzarRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableboukhezzar = (cli::safe_cast<NewDataSet::boukhezzarDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::boukhezzarRow::boukhezzar_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableboukhezzar->boukhezzar_IdColumn]));
}
inline System::Void NewDataSet::boukhezzarRow::boukhezzar_Id::set(System::Int32 value) {
    this[this->tableboukhezzar->boukhezzar_IdColumn] = value;
}

inline System::Int32 NewDataSet::boukhezzarRow::actor_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableboukhezzar->actor_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'actor_Id\' in table \'boukhezzar\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::boukhezzarRow::actor_Id::set(System::Int32 value) {
    this[this->tableboukhezzar->actor_IdColumn] = value;
}

inline System::Int32 NewDataSet::boukhezzarRow::controller_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableboukhezzar->controller_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'controller_Id\' in table \'boukhezzar\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::boukhezzarRow::controller_Id::set(System::Int32 value) {
    this[this->tableboukhezzar->controller_IdColumn] = value;
}

inline NewDataSet::actorRow^  NewDataSet::boukhezzarRow::actorRow::get() {
    return (cli::safe_cast<NewDataSet::actorRow^  >(this->GetParentRow(this->Table->ParentRelations[L"actor_boukhezzar"])));
}
inline System::Void NewDataSet::boukhezzarRow::actorRow::set(NewDataSet::actorRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"actor_boukhezzar"]);
}

inline NewDataSet::controllerRow^  NewDataSet::boukhezzarRow::controllerRow::get() {
    return (cli::safe_cast<NewDataSet::controllerRow^  >(this->GetParentRow(this->Table->ParentRelations[L"controller_boukhezzar"])));
}
inline System::Void NewDataSet::boukhezzarRow::controllerRow::set(NewDataSet::controllerRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"controller_boukhezzar"]);
}

inline ::System::Boolean NewDataSet::boukhezzarRow::Isactor_IdNull() {
    return this->IsNull(this->tableboukhezzar->actor_IdColumn);
}

inline ::System::Void NewDataSet::boukhezzarRow::Setactor_IdNull() {
    this[this->tableboukhezzar->actor_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::boukhezzarRow::Iscontroller_IdNull() {
    return this->IsNull(this->tableboukhezzar->controller_IdColumn);
}

inline ::System::Void NewDataSet::boukhezzarRow::Setcontroller_IdNull() {
    this[this->tableboukhezzar->controller_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::C_0Row^  >^  NewDataSet::boukhezzarRow::GetC_0Rows() {
    if (this->Table->ChildRelations[L"boukhezzar_C_0"] == nullptr) {
        return gcnew cli::array< NewDataSet::C_0Row^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::C_0Row^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"boukhezzar_C_0"])));
    }
}

inline cli::array< NewDataSet::KPRow^  >^  NewDataSet::boukhezzarRow::GetKPRows() {
    if (this->Table->ChildRelations[L"boukhezzar_KP"] == nullptr) {
        return gcnew cli::array< NewDataSet::KPRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::KPRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"boukhezzar_KP"])));
    }
}

inline cli::array< NewDataSet::KIRow^  >^  NewDataSet::boukhezzarRow::GetKIRows() {
    if (this->Table->ChildRelations[L"boukhezzar_KI"] == nullptr) {
        return gcnew cli::array< NewDataSet::KIRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::KIRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"boukhezzar_KI"])));
    }
}

inline cli::array< NewDataSet::K_tRow^  >^  NewDataSet::boukhezzarRow::GetK_tRows() {
    if (this->Table->ChildRelations[L"boukhezzar_K_t"] == nullptr) {
        return gcnew cli::array< NewDataSet::K_tRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::K_tRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"boukhezzar_K_t"])));
    }
}

inline cli::array< NewDataSet::J_tRow^  >^  NewDataSet::boukhezzarRow::GetJ_tRows() {
    if (this->Table->ChildRelations[L"boukhezzar_J_t"] == nullptr) {
        return gcnew cli::array< NewDataSet::J_tRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::J_tRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"boukhezzar_J_t"])));
    }
}


inline NewDataSet::C_0Row::C_0Row(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableC_0 = (cli::safe_cast<NewDataSet::C_0DataTable^  >(this->Table));
}

inline System::String^  NewDataSet::C_0Row::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableC_0->TYPEColumn]));
}
inline System::Void NewDataSet::C_0Row::TYPE::set(System::String^  value) {
    this[this->tableC_0->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::C_0Row::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableC_0->decimalColumn]));
}
inline System::Void NewDataSet::C_0Row::decimal::set(System::Decimal value) {
    this[this->tableC_0->decimalColumn] = value;
}

inline System::Int32 NewDataSet::C_0Row::C_0_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableC_0->C_0_IdColumn]));
}
inline System::Void NewDataSet::C_0Row::C_0_Id::set(System::Int32 value) {
    this[this->tableC_0->C_0_IdColumn] = value;
}

inline System::Int32 NewDataSet::C_0Row::boukhezzar_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableC_0->boukhezzar_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'boukhezzar_Id\' in table \'C_0\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::C_0Row::boukhezzar_Id::set(System::Int32 value) {
    this[this->tableC_0->boukhezzar_IdColumn] = value;
}

inline NewDataSet::boukhezzarRow^  NewDataSet::C_0Row::boukhezzarRow::get() {
    return (cli::safe_cast<NewDataSet::boukhezzarRow^  >(this->GetParentRow(this->Table->ParentRelations[L"boukhezzar_C_0"])));
}
inline System::Void NewDataSet::C_0Row::boukhezzarRow::set(NewDataSet::boukhezzarRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"boukhezzar_C_0"]);
}

inline ::System::Boolean NewDataSet::C_0Row::Isboukhezzar_IdNull() {
    return this->IsNull(this->tableC_0->boukhezzar_IdColumn);
}

inline ::System::Void NewDataSet::C_0Row::Setboukhezzar_IdNull() {
    this[this->tableC_0->boukhezzar_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::C_0Row::GetscheduleRows() {
    if (this->Table->ChildRelations[L"C_0_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"C_0_schedule"])));
    }
}


inline NewDataSet::K_tRow::K_tRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableK_t = (cli::safe_cast<NewDataSet::K_tDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::K_tRow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableK_t->TYPEColumn]));
}
inline System::Void NewDataSet::K_tRow::TYPE::set(System::String^  value) {
    this[this->tableK_t->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::K_tRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableK_t->decimalColumn]));
}
inline System::Void NewDataSet::K_tRow::decimal::set(System::Decimal value) {
    this[this->tableK_t->decimalColumn] = value;
}

inline System::Int32 NewDataSet::K_tRow::K_t_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableK_t->K_t_IdColumn]));
}
inline System::Void NewDataSet::K_tRow::K_t_Id::set(System::Int32 value) {
    this[this->tableK_t->K_t_IdColumn] = value;
}

inline System::Int32 NewDataSet::K_tRow::boukhezzar_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableK_t->boukhezzar_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'boukhezzar_Id\' in table \'K_t\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::K_tRow::boukhezzar_Id::set(System::Int32 value) {
    this[this->tableK_t->boukhezzar_IdColumn] = value;
}

inline NewDataSet::boukhezzarRow^  NewDataSet::K_tRow::boukhezzarRow::get() {
    return (cli::safe_cast<NewDataSet::boukhezzarRow^  >(this->GetParentRow(this->Table->ParentRelations[L"boukhezzar_K_t"])));
}
inline System::Void NewDataSet::K_tRow::boukhezzarRow::set(NewDataSet::boukhezzarRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"boukhezzar_K_t"]);
}

inline ::System::Boolean NewDataSet::K_tRow::Isboukhezzar_IdNull() {
    return this->IsNull(this->tableK_t->boukhezzar_IdColumn);
}

inline ::System::Void NewDataSet::K_tRow::Setboukhezzar_IdNull() {
    this[this->tableK_t->boukhezzar_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::K_tRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"K_t_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"K_t_schedule"])));
    }
}


inline NewDataSet::J_tRow::J_tRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableJ_t = (cli::safe_cast<NewDataSet::J_tDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::J_tRow::TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableJ_t->TYPEColumn]));
}
inline System::Void NewDataSet::J_tRow::TYPE::set(System::String^  value) {
    this[this->tableJ_t->TYPEColumn] = value;
}

inline System::Decimal NewDataSet::J_tRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableJ_t->decimalColumn]));
}
inline System::Void NewDataSet::J_tRow::decimal::set(System::Decimal value) {
    this[this->tableJ_t->decimalColumn] = value;
}

inline System::Int32 NewDataSet::J_tRow::J_t_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableJ_t->J_t_IdColumn]));
}
inline System::Void NewDataSet::J_tRow::J_t_Id::set(System::Int32 value) {
    this[this->tableJ_t->J_t_IdColumn] = value;
}

inline System::Int32 NewDataSet::J_tRow::boukhezzar_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableJ_t->boukhezzar_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'boukhezzar_Id\' in table \'J_t\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::J_tRow::boukhezzar_Id::set(System::Int32 value) {
    this[this->tableJ_t->boukhezzar_IdColumn] = value;
}

inline NewDataSet::boukhezzarRow^  NewDataSet::J_tRow::boukhezzarRow::get() {
    return (cli::safe_cast<NewDataSet::boukhezzarRow^  >(this->GetParentRow(this->Table->ParentRelations[L"boukhezzar_J_t"])));
}
inline System::Void NewDataSet::J_tRow::boukhezzarRow::set(NewDataSet::boukhezzarRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"boukhezzar_J_t"]);
}

inline ::System::Boolean NewDataSet::J_tRow::Isboukhezzar_IdNull() {
    return this->IsNull(this->tableJ_t->boukhezzar_IdColumn);
}

inline ::System::Void NewDataSet::J_tRow::Setboukhezzar_IdNull() {
    this[this->tableJ_t->boukhezzar_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::scheduleRow^  >^  NewDataSet::J_tRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"J_t_schedule"] == nullptr) {
        return gcnew cli::array< NewDataSet::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"J_t_schedule"])));
    }
}


inline NewDataSet::criticRow::criticRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablecritic = (cli::safe_cast<NewDataSet::criticDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::criticRow::ALGORITHM::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablecritic->ALGORITHMColumn]));
}
inline System::Void NewDataSet::criticRow::ALGORITHM::set(System::String^  value) {
    this[this->tablecritic->ALGORITHMColumn] = value;
}

inline System::String^  NewDataSet::criticRow::LOAD::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tablecritic->LOADColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'LOAD\' in table \'critic\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::criticRow::LOAD::set(System::String^  value) {
    this[this->tablecritic->LOADColumn] = value;
}

inline System::String^  NewDataSet::criticRow::SAVE::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tablecritic->SAVEColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'SAVE\' in table \'critic\' is DBNull.", e));
    }
}
inline System::Void NewDataSet::criticRow::SAVE::set(System::String^  value) {
    this[this->tablecritic->SAVEColumn] = value;
}

inline System::Int32 NewDataSet::criticRow::critic_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablecritic->critic_IdColumn]));
}
inline System::Void NewDataSet::criticRow::critic_Id::set(System::Int32 value) {
    this[this->tablecritic->critic_IdColumn] = value;
}

inline System::Int32 NewDataSet::criticRow::SIMGOD_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecritic->SIMGOD_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'SIMGOD_Id\' in table \'critic\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::criticRow::SIMGOD_Id::set(System::Int32 value) {
    this[this->tablecritic->SIMGOD_IdColumn] = value;
}

inline NewDataSet::SIMGODRow^  NewDataSet::criticRow::SIMGODRow::get() {
    return (cli::safe_cast<NewDataSet::SIMGODRow^  >(this->GetParentRow(this->Table->ParentRelations[L"SIMGOD_critic"])));
}
inline System::Void NewDataSet::criticRow::SIMGODRow::set(NewDataSet::SIMGODRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"SIMGOD_critic"]);
}

inline ::System::Boolean NewDataSet::criticRow::IsLOADNull() {
    return this->IsNull(this->tablecritic->LOADColumn);
}

inline ::System::Void NewDataSet::criticRow::SetLOADNull() {
    this[this->tablecritic->LOADColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::criticRow::IsSAVENull() {
    return this->IsNull(this->tablecritic->SAVEColumn);
}

inline ::System::Void NewDataSet::criticRow::SetSAVENull() {
    this[this->tablecritic->SAVEColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::criticRow::IsSIMGOD_IdNull() {
    return this->IsNull(this->tablecritic->SIMGOD_IdColumn);
}

inline ::System::Void NewDataSet::criticRow::SetSIMGOD_IdNull() {
    this[this->tablecritic->SIMGOD_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::_TD_LambdaRow^  >^  NewDataSet::criticRow::_GetTD_LambdaRows() {
    if (this->Table->ChildRelations[L"critic_TD-Lambda"] == nullptr) {
        return gcnew cli::array< NewDataSet::_TD_LambdaRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::_TD_LambdaRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"critic_TD-Lambda"])));
    }
}

inline cli::array< NewDataSet::_True_Online_TD_LambdaRow^  >^  NewDataSet::criticRow::_GetTrue_Online_TD_LambdaRows() {
    if (this->Table->ChildRelations[L"critic_True-Online-TD-Lambda"] == nullptr) {
        return gcnew cli::array< NewDataSet::_True_Online_TD_LambdaRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::_True_Online_TD_LambdaRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"critic_True-Online-TD-Lambda"])));
    }
}

inline cli::array< NewDataSet::_TDC_LambdaRow^  >^  NewDataSet::criticRow::_GetTDC_LambdaRows() {
    if (this->Table->ChildRelations[L"critic_TDC-Lambda"] == nullptr) {
        return gcnew cli::array< NewDataSet::_TDC_LambdaRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::_TDC_LambdaRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"critic_TDC-Lambda"])));
    }
}


inline NewDataSet::_TD_LambdaRow::_TD_LambdaRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_TD_Lambda = (cli::safe_cast<NewDataSet::_TD_LambdaDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::_TD_LambdaRow::_TD_Lambda_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->table_TD_Lambda->_TD_Lambda_IdColumn]));
}
inline System::Void NewDataSet::_TD_LambdaRow::_TD_Lambda_Id::set(System::Int32 value) {
    this[this->table_TD_Lambda->_TD_Lambda_IdColumn] = value;
}

inline System::Int32 NewDataSet::_TD_LambdaRow::critic_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_TD_Lambda->critic_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'critic_Id\' in table \'TD-Lambda\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::_TD_LambdaRow::critic_Id::set(System::Int32 value) {
    this[this->table_TD_Lambda->critic_IdColumn] = value;
}

inline NewDataSet::criticRow^  NewDataSet::_TD_LambdaRow::criticRow::get() {
    return (cli::safe_cast<NewDataSet::criticRow^  >(this->GetParentRow(this->Table->ParentRelations[L"critic_TD-Lambda"])));
}
inline System::Void NewDataSet::_TD_LambdaRow::criticRow::set(NewDataSet::criticRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"critic_TD-Lambda"]);
}

inline ::System::Boolean NewDataSet::_TD_LambdaRow::Iscritic_IdNull() {
    return this->IsNull(this->table_TD_Lambda->critic_IdColumn);
}

inline ::System::Void NewDataSet::_TD_LambdaRow::Setcritic_IdNull() {
    this[this->table_TD_Lambda->critic_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::vfaRow^  >^  NewDataSet::_TD_LambdaRow::GetvfaRows() {
    if (this->Table->ChildRelations[L"TD-Lambda_vfa"] == nullptr) {
        return gcnew cli::array< NewDataSet::vfaRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::vfaRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TD-Lambda_vfa"])));
    }
}

inline cli::array< NewDataSet::LEARNING_RATERow^  >^  NewDataSet::_TD_LambdaRow::GetLEARNING_RATERows() {
    if (this->Table->ChildRelations[L"TD-Lambda_LEARNING_RATE"] == nullptr) {
        return gcnew cli::array< NewDataSet::LEARNING_RATERow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::LEARNING_RATERow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TD-Lambda_LEARNING_RATE"])));
    }
}


inline NewDataSet::_True_Online_TD_LambdaRow::_True_Online_TD_LambdaRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_True_Online_TD_Lambda = (cli::safe_cast<NewDataSet::_True_Online_TD_LambdaDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::_True_Online_TD_LambdaRow::_True_Online_TD_Lambda_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->table_True_Online_TD_Lambda->_True_Online_TD_Lambda_IdColumn]));
}
inline System::Void NewDataSet::_True_Online_TD_LambdaRow::_True_Online_TD_Lambda_Id::set(System::Int32 value) {
    this[this->table_True_Online_TD_Lambda->_True_Online_TD_Lambda_IdColumn] = value;
}

inline System::Int32 NewDataSet::_True_Online_TD_LambdaRow::critic_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_True_Online_TD_Lambda->critic_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'critic_Id\' in table \'True-Online-TD-Lambda\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::_True_Online_TD_LambdaRow::critic_Id::set(System::Int32 value) {
    this[this->table_True_Online_TD_Lambda->critic_IdColumn] = value;
}

inline NewDataSet::criticRow^  NewDataSet::_True_Online_TD_LambdaRow::criticRow::get() {
    return (cli::safe_cast<NewDataSet::criticRow^  >(this->GetParentRow(this->Table->ParentRelations[L"critic_True-Online-TD-Lambda"])));
}
inline System::Void NewDataSet::_True_Online_TD_LambdaRow::criticRow::set(NewDataSet::criticRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"critic_True-Online-TD-Lambda"]);
}

inline ::System::Boolean NewDataSet::_True_Online_TD_LambdaRow::Iscritic_IdNull() {
    return this->IsNull(this->table_True_Online_TD_Lambda->critic_IdColumn);
}

inline ::System::Void NewDataSet::_True_Online_TD_LambdaRow::Setcritic_IdNull() {
    this[this->table_True_Online_TD_Lambda->critic_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::vfaRow^  >^  NewDataSet::_True_Online_TD_LambdaRow::GetvfaRows() {
    if (this->Table->ChildRelations[L"True-Online-TD-Lambda_vfa"] == nullptr) {
        return gcnew cli::array< NewDataSet::vfaRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::vfaRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"True-Online-TD-Lambda_vfa"])));
    }
}

inline cli::array< NewDataSet::LEARNING_RATERow^  >^  NewDataSet::_True_Online_TD_LambdaRow::GetLEARNING_RATERows() {
    if (this->Table->ChildRelations[L"True-Online-TD-Lambda_LEARNING_RATE"] == nullptr) {
        return gcnew cli::array< NewDataSet::LEARNING_RATERow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::LEARNING_RATERow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"True-Online-TD-Lambda_LEARNING_RATE"])));
    }
}


inline NewDataSet::_TDC_LambdaRow::_TDC_LambdaRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_TDC_Lambda = (cli::safe_cast<NewDataSet::_TDC_LambdaDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::_TDC_LambdaRow::_TDC_Lambda_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->table_TDC_Lambda->_TDC_Lambda_IdColumn]));
}
inline System::Void NewDataSet::_TDC_LambdaRow::_TDC_Lambda_Id::set(System::Int32 value) {
    this[this->table_TDC_Lambda->_TDC_Lambda_IdColumn] = value;
}

inline System::Int32 NewDataSet::_TDC_LambdaRow::critic_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_TDC_Lambda->critic_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'critic_Id\' in table \'TDC-Lambda\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::_TDC_LambdaRow::critic_Id::set(System::Int32 value) {
    this[this->table_TDC_Lambda->critic_IdColumn] = value;
}

inline NewDataSet::criticRow^  NewDataSet::_TDC_LambdaRow::criticRow::get() {
    return (cli::safe_cast<NewDataSet::criticRow^  >(this->GetParentRow(this->Table->ParentRelations[L"critic_TDC-Lambda"])));
}
inline System::Void NewDataSet::_TDC_LambdaRow::criticRow::set(NewDataSet::criticRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"critic_TDC-Lambda"]);
}

inline ::System::Boolean NewDataSet::_TDC_LambdaRow::Iscritic_IdNull() {
    return this->IsNull(this->table_TDC_Lambda->critic_IdColumn);
}

inline ::System::Void NewDataSet::_TDC_LambdaRow::Setcritic_IdNull() {
    this[this->table_TDC_Lambda->critic_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::vfaRow^  >^  NewDataSet::_TDC_LambdaRow::GetvfaRows() {
    if (this->Table->ChildRelations[L"TDC-Lambda_vfa"] == nullptr) {
        return gcnew cli::array< NewDataSet::vfaRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::vfaRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TDC-Lambda_vfa"])));
    }
}

inline cli::array< NewDataSet::LEARNING_RATERow^  >^  NewDataSet::_TDC_LambdaRow::GetLEARNING_RATERows() {
    if (this->Table->ChildRelations[L"TDC-Lambda_LEARNING_RATE"] == nullptr) {
        return gcnew cli::array< NewDataSet::LEARNING_RATERow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::LEARNING_RATERow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TDC-Lambda_LEARNING_RATE"])));
    }
}


inline NewDataSet::controllerRow::controllerRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablecontroller = (cli::safe_cast<NewDataSet::controllerDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::controllerRow::ALGORITHM::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablecontroller->ALGORITHMColumn]));
}
inline System::Void NewDataSet::controllerRow::ALGORITHM::set(System::String^  value) {
    this[this->tablecontroller->ALGORITHMColumn] = value;
}

inline System::String^  NewDataSet::controllerRow::LOAD::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablecontroller->LOADColumn]));
}
inline System::Void NewDataSet::controllerRow::LOAD::set(System::String^  value) {
    this[this->tablecontroller->LOADColumn] = value;
}

inline System::String^  NewDataSet::controllerRow::SAVE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablecontroller->SAVEColumn]));
}
inline System::Void NewDataSet::controllerRow::SAVE::set(System::String^  value) {
    this[this->tablecontroller->SAVEColumn] = value;
}

inline System::Int32 NewDataSet::controllerRow::controller_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablecontroller->controller_IdColumn]));
}
inline System::Void NewDataSet::controllerRow::controller_Id::set(System::Int32 value) {
    this[this->tablecontroller->controller_IdColumn] = value;
}

inline System::Int32 NewDataSet::controllerRow::SIMGOD_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecontroller->SIMGOD_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'SIMGOD_Id\' in table \'controller\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::controllerRow::SIMGOD_Id::set(System::Int32 value) {
    this[this->tablecontroller->SIMGOD_IdColumn] = value;
}

inline NewDataSet::SIMGODRow^  NewDataSet::controllerRow::SIMGODRow::get() {
    return (cli::safe_cast<NewDataSet::SIMGODRow^  >(this->GetParentRow(this->Table->ParentRelations[L"SIMGOD_controller"])));
}
inline System::Void NewDataSet::controllerRow::SIMGODRow::set(NewDataSet::SIMGODRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"SIMGOD_controller"]);
}

inline ::System::Boolean NewDataSet::controllerRow::IsSIMGOD_IdNull() {
    return this->IsNull(this->tablecontroller->SIMGOD_IdColumn);
}

inline ::System::Void NewDataSet::controllerRow::SetSIMGOD_IdNull() {
    this[this->tablecontroller->SIMGOD_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::CACLARow^  >^  NewDataSet::controllerRow::GetCACLARows() {
    if (this->Table->ChildRelations[L"controller_CACLA"] == nullptr) {
        return gcnew cli::array< NewDataSet::CACLARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::CACLARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"controller_CACLA"])));
    }
}

inline cli::array< NewDataSet::PIDRow^  >^  NewDataSet::controllerRow::GetPIDRows() {
    if (this->Table->ChildRelations[L"controller_PID"] == nullptr) {
        return gcnew cli::array< NewDataSet::PIDRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::PIDRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"controller_PID"])));
    }
}

inline cli::array< NewDataSet::LQRRow^  >^  NewDataSet::controllerRow::GetLQRRows() {
    if (this->Table->ChildRelations[L"controller_LQR"] == nullptr) {
        return gcnew cli::array< NewDataSet::LQRRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::LQRRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"controller_LQR"])));
    }
}

inline cli::array< NewDataSet::jonkmanRow^  >^  NewDataSet::controllerRow::GetjonkmanRows() {
    if (this->Table->ChildRelations[L"controller_jonkman"] == nullptr) {
        return gcnew cli::array< NewDataSet::jonkmanRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::jonkmanRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"controller_jonkman"])));
    }
}

inline cli::array< NewDataSet::vidalRow^  >^  NewDataSet::controllerRow::GetvidalRows() {
    if (this->Table->ChildRelations[L"controller_vidal"] == nullptr) {
        return gcnew cli::array< NewDataSet::vidalRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::vidalRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"controller_vidal"])));
    }
}

inline cli::array< NewDataSet::boukhezzarRow^  >^  NewDataSet::controllerRow::GetboukhezzarRows() {
    if (this->Table->ChildRelations[L"controller_boukhezzar"] == nullptr) {
        return gcnew cli::array< NewDataSet::boukhezzarRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::boukhezzarRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"controller_boukhezzar"])));
    }
}


inline NewDataSet::EXPERIMENTRowChangeEvent::EXPERIMENTRowChangeEvent(NewDataSet::EXPERIMENTRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::EXPERIMENTRow^  NewDataSet::EXPERIMENTRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::EXPERIMENTRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::LOGRowChangeEvent::LOGRowChangeEvent(NewDataSet::LOGRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::LOGRow^  NewDataSet::LOGRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::LOGRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::WORLDRowChangeEvent::WORLDRowChangeEvent(NewDataSet::WORLDRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::WORLDRow^  NewDataSet::WORLDRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::WORLDRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::rewardRowChangeEvent::rewardRowChangeEvent(NewDataSet::rewardRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::rewardRow^  NewDataSet::rewardRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::rewardRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::_reward_componentRowChangeEvent::_reward_componentRowChangeEvent(NewDataSet::_reward_componentRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::_reward_componentRow^  NewDataSet::_reward_componentRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::_reward_componentRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::_wind_turbineRowChangeEvent::_wind_turbineRowChangeEvent(NewDataSet::_wind_turbineRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::_wind_turbineRow^  NewDataSet::_wind_turbineRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::_wind_turbineRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::TRAINING_WIND_DATA_FILESRowChangeEvent::TRAINING_WIND_DATA_FILESRowChangeEvent(NewDataSet::TRAINING_WIND_DATA_FILESRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::TRAINING_WIND_DATA_FILESRow^  NewDataSet::TRAINING_WIND_DATA_FILESRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::TRAINING_WIND_DATA_FILESRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::_magnetic_levitationRowChangeEvent::_magnetic_levitationRowChangeEvent(NewDataSet::_magnetic_levitationRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::_magnetic_levitationRow^  NewDataSet::_magnetic_levitationRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::_magnetic_levitationRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::pitchRowChangeEvent::pitchRowChangeEvent(NewDataSet::pitchRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::pitchRow^  NewDataSet::pitchRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::pitchRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::_underwater_vehicleRowChangeEvent::_underwater_vehicleRowChangeEvent(NewDataSet::_underwater_vehicleRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::_underwater_vehicleRow^  NewDataSet::_underwater_vehicleRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::_underwater_vehicleRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::SIMGODRowChangeEvent::SIMGODRowChangeEvent(NewDataSet::SIMGODRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::SIMGODRow^  NewDataSet::SIMGODRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::SIMGODRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::actorRowChangeEvent::actorRowChangeEvent(NewDataSet::actorRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::actorRow^  NewDataSet::actorRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::actorRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::CACLARowChangeEvent::CACLARowChangeEvent(NewDataSet::CACLARow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::CACLARow^  NewDataSet::CACLARowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::CACLARowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::vfaRowChangeEvent::vfaRowChangeEvent(NewDataSet::vfaRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::vfaRow^  NewDataSet::vfaRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::vfaRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::NOISE_WIDTHRowChangeEvent::NOISE_WIDTHRowChangeEvent(NewDataSet::NOISE_WIDTHRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::NOISE_WIDTHRow^  NewDataSet::NOISE_WIDTHRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::NOISE_WIDTHRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::scheduleRowChangeEvent::scheduleRowChangeEvent(NewDataSet::scheduleRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::scheduleRow^  NewDataSet::scheduleRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::scheduleRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::LEARNING_RATERowChangeEvent::LEARNING_RATERowChangeEvent(NewDataSet::LEARNING_RATERow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::LEARNING_RATERow^  NewDataSet::LEARNING_RATERowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::LEARNING_RATERowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::RBF_GRIDRowChangeEvent::RBF_GRIDRowChangeEvent(NewDataSet::RBF_GRIDRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::RBF_GRIDRow^  NewDataSet::RBF_GRIDRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::RBF_GRIDRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::dimensionRowChangeEvent::dimensionRowChangeEvent(NewDataSet::dimensionRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::dimensionRow^  NewDataSet::dimensionRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::dimensionRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::PIDRowChangeEvent::PIDRowChangeEvent(NewDataSet::PIDRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::PIDRow^  NewDataSet::PIDRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::PIDRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::KPRowChangeEvent::KPRowChangeEvent(NewDataSet::KPRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::KPRow^  NewDataSet::KPRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::KPRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::KIRowChangeEvent::KIRowChangeEvent(NewDataSet::KIRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::KIRow^  NewDataSet::KIRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::KIRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::KDRowChangeEvent::KDRowChangeEvent(NewDataSet::KDRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::KDRow^  NewDataSet::KDRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::KDRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::LQRRowChangeEvent::LQRRowChangeEvent(NewDataSet::LQRRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::LQRRow^  NewDataSet::LQRRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::LQRRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::_LQR_GAINRowChangeEvent::_LQR_GAINRowChangeEvent(NewDataSet::_LQR_GAINRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::_LQR_GAINRow^  NewDataSet::_LQR_GAINRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::_LQR_GAINRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::jonkmanRowChangeEvent::jonkmanRowChangeEvent(NewDataSet::jonkmanRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::jonkmanRow^  NewDataSet::jonkmanRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::jonkmanRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::VS_RtGnSpRowChangeEvent::VS_RtGnSpRowChangeEvent(NewDataSet::VS_RtGnSpRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::VS_RtGnSpRow^  NewDataSet::VS_RtGnSpRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::VS_RtGnSpRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::VS_SlPcRowChangeEvent::VS_SlPcRowChangeEvent(NewDataSet::VS_SlPcRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::VS_SlPcRow^  NewDataSet::VS_SlPcRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::VS_SlPcRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::VS_Rgn2KRowChangeEvent::VS_Rgn2KRowChangeEvent(NewDataSet::VS_Rgn2KRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::VS_Rgn2KRow^  NewDataSet::VS_Rgn2KRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::VS_Rgn2KRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::VS_Rgn2SpRowChangeEvent::VS_Rgn2SpRowChangeEvent(NewDataSet::VS_Rgn2SpRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::VS_Rgn2SpRow^  NewDataSet::VS_Rgn2SpRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::VS_Rgn2SpRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::VS_CtInSpRowChangeEvent::VS_CtInSpRowChangeEvent(NewDataSet::VS_CtInSpRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::VS_CtInSpRow^  NewDataSet::VS_CtInSpRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::VS_CtInSpRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::VS_RtPwrRowChangeEvent::VS_RtPwrRowChangeEvent(NewDataSet::VS_RtPwrRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::VS_RtPwrRow^  NewDataSet::VS_RtPwrRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::VS_RtPwrRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::VS_Rgn3MPRowChangeEvent::VS_Rgn3MPRowChangeEvent(NewDataSet::VS_Rgn3MPRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::VS_Rgn3MPRow^  NewDataSet::VS_Rgn3MPRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::VS_Rgn3MPRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::PC_KIRowChangeEvent::PC_KIRowChangeEvent(NewDataSet::PC_KIRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::PC_KIRow^  NewDataSet::PC_KIRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::PC_KIRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::PC_KKRowChangeEvent::PC_KKRowChangeEvent(NewDataSet::PC_KKRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::PC_KKRow^  NewDataSet::PC_KKRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::PC_KKRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::PC_KPRowChangeEvent::PC_KPRowChangeEvent(NewDataSet::PC_KPRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::PC_KPRow^  NewDataSet::PC_KPRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::PC_KPRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::PC_RefSpdRowChangeEvent::PC_RefSpdRowChangeEvent(NewDataSet::PC_RefSpdRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::PC_RefSpdRow^  NewDataSet::PC_RefSpdRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::PC_RefSpdRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::vidalRowChangeEvent::vidalRowChangeEvent(NewDataSet::vidalRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::vidalRow^  NewDataSet::vidalRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::vidalRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::ARowChangeEvent::ARowChangeEvent(NewDataSet::ARow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::ARow^  NewDataSet::ARowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::ARowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::K_alphaRowChangeEvent::K_alphaRowChangeEvent(NewDataSet::K_alphaRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::K_alphaRow^  NewDataSet::K_alphaRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::K_alphaRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::P_sRowChangeEvent::P_sRowChangeEvent(NewDataSet::P_sRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::P_sRow^  NewDataSet::P_sRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::P_sRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::boukhezzarRowChangeEvent::boukhezzarRowChangeEvent(NewDataSet::boukhezzarRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::boukhezzarRow^  NewDataSet::boukhezzarRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::boukhezzarRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::C_0RowChangeEvent::C_0RowChangeEvent(NewDataSet::C_0Row^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::C_0Row^  NewDataSet::C_0RowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::C_0RowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::K_tRowChangeEvent::K_tRowChangeEvent(NewDataSet::K_tRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::K_tRow^  NewDataSet::K_tRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::K_tRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::J_tRowChangeEvent::J_tRowChangeEvent(NewDataSet::J_tRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::J_tRow^  NewDataSet::J_tRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::J_tRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::criticRowChangeEvent::criticRowChangeEvent(NewDataSet::criticRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::criticRow^  NewDataSet::criticRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::criticRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::_TD_LambdaRowChangeEvent::_TD_LambdaRowChangeEvent(NewDataSet::_TD_LambdaRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::_TD_LambdaRow^  NewDataSet::_TD_LambdaRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::_TD_LambdaRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::_True_Online_TD_LambdaRowChangeEvent::_True_Online_TD_LambdaRowChangeEvent(NewDataSet::_True_Online_TD_LambdaRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::_True_Online_TD_LambdaRow^  NewDataSet::_True_Online_TD_LambdaRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::_True_Online_TD_LambdaRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::_TDC_LambdaRowChangeEvent::_TDC_LambdaRowChangeEvent(NewDataSet::_TDC_LambdaRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::_TDC_LambdaRow^  NewDataSet::_TDC_LambdaRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::_TDC_LambdaRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::controllerRowChangeEvent::controllerRowChangeEvent(NewDataSet::controllerRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::controllerRow^  NewDataSet::controllerRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::controllerRowChangeEvent::Action::get() {
    return this->eventAction;
}
