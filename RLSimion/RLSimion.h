#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.0.30319.33440.
// 
using namespace System;
ref class RLSimion;


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[System::Serializable, 
System::ComponentModel::DesignerCategoryAttribute(L"code"), 
System::ComponentModel::ToolboxItem(true), 
System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
System::Xml::Serialization::XmlRootAttribute(L"RLSimion"), 
System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
public ref class RLSimion : public ::System::Data::DataSet {
    public : ref class EXPERIMENTDataTable;
    public : ref class LOGDataTable;
    public : ref class WORLDDataTable;
    public : ref class rewardDataTable;
    public : ref class _reward_componentDataTable;
    public : ref class _wind_turbineDataTable;
    public : ref class TRAINING_WIND_DATA_FILESDataTable;
    public : ref class _magnetic_levitationDataTable;
    public : ref class pitchDataTable;
    public : ref class _underwater_vehicleDataTable;
    public : ref class SIMGODDataTable;
    public : ref class _actor_onlyDataTable;
    public : ref class ACTORDataTable;
    public : ref class _VFA_ActorDataTable;
    public : ref class _Single_Output_Policy_LearnerDataTable;
    public : ref class CACLADataTable;
    public : ref class ETRACESDataTable;
    public : ref class LAMBDADataTable;
    public : ref class scheduleDataTable;
    public : ref class THRESHOLDDataTable;
    public : ref class ALPHADataTable;
    public : ref class VFADataTable;
    public : ref class RBF_GRIDDataTable;
    public : ref class _state_grid_dimensionDataTable;
    public : ref class EXPLORATION_NOISEDataTable;
    public : ref class SIGMADataTable;
    public : ref class RegularGradientActorDataTable;
    public : ref class IncrementalNaturalActorDataTable;
    public : ref class PIDDataTable;
    public : ref class KPDataTable;
    public : ref class KIDataTable;
    public : ref class KDDataTable;
    public : ref class LQRDataTable;
    public : ref class _LQR_GAINDataTable;
    public : ref class jonkmanDataTable;
    public : ref class VS_RtGnSpDataTable;
    public : ref class VS_SlPcDataTable;
    public : ref class VS_Rgn2KDataTable;
    public : ref class VS_Rgn2SpDataTable;
    public : ref class VS_CtInSpDataTable;
    public : ref class VS_RtPwrDataTable;
    public : ref class VS_Rgn3MPDataTable;
    public : ref class PC_KIDataTable;
    public : ref class PC_KKDataTable;
    public : ref class PC_KPDataTable;
    public : ref class PC_RefSpdDataTable;
    public : ref class vidalDataTable;
    public : ref class ADataTable;
    public : ref class K_alphaDataTable;
    public : ref class P_sDataTable;
    public : ref class boukhezzarDataTable;
    public : ref class C_0DataTable;
    public : ref class K_tDataTable;
    public : ref class J_tDataTable;
    public : ref class _actor_criticDataTable;
    public : ref class CRITICDataTable;
    public : ref class _TD_LambdaDataTable;
    public : ref class GAMMADataTable;
    public : ref class _True_Online_TD_LambdaDataTable;
    public : ref class _TDC_LambdaDataTable;
    public : ref class BETADataTable;
    public : ref class _actor_critic_controllerDataTable;
    public : ref class CONTROLLERDataTable;
    public : ref class EXPERIMENTRow;
    public : ref class LOGRow;
    public : ref class WORLDRow;
    public : ref class rewardRow;
    public : ref class _reward_componentRow;
    public : ref class _wind_turbineRow;
    public : ref class TRAINING_WIND_DATA_FILESRow;
    public : ref class _magnetic_levitationRow;
    public : ref class pitchRow;
    public : ref class _underwater_vehicleRow;
    public : ref class SIMGODRow;
    public : ref class _actor_onlyRow;
    public : ref class ACTORRow;
    public : ref class _VFA_ActorRow;
    public : ref class _Single_Output_Policy_LearnerRow;
    public : ref class CACLARow;
    public : ref class ETRACESRow;
    public : ref class LAMBDARow;
    public : ref class scheduleRow;
    public : ref class THRESHOLDRow;
    public : ref class ALPHARow;
    public : ref class VFARow;
    public : ref class RBF_GRIDRow;
    public : ref class _state_grid_dimensionRow;
    public : ref class EXPLORATION_NOISERow;
    public : ref class SIGMARow;
    public : ref class RegularGradientActorRow;
    public : ref class IncrementalNaturalActorRow;
    public : ref class PIDRow;
    public : ref class KPRow;
    public : ref class KIRow;
    public : ref class KDRow;
    public : ref class LQRRow;
    public : ref class _LQR_GAINRow;
    public : ref class jonkmanRow;
    public : ref class VS_RtGnSpRow;
    public : ref class VS_SlPcRow;
    public : ref class VS_Rgn2KRow;
    public : ref class VS_Rgn2SpRow;
    public : ref class VS_CtInSpRow;
    public : ref class VS_RtPwrRow;
    public : ref class VS_Rgn3MPRow;
    public : ref class PC_KIRow;
    public : ref class PC_KKRow;
    public : ref class PC_KPRow;
    public : ref class PC_RefSpdRow;
    public : ref class vidalRow;
    public : ref class ARow;
    public : ref class K_alphaRow;
    public : ref class P_sRow;
    public : ref class boukhezzarRow;
    public : ref class C_0Row;
    public : ref class K_tRow;
    public : ref class J_tRow;
    public : ref class _actor_criticRow;
    public : ref class CRITICRow;
    public : ref class _TD_LambdaRow;
    public : ref class GAMMARow;
    public : ref class _True_Online_TD_LambdaRow;
    public : ref class _TDC_LambdaRow;
    public : ref class BETARow;
    public : ref class _actor_critic_controllerRow;
    public : ref class CONTROLLERRow;
    public : ref class EXPERIMENTRowChangeEvent;
    public : ref class LOGRowChangeEvent;
    public : ref class WORLDRowChangeEvent;
    public : ref class rewardRowChangeEvent;
    public : ref class _reward_componentRowChangeEvent;
    public : ref class _wind_turbineRowChangeEvent;
    public : ref class TRAINING_WIND_DATA_FILESRowChangeEvent;
    public : ref class _magnetic_levitationRowChangeEvent;
    public : ref class pitchRowChangeEvent;
    public : ref class _underwater_vehicleRowChangeEvent;
    public : ref class SIMGODRowChangeEvent;
    public : ref class _actor_onlyRowChangeEvent;
    public : ref class ACTORRowChangeEvent;
    public : ref class _VFA_ActorRowChangeEvent;
    public : ref class _Single_Output_Policy_LearnerRowChangeEvent;
    public : ref class CACLARowChangeEvent;
    public : ref class ETRACESRowChangeEvent;
    public : ref class LAMBDARowChangeEvent;
    public : ref class scheduleRowChangeEvent;
    public : ref class THRESHOLDRowChangeEvent;
    public : ref class ALPHARowChangeEvent;
    public : ref class VFARowChangeEvent;
    public : ref class RBF_GRIDRowChangeEvent;
    public : ref class _state_grid_dimensionRowChangeEvent;
    public : ref class EXPLORATION_NOISERowChangeEvent;
    public : ref class SIGMARowChangeEvent;
    public : ref class RegularGradientActorRowChangeEvent;
    public : ref class IncrementalNaturalActorRowChangeEvent;
    public : ref class PIDRowChangeEvent;
    public : ref class KPRowChangeEvent;
    public : ref class KIRowChangeEvent;
    public : ref class KDRowChangeEvent;
    public : ref class LQRRowChangeEvent;
    public : ref class _LQR_GAINRowChangeEvent;
    public : ref class jonkmanRowChangeEvent;
    public : ref class VS_RtGnSpRowChangeEvent;
    public : ref class VS_SlPcRowChangeEvent;
    public : ref class VS_Rgn2KRowChangeEvent;
    public : ref class VS_Rgn2SpRowChangeEvent;
    public : ref class VS_CtInSpRowChangeEvent;
    public : ref class VS_RtPwrRowChangeEvent;
    public : ref class VS_Rgn3MPRowChangeEvent;
    public : ref class PC_KIRowChangeEvent;
    public : ref class PC_KKRowChangeEvent;
    public : ref class PC_KPRowChangeEvent;
    public : ref class PC_RefSpdRowChangeEvent;
    public : ref class vidalRowChangeEvent;
    public : ref class ARowChangeEvent;
    public : ref class K_alphaRowChangeEvent;
    public : ref class P_sRowChangeEvent;
    public : ref class boukhezzarRowChangeEvent;
    public : ref class C_0RowChangeEvent;
    public : ref class K_tRowChangeEvent;
    public : ref class J_tRowChangeEvent;
    public : ref class _actor_criticRowChangeEvent;
    public : ref class CRITICRowChangeEvent;
    public : ref class _TD_LambdaRowChangeEvent;
    public : ref class GAMMARowChangeEvent;
    public : ref class _True_Online_TD_LambdaRowChangeEvent;
    public : ref class _TDC_LambdaRowChangeEvent;
    public : ref class BETARowChangeEvent;
    public : ref class _actor_critic_controllerRowChangeEvent;
    public : ref class CONTROLLERRowChangeEvent;
    
    private: RLSimion::EXPERIMENTDataTable^  tableEXPERIMENT;
    
    private: RLSimion::LOGDataTable^  tableLOG;
    
    private: RLSimion::WORLDDataTable^  tableWORLD;
    
    private: RLSimion::rewardDataTable^  tablereward;
    
    private: RLSimion::_reward_componentDataTable^  table_reward_component;
    
    private: RLSimion::_wind_turbineDataTable^  table_wind_turbine;
    
    private: RLSimion::TRAINING_WIND_DATA_FILESDataTable^  tableTRAINING_WIND_DATA_FILES;
    
    private: RLSimion::_magnetic_levitationDataTable^  table_magnetic_levitation;
    
    private: RLSimion::pitchDataTable^  tablepitch;
    
    private: RLSimion::_underwater_vehicleDataTable^  table_underwater_vehicle;
    
    private: RLSimion::SIMGODDataTable^  tableSIMGOD;
    
    private: RLSimion::_actor_onlyDataTable^  table_actor_only;
    
    private: RLSimion::ACTORDataTable^  tableACTOR;
    
    private: RLSimion::_VFA_ActorDataTable^  table_VFA_Actor;
    
    private: RLSimion::_Single_Output_Policy_LearnerDataTable^  table_Single_Output_Policy_Learner;
    
    private: RLSimion::CACLADataTable^  tableCACLA;
    
    private: RLSimion::ETRACESDataTable^  tableETRACES;
    
    private: RLSimion::LAMBDADataTable^  tableLAMBDA;
    
    private: RLSimion::scheduleDataTable^  tableschedule;
    
    private: RLSimion::THRESHOLDDataTable^  tableTHRESHOLD;
    
    private: RLSimion::ALPHADataTable^  tableALPHA;
    
    private: RLSimion::VFADataTable^  tableVFA;
    
    private: RLSimion::RBF_GRIDDataTable^  tableRBF_GRID;
    
    private: RLSimion::_state_grid_dimensionDataTable^  table_state_grid_dimension;
    
    private: RLSimion::EXPLORATION_NOISEDataTable^  tableEXPLORATION_NOISE;
    
    private: RLSimion::SIGMADataTable^  tableSIGMA;
    
    private: RLSimion::RegularGradientActorDataTable^  tableRegularGradientActor;
    
    private: RLSimion::IncrementalNaturalActorDataTable^  tableIncrementalNaturalActor;
    
    private: RLSimion::PIDDataTable^  tablePID;
    
    private: RLSimion::KPDataTable^  tableKP;
    
    private: RLSimion::KIDataTable^  tableKI;
    
    private: RLSimion::KDDataTable^  tableKD;
    
    private: RLSimion::LQRDataTable^  tableLQR;
    
    private: RLSimion::_LQR_GAINDataTable^  table_LQR_GAIN;
    
    private: RLSimion::jonkmanDataTable^  tablejonkman;
    
    private: RLSimion::VS_RtGnSpDataTable^  tableVS_RtGnSp;
    
    private: RLSimion::VS_SlPcDataTable^  tableVS_SlPc;
    
    private: RLSimion::VS_Rgn2KDataTable^  tableVS_Rgn2K;
    
    private: RLSimion::VS_Rgn2SpDataTable^  tableVS_Rgn2Sp;
    
    private: RLSimion::VS_CtInSpDataTable^  tableVS_CtInSp;
    
    private: RLSimion::VS_RtPwrDataTable^  tableVS_RtPwr;
    
    private: RLSimion::VS_Rgn3MPDataTable^  tableVS_Rgn3MP;
    
    private: RLSimion::PC_KIDataTable^  tablePC_KI;
    
    private: RLSimion::PC_KKDataTable^  tablePC_KK;
    
    private: RLSimion::PC_KPDataTable^  tablePC_KP;
    
    private: RLSimion::PC_RefSpdDataTable^  tablePC_RefSpd;
    
    private: RLSimion::vidalDataTable^  tablevidal;
    
    private: RLSimion::ADataTable^  tableA;
    
    private: RLSimion::K_alphaDataTable^  tableK_alpha;
    
    private: RLSimion::P_sDataTable^  tableP_s;
    
    private: RLSimion::boukhezzarDataTable^  tableboukhezzar;
    
    private: RLSimion::C_0DataTable^  tableC_0;
    
    private: RLSimion::K_tDataTable^  tableK_t;
    
    private: RLSimion::J_tDataTable^  tableJ_t;
    
    private: RLSimion::_actor_criticDataTable^  table_actor_critic;
    
    private: RLSimion::CRITICDataTable^  tableCRITIC;
    
    private: RLSimion::_TD_LambdaDataTable^  table_TD_Lambda;
    
    private: RLSimion::GAMMADataTable^  tableGAMMA;
    
    private: RLSimion::_True_Online_TD_LambdaDataTable^  table_True_Online_TD_Lambda;
    
    private: RLSimion::_TDC_LambdaDataTable^  table_TDC_Lambda;
    
    private: RLSimion::BETADataTable^  tableBETA;
    
    private: RLSimion::_actor_critic_controllerDataTable^  table_actor_critic_controller;
    
    private: RLSimion::CONTROLLERDataTable^  tableCONTROLLER;
    
    private: ::System::Data::DataRelation^  relationEXPERIMENT_LOG;
    
    private: ::System::Data::DataRelation^  relationWORLD_reward;
    
    private: ::System::Data::DataRelation^  _relationreward_reward_component;
    
    private: ::System::Data::DataRelation^  _relationWORLD_wind_turbine;
    
    private: ::System::Data::DataRelation^  _relationwind_turbine_TRAINING_WIND_DATA_FILES;
    
    private: ::System::Data::DataRelation^  _relationWORLD_magnetic_levitation;
    
    private: ::System::Data::DataRelation^  relationWORLD_pitch;
    
    private: ::System::Data::DataRelation^  _relationWORLD_underwater_vehicle;
    
    private: ::System::Data::DataRelation^  _relationSIMGOD_actor_only;
    
    private: ::System::Data::DataRelation^  _relationactor_only_ACTOR;
    
    private: ::System::Data::DataRelation^  _relationactor_critic_ACTOR;
    
    private: ::System::Data::DataRelation^  _relationactor_critic_controller_ACTOR;
    
    private: ::System::Data::DataRelation^  _relationACTOR_VFA_Actor;
    
    private: ::System::Data::DataRelation^  _relationCONTROLLER_VFA_Actor;
    
    private: ::System::Data::DataRelation^  _relationVFA_Actor_Single_Output_Policy_Learner;
    
    private: ::System::Data::DataRelation^  _relationSingle_Output_Policy_Learner_CACLA;
    
    private: ::System::Data::DataRelation^  relationCACLA_ETRACES;
    
    private: ::System::Data::DataRelation^  relationRegularGradientActor_ETRACES;
    
    private: ::System::Data::DataRelation^  relationIncrementalNaturalActor_ETRACES;
    
    private: ::System::Data::DataRelation^  _relationTD_Lambda_ETRACES;
    
    private: ::System::Data::DataRelation^  _relationTrue_Online_TD_Lambda_ETRACES;
    
    private: ::System::Data::DataRelation^  _relationTDC_Lambda_ETRACES;
    
    private: ::System::Data::DataRelation^  relationETRACES_LAMBDA;
    
    private: ::System::Data::DataRelation^  relationLAMBDA_schedule;
    
    private: ::System::Data::DataRelation^  relationTHRESHOLD_schedule;
    
    private: ::System::Data::DataRelation^  relationALPHA_schedule;
    
    private: ::System::Data::DataRelation^  relationSIGMA_schedule;
    
    private: ::System::Data::DataRelation^  relationKP_schedule;
    
    private: ::System::Data::DataRelation^  relationKI_schedule;
    
    private: ::System::Data::DataRelation^  relationKD_schedule;
    
    private: ::System::Data::DataRelation^  relationVS_RtGnSp_schedule;
    
    private: ::System::Data::DataRelation^  relationVS_SlPc_schedule;
    
    private: ::System::Data::DataRelation^  relationVS_Rgn2K_schedule;
    
    private: ::System::Data::DataRelation^  relationVS_Rgn2Sp_schedule;
    
    private: ::System::Data::DataRelation^  relationVS_CtInSp_schedule;
    
    private: ::System::Data::DataRelation^  relationVS_RtPwr_schedule;
    
    private: ::System::Data::DataRelation^  relationVS_Rgn3MP_schedule;
    
    private: ::System::Data::DataRelation^  relationPC_KI_schedule;
    
    private: ::System::Data::DataRelation^  relationPC_KK_schedule;
    
    private: ::System::Data::DataRelation^  relationPC_KP_schedule;
    
    private: ::System::Data::DataRelation^  relationPC_RefSpd_schedule;
    
    private: ::System::Data::DataRelation^  relationA_schedule;
    
    private: ::System::Data::DataRelation^  relationK_alpha_schedule;
    
    private: ::System::Data::DataRelation^  relationP_s_schedule;
    
    private: ::System::Data::DataRelation^  relationC_0_schedule;
    
    private: ::System::Data::DataRelation^  relationK_t_schedule;
    
    private: ::System::Data::DataRelation^  relationJ_t_schedule;
    
    private: ::System::Data::DataRelation^  relationGAMMA_schedule;
    
    private: ::System::Data::DataRelation^  relationBETA_schedule;
    
    private: ::System::Data::DataRelation^  relationETRACES_THRESHOLD;
    
    private: ::System::Data::DataRelation^  relationCACLA_ALPHA;
    
    private: ::System::Data::DataRelation^  relationRegularGradientActor_ALPHA;
    
    private: ::System::Data::DataRelation^  relationIncrementalNaturalActor_ALPHA;
    
    private: ::System::Data::DataRelation^  _relationTD_Lambda_ALPHA;
    
    private: ::System::Data::DataRelation^  _relationTrue_Online_TD_Lambda_ALPHA;
    
    private: ::System::Data::DataRelation^  _relationTDC_Lambda_ALPHA;
    
    private: ::System::Data::DataRelation^  relationCACLA_VFA;
    
    private: ::System::Data::DataRelation^  relationRegularGradientActor_VFA;
    
    private: ::System::Data::DataRelation^  relationIncrementalNaturalActor_VFA;
    
    private: ::System::Data::DataRelation^  _relationTD_Lambda_VFA;
    
    private: ::System::Data::DataRelation^  _relationTrue_Online_TD_Lambda_VFA;
    
    private: ::System::Data::DataRelation^  _relationTDC_Lambda_VFA;
    
    private: ::System::Data::DataRelation^  relationVFA_RBF_GRID;
    
    private: ::System::Data::DataRelation^  _relationRBF_GRID_state_grid_dimension;
    
    private: ::System::Data::DataRelation^  relationCACLA_EXPLORATION_NOISE;
    
    private: ::System::Data::DataRelation^  relationRegularGradientActor_EXPLORATION_NOISE;
    
    private: ::System::Data::DataRelation^  relationIncrementalNaturalActor_EXPLORATION_NOISE;
    
    private: ::System::Data::DataRelation^  relationEXPLORATION_NOISE_SIGMA;
    
    private: ::System::Data::DataRelation^  _relationSingle_Output_Policy_Learner_RegularGradientActor;
    
    private: ::System::Data::DataRelation^  _relationSingle_Output_Policy_Learner_IncrementalNaturalActor;
    
    private: ::System::Data::DataRelation^  relationACTOR_PID;
    
    private: ::System::Data::DataRelation^  relationCONTROLLER_PID;
    
    private: ::System::Data::DataRelation^  relationPID_KP;
    
    private: ::System::Data::DataRelation^  relationvidal_KP;
    
    private: ::System::Data::DataRelation^  relationboukhezzar_KP;
    
    private: ::System::Data::DataRelation^  relationPID_KI;
    
    private: ::System::Data::DataRelation^  relationvidal_KI;
    
    private: ::System::Data::DataRelation^  relationboukhezzar_KI;
    
    private: ::System::Data::DataRelation^  relationPID_KD;
    
    private: ::System::Data::DataRelation^  relationACTOR_LQR;
    
    private: ::System::Data::DataRelation^  relationCONTROLLER_LQR;
    
    private: ::System::Data::DataRelation^  _relationLQR_LQR_GAIN;
    
    private: ::System::Data::DataRelation^  relationACTOR_jonkman;
    
    private: ::System::Data::DataRelation^  relationCONTROLLER_jonkman;
    
    private: ::System::Data::DataRelation^  relationjonkman_VS_RtGnSp;
    
    private: ::System::Data::DataRelation^  relationjonkman_VS_SlPc;
    
    private: ::System::Data::DataRelation^  relationjonkman_VS_Rgn2K;
    
    private: ::System::Data::DataRelation^  relationjonkman_VS_Rgn2Sp;
    
    private: ::System::Data::DataRelation^  relationjonkman_VS_CtInSp;
    
    private: ::System::Data::DataRelation^  relationjonkman_VS_RtPwr;
    
    private: ::System::Data::DataRelation^  relationjonkman_VS_Rgn3MP;
    
    private: ::System::Data::DataRelation^  relationjonkman_PC_KI;
    
    private: ::System::Data::DataRelation^  relationjonkman_PC_KK;
    
    private: ::System::Data::DataRelation^  relationjonkman_PC_KP;
    
    private: ::System::Data::DataRelation^  relationjonkman_PC_RefSpd;
    
    private: ::System::Data::DataRelation^  relationACTOR_vidal;
    
    private: ::System::Data::DataRelation^  relationCONTROLLER_vidal;
    
    private: ::System::Data::DataRelation^  relationvidal_A;
    
    private: ::System::Data::DataRelation^  relationvidal_K_alpha;
    
    private: ::System::Data::DataRelation^  relationvidal_P_s;
    
    private: ::System::Data::DataRelation^  relationACTOR_boukhezzar;
    
    private: ::System::Data::DataRelation^  relationCONTROLLER_boukhezzar;
    
    private: ::System::Data::DataRelation^  relationboukhezzar_C_0;
    
    private: ::System::Data::DataRelation^  relationboukhezzar_K_t;
    
    private: ::System::Data::DataRelation^  relationboukhezzar_J_t;
    
    private: ::System::Data::DataRelation^  _relationSIMGOD_actor_critic;
    
    private: ::System::Data::DataRelation^  _relationactor_critic_CRITIC;
    
    private: ::System::Data::DataRelation^  _relationactor_critic_controller_CRITIC;
    
    private: ::System::Data::DataRelation^  _relationCRITIC_TD_Lambda;
    
    private: ::System::Data::DataRelation^  _relationTD_Lambda_GAMMA;
    
    private: ::System::Data::DataRelation^  _relationTrue_Online_TD_Lambda_GAMMA;
    
    private: ::System::Data::DataRelation^  _relationTDC_Lambda_GAMMA;
    
    private: ::System::Data::DataRelation^  _relationCRITIC_True_Online_TD_Lambda;
    
    private: ::System::Data::DataRelation^  _relationCRITIC_TDC_Lambda;
    
    private: ::System::Data::DataRelation^  _relationTDC_Lambda_BETA;
    
    private: ::System::Data::DataRelation^  _relationSIMGOD_actor_critic_controller;
    
    private: ::System::Data::DataRelation^  _relationactor_critic_controller_CONTROLLER;
    
    private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void EXPERIMENTRowChangeEventHandler(::System::Object^  sender, RLSimion::EXPERIMENTRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void LOGRowChangeEventHandler(::System::Object^  sender, RLSimion::LOGRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void WORLDRowChangeEventHandler(::System::Object^  sender, RLSimion::WORLDRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void rewardRowChangeEventHandler(::System::Object^  sender, RLSimion::rewardRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _reward_componentRowChangeEventHandler(::System::Object^  sender, RLSimion::_reward_componentRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _wind_turbineRowChangeEventHandler(::System::Object^  sender, RLSimion::_wind_turbineRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void TRAINING_WIND_DATA_FILESRowChangeEventHandler(::System::Object^  sender, RLSimion::TRAINING_WIND_DATA_FILESRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _magnetic_levitationRowChangeEventHandler(::System::Object^  sender, RLSimion::_magnetic_levitationRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void pitchRowChangeEventHandler(::System::Object^  sender, RLSimion::pitchRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _underwater_vehicleRowChangeEventHandler(::System::Object^  sender, RLSimion::_underwater_vehicleRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void SIMGODRowChangeEventHandler(::System::Object^  sender, RLSimion::SIMGODRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _actor_onlyRowChangeEventHandler(::System::Object^  sender, RLSimion::_actor_onlyRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void ACTORRowChangeEventHandler(::System::Object^  sender, RLSimion::ACTORRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _VFA_ActorRowChangeEventHandler(::System::Object^  sender, RLSimion::_VFA_ActorRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _Single_Output_Policy_LearnerRowChangeEventHandler(::System::Object^  sender, RLSimion::_Single_Output_Policy_LearnerRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void CACLARowChangeEventHandler(::System::Object^  sender, RLSimion::CACLARowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void ETRACESRowChangeEventHandler(::System::Object^  sender, RLSimion::ETRACESRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void LAMBDARowChangeEventHandler(::System::Object^  sender, RLSimion::LAMBDARowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void scheduleRowChangeEventHandler(::System::Object^  sender, RLSimion::scheduleRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void THRESHOLDRowChangeEventHandler(::System::Object^  sender, RLSimion::THRESHOLDRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void ALPHARowChangeEventHandler(::System::Object^  sender, RLSimion::ALPHARowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void VFARowChangeEventHandler(::System::Object^  sender, RLSimion::VFARowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void RBF_GRIDRowChangeEventHandler(::System::Object^  sender, RLSimion::RBF_GRIDRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _state_grid_dimensionRowChangeEventHandler(::System::Object^  sender, RLSimion::_state_grid_dimensionRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void EXPLORATION_NOISERowChangeEventHandler(::System::Object^  sender, RLSimion::EXPLORATION_NOISERowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void SIGMARowChangeEventHandler(::System::Object^  sender, RLSimion::SIGMARowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void RegularGradientActorRowChangeEventHandler(::System::Object^  sender, RLSimion::RegularGradientActorRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void IncrementalNaturalActorRowChangeEventHandler(::System::Object^  sender, RLSimion::IncrementalNaturalActorRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void PIDRowChangeEventHandler(::System::Object^  sender, RLSimion::PIDRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void KPRowChangeEventHandler(::System::Object^  sender, RLSimion::KPRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void KIRowChangeEventHandler(::System::Object^  sender, RLSimion::KIRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void KDRowChangeEventHandler(::System::Object^  sender, RLSimion::KDRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void LQRRowChangeEventHandler(::System::Object^  sender, RLSimion::LQRRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _LQR_GAINRowChangeEventHandler(::System::Object^  sender, RLSimion::_LQR_GAINRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void jonkmanRowChangeEventHandler(::System::Object^  sender, RLSimion::jonkmanRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void VS_RtGnSpRowChangeEventHandler(::System::Object^  sender, RLSimion::VS_RtGnSpRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void VS_SlPcRowChangeEventHandler(::System::Object^  sender, RLSimion::VS_SlPcRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void VS_Rgn2KRowChangeEventHandler(::System::Object^  sender, RLSimion::VS_Rgn2KRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void VS_Rgn2SpRowChangeEventHandler(::System::Object^  sender, RLSimion::VS_Rgn2SpRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void VS_CtInSpRowChangeEventHandler(::System::Object^  sender, RLSimion::VS_CtInSpRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void VS_RtPwrRowChangeEventHandler(::System::Object^  sender, RLSimion::VS_RtPwrRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void VS_Rgn3MPRowChangeEventHandler(::System::Object^  sender, RLSimion::VS_Rgn3MPRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void PC_KIRowChangeEventHandler(::System::Object^  sender, RLSimion::PC_KIRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void PC_KKRowChangeEventHandler(::System::Object^  sender, RLSimion::PC_KKRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void PC_KPRowChangeEventHandler(::System::Object^  sender, RLSimion::PC_KPRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void PC_RefSpdRowChangeEventHandler(::System::Object^  sender, RLSimion::PC_RefSpdRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void vidalRowChangeEventHandler(::System::Object^  sender, RLSimion::vidalRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void ARowChangeEventHandler(::System::Object^  sender, RLSimion::ARowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void K_alphaRowChangeEventHandler(::System::Object^  sender, RLSimion::K_alphaRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void P_sRowChangeEventHandler(::System::Object^  sender, RLSimion::P_sRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void boukhezzarRowChangeEventHandler(::System::Object^  sender, RLSimion::boukhezzarRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void C_0RowChangeEventHandler(::System::Object^  sender, RLSimion::C_0RowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void K_tRowChangeEventHandler(::System::Object^  sender, RLSimion::K_tRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void J_tRowChangeEventHandler(::System::Object^  sender, RLSimion::J_tRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _actor_criticRowChangeEventHandler(::System::Object^  sender, RLSimion::_actor_criticRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void CRITICRowChangeEventHandler(::System::Object^  sender, RLSimion::CRITICRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _TD_LambdaRowChangeEventHandler(::System::Object^  sender, RLSimion::_TD_LambdaRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void GAMMARowChangeEventHandler(::System::Object^  sender, RLSimion::GAMMARowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _True_Online_TD_LambdaRowChangeEventHandler(::System::Object^  sender, RLSimion::_True_Online_TD_LambdaRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _TDC_LambdaRowChangeEventHandler(::System::Object^  sender, RLSimion::_TDC_LambdaRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void BETARowChangeEventHandler(::System::Object^  sender, RLSimion::BETARowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void _actor_critic_controllerRowChangeEventHandler(::System::Object^  sender, RLSimion::_actor_critic_controllerRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void CONTROLLERRowChangeEventHandler(::System::Object^  sender, RLSimion::CONTROLLERRowChangeEvent^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    RLSimion();
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    RLSimion(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::EXPERIMENTDataTable^  EXPERIMENT {
        RLSimion::EXPERIMENTDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::LOGDataTable^  LOG {
        RLSimion::LOGDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::WORLDDataTable^  WORLD {
        RLSimion::WORLDDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::rewardDataTable^  reward {
        RLSimion::rewardDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::_reward_componentDataTable^  _reward_component {
        RLSimion::_reward_componentDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::_wind_turbineDataTable^  _wind_turbine {
        RLSimion::_wind_turbineDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::TRAINING_WIND_DATA_FILESDataTable^  TRAINING_WIND_DATA_FILES {
        RLSimion::TRAINING_WIND_DATA_FILESDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::_magnetic_levitationDataTable^  _magnetic_levitation {
        RLSimion::_magnetic_levitationDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::pitchDataTable^  pitch {
        RLSimion::pitchDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::_underwater_vehicleDataTable^  _underwater_vehicle {
        RLSimion::_underwater_vehicleDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::SIMGODDataTable^  SIMGOD {
        RLSimion::SIMGODDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::_actor_onlyDataTable^  _actor_only {
        RLSimion::_actor_onlyDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::ACTORDataTable^  ACTOR {
        RLSimion::ACTORDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::_VFA_ActorDataTable^  _VFA_Actor {
        RLSimion::_VFA_ActorDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::_Single_Output_Policy_LearnerDataTable^  _Single_Output_Policy_Learner {
        RLSimion::_Single_Output_Policy_LearnerDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::CACLADataTable^  CACLA {
        RLSimion::CACLADataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::ETRACESDataTable^  ETRACES {
        RLSimion::ETRACESDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::LAMBDADataTable^  LAMBDA {
        RLSimion::LAMBDADataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::scheduleDataTable^  schedule {
        RLSimion::scheduleDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::THRESHOLDDataTable^  THRESHOLD {
        RLSimion::THRESHOLDDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::ALPHADataTable^  ALPHA {
        RLSimion::ALPHADataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::VFADataTable^  VFA {
        RLSimion::VFADataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::RBF_GRIDDataTable^  RBF_GRID {
        RLSimion::RBF_GRIDDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::_state_grid_dimensionDataTable^  _state_grid_dimension {
        RLSimion::_state_grid_dimensionDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::EXPLORATION_NOISEDataTable^  EXPLORATION_NOISE {
        RLSimion::EXPLORATION_NOISEDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::SIGMADataTable^  SIGMA {
        RLSimion::SIGMADataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::RegularGradientActorDataTable^  RegularGradientActor {
        RLSimion::RegularGradientActorDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::IncrementalNaturalActorDataTable^  IncrementalNaturalActor {
        RLSimion::IncrementalNaturalActorDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::PIDDataTable^  PID {
        RLSimion::PIDDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::KPDataTable^  KP {
        RLSimion::KPDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::KIDataTable^  KI {
        RLSimion::KIDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::KDDataTable^  KD {
        RLSimion::KDDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::LQRDataTable^  LQR {
        RLSimion::LQRDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::_LQR_GAINDataTable^  _LQR_GAIN {
        RLSimion::_LQR_GAINDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::jonkmanDataTable^  jonkman {
        RLSimion::jonkmanDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::VS_RtGnSpDataTable^  VS_RtGnSp {
        RLSimion::VS_RtGnSpDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::VS_SlPcDataTable^  VS_SlPc {
        RLSimion::VS_SlPcDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::VS_Rgn2KDataTable^  VS_Rgn2K {
        RLSimion::VS_Rgn2KDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::VS_Rgn2SpDataTable^  VS_Rgn2Sp {
        RLSimion::VS_Rgn2SpDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::VS_CtInSpDataTable^  VS_CtInSp {
        RLSimion::VS_CtInSpDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::VS_RtPwrDataTable^  VS_RtPwr {
        RLSimion::VS_RtPwrDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::VS_Rgn3MPDataTable^  VS_Rgn3MP {
        RLSimion::VS_Rgn3MPDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::PC_KIDataTable^  PC_KI {
        RLSimion::PC_KIDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::PC_KKDataTable^  PC_KK {
        RLSimion::PC_KKDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::PC_KPDataTable^  PC_KP {
        RLSimion::PC_KPDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::PC_RefSpdDataTable^  PC_RefSpd {
        RLSimion::PC_RefSpdDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::vidalDataTable^  vidal {
        RLSimion::vidalDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::ADataTable^  A {
        RLSimion::ADataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::K_alphaDataTable^  K_alpha {
        RLSimion::K_alphaDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::P_sDataTable^  P_s {
        RLSimion::P_sDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::boukhezzarDataTable^  boukhezzar {
        RLSimion::boukhezzarDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::C_0DataTable^  C_0 {
        RLSimion::C_0DataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::K_tDataTable^  K_t {
        RLSimion::K_tDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::J_tDataTable^  J_t {
        RLSimion::J_tDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::_actor_criticDataTable^  _actor_critic {
        RLSimion::_actor_criticDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::CRITICDataTable^  CRITIC {
        RLSimion::CRITICDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::_TD_LambdaDataTable^  _TD_Lambda {
        RLSimion::_TD_LambdaDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::GAMMADataTable^  GAMMA {
        RLSimion::GAMMADataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::_True_Online_TD_LambdaDataTable^  _True_Online_TD_Lambda {
        RLSimion::_True_Online_TD_LambdaDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::_TDC_LambdaDataTable^  _TDC_Lambda {
        RLSimion::_TDC_LambdaDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::BETADataTable^  BETA {
        RLSimion::BETADataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::_actor_critic_controllerDataTable^  _actor_critic_controller {
        RLSimion::_actor_critic_controllerDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property RLSimion::CONTROLLERDataTable^  CONTROLLER {
        RLSimion::CONTROLLERDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::BrowsableAttribute(true), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
    virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
        ::System::Data::SchemaSerializationMode get() override;
        System::Void set(::System::Data::SchemaSerializationMode value) override;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataTableCollection^  Tables {
        ::System::Data::DataTableCollection^  get() new;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataRelationCollection^  Relations {
        ::System::Data::DataRelationCollection^  get() new;
    }
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void InitializeDerivedDataSet() override;
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Data::DataSet^  Clone() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeTables() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeRelations() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars();
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars(::System::Boolean initTable);
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitClass();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeEXPERIMENT();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeLOG();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeWORLD();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializereward();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_reward_component();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_wind_turbine();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeTRAINING_WIND_DATA_FILES();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_magnetic_levitation();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializepitch();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_underwater_vehicle();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeSIMGOD();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_actor_only();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeACTOR();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_VFA_Actor();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_Single_Output_Policy_Learner();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeCACLA();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeETRACES();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeLAMBDA();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeschedule();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeTHRESHOLD();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeALPHA();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeVFA();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeRBF_GRID();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_state_grid_dimension();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeEXPLORATION_NOISE();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeSIGMA();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeRegularGradientActor();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeIncrementalNaturalActor();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializePID();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeKP();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeKI();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeKD();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeLQR();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_LQR_GAIN();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializejonkman();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeVS_RtGnSp();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeVS_SlPc();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeVS_Rgn2K();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeVS_Rgn2Sp();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeVS_CtInSp();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeVS_RtPwr();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeVS_Rgn3MP();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializePC_KI();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializePC_KK();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializePC_KP();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializePC_RefSpd();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializevidal();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeA();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeK_alpha();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeP_s();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeboukhezzar();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeC_0();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeK_t();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeJ_t();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_actor_critic();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeCRITIC();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_TD_Lambda();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeGAMMA();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_True_Online_TD_Lambda();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_TDC_Lambda();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeBETA();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerialize_actor_critic_controller();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeCONTROLLER();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class EXPERIMENTDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnNUM_EPISODES;
        
        private: ::System::Data::DataColumn^  columnEPISODE_LENGTH;
        
        private: ::System::Data::DataColumn^  columnRANDOM_SEED;
        
        private: ::System::Data::DataColumn^  columnEVAL_FREQ;
        
        private: ::System::Data::DataColumn^  columnEXPERIMENT_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::EXPERIMENTRowChangeEventHandler^  EXPERIMENTRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::EXPERIMENTRowChangeEventHandler^  EXPERIMENTRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::EXPERIMENTRowChangeEventHandler^  EXPERIMENTRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::EXPERIMENTRowChangeEventHandler^  EXPERIMENTRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        EXPERIMENTDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        EXPERIMENTDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        EXPERIMENTDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  NUM_EPISODESColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EPISODE_LENGTHColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  RANDOM_SEEDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EVAL_FREQColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EXPERIMENT_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::EXPERIMENTRow^  default [::System::Int32 ] {
            RLSimion::EXPERIMENTRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddEXPERIMENTRow(RLSimion::EXPERIMENTRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::EXPERIMENTRow^  AddEXPERIMENTRow(System::Int64 NUM_EPISODES, System::Int64 EPISODE_LENGTH, System::Int64 RANDOM_SEED, 
                    System::Int64 EVAL_FREQ);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::EXPERIMENTRow^  NewEXPERIMENTRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveEXPERIMENTRow(RLSimion::EXPERIMENTRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class LOGDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnFREQ;
        
        private: ::System::Data::DataColumn^  columnOUTPUT_DIR;
        
        private: ::System::Data::DataColumn^  columnFILE_PREFIX;
        
        private: ::System::Data::DataColumn^  columnEVALUATION_EPISODES;
        
        private: ::System::Data::DataColumn^  columnTRAINING_EPISODES;
        
        private: ::System::Data::DataColumn^  columnEVALUATION_AVG_REWARDS;
        
        private: ::System::Data::DataColumn^  columnEXPERIMENT_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::LOGRowChangeEventHandler^  LOGRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::LOGRowChangeEventHandler^  LOGRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::LOGRowChangeEventHandler^  LOGRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::LOGRowChangeEventHandler^  LOGRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LOGDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LOGDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LOGDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  FREQColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  OUTPUT_DIRColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  FILE_PREFIXColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EVALUATION_EPISODESColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TRAINING_EPISODESColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EVALUATION_AVG_REWARDSColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EXPERIMENT_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::LOGRow^  default [::System::Int32 ] {
            RLSimion::LOGRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddLOGRow(RLSimion::LOGRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::LOGRow^  AddLOGRow(
                    System::Decimal FREQ, 
                    System::String^  OUTPUT_DIR, 
                    System::Int64 FILE_PREFIX, 
                    System::Boolean EVALUATION_EPISODES, 
                    System::Boolean TRAINING_EPISODES, 
                    System::Boolean EVALUATION_AVG_REWARDS, 
                    RLSimion::EXPERIMENTRow^  parentEXPERIMENTRowByEXPERIMENT_LOG);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::LOGRow^  NewLOGRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveLOGRow(RLSimion::LOGRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class WORLDDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnDELTA_T;
        
        private: ::System::Data::DataColumn^  columnNUM_SIMULATION_STEPS;
        
        private: ::System::Data::DataColumn^  columnWORLD_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::WORLDRowChangeEventHandler^  WORLDRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::WORLDRowChangeEventHandler^  WORLDRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::WORLDRowChangeEventHandler^  WORLDRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::WORLDRowChangeEventHandler^  WORLDRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        WORLDDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        WORLDDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        WORLDDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  DELTA_TColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  NUM_SIMULATION_STEPSColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  WORLD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::WORLDRow^  default [::System::Int32 ] {
            RLSimion::WORLDRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddWORLDRow(RLSimion::WORLDRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::WORLDRow^  AddWORLDRow(System::Decimal DELTA_T, System::Int64 NUM_SIMULATION_STEPS);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::WORLDRow^  NewWORLDRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveWORLDRow(RLSimion::WORLDRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class rewardDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnMIN_REWARD;
        
        private: ::System::Data::DataColumn^  columnMAX_REWARD;
        
        private: ::System::Data::DataColumn^  columnreward_Id;
        
        private: ::System::Data::DataColumn^  columnWORLD_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::rewardRowChangeEventHandler^  rewardRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::rewardRowChangeEventHandler^  rewardRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::rewardRowChangeEventHandler^  rewardRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::rewardRowChangeEventHandler^  rewardRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        rewardDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        rewardDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        rewardDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  MIN_REWARDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  MAX_REWARDColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  reward_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  WORLD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::rewardRow^  default [::System::Int32 ] {
            RLSimion::rewardRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddrewardRow(RLSimion::rewardRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::rewardRow^  AddrewardRow(System::Decimal MIN_REWARD, System::Decimal MAX_REWARD, RLSimion::WORLDRow^  parentWORLDRowByWORLD_reward);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::rewardRow^  NewrewardRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoverewardRow(RLSimion::rewardRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _reward_componentDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnCOMPONENT_TYPE;
        
        private: ::System::Data::DataColumn^  columnCOMPONENT_WEIGHT;
        
        private: ::System::Data::DataColumn^  columnCOMPONENT_TOLERANCE;
        
        private: ::System::Data::DataColumn^  columnCONTROL_ERROR_VARIABLE;
        
        private: ::System::Data::DataColumn^  columnreward_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_reward_componentRowChangeEventHandler^  _reward_componentRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_reward_componentRowChangeEventHandler^  _reward_componentRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_reward_componentRowChangeEventHandler^  _reward_componentRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_reward_componentRowChangeEventHandler^  _reward_componentRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _reward_componentDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _reward_componentDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _reward_componentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  COMPONENT_TYPEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  COMPONENT_WEIGHTColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  COMPONENT_TOLERANCEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CONTROL_ERROR_VARIABLEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  reward_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_reward_componentRow^  default [::System::Int32 ] {
            RLSimion::_reward_componentRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_reward_componentRow(RLSimion::_reward_componentRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_reward_componentRow^  Add_reward_componentRow(System::String^  COMPONENT_TYPE, System::Decimal COMPONENT_WEIGHT, 
                    System::Decimal COMPONENT_TOLERANCE, System::String^  CONTROL_ERROR_VARIABLE, RLSimion::rewardRow^  _parentrewardRowByreward_reward_component);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_reward_componentRow^  New_reward_componentRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_reward_componentRow(RLSimion::_reward_componentRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _wind_turbineDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnEVALUATION_WIND_DATA_FILE;
        
        private: ::System::Data::DataColumn^  columnPOWER_SET_POINT_FILE;
        
        private: ::System::Data::DataColumn^  column_wind_turbine_Id;
        
        private: ::System::Data::DataColumn^  columnWORLD_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_wind_turbineRowChangeEventHandler^  _wind_turbineRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_wind_turbineRowChangeEventHandler^  _wind_turbineRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_wind_turbineRowChangeEventHandler^  _wind_turbineRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_wind_turbineRowChangeEventHandler^  _wind_turbineRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _wind_turbineDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _wind_turbineDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _wind_turbineDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EVALUATION_WIND_DATA_FILEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  POWER_SET_POINT_FILEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _wind_turbine_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  WORLD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_wind_turbineRow^  default [::System::Int32 ] {
            RLSimion::_wind_turbineRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_wind_turbineRow(RLSimion::_wind_turbineRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_wind_turbineRow^  Add_wind_turbineRow(System::String^  EVALUATION_WIND_DATA_FILE, System::String^  POWER_SET_POINT_FILE, 
                    RLSimion::WORLDRow^  _parentWORLDRowByWORLD_wind_turbine);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_wind_turbineRow^  New_wind_turbineRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_wind_turbineRow(RLSimion::_wind_turbineRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class TRAINING_WIND_DATA_FILESDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnTRAINING_WIND_DATA_FILES_Column;
        
        private: ::System::Data::DataColumn^  column_wind_turbine_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::TRAINING_WIND_DATA_FILESRowChangeEventHandler^  TRAINING_WIND_DATA_FILESRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::TRAINING_WIND_DATA_FILESRowChangeEventHandler^  TRAINING_WIND_DATA_FILESRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::TRAINING_WIND_DATA_FILESRowChangeEventHandler^  TRAINING_WIND_DATA_FILESRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::TRAINING_WIND_DATA_FILESRowChangeEventHandler^  TRAINING_WIND_DATA_FILESRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        TRAINING_WIND_DATA_FILESDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        TRAINING_WIND_DATA_FILESDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        TRAINING_WIND_DATA_FILESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  TRAINING_WIND_DATA_FILES_ColumnColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _wind_turbine_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::TRAINING_WIND_DATA_FILESRow^  default [::System::Int32 ] {
            RLSimion::TRAINING_WIND_DATA_FILESRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddTRAINING_WIND_DATA_FILESRow(RLSimion::TRAINING_WIND_DATA_FILESRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::TRAINING_WIND_DATA_FILESRow^  AddTRAINING_WIND_DATA_FILESRow(System::String^  TRAINING_WIND_DATA_FILES_Column, 
                    RLSimion::_wind_turbineRow^  _parent_wind_turbineRowBywind_turbine_TRAINING_WIND_DATA_FILES);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::TRAINING_WIND_DATA_FILESRow^  NewTRAINING_WIND_DATA_FILESRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveTRAINING_WIND_DATA_FILESRow(RLSimion::TRAINING_WIND_DATA_FILESRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _magnetic_levitationDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSET_POINT_FILE;
        
        private: ::System::Data::DataColumn^  columnWORLD_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_magnetic_levitationRowChangeEventHandler^  _magnetic_levitationRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_magnetic_levitationRowChangeEventHandler^  _magnetic_levitationRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_magnetic_levitationRowChangeEventHandler^  _magnetic_levitationRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_magnetic_levitationRowChangeEventHandler^  _magnetic_levitationRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _magnetic_levitationDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _magnetic_levitationDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _magnetic_levitationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SET_POINT_FILEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  WORLD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_magnetic_levitationRow^  default [::System::Int32 ] {
            RLSimion::_magnetic_levitationRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_magnetic_levitationRow(RLSimion::_magnetic_levitationRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_magnetic_levitationRow^  Add_magnetic_levitationRow(System::String^  SET_POINT_FILE, RLSimion::WORLDRow^  _parentWORLDRowByWORLD_magnetic_levitation);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_magnetic_levitationRow^  New_magnetic_levitationRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_magnetic_levitationRow(RLSimion::_magnetic_levitationRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class pitchDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSET_POINT_FILE;
        
        private: ::System::Data::DataColumn^  columnWORLD_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::pitchRowChangeEventHandler^  pitchRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::pitchRowChangeEventHandler^  pitchRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::pitchRowChangeEventHandler^  pitchRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::pitchRowChangeEventHandler^  pitchRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        pitchDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        pitchDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        pitchDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SET_POINT_FILEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  WORLD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::pitchRow^  default [::System::Int32 ] {
            RLSimion::pitchRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddpitchRow(RLSimion::pitchRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::pitchRow^  AddpitchRow(System::String^  SET_POINT_FILE, RLSimion::WORLDRow^  parentWORLDRowByWORLD_pitch);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::pitchRow^  NewpitchRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovepitchRow(RLSimion::pitchRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _underwater_vehicleDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSET_POINT_FILE;
        
        private: ::System::Data::DataColumn^  columnWORLD_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_underwater_vehicleRowChangeEventHandler^  _underwater_vehicleRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_underwater_vehicleRowChangeEventHandler^  _underwater_vehicleRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_underwater_vehicleRowChangeEventHandler^  _underwater_vehicleRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_underwater_vehicleRowChangeEventHandler^  _underwater_vehicleRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _underwater_vehicleDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _underwater_vehicleDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _underwater_vehicleDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SET_POINT_FILEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  WORLD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_underwater_vehicleRow^  default [::System::Int32 ] {
            RLSimion::_underwater_vehicleRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_underwater_vehicleRow(RLSimion::_underwater_vehicleRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_underwater_vehicleRow^  Add_underwater_vehicleRow(System::String^  SET_POINT_FILE, RLSimion::WORLDRow^  _parentWORLDRowByWORLD_underwater_vehicle);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_underwater_vehicleRow^  New_underwater_vehicleRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_underwater_vehicleRow(RLSimion::_underwater_vehicleRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class SIMGODDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnSIMGOD_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::SIMGODRowChangeEventHandler^  SIMGODRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::SIMGODRowChangeEventHandler^  SIMGODRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::SIMGODRowChangeEventHandler^  SIMGODRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::SIMGODRowChangeEventHandler^  SIMGODRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        SIMGODDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        SIMGODDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        SIMGODDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SIMGOD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::SIMGODRow^  default [::System::Int32 ] {
            RLSimion::SIMGODRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddSIMGODRow(RLSimion::SIMGODRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::SIMGODRow^  AddSIMGODRow();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::SIMGODRow^  NewSIMGODRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveSIMGODRow(RLSimion::SIMGODRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _actor_onlyDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  column_actor_only_Id;
        
        private: ::System::Data::DataColumn^  columnSIMGOD_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_actor_onlyRowChangeEventHandler^  _actor_onlyRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_actor_onlyRowChangeEventHandler^  _actor_onlyRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_actor_onlyRowChangeEventHandler^  _actor_onlyRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_actor_onlyRowChangeEventHandler^  _actor_onlyRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _actor_onlyDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _actor_onlyDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _actor_onlyDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _actor_only_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SIMGOD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_actor_onlyRow^  default [::System::Int32 ] {
            RLSimion::_actor_onlyRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_actor_onlyRow(RLSimion::_actor_onlyRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_actor_onlyRow^  Add_actor_onlyRow(RLSimion::SIMGODRow^  _parentSIMGODRowBySIMGOD_actor_only);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_actor_onlyRow^  New_actor_onlyRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_actor_onlyRow(RLSimion::_actor_onlyRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class ACTORDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnACTOR_Id;
        
        private: ::System::Data::DataColumn^  column_actor_only_Id;
        
        private: ::System::Data::DataColumn^  column_actor_critic_Id;
        
        private: ::System::Data::DataColumn^  column_actor_critic_controller_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::ACTORRowChangeEventHandler^  ACTORRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::ACTORRowChangeEventHandler^  ACTORRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::ACTORRowChangeEventHandler^  ACTORRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::ACTORRowChangeEventHandler^  ACTORRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ACTORDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ACTORDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ACTORDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ACTOR_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _actor_only_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _actor_critic_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _actor_critic_controller_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::ACTORRow^  default [::System::Int32 ] {
            RLSimion::ACTORRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddACTORRow(RLSimion::ACTORRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::ACTORRow^  AddACTORRow(RLSimion::_actor_onlyRow^  _parent_actor_onlyRowByactor_only_ACTOR, RLSimion::_actor_criticRow^  _parent_actor_criticRowByactor_critic_ACTOR, 
                    RLSimion::_actor_critic_controllerRow^  _parent_actor_critic_controllerRowByactor_critic_controller_ACTOR);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::ACTORRow^  NewACTORRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveACTORRow(RLSimion::ACTORRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _VFA_ActorDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnLOAD;
        
        private: ::System::Data::DataColumn^  columnSAVE;
        
        private: ::System::Data::DataColumn^  column_VFA_Actor_Id;
        
        private: ::System::Data::DataColumn^  columnACTOR_Id;
        
        private: ::System::Data::DataColumn^  columnCONTROLLER_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_VFA_ActorRowChangeEventHandler^  _VFA_ActorRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_VFA_ActorRowChangeEventHandler^  _VFA_ActorRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_VFA_ActorRowChangeEventHandler^  _VFA_ActorRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_VFA_ActorRowChangeEventHandler^  _VFA_ActorRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _VFA_ActorDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _VFA_ActorDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _VFA_ActorDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  LOADColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SAVEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _VFA_Actor_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ACTOR_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CONTROLLER_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_VFA_ActorRow^  default [::System::Int32 ] {
            RLSimion::_VFA_ActorRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_VFA_ActorRow(RLSimion::_VFA_ActorRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_VFA_ActorRow^  Add_VFA_ActorRow(System::String^  LOAD, System::String^  SAVE, RLSimion::ACTORRow^  _parentACTORRowByACTOR_VFA_Actor, 
                    RLSimion::CONTROLLERRow^  _parentCONTROLLERRowByCONTROLLER_VFA_Actor);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_VFA_ActorRow^  New_VFA_ActorRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_VFA_ActorRow(RLSimion::_VFA_ActorRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _Single_Output_Policy_LearnerDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  column_Single_Output_Policy_Learner_Id;
        
        private: ::System::Data::DataColumn^  column_VFA_Actor_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_Single_Output_Policy_LearnerRowChangeEventHandler^  _Single_Output_Policy_LearnerRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_Single_Output_Policy_LearnerRowChangeEventHandler^  _Single_Output_Policy_LearnerRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_Single_Output_Policy_LearnerRowChangeEventHandler^  _Single_Output_Policy_LearnerRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_Single_Output_Policy_LearnerRowChangeEventHandler^  _Single_Output_Policy_LearnerRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _Single_Output_Policy_LearnerDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _Single_Output_Policy_LearnerDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _Single_Output_Policy_LearnerDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _Single_Output_Policy_Learner_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _VFA_Actor_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_Single_Output_Policy_LearnerRow^  default [::System::Int32 ] {
            RLSimion::_Single_Output_Policy_LearnerRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_Single_Output_Policy_LearnerRow(RLSimion::_Single_Output_Policy_LearnerRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_Single_Output_Policy_LearnerRow^  Add_Single_Output_Policy_LearnerRow(RLSimion::_VFA_ActorRow^  _parent_VFA_ActorRowByVFA_Actor_Single_Output_Policy_Learner);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_Single_Output_Policy_LearnerRow^  New_Single_Output_Policy_LearnerRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_Single_Output_Policy_LearnerRow(RLSimion::_Single_Output_Policy_LearnerRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class CACLADataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnACTION;
        
        private: ::System::Data::DataColumn^  columnCACLA_Id;
        
        private: ::System::Data::DataColumn^  column_Single_Output_Policy_Learner_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::CACLARowChangeEventHandler^  CACLARowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::CACLARowChangeEventHandler^  CACLARowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::CACLARowChangeEventHandler^  CACLARowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::CACLARowChangeEventHandler^  CACLARowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        CACLADataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        CACLADataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        CACLADataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ACTIONColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CACLA_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _Single_Output_Policy_Learner_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::CACLARow^  default [::System::Int32 ] {
            RLSimion::CACLARow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddCACLARow(RLSimion::CACLARow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::CACLARow^  AddCACLARow(System::String^  ACTION, RLSimion::_Single_Output_Policy_LearnerRow^  _parent_Single_Output_Policy_LearnerRowBySingle_Output_Policy_Learner_CACLA);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::CACLARow^  NewCACLARow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveCACLARow(RLSimion::CACLARow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class ETRACESDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnETRACES_Id;
        
        private: ::System::Data::DataColumn^  columnCACLA_Id;
        
        private: ::System::Data::DataColumn^  columnRegularGradientActor_Id;
        
        private: ::System::Data::DataColumn^  columnIncrementalNaturalActor_Id;
        
        private: ::System::Data::DataColumn^  column_TD_Lambda_Id;
        
        private: ::System::Data::DataColumn^  column_True_Online_TD_Lambda_Id;
        
        private: ::System::Data::DataColumn^  column_TDC_Lambda_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::ETRACESRowChangeEventHandler^  ETRACESRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::ETRACESRowChangeEventHandler^  ETRACESRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::ETRACESRowChangeEventHandler^  ETRACESRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::ETRACESRowChangeEventHandler^  ETRACESRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ETRACESDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ETRACESDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ETRACESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ETRACES_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CACLA_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  RegularGradientActor_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IncrementalNaturalActor_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _TD_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _True_Online_TD_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _TDC_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::ETRACESRow^  default [::System::Int32 ] {
            RLSimion::ETRACESRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddETRACESRow(RLSimion::ETRACESRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::ETRACESRow^  AddETRACESRow(
                    RLSimion::CACLARow^  parentCACLARowByCACLA_ETRACES, 
                    RLSimion::RegularGradientActorRow^  parentRegularGradientActorRowByRegularGradientActor_ETRACES, 
                    RLSimion::IncrementalNaturalActorRow^  parentIncrementalNaturalActorRowByIncrementalNaturalActor_ETRACES, 
                    RLSimion::_TD_LambdaRow^  _parent_TD_LambdaRowByTD_Lambda_ETRACES, 
                    RLSimion::_True_Online_TD_LambdaRow^  _parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_ETRACES, 
                    RLSimion::_TDC_LambdaRow^  _parent_TDC_LambdaRowByTDC_Lambda_ETRACES);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::ETRACESRow^  NewETRACESRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveETRACESRow(RLSimion::ETRACESRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class LAMBDADataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnLAMBDA_Id;
        
        private: ::System::Data::DataColumn^  columnETRACES_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::LAMBDARowChangeEventHandler^  LAMBDARowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::LAMBDARowChangeEventHandler^  LAMBDARowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::LAMBDARowChangeEventHandler^  LAMBDARowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::LAMBDARowChangeEventHandler^  LAMBDARowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LAMBDADataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LAMBDADataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LAMBDADataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  LAMBDA_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ETRACES_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::LAMBDARow^  default [::System::Int32 ] {
            RLSimion::LAMBDARow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddLAMBDARow(RLSimion::LAMBDARow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::LAMBDARow^  AddLAMBDARow(System::Decimal decimal, RLSimion::ETRACESRow^  parentETRACESRowByETRACES_LAMBDA);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::LAMBDARow^  NewLAMBDARow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveLAMBDARow(RLSimion::LAMBDARow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class scheduleDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnINITIAL_VALUE;
        
        private: ::System::Data::DataColumn^  columnFINAL_VALUE;
        
        private: ::System::Data::DataColumn^  columnEVALUATION_EPISODE_VALUE;
        
        private: ::System::Data::DataColumn^  columnINTERPOLATION;
        
        private: ::System::Data::DataColumn^  columnLAMBDA_Id;
        
        private: ::System::Data::DataColumn^  columnTHRESHOLD_Id;
        
        private: ::System::Data::DataColumn^  columnALPHA_Id;
        
        private: ::System::Data::DataColumn^  columnSIGMA_Id;
        
        private: ::System::Data::DataColumn^  columnKP_Id;
        
        private: ::System::Data::DataColumn^  columnKI_Id;
        
        private: ::System::Data::DataColumn^  columnKD_Id;
        
        private: ::System::Data::DataColumn^  columnVS_RtGnSp_Id;
        
        private: ::System::Data::DataColumn^  columnVS_SlPc_Id;
        
        private: ::System::Data::DataColumn^  columnVS_Rgn2K_Id;
        
        private: ::System::Data::DataColumn^  columnVS_Rgn2Sp_Id;
        
        private: ::System::Data::DataColumn^  columnVS_CtInSp_Id;
        
        private: ::System::Data::DataColumn^  columnVS_RtPwr_Id;
        
        private: ::System::Data::DataColumn^  columnVS_Rgn3MP_Id;
        
        private: ::System::Data::DataColumn^  columnPC_KI_Id;
        
        private: ::System::Data::DataColumn^  columnPC_KK_Id;
        
        private: ::System::Data::DataColumn^  columnPC_KP_Id;
        
        private: ::System::Data::DataColumn^  columnPC_RefSpd_Id;
        
        private: ::System::Data::DataColumn^  columnA_Id;
        
        private: ::System::Data::DataColumn^  columnK_alpha_Id;
        
        private: ::System::Data::DataColumn^  columnP_s_Id;
        
        private: ::System::Data::DataColumn^  columnC_0_Id;
        
        private: ::System::Data::DataColumn^  columnK_t_Id;
        
        private: ::System::Data::DataColumn^  columnJ_t_Id;
        
        private: ::System::Data::DataColumn^  columnGAMMA_Id;
        
        private: ::System::Data::DataColumn^  columnBETA_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::scheduleRowChangeEventHandler^  scheduleRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::scheduleRowChangeEventHandler^  scheduleRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::scheduleRowChangeEventHandler^  scheduleRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::scheduleRowChangeEventHandler^  scheduleRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        scheduleDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        scheduleDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        scheduleDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  INITIAL_VALUEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  FINAL_VALUEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EVALUATION_EPISODE_VALUEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  INTERPOLATIONColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  LAMBDA_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  THRESHOLD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ALPHA_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SIGMA_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  KP_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  KI_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  KD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_RtGnSp_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_SlPc_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_Rgn2K_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_Rgn2Sp_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_CtInSp_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_RtPwr_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_Rgn3MP_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PC_KI_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PC_KK_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PC_KP_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PC_RefSpd_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  A_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  K_alpha_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  P_s_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  C_0_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  K_t_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  J_t_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  GAMMA_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  BETA_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::scheduleRow^  default [::System::Int32 ] {
            RLSimion::scheduleRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddscheduleRow(RLSimion::scheduleRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::scheduleRow^  AddscheduleRow(
                    System::Decimal INITIAL_VALUE, 
                    System::Decimal FINAL_VALUE, 
                    System::Decimal EVALUATION_EPISODE_VALUE, 
                    System::String^  INTERPOLATION, 
                    RLSimion::LAMBDARow^  parentLAMBDARowByLAMBDA_schedule, 
                    RLSimion::THRESHOLDRow^  parentTHRESHOLDRowByTHRESHOLD_schedule, 
                    RLSimion::ALPHARow^  parentALPHARowByALPHA_schedule, 
                    RLSimion::SIGMARow^  parentSIGMARowBySIGMA_schedule, 
                    RLSimion::KPRow^  parentKPRowByKP_schedule, 
                    RLSimion::KIRow^  parentKIRowByKI_schedule, 
                    RLSimion::KDRow^  parentKDRowByKD_schedule, 
                    RLSimion::VS_RtGnSpRow^  parentVS_RtGnSpRowByVS_RtGnSp_schedule, 
                    RLSimion::VS_SlPcRow^  parentVS_SlPcRowByVS_SlPc_schedule, 
                    RLSimion::VS_Rgn2KRow^  parentVS_Rgn2KRowByVS_Rgn2K_schedule, 
                    RLSimion::VS_Rgn2SpRow^  parentVS_Rgn2SpRowByVS_Rgn2Sp_schedule, 
                    RLSimion::VS_CtInSpRow^  parentVS_CtInSpRowByVS_CtInSp_schedule, 
                    RLSimion::VS_RtPwrRow^  parentVS_RtPwrRowByVS_RtPwr_schedule, 
                    RLSimion::VS_Rgn3MPRow^  parentVS_Rgn3MPRowByVS_Rgn3MP_schedule, 
                    RLSimion::PC_KIRow^  parentPC_KIRowByPC_KI_schedule, 
                    RLSimion::PC_KKRow^  parentPC_KKRowByPC_KK_schedule, 
                    RLSimion::PC_KPRow^  parentPC_KPRowByPC_KP_schedule, 
                    RLSimion::PC_RefSpdRow^  parentPC_RefSpdRowByPC_RefSpd_schedule, 
                    RLSimion::ARow^  parentARowByA_schedule, 
                    RLSimion::K_alphaRow^  parentK_alphaRowByK_alpha_schedule, 
                    RLSimion::P_sRow^  parentP_sRowByP_s_schedule, 
                    RLSimion::C_0Row^  parentC_0RowByC_0_schedule, 
                    RLSimion::K_tRow^  parentK_tRowByK_t_schedule, 
                    RLSimion::J_tRow^  parentJ_tRowByJ_t_schedule, 
                    RLSimion::GAMMARow^  parentGAMMARowByGAMMA_schedule, 
                    RLSimion::BETARow^  parentBETARowByBETA_schedule);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::scheduleRow^  NewscheduleRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovescheduleRow(RLSimion::scheduleRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class THRESHOLDDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnTHRESHOLD_Id;
        
        private: ::System::Data::DataColumn^  columnETRACES_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::THRESHOLDRowChangeEventHandler^  THRESHOLDRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::THRESHOLDRowChangeEventHandler^  THRESHOLDRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::THRESHOLDRowChangeEventHandler^  THRESHOLDRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::THRESHOLDRowChangeEventHandler^  THRESHOLDRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        THRESHOLDDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        THRESHOLDDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        THRESHOLDDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  THRESHOLD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ETRACES_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::THRESHOLDRow^  default [::System::Int32 ] {
            RLSimion::THRESHOLDRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddTHRESHOLDRow(RLSimion::THRESHOLDRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::THRESHOLDRow^  AddTHRESHOLDRow(System::Decimal decimal, RLSimion::ETRACESRow^  parentETRACESRowByETRACES_THRESHOLD);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::THRESHOLDRow^  NewTHRESHOLDRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveTHRESHOLDRow(RLSimion::THRESHOLDRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class ALPHADataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnALPHA_Id;
        
        private: ::System::Data::DataColumn^  columnCACLA_Id;
        
        private: ::System::Data::DataColumn^  columnRegularGradientActor_Id;
        
        private: ::System::Data::DataColumn^  columnIncrementalNaturalActor_Id;
        
        private: ::System::Data::DataColumn^  column_TD_Lambda_Id;
        
        private: ::System::Data::DataColumn^  column_True_Online_TD_Lambda_Id;
        
        private: ::System::Data::DataColumn^  column_TDC_Lambda_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::ALPHARowChangeEventHandler^  ALPHARowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::ALPHARowChangeEventHandler^  ALPHARowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::ALPHARowChangeEventHandler^  ALPHARowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::ALPHARowChangeEventHandler^  ALPHARowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ALPHADataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ALPHADataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ALPHADataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ALPHA_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CACLA_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  RegularGradientActor_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IncrementalNaturalActor_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _TD_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _True_Online_TD_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _TDC_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::ALPHARow^  default [::System::Int32 ] {
            RLSimion::ALPHARow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddALPHARow(RLSimion::ALPHARow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::ALPHARow^  AddALPHARow(
                    System::Decimal decimal, 
                    RLSimion::CACLARow^  parentCACLARowByCACLA_ALPHA, 
                    RLSimion::RegularGradientActorRow^  parentRegularGradientActorRowByRegularGradientActor_ALPHA, 
                    RLSimion::IncrementalNaturalActorRow^  parentIncrementalNaturalActorRowByIncrementalNaturalActor_ALPHA, 
                    RLSimion::_TD_LambdaRow^  _parent_TD_LambdaRowByTD_Lambda_ALPHA, 
                    RLSimion::_True_Online_TD_LambdaRow^  _parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_ALPHA, 
                    RLSimion::_TDC_LambdaRow^  _parent_TDC_LambdaRowByTDC_Lambda_ALPHA);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::ALPHARow^  NewALPHARow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveALPHARow(RLSimion::ALPHARow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class VFADataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnVFA_Id;
        
        private: ::System::Data::DataColumn^  columnCACLA_Id;
        
        private: ::System::Data::DataColumn^  columnRegularGradientActor_Id;
        
        private: ::System::Data::DataColumn^  columnIncrementalNaturalActor_Id;
        
        private: ::System::Data::DataColumn^  column_TD_Lambda_Id;
        
        private: ::System::Data::DataColumn^  column_True_Online_TD_Lambda_Id;
        
        private: ::System::Data::DataColumn^  column_TDC_Lambda_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VFARowChangeEventHandler^  VFARowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VFARowChangeEventHandler^  VFARowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VFARowChangeEventHandler^  VFARowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VFARowChangeEventHandler^  VFARowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VFADataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VFADataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VFADataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VFA_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CACLA_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  RegularGradientActor_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IncrementalNaturalActor_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _TD_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _True_Online_TD_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _TDC_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VFARow^  default [::System::Int32 ] {
            RLSimion::VFARow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddVFARow(RLSimion::VFARow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::VFARow^  AddVFARow(
                    RLSimion::CACLARow^  parentCACLARowByCACLA_VFA, 
                    RLSimion::RegularGradientActorRow^  parentRegularGradientActorRowByRegularGradientActor_VFA, 
                    RLSimion::IncrementalNaturalActorRow^  parentIncrementalNaturalActorRowByIncrementalNaturalActor_VFA, 
                    RLSimion::_TD_LambdaRow^  _parent_TD_LambdaRowByTD_Lambda_VFA, 
                    RLSimion::_True_Online_TD_LambdaRow^  _parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_VFA, 
                    RLSimion::_TDC_LambdaRow^  _parent_TDC_LambdaRowByTDC_Lambda_VFA);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::VFARow^  NewVFARow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveVFARow(RLSimion::VFARow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class RBF_GRIDDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnRBF_GRID_Id;
        
        private: ::System::Data::DataColumn^  columnVFA_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::RBF_GRIDRowChangeEventHandler^  RBF_GRIDRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::RBF_GRIDRowChangeEventHandler^  RBF_GRIDRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::RBF_GRIDRowChangeEventHandler^  RBF_GRIDRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::RBF_GRIDRowChangeEventHandler^  RBF_GRIDRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RBF_GRIDDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RBF_GRIDDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RBF_GRIDDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  RBF_GRID_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VFA_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::RBF_GRIDRow^  default [::System::Int32 ] {
            RLSimion::RBF_GRIDRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddRBF_GRIDRow(RLSimion::RBF_GRIDRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::RBF_GRIDRow^  AddRBF_GRIDRow(RLSimion::VFARow^  parentVFARowByVFA_RBF_GRID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::RBF_GRIDRow^  NewRBF_GRIDRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveRBF_GRIDRow(RLSimion::RBF_GRIDRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _state_grid_dimensionDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnVARIABLE_NAME;
        
        private: ::System::Data::DataColumn^  columnNUM_FEATURES;
        
        private: ::System::Data::DataColumn^  columnDISTRIBUTION;
        
        private: ::System::Data::DataColumn^  columnRBF_GRID_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_state_grid_dimensionRowChangeEventHandler^  _state_grid_dimensionRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_state_grid_dimensionRowChangeEventHandler^  _state_grid_dimensionRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_state_grid_dimensionRowChangeEventHandler^  _state_grid_dimensionRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_state_grid_dimensionRowChangeEventHandler^  _state_grid_dimensionRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _state_grid_dimensionDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _state_grid_dimensionDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _state_grid_dimensionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VARIABLE_NAMEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  NUM_FEATURESColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  DISTRIBUTIONColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  RBF_GRID_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_state_grid_dimensionRow^  default [::System::Int32 ] {
            RLSimion::_state_grid_dimensionRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_state_grid_dimensionRow(RLSimion::_state_grid_dimensionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_state_grid_dimensionRow^  Add_state_grid_dimensionRow(System::String^  VARIABLE_NAME, System::Int64 NUM_FEATURES, 
                    System::String^  DISTRIBUTION, RLSimion::RBF_GRIDRow^  _parentRBF_GRIDRowByRBF_GRID_state_grid_dimension);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_state_grid_dimensionRow^  New_state_grid_dimensionRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_state_grid_dimensionRow(RLSimion::_state_grid_dimensionRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class EXPLORATION_NOISEDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnEXPLORATION_NOISE_Id;
        
        private: ::System::Data::DataColumn^  columnCACLA_Id;
        
        private: ::System::Data::DataColumn^  columnRegularGradientActor_Id;
        
        private: ::System::Data::DataColumn^  columnIncrementalNaturalActor_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::EXPLORATION_NOISERowChangeEventHandler^  EXPLORATION_NOISERowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::EXPLORATION_NOISERowChangeEventHandler^  EXPLORATION_NOISERowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::EXPLORATION_NOISERowChangeEventHandler^  EXPLORATION_NOISERowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::EXPLORATION_NOISERowChangeEventHandler^  EXPLORATION_NOISERowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        EXPLORATION_NOISEDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        EXPLORATION_NOISEDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        EXPLORATION_NOISEDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EXPLORATION_NOISE_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CACLA_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  RegularGradientActor_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IncrementalNaturalActor_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::EXPLORATION_NOISERow^  default [::System::Int32 ] {
            RLSimion::EXPLORATION_NOISERow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddEXPLORATION_NOISERow(RLSimion::EXPLORATION_NOISERow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::EXPLORATION_NOISERow^  AddEXPLORATION_NOISERow(RLSimion::CACLARow^  parentCACLARowByCACLA_EXPLORATION_NOISE, 
                    RLSimion::RegularGradientActorRow^  parentRegularGradientActorRowByRegularGradientActor_EXPLORATION_NOISE, RLSimion::IncrementalNaturalActorRow^  parentIncrementalNaturalActorRowByIncrementalNaturalActor_EXPLORATION_NOISE);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::EXPLORATION_NOISERow^  NewEXPLORATION_NOISERow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveEXPLORATION_NOISERow(RLSimion::EXPLORATION_NOISERow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class SIGMADataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnSIGMA_Id;
        
        private: ::System::Data::DataColumn^  columnEXPLORATION_NOISE_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::SIGMARowChangeEventHandler^  SIGMARowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::SIGMARowChangeEventHandler^  SIGMARowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::SIGMARowChangeEventHandler^  SIGMARowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::SIGMARowChangeEventHandler^  SIGMARowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        SIGMADataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        SIGMADataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        SIGMADataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SIGMA_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  EXPLORATION_NOISE_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::SIGMARow^  default [::System::Int32 ] {
            RLSimion::SIGMARow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddSIGMARow(RLSimion::SIGMARow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::SIGMARow^  AddSIGMARow(System::Decimal decimal, RLSimion::EXPLORATION_NOISERow^  parentEXPLORATION_NOISERowByEXPLORATION_NOISE_SIGMA);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::SIGMARow^  NewSIGMARow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveSIGMARow(RLSimion::SIGMARow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class RegularGradientActorDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnACTION;
        
        private: ::System::Data::DataColumn^  columnRegularGradientActor_Id;
        
        private: ::System::Data::DataColumn^  column_Single_Output_Policy_Learner_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::RegularGradientActorRowChangeEventHandler^  RegularGradientActorRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::RegularGradientActorRowChangeEventHandler^  RegularGradientActorRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::RegularGradientActorRowChangeEventHandler^  RegularGradientActorRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::RegularGradientActorRowChangeEventHandler^  RegularGradientActorRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RegularGradientActorDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RegularGradientActorDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RegularGradientActorDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ACTIONColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  RegularGradientActor_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _Single_Output_Policy_Learner_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::RegularGradientActorRow^  default [::System::Int32 ] {
            RLSimion::RegularGradientActorRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddRegularGradientActorRow(RLSimion::RegularGradientActorRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::RegularGradientActorRow^  AddRegularGradientActorRow(System::String^  ACTION, RLSimion::_Single_Output_Policy_LearnerRow^  _parent_Single_Output_Policy_LearnerRowBySingle_Output_Policy_Learner_RegularGradientActor);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::RegularGradientActorRow^  NewRegularGradientActorRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveRegularGradientActorRow(RLSimion::RegularGradientActorRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class IncrementalNaturalActorDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnACTION;
        
        private: ::System::Data::DataColumn^  columnIncrementalNaturalActor_Id;
        
        private: ::System::Data::DataColumn^  column_Single_Output_Policy_Learner_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::IncrementalNaturalActorRowChangeEventHandler^  IncrementalNaturalActorRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::IncrementalNaturalActorRowChangeEventHandler^  IncrementalNaturalActorRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::IncrementalNaturalActorRowChangeEventHandler^  IncrementalNaturalActorRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::IncrementalNaturalActorRowChangeEventHandler^  IncrementalNaturalActorRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        IncrementalNaturalActorDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        IncrementalNaturalActorDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        IncrementalNaturalActorDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ACTIONColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IncrementalNaturalActor_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _Single_Output_Policy_Learner_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::IncrementalNaturalActorRow^  default [::System::Int32 ] {
            RLSimion::IncrementalNaturalActorRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddIncrementalNaturalActorRow(RLSimion::IncrementalNaturalActorRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::IncrementalNaturalActorRow^  AddIncrementalNaturalActorRow(System::String^  ACTION, RLSimion::_Single_Output_Policy_LearnerRow^  _parent_Single_Output_Policy_LearnerRowBySingle_Output_Policy_Learner_IncrementalNaturalActor);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::IncrementalNaturalActorRow^  NewIncrementalNaturalActorRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveIncrementalNaturalActorRow(RLSimion::IncrementalNaturalActorRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class PIDDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnERROR_VARIABLE;
        
        private: ::System::Data::DataColumn^  columnPID_Id;
        
        private: ::System::Data::DataColumn^  columnACTOR_Id;
        
        private: ::System::Data::DataColumn^  columnCONTROLLER_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::PIDRowChangeEventHandler^  PIDRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::PIDRowChangeEventHandler^  PIDRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::PIDRowChangeEventHandler^  PIDRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::PIDRowChangeEventHandler^  PIDRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PIDDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PIDDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PIDDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ERROR_VARIABLEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PID_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ACTOR_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CONTROLLER_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::PIDRow^  default [::System::Int32 ] {
            RLSimion::PIDRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddPIDRow(RLSimion::PIDRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::PIDRow^  AddPIDRow(System::String^  ERROR_VARIABLE, RLSimion::ACTORRow^  parentACTORRowByACTOR_PID, RLSimion::CONTROLLERRow^  parentCONTROLLERRowByCONTROLLER_PID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::PIDRow^  NewPIDRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovePIDRow(RLSimion::PIDRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class KPDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnKP_Id;
        
        private: ::System::Data::DataColumn^  columnPID_Id;
        
        private: ::System::Data::DataColumn^  columnvidal_Id;
        
        private: ::System::Data::DataColumn^  columnboukhezzar_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::KPRowChangeEventHandler^  KPRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::KPRowChangeEventHandler^  KPRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::KPRowChangeEventHandler^  KPRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::KPRowChangeEventHandler^  KPRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KPDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KPDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KPDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  KP_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PID_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  vidal_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  boukhezzar_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::KPRow^  default [::System::Int32 ] {
            RLSimion::KPRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddKPRow(RLSimion::KPRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::KPRow^  AddKPRow(System::Decimal decimal, RLSimion::PIDRow^  parentPIDRowByPID_KP, RLSimion::vidalRow^  parentvidalRowByvidal_KP, 
                    RLSimion::boukhezzarRow^  parentboukhezzarRowByboukhezzar_KP);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::KPRow^  NewKPRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveKPRow(RLSimion::KPRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class KIDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnKI_Id;
        
        private: ::System::Data::DataColumn^  columnPID_Id;
        
        private: ::System::Data::DataColumn^  columnvidal_Id;
        
        private: ::System::Data::DataColumn^  columnboukhezzar_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::KIRowChangeEventHandler^  KIRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::KIRowChangeEventHandler^  KIRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::KIRowChangeEventHandler^  KIRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::KIRowChangeEventHandler^  KIRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KIDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KIDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KIDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  KI_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PID_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  vidal_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  boukhezzar_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::KIRow^  default [::System::Int32 ] {
            RLSimion::KIRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddKIRow(RLSimion::KIRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::KIRow^  AddKIRow(System::Decimal decimal, RLSimion::PIDRow^  parentPIDRowByPID_KI, RLSimion::vidalRow^  parentvidalRowByvidal_KI, 
                    RLSimion::boukhezzarRow^  parentboukhezzarRowByboukhezzar_KI);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::KIRow^  NewKIRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveKIRow(RLSimion::KIRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class KDDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnKD_Id;
        
        private: ::System::Data::DataColumn^  columnPID_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::KDRowChangeEventHandler^  KDRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::KDRowChangeEventHandler^  KDRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::KDRowChangeEventHandler^  KDRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::KDRowChangeEventHandler^  KDRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KDDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KDDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KDDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  KD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PID_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::KDRow^  default [::System::Int32 ] {
            RLSimion::KDRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddKDRow(RLSimion::KDRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::KDRow^  AddKDRow(System::Decimal decimal, RLSimion::PIDRow^  parentPIDRowByPID_KD);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::KDRow^  NewKDRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveKDRow(RLSimion::KDRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class LQRDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnLQR_Id;
        
        private: ::System::Data::DataColumn^  columnACTOR_Id;
        
        private: ::System::Data::DataColumn^  columnCONTROLLER_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::LQRRowChangeEventHandler^  LQRRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::LQRRowChangeEventHandler^  LQRRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::LQRRowChangeEventHandler^  LQRRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::LQRRowChangeEventHandler^  LQRRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LQRDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LQRDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LQRDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  LQR_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ACTOR_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CONTROLLER_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::LQRRow^  default [::System::Int32 ] {
            RLSimion::LQRRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddLQRRow(RLSimion::LQRRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::LQRRow^  AddLQRRow(RLSimion::ACTORRow^  parentACTORRowByACTOR_LQR, RLSimion::CONTROLLERRow^  parentCONTROLLERRowByCONTROLLER_LQR);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::LQRRow^  NewLQRRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveLQRRow(RLSimion::LQRRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _LQR_GAINDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  column_state_variable;
        
        private: ::System::Data::DataColumn^  columngain;
        
        private: ::System::Data::DataColumn^  columnLQR_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_LQR_GAINRowChangeEventHandler^  _LQR_GAINRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_LQR_GAINRowChangeEventHandler^  _LQR_GAINRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_LQR_GAINRowChangeEventHandler^  _LQR_GAINRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_LQR_GAINRowChangeEventHandler^  _LQR_GAINRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _LQR_GAINDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _LQR_GAINDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _LQR_GAINDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _state_variableColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  gainColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  LQR_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_LQR_GAINRow^  default [::System::Int32 ] {
            RLSimion::_LQR_GAINRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_LQR_GAINRow(RLSimion::_LQR_GAINRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_LQR_GAINRow^  Add_LQR_GAINRow(System::String^  _state_variable, System::Decimal gain, RLSimion::LQRRow^  _parentLQRRowByLQR_LQR_GAIN);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_LQR_GAINRow^  New_LQR_GAINRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_LQR_GAINRow(RLSimion::_LQR_GAINRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class jonkmanDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        private: ::System::Data::DataColumn^  columnACTOR_Id;
        
        private: ::System::Data::DataColumn^  columnCONTROLLER_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::jonkmanRowChangeEventHandler^  jonkmanRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::jonkmanRowChangeEventHandler^  jonkmanRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::jonkmanRowChangeEventHandler^  jonkmanRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::jonkmanRowChangeEventHandler^  jonkmanRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        jonkmanDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        jonkmanDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        jonkmanDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ACTOR_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CONTROLLER_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::jonkmanRow^  default [::System::Int32 ] {
            RLSimion::jonkmanRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddjonkmanRow(RLSimion::jonkmanRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::jonkmanRow^  AddjonkmanRow(RLSimion::ACTORRow^  parentACTORRowByACTOR_jonkman, RLSimion::CONTROLLERRow^  parentCONTROLLERRowByCONTROLLER_jonkman);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::jonkmanRow^  NewjonkmanRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovejonkmanRow(RLSimion::jonkmanRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class VS_RtGnSpDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnVS_RtGnSp_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_RtGnSpRowChangeEventHandler^  VS_RtGnSpRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_RtGnSpRowChangeEventHandler^  VS_RtGnSpRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_RtGnSpRowChangeEventHandler^  VS_RtGnSpRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_RtGnSpRowChangeEventHandler^  VS_RtGnSpRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_RtGnSpDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_RtGnSpDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_RtGnSpDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_RtGnSp_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_RtGnSpRow^  default [::System::Int32 ] {
            RLSimion::VS_RtGnSpRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddVS_RtGnSpRow(RLSimion::VS_RtGnSpRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::VS_RtGnSpRow^  AddVS_RtGnSpRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_VS_RtGnSp);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::VS_RtGnSpRow^  NewVS_RtGnSpRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveVS_RtGnSpRow(RLSimion::VS_RtGnSpRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class VS_SlPcDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnVS_SlPc_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_SlPcRowChangeEventHandler^  VS_SlPcRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_SlPcRowChangeEventHandler^  VS_SlPcRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_SlPcRowChangeEventHandler^  VS_SlPcRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_SlPcRowChangeEventHandler^  VS_SlPcRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_SlPcDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_SlPcDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_SlPcDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_SlPc_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_SlPcRow^  default [::System::Int32 ] {
            RLSimion::VS_SlPcRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddVS_SlPcRow(RLSimion::VS_SlPcRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::VS_SlPcRow^  AddVS_SlPcRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_VS_SlPc);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::VS_SlPcRow^  NewVS_SlPcRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveVS_SlPcRow(RLSimion::VS_SlPcRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class VS_Rgn2KDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnVS_Rgn2K_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_Rgn2KRowChangeEventHandler^  VS_Rgn2KRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_Rgn2KRowChangeEventHandler^  VS_Rgn2KRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_Rgn2KRowChangeEventHandler^  VS_Rgn2KRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_Rgn2KRowChangeEventHandler^  VS_Rgn2KRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn2KDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn2KDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn2KDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_Rgn2K_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_Rgn2KRow^  default [::System::Int32 ] {
            RLSimion::VS_Rgn2KRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddVS_Rgn2KRow(RLSimion::VS_Rgn2KRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::VS_Rgn2KRow^  AddVS_Rgn2KRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_VS_Rgn2K);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::VS_Rgn2KRow^  NewVS_Rgn2KRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveVS_Rgn2KRow(RLSimion::VS_Rgn2KRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class VS_Rgn2SpDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnVS_Rgn2Sp_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_Rgn2SpRowChangeEventHandler^  VS_Rgn2SpRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_Rgn2SpRowChangeEventHandler^  VS_Rgn2SpRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_Rgn2SpRowChangeEventHandler^  VS_Rgn2SpRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_Rgn2SpRowChangeEventHandler^  VS_Rgn2SpRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn2SpDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn2SpDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn2SpDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_Rgn2Sp_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_Rgn2SpRow^  default [::System::Int32 ] {
            RLSimion::VS_Rgn2SpRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddVS_Rgn2SpRow(RLSimion::VS_Rgn2SpRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::VS_Rgn2SpRow^  AddVS_Rgn2SpRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_VS_Rgn2Sp);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::VS_Rgn2SpRow^  NewVS_Rgn2SpRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveVS_Rgn2SpRow(RLSimion::VS_Rgn2SpRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class VS_CtInSpDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnVS_CtInSp_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_CtInSpRowChangeEventHandler^  VS_CtInSpRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_CtInSpRowChangeEventHandler^  VS_CtInSpRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_CtInSpRowChangeEventHandler^  VS_CtInSpRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_CtInSpRowChangeEventHandler^  VS_CtInSpRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_CtInSpDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_CtInSpDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_CtInSpDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_CtInSp_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_CtInSpRow^  default [::System::Int32 ] {
            RLSimion::VS_CtInSpRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddVS_CtInSpRow(RLSimion::VS_CtInSpRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::VS_CtInSpRow^  AddVS_CtInSpRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_VS_CtInSp);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::VS_CtInSpRow^  NewVS_CtInSpRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveVS_CtInSpRow(RLSimion::VS_CtInSpRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class VS_RtPwrDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnVS_RtPwr_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_RtPwrRowChangeEventHandler^  VS_RtPwrRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_RtPwrRowChangeEventHandler^  VS_RtPwrRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_RtPwrRowChangeEventHandler^  VS_RtPwrRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_RtPwrRowChangeEventHandler^  VS_RtPwrRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_RtPwrDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_RtPwrDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_RtPwrDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_RtPwr_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_RtPwrRow^  default [::System::Int32 ] {
            RLSimion::VS_RtPwrRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddVS_RtPwrRow(RLSimion::VS_RtPwrRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::VS_RtPwrRow^  AddVS_RtPwrRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_VS_RtPwr);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::VS_RtPwrRow^  NewVS_RtPwrRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveVS_RtPwrRow(RLSimion::VS_RtPwrRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class VS_Rgn3MPDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnVS_Rgn3MP_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_Rgn3MPRowChangeEventHandler^  VS_Rgn3MPRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_Rgn3MPRowChangeEventHandler^  VS_Rgn3MPRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_Rgn3MPRowChangeEventHandler^  VS_Rgn3MPRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::VS_Rgn3MPRowChangeEventHandler^  VS_Rgn3MPRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn3MPDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn3MPDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn3MPDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  VS_Rgn3MP_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_Rgn3MPRow^  default [::System::Int32 ] {
            RLSimion::VS_Rgn3MPRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddVS_Rgn3MPRow(RLSimion::VS_Rgn3MPRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::VS_Rgn3MPRow^  AddVS_Rgn3MPRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_VS_Rgn3MP);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::VS_Rgn3MPRow^  NewVS_Rgn3MPRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveVS_Rgn3MPRow(RLSimion::VS_Rgn3MPRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class PC_KIDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnPC_KI_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::PC_KIRowChangeEventHandler^  PC_KIRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::PC_KIRowChangeEventHandler^  PC_KIRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::PC_KIRowChangeEventHandler^  PC_KIRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::PC_KIRowChangeEventHandler^  PC_KIRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KIDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KIDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KIDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PC_KI_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::PC_KIRow^  default [::System::Int32 ] {
            RLSimion::PC_KIRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddPC_KIRow(RLSimion::PC_KIRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::PC_KIRow^  AddPC_KIRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_PC_KI);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::PC_KIRow^  NewPC_KIRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovePC_KIRow(RLSimion::PC_KIRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class PC_KKDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnPC_KK_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::PC_KKRowChangeEventHandler^  PC_KKRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::PC_KKRowChangeEventHandler^  PC_KKRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::PC_KKRowChangeEventHandler^  PC_KKRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::PC_KKRowChangeEventHandler^  PC_KKRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KKDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KKDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KKDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PC_KK_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::PC_KKRow^  default [::System::Int32 ] {
            RLSimion::PC_KKRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddPC_KKRow(RLSimion::PC_KKRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::PC_KKRow^  AddPC_KKRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_PC_KK);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::PC_KKRow^  NewPC_KKRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovePC_KKRow(RLSimion::PC_KKRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class PC_KPDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnPC_KP_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::PC_KPRowChangeEventHandler^  PC_KPRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::PC_KPRowChangeEventHandler^  PC_KPRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::PC_KPRowChangeEventHandler^  PC_KPRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::PC_KPRowChangeEventHandler^  PC_KPRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KPDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KPDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KPDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PC_KP_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::PC_KPRow^  default [::System::Int32 ] {
            RLSimion::PC_KPRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddPC_KPRow(RLSimion::PC_KPRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::PC_KPRow^  AddPC_KPRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_PC_KP);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::PC_KPRow^  NewPC_KPRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovePC_KPRow(RLSimion::PC_KPRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class PC_RefSpdDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnPC_RefSpd_Id;
        
        private: ::System::Data::DataColumn^  columnjonkman_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::PC_RefSpdRowChangeEventHandler^  PC_RefSpdRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::PC_RefSpdRowChangeEventHandler^  PC_RefSpdRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::PC_RefSpdRowChangeEventHandler^  PC_RefSpdRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::PC_RefSpdRowChangeEventHandler^  PC_RefSpdRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_RefSpdDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_RefSpdDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_RefSpdDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  PC_RefSpd_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  jonkman_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::PC_RefSpdRow^  default [::System::Int32 ] {
            RLSimion::PC_RefSpdRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddPC_RefSpdRow(RLSimion::PC_RefSpdRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::PC_RefSpdRow^  AddPC_RefSpdRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_PC_RefSpd);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::PC_RefSpdRow^  NewPC_RefSpdRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovePC_RefSpdRow(RLSimion::PC_RefSpdRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class vidalDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnvidal_Id;
        
        private: ::System::Data::DataColumn^  columnACTOR_Id;
        
        private: ::System::Data::DataColumn^  columnCONTROLLER_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::vidalRowChangeEventHandler^  vidalRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::vidalRowChangeEventHandler^  vidalRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::vidalRowChangeEventHandler^  vidalRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::vidalRowChangeEventHandler^  vidalRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        vidalDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        vidalDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        vidalDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  vidal_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ACTOR_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CONTROLLER_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::vidalRow^  default [::System::Int32 ] {
            RLSimion::vidalRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddvidalRow(RLSimion::vidalRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::vidalRow^  AddvidalRow(RLSimion::ACTORRow^  parentACTORRowByACTOR_vidal, RLSimion::CONTROLLERRow^  parentCONTROLLERRowByCONTROLLER_vidal);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::vidalRow^  NewvidalRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovevidalRow(RLSimion::vidalRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class ADataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnA_Id;
        
        private: ::System::Data::DataColumn^  columnvidal_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::ARowChangeEventHandler^  ARowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::ARowChangeEventHandler^  ARowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::ARowChangeEventHandler^  ARowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::ARowChangeEventHandler^  ARowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ADataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ADataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ADataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  A_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  vidal_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::ARow^  default [::System::Int32 ] {
            RLSimion::ARow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddARow(RLSimion::ARow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::ARow^  AddARow(System::Decimal decimal, RLSimion::vidalRow^  parentvidalRowByvidal_A);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::ARow^  NewARow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveARow(RLSimion::ARow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class K_alphaDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnK_alpha_Id;
        
        private: ::System::Data::DataColumn^  columnvidal_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::K_alphaRowChangeEventHandler^  K_alphaRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::K_alphaRowChangeEventHandler^  K_alphaRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::K_alphaRowChangeEventHandler^  K_alphaRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::K_alphaRowChangeEventHandler^  K_alphaRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        K_alphaDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        K_alphaDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        K_alphaDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  K_alpha_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  vidal_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::K_alphaRow^  default [::System::Int32 ] {
            RLSimion::K_alphaRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddK_alphaRow(RLSimion::K_alphaRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::K_alphaRow^  AddK_alphaRow(System::Decimal decimal, RLSimion::vidalRow^  parentvidalRowByvidal_K_alpha);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::K_alphaRow^  NewK_alphaRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveK_alphaRow(RLSimion::K_alphaRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class P_sDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnP_s_Id;
        
        private: ::System::Data::DataColumn^  columnvidal_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::P_sRowChangeEventHandler^  P_sRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::P_sRowChangeEventHandler^  P_sRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::P_sRowChangeEventHandler^  P_sRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::P_sRowChangeEventHandler^  P_sRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        P_sDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        P_sDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        P_sDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  P_s_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  vidal_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::P_sRow^  default [::System::Int32 ] {
            RLSimion::P_sRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddP_sRow(RLSimion::P_sRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::P_sRow^  AddP_sRow(System::Decimal decimal, RLSimion::vidalRow^  parentvidalRowByvidal_P_s);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::P_sRow^  NewP_sRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveP_sRow(RLSimion::P_sRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class boukhezzarDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnboukhezzar_Id;
        
        private: ::System::Data::DataColumn^  columnACTOR_Id;
        
        private: ::System::Data::DataColumn^  columnCONTROLLER_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::boukhezzarRowChangeEventHandler^  boukhezzarRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::boukhezzarRowChangeEventHandler^  boukhezzarRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::boukhezzarRowChangeEventHandler^  boukhezzarRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::boukhezzarRowChangeEventHandler^  boukhezzarRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        boukhezzarDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        boukhezzarDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        boukhezzarDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  boukhezzar_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  ACTOR_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CONTROLLER_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::boukhezzarRow^  default [::System::Int32 ] {
            RLSimion::boukhezzarRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddboukhezzarRow(RLSimion::boukhezzarRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::boukhezzarRow^  AddboukhezzarRow(RLSimion::ACTORRow^  parentACTORRowByACTOR_boukhezzar, RLSimion::CONTROLLERRow^  parentCONTROLLERRowByCONTROLLER_boukhezzar);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::boukhezzarRow^  NewboukhezzarRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveboukhezzarRow(RLSimion::boukhezzarRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class C_0DataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnC_0_Id;
        
        private: ::System::Data::DataColumn^  columnboukhezzar_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::C_0RowChangeEventHandler^  C_0RowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::C_0RowChangeEventHandler^  C_0RowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::C_0RowChangeEventHandler^  C_0RowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::C_0RowChangeEventHandler^  C_0RowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        C_0DataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        C_0DataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        C_0DataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  C_0_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  boukhezzar_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::C_0Row^  default [::System::Int32 ] {
            RLSimion::C_0Row^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddC_0Row(RLSimion::C_0Row^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::C_0Row^  AddC_0Row(System::Decimal decimal, RLSimion::boukhezzarRow^  parentboukhezzarRowByboukhezzar_C_0);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::C_0Row^  NewC_0Row();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveC_0Row(RLSimion::C_0Row^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class K_tDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnK_t_Id;
        
        private: ::System::Data::DataColumn^  columnboukhezzar_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::K_tRowChangeEventHandler^  K_tRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::K_tRowChangeEventHandler^  K_tRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::K_tRowChangeEventHandler^  K_tRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::K_tRowChangeEventHandler^  K_tRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        K_tDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        K_tDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        K_tDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  K_t_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  boukhezzar_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::K_tRow^  default [::System::Int32 ] {
            RLSimion::K_tRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddK_tRow(RLSimion::K_tRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::K_tRow^  AddK_tRow(System::Decimal decimal, RLSimion::boukhezzarRow^  parentboukhezzarRowByboukhezzar_K_t);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::K_tRow^  NewK_tRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveK_tRow(RLSimion::K_tRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class J_tDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnJ_t_Id;
        
        private: ::System::Data::DataColumn^  columnboukhezzar_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::J_tRowChangeEventHandler^  J_tRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::J_tRowChangeEventHandler^  J_tRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::J_tRowChangeEventHandler^  J_tRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::J_tRowChangeEventHandler^  J_tRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        J_tDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        J_tDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        J_tDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  J_t_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  boukhezzar_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::J_tRow^  default [::System::Int32 ] {
            RLSimion::J_tRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddJ_tRow(RLSimion::J_tRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::J_tRow^  AddJ_tRow(System::Decimal decimal, RLSimion::boukhezzarRow^  parentboukhezzarRowByboukhezzar_J_t);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::J_tRow^  NewJ_tRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveJ_tRow(RLSimion::J_tRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _actor_criticDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  column_actor_critic_Id;
        
        private: ::System::Data::DataColumn^  columnSIMGOD_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_actor_criticRowChangeEventHandler^  _actor_criticRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_actor_criticRowChangeEventHandler^  _actor_criticRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_actor_criticRowChangeEventHandler^  _actor_criticRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_actor_criticRowChangeEventHandler^  _actor_criticRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _actor_criticDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _actor_criticDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _actor_criticDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _actor_critic_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SIMGOD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_actor_criticRow^  default [::System::Int32 ] {
            RLSimion::_actor_criticRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_actor_criticRow(RLSimion::_actor_criticRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_actor_criticRow^  Add_actor_criticRow(RLSimion::SIMGODRow^  _parentSIMGODRowBySIMGOD_actor_critic);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_actor_criticRow^  New_actor_criticRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_actor_criticRow(RLSimion::_actor_criticRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class CRITICDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnLOAD;
        
        private: ::System::Data::DataColumn^  columnSAVE;
        
        private: ::System::Data::DataColumn^  columnCRITIC_Id;
        
        private: ::System::Data::DataColumn^  column_actor_critic_Id;
        
        private: ::System::Data::DataColumn^  column_actor_critic_controller_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::CRITICRowChangeEventHandler^  CRITICRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::CRITICRowChangeEventHandler^  CRITICRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::CRITICRowChangeEventHandler^  CRITICRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::CRITICRowChangeEventHandler^  CRITICRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        CRITICDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        CRITICDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        CRITICDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  LOADColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SAVEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CRITIC_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _actor_critic_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _actor_critic_controller_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::CRITICRow^  default [::System::Int32 ] {
            RLSimion::CRITICRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddCRITICRow(RLSimion::CRITICRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::CRITICRow^  AddCRITICRow(System::String^  LOAD, System::String^  SAVE, RLSimion::_actor_criticRow^  _parent_actor_criticRowByactor_critic_CRITIC, 
                    RLSimion::_actor_critic_controllerRow^  _parent_actor_critic_controllerRowByactor_critic_controller_CRITIC);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::CRITICRow^  NewCRITICRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveCRITICRow(RLSimion::CRITICRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _TD_LambdaDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  column_TD_Lambda_Id;
        
        private: ::System::Data::DataColumn^  columnCRITIC_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_TD_LambdaRowChangeEventHandler^  _TD_LambdaRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_TD_LambdaRowChangeEventHandler^  _TD_LambdaRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_TD_LambdaRowChangeEventHandler^  _TD_LambdaRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_TD_LambdaRowChangeEventHandler^  _TD_LambdaRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _TD_LambdaDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _TD_LambdaDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _TD_LambdaDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _TD_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CRITIC_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_TD_LambdaRow^  default [::System::Int32 ] {
            RLSimion::_TD_LambdaRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_TD_LambdaRow(RLSimion::_TD_LambdaRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_TD_LambdaRow^  Add_TD_LambdaRow(RLSimion::CRITICRow^  _parentCRITICRowByCRITIC_TD_Lambda);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_TD_LambdaRow^  New_TD_LambdaRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_TD_LambdaRow(RLSimion::_TD_LambdaRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class GAMMADataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnGAMMA_Id;
        
        private: ::System::Data::DataColumn^  column_TD_Lambda_Id;
        
        private: ::System::Data::DataColumn^  column_True_Online_TD_Lambda_Id;
        
        private: ::System::Data::DataColumn^  column_TDC_Lambda_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::GAMMARowChangeEventHandler^  GAMMARowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::GAMMARowChangeEventHandler^  GAMMARowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::GAMMARowChangeEventHandler^  GAMMARowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::GAMMARowChangeEventHandler^  GAMMARowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        GAMMADataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        GAMMADataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        GAMMADataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  GAMMA_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _TD_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _True_Online_TD_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _TDC_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::GAMMARow^  default [::System::Int32 ] {
            RLSimion::GAMMARow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddGAMMARow(RLSimion::GAMMARow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::GAMMARow^  AddGAMMARow(System::Decimal decimal, RLSimion::_TD_LambdaRow^  _parent_TD_LambdaRowByTD_Lambda_GAMMA, 
                    RLSimion::_True_Online_TD_LambdaRow^  _parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_GAMMA, RLSimion::_TDC_LambdaRow^  _parent_TDC_LambdaRowByTDC_Lambda_GAMMA);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::GAMMARow^  NewGAMMARow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveGAMMARow(RLSimion::GAMMARow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _True_Online_TD_LambdaDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  column_True_Online_TD_Lambda_Id;
        
        private: ::System::Data::DataColumn^  columnCRITIC_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_True_Online_TD_LambdaRowChangeEventHandler^  _True_Online_TD_LambdaRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_True_Online_TD_LambdaRowChangeEventHandler^  _True_Online_TD_LambdaRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_True_Online_TD_LambdaRowChangeEventHandler^  _True_Online_TD_LambdaRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_True_Online_TD_LambdaRowChangeEventHandler^  _True_Online_TD_LambdaRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _True_Online_TD_LambdaDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _True_Online_TD_LambdaDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _True_Online_TD_LambdaDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _True_Online_TD_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CRITIC_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_True_Online_TD_LambdaRow^  default [::System::Int32 ] {
            RLSimion::_True_Online_TD_LambdaRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_True_Online_TD_LambdaRow(RLSimion::_True_Online_TD_LambdaRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_True_Online_TD_LambdaRow^  Add_True_Online_TD_LambdaRow(RLSimion::CRITICRow^  _parentCRITICRowByCRITIC_True_Online_TD_Lambda);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_True_Online_TD_LambdaRow^  New_True_Online_TD_LambdaRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_True_Online_TD_LambdaRow(RLSimion::_True_Online_TD_LambdaRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _TDC_LambdaDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  column_TDC_Lambda_Id;
        
        private: ::System::Data::DataColumn^  columnCRITIC_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_TDC_LambdaRowChangeEventHandler^  _TDC_LambdaRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_TDC_LambdaRowChangeEventHandler^  _TDC_LambdaRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_TDC_LambdaRowChangeEventHandler^  _TDC_LambdaRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_TDC_LambdaRowChangeEventHandler^  _TDC_LambdaRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _TDC_LambdaDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _TDC_LambdaDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _TDC_LambdaDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _TDC_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CRITIC_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_TDC_LambdaRow^  default [::System::Int32 ] {
            RLSimion::_TDC_LambdaRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_TDC_LambdaRow(RLSimion::_TDC_LambdaRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_TDC_LambdaRow^  Add_TDC_LambdaRow(RLSimion::CRITICRow^  _parentCRITICRowByCRITIC_TDC_Lambda);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_TDC_LambdaRow^  New_TDC_LambdaRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_TDC_LambdaRow(RLSimion::_TDC_LambdaRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class BETADataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndecimal;
        
        private: ::System::Data::DataColumn^  columnBETA_Id;
        
        private: ::System::Data::DataColumn^  column_TDC_Lambda_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::BETARowChangeEventHandler^  BETARowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::BETARowChangeEventHandler^  BETARowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::BETARowChangeEventHandler^  BETARowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::BETARowChangeEventHandler^  BETARowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        BETADataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        BETADataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        BETADataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  decimalColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  BETA_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _TDC_Lambda_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::BETARow^  default [::System::Int32 ] {
            RLSimion::BETARow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddBETARow(RLSimion::BETARow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::BETARow^  AddBETARow(System::Decimal decimal, RLSimion::_TDC_LambdaRow^  _parent_TDC_LambdaRowByTDC_Lambda_BETA);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::BETARow^  NewBETARow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveBETARow(RLSimion::BETARow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class _actor_critic_controllerDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  column_actor_critic_controller_Id;
        
        private: ::System::Data::DataColumn^  columnSIMGOD_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_actor_critic_controllerRowChangeEventHandler^  _actor_critic_controllerRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_actor_critic_controllerRowChangeEventHandler^  _actor_critic_controllerRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_actor_critic_controllerRowChangeEventHandler^  _actor_critic_controllerRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::_actor_critic_controllerRowChangeEventHandler^  _actor_critic_controllerRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _actor_critic_controllerDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _actor_critic_controllerDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _actor_critic_controllerDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _actor_critic_controller_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SIMGOD_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_actor_critic_controllerRow^  default [::System::Int32 ] {
            RLSimion::_actor_critic_controllerRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Add_actor_critic_controllerRow(RLSimion::_actor_critic_controllerRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_actor_critic_controllerRow^  Add_actor_critic_controllerRow(RLSimion::SIMGODRow^  _parentSIMGODRowBySIMGOD_actor_critic_controller);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::_actor_critic_controllerRow^  New_actor_critic_controllerRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Remove_actor_critic_controllerRow(RLSimion::_actor_critic_controllerRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class CONTROLLERDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnCONTROLLER_Id;
        
        private: ::System::Data::DataColumn^  column_actor_critic_controller_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::CONTROLLERRowChangeEventHandler^  CONTROLLERRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::CONTROLLERRowChangeEventHandler^  CONTROLLERRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::CONTROLLERRowChangeEventHandler^  CONTROLLERRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event RLSimion::CONTROLLERRowChangeEventHandler^  CONTROLLERRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        CONTROLLERDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        CONTROLLERDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        CONTROLLERDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  CONTROLLER_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _actor_critic_controller_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::CONTROLLERRow^  default [::System::Int32 ] {
            RLSimion::CONTROLLERRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddCONTROLLERRow(RLSimion::CONTROLLERRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::CONTROLLERRow^  AddCONTROLLERRow(RLSimion::_actor_critic_controllerRow^  _parent_actor_critic_controllerRowByactor_critic_controller_CONTROLLER);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RLSimion::CONTROLLERRow^  NewCONTROLLERRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveCONTROLLERRow(RLSimion::CONTROLLERRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class EXPERIMENTRow : public ::System::Data::DataRow {
        
        private: RLSimion::EXPERIMENTDataTable^  tableEXPERIMENT;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        EXPERIMENTRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 NUM_EPISODES {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 EPISODE_LENGTH {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 RANDOM_SEED {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 EVAL_FREQ {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 EXPERIMENT_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::LOGRow^  >^  GetLOGRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class LOGRow : public ::System::Data::DataRow {
        
        private: RLSimion::LOGDataTable^  tableLOG;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LOGRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal FREQ {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  OUTPUT_DIR {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 FILE_PREFIX {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Boolean EVALUATION_EPISODES {
            System::Boolean get();
            System::Void set(System::Boolean value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Boolean TRAINING_EPISODES {
            System::Boolean get();
            System::Void set(System::Boolean value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Boolean EVALUATION_AVG_REWARDS {
            System::Boolean get();
            System::Void set(System::Boolean value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 EXPERIMENT_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::EXPERIMENTRow^  EXPERIMENTRow {
            RLSimion::EXPERIMENTRow^  get();
            System::Void set(RLSimion::EXPERIMENTRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsEXPERIMENT_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetEXPERIMENT_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class WORLDRow : public ::System::Data::DataRow {
        
        private: RLSimion::WORLDDataTable^  tableWORLD;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        WORLDRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal DELTA_T {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 NUM_SIMULATION_STEPS {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 WORLD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::rewardRow^  >^  GetrewardRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::_wind_turbineRow^  >^  _Getwind_turbineRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::_magnetic_levitationRow^  >^  _Getmagnetic_levitationRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::pitchRow^  >^  GetpitchRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::_underwater_vehicleRow^  >^  _Getunderwater_vehicleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class rewardRow : public ::System::Data::DataRow {
        
        private: RLSimion::rewardDataTable^  tablereward;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        rewardRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal MIN_REWARD {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal MAX_REWARD {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 reward_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 WORLD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::WORLDRow^  WORLDRow {
            RLSimion::WORLDRow^  get();
            System::Void set(RLSimion::WORLDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsWORLD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetWORLD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::_reward_componentRow^  >^  _Getreward_componentRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _reward_componentRow : public ::System::Data::DataRow {
        
        private: RLSimion::_reward_componentDataTable^  table_reward_component;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _reward_componentRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  COMPONENT_TYPE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal COMPONENT_WEIGHT {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal COMPONENT_TOLERANCE {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  CONTROL_ERROR_VARIABLE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 reward_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::rewardRow^  rewardRow {
            RLSimion::rewardRow^  get();
            System::Void set(RLSimion::rewardRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isreward_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setreward_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _wind_turbineRow : public ::System::Data::DataRow {
        
        private: RLSimion::_wind_turbineDataTable^  table_wind_turbine;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _wind_turbineRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  EVALUATION_WIND_DATA_FILE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  POWER_SET_POINT_FILE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _wind_turbine_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 WORLD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::WORLDRow^  WORLDRow {
            RLSimion::WORLDRow^  get();
            System::Void set(RLSimion::WORLDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsWORLD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetWORLD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::TRAINING_WIND_DATA_FILESRow^  >^  GetTRAINING_WIND_DATA_FILESRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class TRAINING_WIND_DATA_FILESRow : public ::System::Data::DataRow {
        
        private: RLSimion::TRAINING_WIND_DATA_FILESDataTable^  tableTRAINING_WIND_DATA_FILES;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        TRAINING_WIND_DATA_FILESRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  TRAINING_WIND_DATA_FILES_Column {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _wind_turbine_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_wind_turbineRow^  _wind_turbineRow {
            RLSimion::_wind_turbineRow^  get();
            System::Void set(RLSimion::_wind_turbineRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_wind_turbine_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_wind_turbine_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _magnetic_levitationRow : public ::System::Data::DataRow {
        
        private: RLSimion::_magnetic_levitationDataTable^  table_magnetic_levitation;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _magnetic_levitationRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  SET_POINT_FILE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 WORLD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::WORLDRow^  WORLDRow {
            RLSimion::WORLDRow^  get();
            System::Void set(RLSimion::WORLDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsWORLD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetWORLD_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class pitchRow : public ::System::Data::DataRow {
        
        private: RLSimion::pitchDataTable^  tablepitch;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        pitchRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  SET_POINT_FILE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 WORLD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::WORLDRow^  WORLDRow {
            RLSimion::WORLDRow^  get();
            System::Void set(RLSimion::WORLDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsWORLD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetWORLD_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _underwater_vehicleRow : public ::System::Data::DataRow {
        
        private: RLSimion::_underwater_vehicleDataTable^  table_underwater_vehicle;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _underwater_vehicleRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  SET_POINT_FILE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 WORLD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::WORLDRow^  WORLDRow {
            RLSimion::WORLDRow^  get();
            System::Void set(RLSimion::WORLDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsWORLD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetWORLD_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class SIMGODRow : public ::System::Data::DataRow {
        
        private: RLSimion::SIMGODDataTable^  tableSIMGOD;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        SIMGODRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 SIMGOD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::_actor_onlyRow^  >^  _Getactor_onlyRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::_actor_criticRow^  >^  _Getactor_criticRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::_actor_critic_controllerRow^  >^  _Getactor_critic_controllerRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _actor_onlyRow : public ::System::Data::DataRow {
        
        private: RLSimion::_actor_onlyDataTable^  table_actor_only;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _actor_onlyRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _actor_only_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 SIMGOD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::SIMGODRow^  SIMGODRow {
            RLSimion::SIMGODRow^  get();
            System::Void set(RLSimion::SIMGODRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsSIMGOD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetSIMGOD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::ACTORRow^  >^  GetACTORRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class ACTORRow : public ::System::Data::DataRow {
        
        private: RLSimion::ACTORDataTable^  tableACTOR;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ACTORRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 ACTOR_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _actor_only_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _actor_critic_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _actor_critic_controller_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_actor_onlyRow^  _actor_onlyRow {
            RLSimion::_actor_onlyRow^  get();
            System::Void set(RLSimion::_actor_onlyRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_actor_criticRow^  _actor_criticRow {
            RLSimion::_actor_criticRow^  get();
            System::Void set(RLSimion::_actor_criticRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_actor_critic_controllerRow^  _actor_critic_controllerRow {
            RLSimion::_actor_critic_controllerRow^  get();
            System::Void set(RLSimion::_actor_critic_controllerRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_actor_only_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_actor_only_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_actor_critic_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_actor_critic_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_actor_critic_controller_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_actor_critic_controller_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::_VFA_ActorRow^  >^  _GetVFA_ActorRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::PIDRow^  >^  GetPIDRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::LQRRow^  >^  GetLQRRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::jonkmanRow^  >^  GetjonkmanRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::vidalRow^  >^  GetvidalRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::boukhezzarRow^  >^  GetboukhezzarRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _VFA_ActorRow : public ::System::Data::DataRow {
        
        private: RLSimion::_VFA_ActorDataTable^  table_VFA_Actor;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _VFA_ActorRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  LOAD {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  SAVE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _VFA_Actor_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 ACTOR_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 CONTROLLER_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::ACTORRow^  ACTORRow {
            RLSimion::ACTORRow^  get();
            System::Void set(RLSimion::ACTORRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::CONTROLLERRow^  CONTROLLERRow {
            RLSimion::CONTROLLERRow^  get();
            System::Void set(RLSimion::CONTROLLERRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsLOADNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetLOADNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsSAVENull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetSAVENull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsACTOR_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetACTOR_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsCONTROLLER_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetCONTROLLER_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::_Single_Output_Policy_LearnerRow^  >^  _GetSingle_Output_Policy_LearnerRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _Single_Output_Policy_LearnerRow : public ::System::Data::DataRow {
        
        private: RLSimion::_Single_Output_Policy_LearnerDataTable^  table_Single_Output_Policy_Learner;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _Single_Output_Policy_LearnerRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _Single_Output_Policy_Learner_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _VFA_Actor_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_VFA_ActorRow^  _VFA_ActorRow {
            RLSimion::_VFA_ActorRow^  get();
            System::Void set(RLSimion::_VFA_ActorRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_VFA_Actor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_VFA_Actor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::CACLARow^  >^  GetCACLARows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::RegularGradientActorRow^  >^  GetRegularGradientActorRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::IncrementalNaturalActorRow^  >^  GetIncrementalNaturalActorRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class CACLARow : public ::System::Data::DataRow {
        
        private: RLSimion::CACLADataTable^  tableCACLA;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        CACLARow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  ACTION {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 CACLA_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _Single_Output_Policy_Learner_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_Single_Output_Policy_LearnerRow^  _Single_Output_Policy_LearnerRow {
            RLSimion::_Single_Output_Policy_LearnerRow^  get();
            System::Void set(RLSimion::_Single_Output_Policy_LearnerRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_Single_Output_Policy_Learner_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_Single_Output_Policy_Learner_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::ETRACESRow^  >^  GetETRACESRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::ALPHARow^  >^  GetALPHARows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::VFARow^  >^  GetVFARows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::EXPLORATION_NOISERow^  >^  GetEXPLORATION_NOISERows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class ETRACESRow : public ::System::Data::DataRow {
        
        private: RLSimion::ETRACESDataTable^  tableETRACES;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ETRACESRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 ETRACES_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 CACLA_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 RegularGradientActor_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 IncrementalNaturalActor_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _TD_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _True_Online_TD_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _TDC_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::CACLARow^  CACLARow {
            RLSimion::CACLARow^  get();
            System::Void set(RLSimion::CACLARow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::RegularGradientActorRow^  RegularGradientActorRow {
            RLSimion::RegularGradientActorRow^  get();
            System::Void set(RLSimion::RegularGradientActorRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::IncrementalNaturalActorRow^  IncrementalNaturalActorRow {
            RLSimion::IncrementalNaturalActorRow^  get();
            System::Void set(RLSimion::IncrementalNaturalActorRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_TD_LambdaRow^  _TD_LambdaRow {
            RLSimion::_TD_LambdaRow^  get();
            System::Void set(RLSimion::_TD_LambdaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_True_Online_TD_LambdaRow^  _True_Online_TD_LambdaRow {
            RLSimion::_True_Online_TD_LambdaRow^  get();
            System::Void set(RLSimion::_True_Online_TD_LambdaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_TDC_LambdaRow^  _TDC_LambdaRow {
            RLSimion::_TDC_LambdaRow^  get();
            System::Void set(RLSimion::_TDC_LambdaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsCACLA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetCACLA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsRegularGradientActor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetRegularGradientActor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsIncrementalNaturalActor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetIncrementalNaturalActor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_True_Online_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_True_Online_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_TDC_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_TDC_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::LAMBDARow^  >^  GetLAMBDARows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::THRESHOLDRow^  >^  GetTHRESHOLDRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class LAMBDARow : public ::System::Data::DataRow {
        
        private: RLSimion::LAMBDADataTable^  tableLAMBDA;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LAMBDARow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 LAMBDA_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 ETRACES_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::ETRACESRow^  ETRACESRow {
            RLSimion::ETRACESRow^  get();
            System::Void set(RLSimion::ETRACESRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsETRACES_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetETRACES_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class scheduleRow : public ::System::Data::DataRow {
        
        private: RLSimion::scheduleDataTable^  tableschedule;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        scheduleRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal INITIAL_VALUE {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal FINAL_VALUE {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal EVALUATION_EPISODE_VALUE {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  INTERPOLATION {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 LAMBDA_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 THRESHOLD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 ALPHA_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 SIGMA_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 KP_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 KI_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 KD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_RtGnSp_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_SlPc_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_Rgn2K_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_Rgn2Sp_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_CtInSp_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_RtPwr_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_Rgn3MP_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PC_KI_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PC_KK_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PC_KP_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PC_RefSpd_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 A_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 K_alpha_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 P_s_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 C_0_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 K_t_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 J_t_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 GAMMA_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 BETA_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::LAMBDARow^  LAMBDARow {
            RLSimion::LAMBDARow^  get();
            System::Void set(RLSimion::LAMBDARow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::THRESHOLDRow^  THRESHOLDRow {
            RLSimion::THRESHOLDRow^  get();
            System::Void set(RLSimion::THRESHOLDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::ALPHARow^  ALPHARow {
            RLSimion::ALPHARow^  get();
            System::Void set(RLSimion::ALPHARow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::SIGMARow^  SIGMARow {
            RLSimion::SIGMARow^  get();
            System::Void set(RLSimion::SIGMARow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::KPRow^  KPRow {
            RLSimion::KPRow^  get();
            System::Void set(RLSimion::KPRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::KIRow^  KIRow {
            RLSimion::KIRow^  get();
            System::Void set(RLSimion::KIRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::KDRow^  KDRow {
            RLSimion::KDRow^  get();
            System::Void set(RLSimion::KDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_RtGnSpRow^  VS_RtGnSpRow {
            RLSimion::VS_RtGnSpRow^  get();
            System::Void set(RLSimion::VS_RtGnSpRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_SlPcRow^  VS_SlPcRow {
            RLSimion::VS_SlPcRow^  get();
            System::Void set(RLSimion::VS_SlPcRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_Rgn2KRow^  VS_Rgn2KRow {
            RLSimion::VS_Rgn2KRow^  get();
            System::Void set(RLSimion::VS_Rgn2KRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_Rgn2SpRow^  VS_Rgn2SpRow {
            RLSimion::VS_Rgn2SpRow^  get();
            System::Void set(RLSimion::VS_Rgn2SpRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_CtInSpRow^  VS_CtInSpRow {
            RLSimion::VS_CtInSpRow^  get();
            System::Void set(RLSimion::VS_CtInSpRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_RtPwrRow^  VS_RtPwrRow {
            RLSimion::VS_RtPwrRow^  get();
            System::Void set(RLSimion::VS_RtPwrRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_Rgn3MPRow^  VS_Rgn3MPRow {
            RLSimion::VS_Rgn3MPRow^  get();
            System::Void set(RLSimion::VS_Rgn3MPRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::PC_KIRow^  PC_KIRow {
            RLSimion::PC_KIRow^  get();
            System::Void set(RLSimion::PC_KIRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::PC_KKRow^  PC_KKRow {
            RLSimion::PC_KKRow^  get();
            System::Void set(RLSimion::PC_KKRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::PC_KPRow^  PC_KPRow {
            RLSimion::PC_KPRow^  get();
            System::Void set(RLSimion::PC_KPRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::PC_RefSpdRow^  PC_RefSpdRow {
            RLSimion::PC_RefSpdRow^  get();
            System::Void set(RLSimion::PC_RefSpdRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::ARow^  ARow {
            RLSimion::ARow^  get();
            System::Void set(RLSimion::ARow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::K_alphaRow^  K_alphaRow {
            RLSimion::K_alphaRow^  get();
            System::Void set(RLSimion::K_alphaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::P_sRow^  P_sRow {
            RLSimion::P_sRow^  get();
            System::Void set(RLSimion::P_sRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::C_0Row^  C_0Row {
            RLSimion::C_0Row^  get();
            System::Void set(RLSimion::C_0Row^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::K_tRow^  K_tRow {
            RLSimion::K_tRow^  get();
            System::Void set(RLSimion::K_tRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::J_tRow^  J_tRow {
            RLSimion::J_tRow^  get();
            System::Void set(RLSimion::J_tRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::GAMMARow^  GAMMARow {
            RLSimion::GAMMARow^  get();
            System::Void set(RLSimion::GAMMARow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::BETARow^  BETARow {
            RLSimion::BETARow^  get();
            System::Void set(RLSimion::BETARow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsLAMBDA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetLAMBDA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsTHRESHOLD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetTHRESHOLD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsALPHA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetALPHA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsSIGMA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetSIGMA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsKP_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetKP_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsKI_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetKI_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsKD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetKD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsVS_RtGnSp_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetVS_RtGnSp_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsVS_SlPc_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetVS_SlPc_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsVS_Rgn2K_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetVS_Rgn2K_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsVS_Rgn2Sp_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetVS_Rgn2Sp_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsVS_CtInSp_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetVS_CtInSp_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsVS_RtPwr_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetVS_RtPwr_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsVS_Rgn3MP_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetVS_Rgn3MP_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsPC_KI_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetPC_KI_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsPC_KK_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetPC_KK_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsPC_KP_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetPC_KP_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsPC_RefSpd_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetPC_RefSpd_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsK_alpha_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetK_alpha_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsP_s_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetP_s_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsC_0_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetC_0_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsK_t_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetK_t_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsJ_t_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetJ_t_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsGAMMA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetGAMMA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsBETA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetBETA_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class THRESHOLDRow : public ::System::Data::DataRow {
        
        private: RLSimion::THRESHOLDDataTable^  tableTHRESHOLD;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        THRESHOLDRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 THRESHOLD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 ETRACES_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::ETRACESRow^  ETRACESRow {
            RLSimion::ETRACESRow^  get();
            System::Void set(RLSimion::ETRACESRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsETRACES_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetETRACES_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class ALPHARow : public ::System::Data::DataRow {
        
        private: RLSimion::ALPHADataTable^  tableALPHA;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ALPHARow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 ALPHA_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 CACLA_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 RegularGradientActor_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 IncrementalNaturalActor_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _TD_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _True_Online_TD_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _TDC_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::CACLARow^  CACLARow {
            RLSimion::CACLARow^  get();
            System::Void set(RLSimion::CACLARow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::RegularGradientActorRow^  RegularGradientActorRow {
            RLSimion::RegularGradientActorRow^  get();
            System::Void set(RLSimion::RegularGradientActorRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::IncrementalNaturalActorRow^  IncrementalNaturalActorRow {
            RLSimion::IncrementalNaturalActorRow^  get();
            System::Void set(RLSimion::IncrementalNaturalActorRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_TD_LambdaRow^  _TD_LambdaRow {
            RLSimion::_TD_LambdaRow^  get();
            System::Void set(RLSimion::_TD_LambdaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_True_Online_TD_LambdaRow^  _True_Online_TD_LambdaRow {
            RLSimion::_True_Online_TD_LambdaRow^  get();
            System::Void set(RLSimion::_True_Online_TD_LambdaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_TDC_LambdaRow^  _TDC_LambdaRow {
            RLSimion::_TDC_LambdaRow^  get();
            System::Void set(RLSimion::_TDC_LambdaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsCACLA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetCACLA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsRegularGradientActor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetRegularGradientActor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsIncrementalNaturalActor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetIncrementalNaturalActor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_True_Online_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_True_Online_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_TDC_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_TDC_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class VFARow : public ::System::Data::DataRow {
        
        private: RLSimion::VFADataTable^  tableVFA;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VFARow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VFA_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 CACLA_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 RegularGradientActor_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 IncrementalNaturalActor_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _TD_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _True_Online_TD_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _TDC_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::CACLARow^  CACLARow {
            RLSimion::CACLARow^  get();
            System::Void set(RLSimion::CACLARow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::RegularGradientActorRow^  RegularGradientActorRow {
            RLSimion::RegularGradientActorRow^  get();
            System::Void set(RLSimion::RegularGradientActorRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::IncrementalNaturalActorRow^  IncrementalNaturalActorRow {
            RLSimion::IncrementalNaturalActorRow^  get();
            System::Void set(RLSimion::IncrementalNaturalActorRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_TD_LambdaRow^  _TD_LambdaRow {
            RLSimion::_TD_LambdaRow^  get();
            System::Void set(RLSimion::_TD_LambdaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_True_Online_TD_LambdaRow^  _True_Online_TD_LambdaRow {
            RLSimion::_True_Online_TD_LambdaRow^  get();
            System::Void set(RLSimion::_True_Online_TD_LambdaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_TDC_LambdaRow^  _TDC_LambdaRow {
            RLSimion::_TDC_LambdaRow^  get();
            System::Void set(RLSimion::_TDC_LambdaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsCACLA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetCACLA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsRegularGradientActor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetRegularGradientActor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsIncrementalNaturalActor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetIncrementalNaturalActor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_True_Online_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_True_Online_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_TDC_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_TDC_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::RBF_GRIDRow^  >^  GetRBF_GRIDRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class RBF_GRIDRow : public ::System::Data::DataRow {
        
        private: RLSimion::RBF_GRIDDataTable^  tableRBF_GRID;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RBF_GRIDRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 RBF_GRID_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VFA_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VFARow^  VFARow {
            RLSimion::VFARow^  get();
            System::Void set(RLSimion::VFARow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsVFA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetVFA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::_state_grid_dimensionRow^  >^  _Getstate_grid_dimensionRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _state_grid_dimensionRow : public ::System::Data::DataRow {
        
        private: RLSimion::_state_grid_dimensionDataTable^  table_state_grid_dimension;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _state_grid_dimensionRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  VARIABLE_NAME {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 NUM_FEATURES {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  DISTRIBUTION {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 RBF_GRID_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::RBF_GRIDRow^  RBF_GRIDRow {
            RLSimion::RBF_GRIDRow^  get();
            System::Void set(RLSimion::RBF_GRIDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsRBF_GRID_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetRBF_GRID_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class EXPLORATION_NOISERow : public ::System::Data::DataRow {
        
        private: RLSimion::EXPLORATION_NOISEDataTable^  tableEXPLORATION_NOISE;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        EXPLORATION_NOISERow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 EXPLORATION_NOISE_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 CACLA_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 RegularGradientActor_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 IncrementalNaturalActor_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::CACLARow^  CACLARow {
            RLSimion::CACLARow^  get();
            System::Void set(RLSimion::CACLARow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::RegularGradientActorRow^  RegularGradientActorRow {
            RLSimion::RegularGradientActorRow^  get();
            System::Void set(RLSimion::RegularGradientActorRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::IncrementalNaturalActorRow^  IncrementalNaturalActorRow {
            RLSimion::IncrementalNaturalActorRow^  get();
            System::Void set(RLSimion::IncrementalNaturalActorRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsCACLA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetCACLA_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsRegularGradientActor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetRegularGradientActor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsIncrementalNaturalActor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetIncrementalNaturalActor_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::SIGMARow^  >^  GetSIGMARows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class SIGMARow : public ::System::Data::DataRow {
        
        private: RLSimion::SIGMADataTable^  tableSIGMA;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        SIGMARow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 SIGMA_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 EXPLORATION_NOISE_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::EXPLORATION_NOISERow^  EXPLORATION_NOISERow {
            RLSimion::EXPLORATION_NOISERow^  get();
            System::Void set(RLSimion::EXPLORATION_NOISERow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsEXPLORATION_NOISE_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetEXPLORATION_NOISE_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class RegularGradientActorRow : public ::System::Data::DataRow {
        
        private: RLSimion::RegularGradientActorDataTable^  tableRegularGradientActor;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RegularGradientActorRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  ACTION {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 RegularGradientActor_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _Single_Output_Policy_Learner_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_Single_Output_Policy_LearnerRow^  _Single_Output_Policy_LearnerRow {
            RLSimion::_Single_Output_Policy_LearnerRow^  get();
            System::Void set(RLSimion::_Single_Output_Policy_LearnerRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_Single_Output_Policy_Learner_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_Single_Output_Policy_Learner_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::ETRACESRow^  >^  GetETRACESRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::ALPHARow^  >^  GetALPHARows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::VFARow^  >^  GetVFARows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::EXPLORATION_NOISERow^  >^  GetEXPLORATION_NOISERows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class IncrementalNaturalActorRow : public ::System::Data::DataRow {
        
        private: RLSimion::IncrementalNaturalActorDataTable^  tableIncrementalNaturalActor;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        IncrementalNaturalActorRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  ACTION {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 IncrementalNaturalActor_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _Single_Output_Policy_Learner_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_Single_Output_Policy_LearnerRow^  _Single_Output_Policy_LearnerRow {
            RLSimion::_Single_Output_Policy_LearnerRow^  get();
            System::Void set(RLSimion::_Single_Output_Policy_LearnerRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_Single_Output_Policy_Learner_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_Single_Output_Policy_Learner_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::ETRACESRow^  >^  GetETRACESRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::ALPHARow^  >^  GetALPHARows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::VFARow^  >^  GetVFARows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::EXPLORATION_NOISERow^  >^  GetEXPLORATION_NOISERows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class PIDRow : public ::System::Data::DataRow {
        
        private: RLSimion::PIDDataTable^  tablePID;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PIDRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  ERROR_VARIABLE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PID_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 ACTOR_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 CONTROLLER_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::ACTORRow^  ACTORRow {
            RLSimion::ACTORRow^  get();
            System::Void set(RLSimion::ACTORRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::CONTROLLERRow^  CONTROLLERRow {
            RLSimion::CONTROLLERRow^  get();
            System::Void set(RLSimion::CONTROLLERRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsACTOR_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetACTOR_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsCONTROLLER_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetCONTROLLER_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::KPRow^  >^  GetKPRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::KIRow^  >^  GetKIRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::KDRow^  >^  GetKDRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class KPRow : public ::System::Data::DataRow {
        
        private: RLSimion::KPDataTable^  tableKP;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KPRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 KP_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PID_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 vidal_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 boukhezzar_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::PIDRow^  PIDRow {
            RLSimion::PIDRow^  get();
            System::Void set(RLSimion::PIDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::vidalRow^  vidalRow {
            RLSimion::vidalRow^  get();
            System::Void set(RLSimion::vidalRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::boukhezzarRow^  boukhezzarRow {
            RLSimion::boukhezzarRow^  get();
            System::Void set(RLSimion::boukhezzarRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsPID_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetPID_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isvidal_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setvidal_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isboukhezzar_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setboukhezzar_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class KIRow : public ::System::Data::DataRow {
        
        private: RLSimion::KIDataTable^  tableKI;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KIRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 KI_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PID_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 vidal_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 boukhezzar_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::PIDRow^  PIDRow {
            RLSimion::PIDRow^  get();
            System::Void set(RLSimion::PIDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::vidalRow^  vidalRow {
            RLSimion::vidalRow^  get();
            System::Void set(RLSimion::vidalRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::boukhezzarRow^  boukhezzarRow {
            RLSimion::boukhezzarRow^  get();
            System::Void set(RLSimion::boukhezzarRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsPID_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetPID_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isvidal_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setvidal_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isboukhezzar_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setboukhezzar_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class KDRow : public ::System::Data::DataRow {
        
        private: RLSimion::KDDataTable^  tableKD;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KDRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 KD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PID_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::PIDRow^  PIDRow {
            RLSimion::PIDRow^  get();
            System::Void set(RLSimion::PIDRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsPID_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetPID_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class LQRRow : public ::System::Data::DataRow {
        
        private: RLSimion::LQRDataTable^  tableLQR;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LQRRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 LQR_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 ACTOR_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 CONTROLLER_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::ACTORRow^  ACTORRow {
            RLSimion::ACTORRow^  get();
            System::Void set(RLSimion::ACTORRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::CONTROLLERRow^  CONTROLLERRow {
            RLSimion::CONTROLLERRow^  get();
            System::Void set(RLSimion::CONTROLLERRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsACTOR_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetACTOR_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsCONTROLLER_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetCONTROLLER_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::_LQR_GAINRow^  >^  _GetLQR_GAINRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _LQR_GAINRow : public ::System::Data::DataRow {
        
        private: RLSimion::_LQR_GAINDataTable^  table_LQR_GAIN;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _LQR_GAINRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  _state_variable {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal gain {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 LQR_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::LQRRow^  LQRRow {
            RLSimion::LQRRow^  get();
            System::Void set(RLSimion::LQRRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsLQR_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetLQR_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class jonkmanRow : public ::System::Data::DataRow {
        
        private: RLSimion::jonkmanDataTable^  tablejonkman;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        jonkmanRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 ACTOR_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 CONTROLLER_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::ACTORRow^  ACTORRow {
            RLSimion::ACTORRow^  get();
            System::Void set(RLSimion::ACTORRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::CONTROLLERRow^  CONTROLLERRow {
            RLSimion::CONTROLLERRow^  get();
            System::Void set(RLSimion::CONTROLLERRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsACTOR_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetACTOR_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsCONTROLLER_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetCONTROLLER_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::VS_RtGnSpRow^  >^  GetVS_RtGnSpRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::VS_SlPcRow^  >^  GetVS_SlPcRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::VS_Rgn2KRow^  >^  GetVS_Rgn2KRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::VS_Rgn2SpRow^  >^  GetVS_Rgn2SpRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::VS_CtInSpRow^  >^  GetVS_CtInSpRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::VS_RtPwrRow^  >^  GetVS_RtPwrRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::VS_Rgn3MPRow^  >^  GetVS_Rgn3MPRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::PC_KIRow^  >^  GetPC_KIRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::PC_KKRow^  >^  GetPC_KKRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::PC_KPRow^  >^  GetPC_KPRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::PC_RefSpdRow^  >^  GetPC_RefSpdRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class VS_RtGnSpRow : public ::System::Data::DataRow {
        
        private: RLSimion::VS_RtGnSpDataTable^  tableVS_RtGnSp;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_RtGnSpRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_RtGnSp_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::jonkmanRow^  jonkmanRow {
            RLSimion::jonkmanRow^  get();
            System::Void set(RLSimion::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class VS_SlPcRow : public ::System::Data::DataRow {
        
        private: RLSimion::VS_SlPcDataTable^  tableVS_SlPc;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_SlPcRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_SlPc_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::jonkmanRow^  jonkmanRow {
            RLSimion::jonkmanRow^  get();
            System::Void set(RLSimion::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class VS_Rgn2KRow : public ::System::Data::DataRow {
        
        private: RLSimion::VS_Rgn2KDataTable^  tableVS_Rgn2K;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn2KRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_Rgn2K_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::jonkmanRow^  jonkmanRow {
            RLSimion::jonkmanRow^  get();
            System::Void set(RLSimion::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class VS_Rgn2SpRow : public ::System::Data::DataRow {
        
        private: RLSimion::VS_Rgn2SpDataTable^  tableVS_Rgn2Sp;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn2SpRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_Rgn2Sp_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::jonkmanRow^  jonkmanRow {
            RLSimion::jonkmanRow^  get();
            System::Void set(RLSimion::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class VS_CtInSpRow : public ::System::Data::DataRow {
        
        private: RLSimion::VS_CtInSpDataTable^  tableVS_CtInSp;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_CtInSpRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_CtInSp_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::jonkmanRow^  jonkmanRow {
            RLSimion::jonkmanRow^  get();
            System::Void set(RLSimion::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class VS_RtPwrRow : public ::System::Data::DataRow {
        
        private: RLSimion::VS_RtPwrDataTable^  tableVS_RtPwr;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_RtPwrRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_RtPwr_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::jonkmanRow^  jonkmanRow {
            RLSimion::jonkmanRow^  get();
            System::Void set(RLSimion::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class VS_Rgn3MPRow : public ::System::Data::DataRow {
        
        private: RLSimion::VS_Rgn3MPDataTable^  tableVS_Rgn3MP;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn3MPRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 VS_Rgn3MP_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::jonkmanRow^  jonkmanRow {
            RLSimion::jonkmanRow^  get();
            System::Void set(RLSimion::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class PC_KIRow : public ::System::Data::DataRow {
        
        private: RLSimion::PC_KIDataTable^  tablePC_KI;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KIRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PC_KI_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::jonkmanRow^  jonkmanRow {
            RLSimion::jonkmanRow^  get();
            System::Void set(RLSimion::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class PC_KKRow : public ::System::Data::DataRow {
        
        private: RLSimion::PC_KKDataTable^  tablePC_KK;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KKRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PC_KK_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::jonkmanRow^  jonkmanRow {
            RLSimion::jonkmanRow^  get();
            System::Void set(RLSimion::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class PC_KPRow : public ::System::Data::DataRow {
        
        private: RLSimion::PC_KPDataTable^  tablePC_KP;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KPRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PC_KP_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::jonkmanRow^  jonkmanRow {
            RLSimion::jonkmanRow^  get();
            System::Void set(RLSimion::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class PC_RefSpdRow : public ::System::Data::DataRow {
        
        private: RLSimion::PC_RefSpdDataTable^  tablePC_RefSpd;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_RefSpdRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 PC_RefSpd_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 jonkman_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::jonkmanRow^  jonkmanRow {
            RLSimion::jonkmanRow^  get();
            System::Void set(RLSimion::jonkmanRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setjonkman_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class vidalRow : public ::System::Data::DataRow {
        
        private: RLSimion::vidalDataTable^  tablevidal;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        vidalRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 vidal_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 ACTOR_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 CONTROLLER_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::ACTORRow^  ACTORRow {
            RLSimion::ACTORRow^  get();
            System::Void set(RLSimion::ACTORRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::CONTROLLERRow^  CONTROLLERRow {
            RLSimion::CONTROLLERRow^  get();
            System::Void set(RLSimion::CONTROLLERRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsACTOR_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetACTOR_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsCONTROLLER_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetCONTROLLER_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::ARow^  >^  GetARows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::K_alphaRow^  >^  GetK_alphaRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::KPRow^  >^  GetKPRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::KIRow^  >^  GetKIRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::P_sRow^  >^  GetP_sRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class ARow : public ::System::Data::DataRow {
        
        private: RLSimion::ADataTable^  tableA;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ARow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 A_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 vidal_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::vidalRow^  vidalRow {
            RLSimion::vidalRow^  get();
            System::Void set(RLSimion::vidalRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isvidal_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setvidal_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class K_alphaRow : public ::System::Data::DataRow {
        
        private: RLSimion::K_alphaDataTable^  tableK_alpha;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        K_alphaRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 K_alpha_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 vidal_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::vidalRow^  vidalRow {
            RLSimion::vidalRow^  get();
            System::Void set(RLSimion::vidalRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isvidal_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setvidal_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class P_sRow : public ::System::Data::DataRow {
        
        private: RLSimion::P_sDataTable^  tableP_s;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        P_sRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 P_s_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 vidal_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::vidalRow^  vidalRow {
            RLSimion::vidalRow^  get();
            System::Void set(RLSimion::vidalRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isvidal_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setvidal_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class boukhezzarRow : public ::System::Data::DataRow {
        
        private: RLSimion::boukhezzarDataTable^  tableboukhezzar;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        boukhezzarRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 boukhezzar_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 ACTOR_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 CONTROLLER_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::ACTORRow^  ACTORRow {
            RLSimion::ACTORRow^  get();
            System::Void set(RLSimion::ACTORRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::CONTROLLERRow^  CONTROLLERRow {
            RLSimion::CONTROLLERRow^  get();
            System::Void set(RLSimion::CONTROLLERRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsACTOR_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetACTOR_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsCONTROLLER_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetCONTROLLER_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::C_0Row^  >^  GetC_0Rows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::KPRow^  >^  GetKPRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::KIRow^  >^  GetKIRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::K_tRow^  >^  GetK_tRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::J_tRow^  >^  GetJ_tRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class C_0Row : public ::System::Data::DataRow {
        
        private: RLSimion::C_0DataTable^  tableC_0;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        C_0Row(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 C_0_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 boukhezzar_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::boukhezzarRow^  boukhezzarRow {
            RLSimion::boukhezzarRow^  get();
            System::Void set(RLSimion::boukhezzarRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isboukhezzar_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setboukhezzar_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class K_tRow : public ::System::Data::DataRow {
        
        private: RLSimion::K_tDataTable^  tableK_t;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        K_tRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 K_t_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 boukhezzar_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::boukhezzarRow^  boukhezzarRow {
            RLSimion::boukhezzarRow^  get();
            System::Void set(RLSimion::boukhezzarRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isboukhezzar_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setboukhezzar_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class J_tRow : public ::System::Data::DataRow {
        
        private: RLSimion::J_tDataTable^  tableJ_t;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        J_tRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 J_t_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 boukhezzar_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::boukhezzarRow^  boukhezzarRow {
            RLSimion::boukhezzarRow^  get();
            System::Void set(RLSimion::boukhezzarRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isboukhezzar_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setboukhezzar_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _actor_criticRow : public ::System::Data::DataRow {
        
        private: RLSimion::_actor_criticDataTable^  table_actor_critic;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _actor_criticRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _actor_critic_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 SIMGOD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::SIMGODRow^  SIMGODRow {
            RLSimion::SIMGODRow^  get();
            System::Void set(RLSimion::SIMGODRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsSIMGOD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetSIMGOD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::ACTORRow^  >^  GetACTORRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::CRITICRow^  >^  GetCRITICRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class CRITICRow : public ::System::Data::DataRow {
        
        private: RLSimion::CRITICDataTable^  tableCRITIC;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        CRITICRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  LOAD {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  SAVE {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 CRITIC_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _actor_critic_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _actor_critic_controller_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_actor_criticRow^  _actor_criticRow {
            RLSimion::_actor_criticRow^  get();
            System::Void set(RLSimion::_actor_criticRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_actor_critic_controllerRow^  _actor_critic_controllerRow {
            RLSimion::_actor_critic_controllerRow^  get();
            System::Void set(RLSimion::_actor_critic_controllerRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsLOADNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetLOADNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsSAVENull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetSAVENull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_actor_critic_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_actor_critic_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_actor_critic_controller_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_actor_critic_controller_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::_TD_LambdaRow^  >^  _GetTD_LambdaRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::_True_Online_TD_LambdaRow^  >^  _GetTrue_Online_TD_LambdaRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::_TDC_LambdaRow^  >^  _GetTDC_LambdaRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _TD_LambdaRow : public ::System::Data::DataRow {
        
        private: RLSimion::_TD_LambdaDataTable^  table_TD_Lambda;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _TD_LambdaRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _TD_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 CRITIC_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::CRITICRow^  CRITICRow {
            RLSimion::CRITICRow^  get();
            System::Void set(RLSimion::CRITICRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsCRITIC_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetCRITIC_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::VFARow^  >^  GetVFARows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::ETRACESRow^  >^  GetETRACESRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::GAMMARow^  >^  GetGAMMARows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::ALPHARow^  >^  GetALPHARows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class GAMMARow : public ::System::Data::DataRow {
        
        private: RLSimion::GAMMADataTable^  tableGAMMA;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        GAMMARow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 GAMMA_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _TD_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _True_Online_TD_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _TDC_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_TD_LambdaRow^  _TD_LambdaRow {
            RLSimion::_TD_LambdaRow^  get();
            System::Void set(RLSimion::_TD_LambdaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_True_Online_TD_LambdaRow^  _True_Online_TD_LambdaRow {
            RLSimion::_True_Online_TD_LambdaRow^  get();
            System::Void set(RLSimion::_True_Online_TD_LambdaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_TDC_LambdaRow^  _TDC_LambdaRow {
            RLSimion::_TDC_LambdaRow^  get();
            System::Void set(RLSimion::_TDC_LambdaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_True_Online_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_True_Online_TD_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_TDC_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_TDC_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _True_Online_TD_LambdaRow : public ::System::Data::DataRow {
        
        private: RLSimion::_True_Online_TD_LambdaDataTable^  table_True_Online_TD_Lambda;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _True_Online_TD_LambdaRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _True_Online_TD_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 CRITIC_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::CRITICRow^  CRITICRow {
            RLSimion::CRITICRow^  get();
            System::Void set(RLSimion::CRITICRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsCRITIC_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetCRITIC_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::VFARow^  >^  GetVFARows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::ETRACESRow^  >^  GetETRACESRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::GAMMARow^  >^  GetGAMMARows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::ALPHARow^  >^  GetALPHARows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _TDC_LambdaRow : public ::System::Data::DataRow {
        
        private: RLSimion::_TDC_LambdaDataTable^  table_TDC_Lambda;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _TDC_LambdaRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _TDC_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 CRITIC_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::CRITICRow^  CRITICRow {
            RLSimion::CRITICRow^  get();
            System::Void set(RLSimion::CRITICRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsCRITIC_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetCRITIC_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::VFARow^  >^  GetVFARows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::ETRACESRow^  >^  GetETRACESRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::GAMMARow^  >^  GetGAMMARows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::ALPHARow^  >^  GetALPHARows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::BETARow^  >^  GetBETARows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class BETARow : public ::System::Data::DataRow {
        
        private: RLSimion::BETADataTable^  tableBETA;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        BETARow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Decimal decimal {
            System::Decimal get();
            System::Void set(System::Decimal value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 BETA_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _TDC_Lambda_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_TDC_LambdaRow^  _TDC_LambdaRow {
            RLSimion::_TDC_LambdaRow^  get();
            System::Void set(RLSimion::_TDC_LambdaRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_TDC_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_TDC_Lambda_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::scheduleRow^  >^  GetscheduleRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class _actor_critic_controllerRow : public ::System::Data::DataRow {
        
        private: RLSimion::_actor_critic_controllerDataTable^  table_actor_critic_controller;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _actor_critic_controllerRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _actor_critic_controller_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 SIMGOD_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::SIMGODRow^  SIMGODRow {
            RLSimion::SIMGODRow^  get();
            System::Void set(RLSimion::SIMGODRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsSIMGOD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetSIMGOD_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::ACTORRow^  >^  GetACTORRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::CRITICRow^  >^  GetCRITICRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::CONTROLLERRow^  >^  GetCONTROLLERRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class CONTROLLERRow : public ::System::Data::DataRow {
        
        private: RLSimion::CONTROLLERDataTable^  tableCONTROLLER;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        CONTROLLERRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 CONTROLLER_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 _actor_critic_controller_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_actor_critic_controllerRow^  _actor_critic_controllerRow {
            RLSimion::_actor_critic_controllerRow^  get();
            System::Void set(RLSimion::_actor_critic_controllerRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Is_actor_critic_controller_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Set_actor_critic_controller_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::_VFA_ActorRow^  >^  _GetVFA_ActorRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::PIDRow^  >^  GetPIDRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::LQRRow^  >^  GetLQRRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::jonkmanRow^  >^  GetjonkmanRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::vidalRow^  >^  GetvidalRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< RLSimion::boukhezzarRow^  >^  GetboukhezzarRows();
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class EXPERIMENTRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::EXPERIMENTRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        EXPERIMENTRowChangeEvent(RLSimion::EXPERIMENTRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::EXPERIMENTRow^  Row {
            RLSimion::EXPERIMENTRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class LOGRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::LOGRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LOGRowChangeEvent(RLSimion::LOGRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::LOGRow^  Row {
            RLSimion::LOGRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class WORLDRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::WORLDRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        WORLDRowChangeEvent(RLSimion::WORLDRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::WORLDRow^  Row {
            RLSimion::WORLDRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class rewardRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::rewardRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        rewardRowChangeEvent(RLSimion::rewardRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::rewardRow^  Row {
            RLSimion::rewardRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _reward_componentRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::_reward_componentRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _reward_componentRowChangeEvent(RLSimion::_reward_componentRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_reward_componentRow^  Row {
            RLSimion::_reward_componentRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _wind_turbineRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::_wind_turbineRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _wind_turbineRowChangeEvent(RLSimion::_wind_turbineRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_wind_turbineRow^  Row {
            RLSimion::_wind_turbineRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class TRAINING_WIND_DATA_FILESRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::TRAINING_WIND_DATA_FILESRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        TRAINING_WIND_DATA_FILESRowChangeEvent(RLSimion::TRAINING_WIND_DATA_FILESRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::TRAINING_WIND_DATA_FILESRow^  Row {
            RLSimion::TRAINING_WIND_DATA_FILESRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _magnetic_levitationRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::_magnetic_levitationRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _magnetic_levitationRowChangeEvent(RLSimion::_magnetic_levitationRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_magnetic_levitationRow^  Row {
            RLSimion::_magnetic_levitationRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class pitchRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::pitchRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        pitchRowChangeEvent(RLSimion::pitchRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::pitchRow^  Row {
            RLSimion::pitchRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _underwater_vehicleRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::_underwater_vehicleRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _underwater_vehicleRowChangeEvent(RLSimion::_underwater_vehicleRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_underwater_vehicleRow^  Row {
            RLSimion::_underwater_vehicleRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class SIMGODRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::SIMGODRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        SIMGODRowChangeEvent(RLSimion::SIMGODRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::SIMGODRow^  Row {
            RLSimion::SIMGODRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _actor_onlyRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::_actor_onlyRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _actor_onlyRowChangeEvent(RLSimion::_actor_onlyRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_actor_onlyRow^  Row {
            RLSimion::_actor_onlyRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class ACTORRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::ACTORRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ACTORRowChangeEvent(RLSimion::ACTORRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::ACTORRow^  Row {
            RLSimion::ACTORRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _VFA_ActorRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::_VFA_ActorRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _VFA_ActorRowChangeEvent(RLSimion::_VFA_ActorRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_VFA_ActorRow^  Row {
            RLSimion::_VFA_ActorRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _Single_Output_Policy_LearnerRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::_Single_Output_Policy_LearnerRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _Single_Output_Policy_LearnerRowChangeEvent(RLSimion::_Single_Output_Policy_LearnerRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_Single_Output_Policy_LearnerRow^  Row {
            RLSimion::_Single_Output_Policy_LearnerRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class CACLARowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::CACLARow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        CACLARowChangeEvent(RLSimion::CACLARow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::CACLARow^  Row {
            RLSimion::CACLARow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class ETRACESRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::ETRACESRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ETRACESRowChangeEvent(RLSimion::ETRACESRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::ETRACESRow^  Row {
            RLSimion::ETRACESRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class LAMBDARowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::LAMBDARow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LAMBDARowChangeEvent(RLSimion::LAMBDARow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::LAMBDARow^  Row {
            RLSimion::LAMBDARow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class scheduleRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::scheduleRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        scheduleRowChangeEvent(RLSimion::scheduleRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::scheduleRow^  Row {
            RLSimion::scheduleRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class THRESHOLDRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::THRESHOLDRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        THRESHOLDRowChangeEvent(RLSimion::THRESHOLDRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::THRESHOLDRow^  Row {
            RLSimion::THRESHOLDRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class ALPHARowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::ALPHARow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ALPHARowChangeEvent(RLSimion::ALPHARow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::ALPHARow^  Row {
            RLSimion::ALPHARow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class VFARowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::VFARow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VFARowChangeEvent(RLSimion::VFARow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VFARow^  Row {
            RLSimion::VFARow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class RBF_GRIDRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::RBF_GRIDRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RBF_GRIDRowChangeEvent(RLSimion::RBF_GRIDRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::RBF_GRIDRow^  Row {
            RLSimion::RBF_GRIDRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _state_grid_dimensionRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::_state_grid_dimensionRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _state_grid_dimensionRowChangeEvent(RLSimion::_state_grid_dimensionRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_state_grid_dimensionRow^  Row {
            RLSimion::_state_grid_dimensionRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class EXPLORATION_NOISERowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::EXPLORATION_NOISERow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        EXPLORATION_NOISERowChangeEvent(RLSimion::EXPLORATION_NOISERow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::EXPLORATION_NOISERow^  Row {
            RLSimion::EXPLORATION_NOISERow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class SIGMARowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::SIGMARow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        SIGMARowChangeEvent(RLSimion::SIGMARow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::SIGMARow^  Row {
            RLSimion::SIGMARow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class RegularGradientActorRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::RegularGradientActorRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        RegularGradientActorRowChangeEvent(RLSimion::RegularGradientActorRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::RegularGradientActorRow^  Row {
            RLSimion::RegularGradientActorRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class IncrementalNaturalActorRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::IncrementalNaturalActorRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        IncrementalNaturalActorRowChangeEvent(RLSimion::IncrementalNaturalActorRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::IncrementalNaturalActorRow^  Row {
            RLSimion::IncrementalNaturalActorRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class PIDRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::PIDRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PIDRowChangeEvent(RLSimion::PIDRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::PIDRow^  Row {
            RLSimion::PIDRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class KPRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::KPRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KPRowChangeEvent(RLSimion::KPRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::KPRow^  Row {
            RLSimion::KPRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class KIRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::KIRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KIRowChangeEvent(RLSimion::KIRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::KIRow^  Row {
            RLSimion::KIRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class KDRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::KDRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        KDRowChangeEvent(RLSimion::KDRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::KDRow^  Row {
            RLSimion::KDRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class LQRRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::LQRRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        LQRRowChangeEvent(RLSimion::LQRRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::LQRRow^  Row {
            RLSimion::LQRRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _LQR_GAINRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::_LQR_GAINRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _LQR_GAINRowChangeEvent(RLSimion::_LQR_GAINRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_LQR_GAINRow^  Row {
            RLSimion::_LQR_GAINRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class jonkmanRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::jonkmanRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        jonkmanRowChangeEvent(RLSimion::jonkmanRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::jonkmanRow^  Row {
            RLSimion::jonkmanRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class VS_RtGnSpRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::VS_RtGnSpRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_RtGnSpRowChangeEvent(RLSimion::VS_RtGnSpRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_RtGnSpRow^  Row {
            RLSimion::VS_RtGnSpRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class VS_SlPcRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::VS_SlPcRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_SlPcRowChangeEvent(RLSimion::VS_SlPcRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_SlPcRow^  Row {
            RLSimion::VS_SlPcRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class VS_Rgn2KRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::VS_Rgn2KRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn2KRowChangeEvent(RLSimion::VS_Rgn2KRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_Rgn2KRow^  Row {
            RLSimion::VS_Rgn2KRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class VS_Rgn2SpRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::VS_Rgn2SpRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn2SpRowChangeEvent(RLSimion::VS_Rgn2SpRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_Rgn2SpRow^  Row {
            RLSimion::VS_Rgn2SpRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class VS_CtInSpRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::VS_CtInSpRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_CtInSpRowChangeEvent(RLSimion::VS_CtInSpRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_CtInSpRow^  Row {
            RLSimion::VS_CtInSpRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class VS_RtPwrRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::VS_RtPwrRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_RtPwrRowChangeEvent(RLSimion::VS_RtPwrRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_RtPwrRow^  Row {
            RLSimion::VS_RtPwrRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class VS_Rgn3MPRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::VS_Rgn3MPRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        VS_Rgn3MPRowChangeEvent(RLSimion::VS_Rgn3MPRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::VS_Rgn3MPRow^  Row {
            RLSimion::VS_Rgn3MPRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class PC_KIRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::PC_KIRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KIRowChangeEvent(RLSimion::PC_KIRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::PC_KIRow^  Row {
            RLSimion::PC_KIRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class PC_KKRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::PC_KKRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KKRowChangeEvent(RLSimion::PC_KKRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::PC_KKRow^  Row {
            RLSimion::PC_KKRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class PC_KPRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::PC_KPRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_KPRowChangeEvent(RLSimion::PC_KPRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::PC_KPRow^  Row {
            RLSimion::PC_KPRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class PC_RefSpdRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::PC_RefSpdRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PC_RefSpdRowChangeEvent(RLSimion::PC_RefSpdRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::PC_RefSpdRow^  Row {
            RLSimion::PC_RefSpdRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class vidalRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::vidalRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        vidalRowChangeEvent(RLSimion::vidalRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::vidalRow^  Row {
            RLSimion::vidalRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class ARowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::ARow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ARowChangeEvent(RLSimion::ARow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::ARow^  Row {
            RLSimion::ARow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class K_alphaRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::K_alphaRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        K_alphaRowChangeEvent(RLSimion::K_alphaRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::K_alphaRow^  Row {
            RLSimion::K_alphaRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class P_sRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::P_sRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        P_sRowChangeEvent(RLSimion::P_sRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::P_sRow^  Row {
            RLSimion::P_sRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class boukhezzarRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::boukhezzarRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        boukhezzarRowChangeEvent(RLSimion::boukhezzarRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::boukhezzarRow^  Row {
            RLSimion::boukhezzarRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class C_0RowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::C_0Row^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        C_0RowChangeEvent(RLSimion::C_0Row^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::C_0Row^  Row {
            RLSimion::C_0Row^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class K_tRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::K_tRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        K_tRowChangeEvent(RLSimion::K_tRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::K_tRow^  Row {
            RLSimion::K_tRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class J_tRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::J_tRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        J_tRowChangeEvent(RLSimion::J_tRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::J_tRow^  Row {
            RLSimion::J_tRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _actor_criticRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::_actor_criticRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _actor_criticRowChangeEvent(RLSimion::_actor_criticRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_actor_criticRow^  Row {
            RLSimion::_actor_criticRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class CRITICRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::CRITICRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        CRITICRowChangeEvent(RLSimion::CRITICRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::CRITICRow^  Row {
            RLSimion::CRITICRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _TD_LambdaRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::_TD_LambdaRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _TD_LambdaRowChangeEvent(RLSimion::_TD_LambdaRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_TD_LambdaRow^  Row {
            RLSimion::_TD_LambdaRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class GAMMARowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::GAMMARow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        GAMMARowChangeEvent(RLSimion::GAMMARow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::GAMMARow^  Row {
            RLSimion::GAMMARow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _True_Online_TD_LambdaRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::_True_Online_TD_LambdaRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _True_Online_TD_LambdaRowChangeEvent(RLSimion::_True_Online_TD_LambdaRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_True_Online_TD_LambdaRow^  Row {
            RLSimion::_True_Online_TD_LambdaRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _TDC_LambdaRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::_TDC_LambdaRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _TDC_LambdaRowChangeEvent(RLSimion::_TDC_LambdaRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_TDC_LambdaRow^  Row {
            RLSimion::_TDC_LambdaRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class BETARowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::BETARow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        BETARowChangeEvent(RLSimion::BETARow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::BETARow^  Row {
            RLSimion::BETARow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class _actor_critic_controllerRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::_actor_critic_controllerRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        _actor_critic_controllerRowChangeEvent(RLSimion::_actor_critic_controllerRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::_actor_critic_controllerRow^  Row {
            RLSimion::_actor_critic_controllerRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class CONTROLLERRowChangeEvent : public ::System::EventArgs {
        
        private: RLSimion::CONTROLLERRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        CONTROLLERRowChangeEvent(RLSimion::CONTROLLERRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property RLSimion::CONTROLLERRow^  Row {
            RLSimion::CONTROLLERRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
};


inline RLSimion::RLSimion() {
    this->BeginInit();
    this->InitClass();
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &RLSimion::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    __super::Relations->CollectionChanged += schemaChangedHandler;
    this->EndInit();
}

inline RLSimion::RLSimion(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataSet(info, context, false) {
    if (this->IsBinarySerialized(info, context) == true) {
        this->InitVars(false);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &RLSimion::SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler1;
        this->Relations->CollectionChanged += schemaChangedHandler1;
        return;
    }
    ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
    if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        if (ds->Tables[L"EXPERIMENT"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::EXPERIMENTDataTable(ds->Tables[L"EXPERIMENT"])));
        }
        if (ds->Tables[L"LOG"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::LOGDataTable(ds->Tables[L"LOG"])));
        }
        if (ds->Tables[L"WORLD"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::WORLDDataTable(ds->Tables[L"WORLD"])));
        }
        if (ds->Tables[L"reward"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::rewardDataTable(ds->Tables[L"reward"])));
        }
        if (ds->Tables[L"reward-component"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_reward_componentDataTable(ds->Tables[L"reward-component"])));
        }
        if (ds->Tables[L"wind-turbine"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_wind_turbineDataTable(ds->Tables[L"wind-turbine"])));
        }
        if (ds->Tables[L"TRAINING_WIND_DATA_FILES"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::TRAINING_WIND_DATA_FILESDataTable(ds->Tables[L"TRAINING_WIND_DATA_FILES"])));
        }
        if (ds->Tables[L"magnetic-levitation"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_magnetic_levitationDataTable(ds->Tables[L"magnetic-levitation"])));
        }
        if (ds->Tables[L"pitch"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::pitchDataTable(ds->Tables[L"pitch"])));
        }
        if (ds->Tables[L"underwater-vehicle"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_underwater_vehicleDataTable(ds->Tables[L"underwater-vehicle"])));
        }
        if (ds->Tables[L"SIMGOD"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::SIMGODDataTable(ds->Tables[L"SIMGOD"])));
        }
        if (ds->Tables[L"actor-only"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_actor_onlyDataTable(ds->Tables[L"actor-only"])));
        }
        if (ds->Tables[L"ACTOR"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::ACTORDataTable(ds->Tables[L"ACTOR"])));
        }
        if (ds->Tables[L"VFA-Actor"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_VFA_ActorDataTable(ds->Tables[L"VFA-Actor"])));
        }
        if (ds->Tables[L"Single-Output-Policy-Learner"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_Single_Output_Policy_LearnerDataTable(ds->Tables[L"Single-Output-Policy-Learner"])));
        }
        if (ds->Tables[L"CACLA"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::CACLADataTable(ds->Tables[L"CACLA"])));
        }
        if (ds->Tables[L"ETRACES"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::ETRACESDataTable(ds->Tables[L"ETRACES"])));
        }
        if (ds->Tables[L"LAMBDA"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::LAMBDADataTable(ds->Tables[L"LAMBDA"])));
        }
        if (ds->Tables[L"schedule"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::scheduleDataTable(ds->Tables[L"schedule"])));
        }
        if (ds->Tables[L"THRESHOLD"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::THRESHOLDDataTable(ds->Tables[L"THRESHOLD"])));
        }
        if (ds->Tables[L"ALPHA"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::ALPHADataTable(ds->Tables[L"ALPHA"])));
        }
        if (ds->Tables[L"VFA"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::VFADataTable(ds->Tables[L"VFA"])));
        }
        if (ds->Tables[L"RBF_GRID"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::RBF_GRIDDataTable(ds->Tables[L"RBF_GRID"])));
        }
        if (ds->Tables[L"state-grid-dimension"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_state_grid_dimensionDataTable(ds->Tables[L"state-grid-dimension"])));
        }
        if (ds->Tables[L"EXPLORATION_NOISE"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::EXPLORATION_NOISEDataTable(ds->Tables[L"EXPLORATION_NOISE"])));
        }
        if (ds->Tables[L"SIGMA"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::SIGMADataTable(ds->Tables[L"SIGMA"])));
        }
        if (ds->Tables[L"RegularGradientActor"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::RegularGradientActorDataTable(ds->Tables[L"RegularGradientActor"])));
        }
        if (ds->Tables[L"IncrementalNaturalActor"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::IncrementalNaturalActorDataTable(ds->Tables[L"IncrementalNaturalActor"])));
        }
        if (ds->Tables[L"PID"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::PIDDataTable(ds->Tables[L"PID"])));
        }
        if (ds->Tables[L"KP"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::KPDataTable(ds->Tables[L"KP"])));
        }
        if (ds->Tables[L"KI"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::KIDataTable(ds->Tables[L"KI"])));
        }
        if (ds->Tables[L"KD"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::KDDataTable(ds->Tables[L"KD"])));
        }
        if (ds->Tables[L"LQR"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::LQRDataTable(ds->Tables[L"LQR"])));
        }
        if (ds->Tables[L"LQR-GAIN"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_LQR_GAINDataTable(ds->Tables[L"LQR-GAIN"])));
        }
        if (ds->Tables[L"jonkman"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::jonkmanDataTable(ds->Tables[L"jonkman"])));
        }
        if (ds->Tables[L"VS_RtGnSp"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::VS_RtGnSpDataTable(ds->Tables[L"VS_RtGnSp"])));
        }
        if (ds->Tables[L"VS_SlPc"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::VS_SlPcDataTable(ds->Tables[L"VS_SlPc"])));
        }
        if (ds->Tables[L"VS_Rgn2K"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::VS_Rgn2KDataTable(ds->Tables[L"VS_Rgn2K"])));
        }
        if (ds->Tables[L"VS_Rgn2Sp"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::VS_Rgn2SpDataTable(ds->Tables[L"VS_Rgn2Sp"])));
        }
        if (ds->Tables[L"VS_CtInSp"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::VS_CtInSpDataTable(ds->Tables[L"VS_CtInSp"])));
        }
        if (ds->Tables[L"VS_RtPwr"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::VS_RtPwrDataTable(ds->Tables[L"VS_RtPwr"])));
        }
        if (ds->Tables[L"VS_Rgn3MP"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::VS_Rgn3MPDataTable(ds->Tables[L"VS_Rgn3MP"])));
        }
        if (ds->Tables[L"PC_KI"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::PC_KIDataTable(ds->Tables[L"PC_KI"])));
        }
        if (ds->Tables[L"PC_KK"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::PC_KKDataTable(ds->Tables[L"PC_KK"])));
        }
        if (ds->Tables[L"PC_KP"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::PC_KPDataTable(ds->Tables[L"PC_KP"])));
        }
        if (ds->Tables[L"PC_RefSpd"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::PC_RefSpdDataTable(ds->Tables[L"PC_RefSpd"])));
        }
        if (ds->Tables[L"vidal"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::vidalDataTable(ds->Tables[L"vidal"])));
        }
        if (ds->Tables[L"A"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::ADataTable(ds->Tables[L"A"])));
        }
        if (ds->Tables[L"K_alpha"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::K_alphaDataTable(ds->Tables[L"K_alpha"])));
        }
        if (ds->Tables[L"P_s"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::P_sDataTable(ds->Tables[L"P_s"])));
        }
        if (ds->Tables[L"boukhezzar"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::boukhezzarDataTable(ds->Tables[L"boukhezzar"])));
        }
        if (ds->Tables[L"C_0"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::C_0DataTable(ds->Tables[L"C_0"])));
        }
        if (ds->Tables[L"K_t"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::K_tDataTable(ds->Tables[L"K_t"])));
        }
        if (ds->Tables[L"J_t"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::J_tDataTable(ds->Tables[L"J_t"])));
        }
        if (ds->Tables[L"actor-critic"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_actor_criticDataTable(ds->Tables[L"actor-critic"])));
        }
        if (ds->Tables[L"CRITIC"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::CRITICDataTable(ds->Tables[L"CRITIC"])));
        }
        if (ds->Tables[L"TD-Lambda"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_TD_LambdaDataTable(ds->Tables[L"TD-Lambda"])));
        }
        if (ds->Tables[L"GAMMA"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::GAMMADataTable(ds->Tables[L"GAMMA"])));
        }
        if (ds->Tables[L"True-Online-TD-Lambda"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_True_Online_TD_LambdaDataTable(ds->Tables[L"True-Online-TD-Lambda"])));
        }
        if (ds->Tables[L"TDC-Lambda"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_TDC_LambdaDataTable(ds->Tables[L"TDC-Lambda"])));
        }
        if (ds->Tables[L"BETA"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::BETADataTable(ds->Tables[L"BETA"])));
        }
        if (ds->Tables[L"actor-critic-controller"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_actor_critic_controllerDataTable(ds->Tables[L"actor-critic-controller"])));
        }
        if (ds->Tables[L"CONTROLLER"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::CONTROLLERDataTable(ds->Tables[L"CONTROLLER"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
    }
    this->GetSerializationData(info, context);
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &RLSimion::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    this->Relations->CollectionChanged += schemaChangedHandler;
}

inline RLSimion::EXPERIMENTDataTable^  RLSimion::EXPERIMENT::get() {
    return this->tableEXPERIMENT;
}

inline RLSimion::LOGDataTable^  RLSimion::LOG::get() {
    return this->tableLOG;
}

inline RLSimion::WORLDDataTable^  RLSimion::WORLD::get() {
    return this->tableWORLD;
}

inline RLSimion::rewardDataTable^  RLSimion::reward::get() {
    return this->tablereward;
}

inline RLSimion::_reward_componentDataTable^  RLSimion::_reward_component::get() {
    return this->table_reward_component;
}

inline RLSimion::_wind_turbineDataTable^  RLSimion::_wind_turbine::get() {
    return this->table_wind_turbine;
}

inline RLSimion::TRAINING_WIND_DATA_FILESDataTable^  RLSimion::TRAINING_WIND_DATA_FILES::get() {
    return this->tableTRAINING_WIND_DATA_FILES;
}

inline RLSimion::_magnetic_levitationDataTable^  RLSimion::_magnetic_levitation::get() {
    return this->table_magnetic_levitation;
}

inline RLSimion::pitchDataTable^  RLSimion::pitch::get() {
    return this->tablepitch;
}

inline RLSimion::_underwater_vehicleDataTable^  RLSimion::_underwater_vehicle::get() {
    return this->table_underwater_vehicle;
}

inline RLSimion::SIMGODDataTable^  RLSimion::SIMGOD::get() {
    return this->tableSIMGOD;
}

inline RLSimion::_actor_onlyDataTable^  RLSimion::_actor_only::get() {
    return this->table_actor_only;
}

inline RLSimion::ACTORDataTable^  RLSimion::ACTOR::get() {
    return this->tableACTOR;
}

inline RLSimion::_VFA_ActorDataTable^  RLSimion::_VFA_Actor::get() {
    return this->table_VFA_Actor;
}

inline RLSimion::_Single_Output_Policy_LearnerDataTable^  RLSimion::_Single_Output_Policy_Learner::get() {
    return this->table_Single_Output_Policy_Learner;
}

inline RLSimion::CACLADataTable^  RLSimion::CACLA::get() {
    return this->tableCACLA;
}

inline RLSimion::ETRACESDataTable^  RLSimion::ETRACES::get() {
    return this->tableETRACES;
}

inline RLSimion::LAMBDADataTable^  RLSimion::LAMBDA::get() {
    return this->tableLAMBDA;
}

inline RLSimion::scheduleDataTable^  RLSimion::schedule::get() {
    return this->tableschedule;
}

inline RLSimion::THRESHOLDDataTable^  RLSimion::THRESHOLD::get() {
    return this->tableTHRESHOLD;
}

inline RLSimion::ALPHADataTable^  RLSimion::ALPHA::get() {
    return this->tableALPHA;
}

inline RLSimion::VFADataTable^  RLSimion::VFA::get() {
    return this->tableVFA;
}

inline RLSimion::RBF_GRIDDataTable^  RLSimion::RBF_GRID::get() {
    return this->tableRBF_GRID;
}

inline RLSimion::_state_grid_dimensionDataTable^  RLSimion::_state_grid_dimension::get() {
    return this->table_state_grid_dimension;
}

inline RLSimion::EXPLORATION_NOISEDataTable^  RLSimion::EXPLORATION_NOISE::get() {
    return this->tableEXPLORATION_NOISE;
}

inline RLSimion::SIGMADataTable^  RLSimion::SIGMA::get() {
    return this->tableSIGMA;
}

inline RLSimion::RegularGradientActorDataTable^  RLSimion::RegularGradientActor::get() {
    return this->tableRegularGradientActor;
}

inline RLSimion::IncrementalNaturalActorDataTable^  RLSimion::IncrementalNaturalActor::get() {
    return this->tableIncrementalNaturalActor;
}

inline RLSimion::PIDDataTable^  RLSimion::PID::get() {
    return this->tablePID;
}

inline RLSimion::KPDataTable^  RLSimion::KP::get() {
    return this->tableKP;
}

inline RLSimion::KIDataTable^  RLSimion::KI::get() {
    return this->tableKI;
}

inline RLSimion::KDDataTable^  RLSimion::KD::get() {
    return this->tableKD;
}

inline RLSimion::LQRDataTable^  RLSimion::LQR::get() {
    return this->tableLQR;
}

inline RLSimion::_LQR_GAINDataTable^  RLSimion::_LQR_GAIN::get() {
    return this->table_LQR_GAIN;
}

inline RLSimion::jonkmanDataTable^  RLSimion::jonkman::get() {
    return this->tablejonkman;
}

inline RLSimion::VS_RtGnSpDataTable^  RLSimion::VS_RtGnSp::get() {
    return this->tableVS_RtGnSp;
}

inline RLSimion::VS_SlPcDataTable^  RLSimion::VS_SlPc::get() {
    return this->tableVS_SlPc;
}

inline RLSimion::VS_Rgn2KDataTable^  RLSimion::VS_Rgn2K::get() {
    return this->tableVS_Rgn2K;
}

inline RLSimion::VS_Rgn2SpDataTable^  RLSimion::VS_Rgn2Sp::get() {
    return this->tableVS_Rgn2Sp;
}

inline RLSimion::VS_CtInSpDataTable^  RLSimion::VS_CtInSp::get() {
    return this->tableVS_CtInSp;
}

inline RLSimion::VS_RtPwrDataTable^  RLSimion::VS_RtPwr::get() {
    return this->tableVS_RtPwr;
}

inline RLSimion::VS_Rgn3MPDataTable^  RLSimion::VS_Rgn3MP::get() {
    return this->tableVS_Rgn3MP;
}

inline RLSimion::PC_KIDataTable^  RLSimion::PC_KI::get() {
    return this->tablePC_KI;
}

inline RLSimion::PC_KKDataTable^  RLSimion::PC_KK::get() {
    return this->tablePC_KK;
}

inline RLSimion::PC_KPDataTable^  RLSimion::PC_KP::get() {
    return this->tablePC_KP;
}

inline RLSimion::PC_RefSpdDataTable^  RLSimion::PC_RefSpd::get() {
    return this->tablePC_RefSpd;
}

inline RLSimion::vidalDataTable^  RLSimion::vidal::get() {
    return this->tablevidal;
}

inline RLSimion::ADataTable^  RLSimion::A::get() {
    return this->tableA;
}

inline RLSimion::K_alphaDataTable^  RLSimion::K_alpha::get() {
    return this->tableK_alpha;
}

inline RLSimion::P_sDataTable^  RLSimion::P_s::get() {
    return this->tableP_s;
}

inline RLSimion::boukhezzarDataTable^  RLSimion::boukhezzar::get() {
    return this->tableboukhezzar;
}

inline RLSimion::C_0DataTable^  RLSimion::C_0::get() {
    return this->tableC_0;
}

inline RLSimion::K_tDataTable^  RLSimion::K_t::get() {
    return this->tableK_t;
}

inline RLSimion::J_tDataTable^  RLSimion::J_t::get() {
    return this->tableJ_t;
}

inline RLSimion::_actor_criticDataTable^  RLSimion::_actor_critic::get() {
    return this->table_actor_critic;
}

inline RLSimion::CRITICDataTable^  RLSimion::CRITIC::get() {
    return this->tableCRITIC;
}

inline RLSimion::_TD_LambdaDataTable^  RLSimion::_TD_Lambda::get() {
    return this->table_TD_Lambda;
}

inline RLSimion::GAMMADataTable^  RLSimion::GAMMA::get() {
    return this->tableGAMMA;
}

inline RLSimion::_True_Online_TD_LambdaDataTable^  RLSimion::_True_Online_TD_Lambda::get() {
    return this->table_True_Online_TD_Lambda;
}

inline RLSimion::_TDC_LambdaDataTable^  RLSimion::_TDC_Lambda::get() {
    return this->table_TDC_Lambda;
}

inline RLSimion::BETADataTable^  RLSimion::BETA::get() {
    return this->tableBETA;
}

inline RLSimion::_actor_critic_controllerDataTable^  RLSimion::_actor_critic_controller::get() {
    return this->table_actor_critic_controller;
}

inline RLSimion::CONTROLLERDataTable^  RLSimion::CONTROLLER::get() {
    return this->tableCONTROLLER;
}

inline ::System::Data::SchemaSerializationMode RLSimion::SchemaSerializationMode::get() {
    return this->_schemaSerializationMode;
}
inline System::Void RLSimion::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
    this->_schemaSerializationMode = __identifier(value);
}

inline ::System::Data::DataTableCollection^  RLSimion::Tables::get() {
    return __super::Tables;
}

inline ::System::Data::DataRelationCollection^  RLSimion::Relations::get() {
    return __super::Relations;
}

inline ::System::Void RLSimion::InitializeDerivedDataSet() {
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline ::System::Data::DataSet^  RLSimion::Clone() {
    RLSimion^  cln = (cli::safe_cast<RLSimion^  >(__super::Clone()));
    cln->InitVars();
    cln->SchemaSerializationMode = this->SchemaSerializationMode;
    return cln;
}

inline ::System::Boolean RLSimion::ShouldSerializeTables() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeRelations() {
    return false;
}

inline ::System::Void RLSimion::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
    if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        this->Reset();
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXml(reader);
        if (ds->Tables[L"EXPERIMENT"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::EXPERIMENTDataTable(ds->Tables[L"EXPERIMENT"])));
        }
        if (ds->Tables[L"LOG"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::LOGDataTable(ds->Tables[L"LOG"])));
        }
        if (ds->Tables[L"WORLD"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::WORLDDataTable(ds->Tables[L"WORLD"])));
        }
        if (ds->Tables[L"reward"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::rewardDataTable(ds->Tables[L"reward"])));
        }
        if (ds->Tables[L"reward-component"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_reward_componentDataTable(ds->Tables[L"reward-component"])));
        }
        if (ds->Tables[L"wind-turbine"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_wind_turbineDataTable(ds->Tables[L"wind-turbine"])));
        }
        if (ds->Tables[L"TRAINING_WIND_DATA_FILES"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::TRAINING_WIND_DATA_FILESDataTable(ds->Tables[L"TRAINING_WIND_DATA_FILES"])));
        }
        if (ds->Tables[L"magnetic-levitation"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_magnetic_levitationDataTable(ds->Tables[L"magnetic-levitation"])));
        }
        if (ds->Tables[L"pitch"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::pitchDataTable(ds->Tables[L"pitch"])));
        }
        if (ds->Tables[L"underwater-vehicle"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_underwater_vehicleDataTable(ds->Tables[L"underwater-vehicle"])));
        }
        if (ds->Tables[L"SIMGOD"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::SIMGODDataTable(ds->Tables[L"SIMGOD"])));
        }
        if (ds->Tables[L"actor-only"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_actor_onlyDataTable(ds->Tables[L"actor-only"])));
        }
        if (ds->Tables[L"ACTOR"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::ACTORDataTable(ds->Tables[L"ACTOR"])));
        }
        if (ds->Tables[L"VFA-Actor"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_VFA_ActorDataTable(ds->Tables[L"VFA-Actor"])));
        }
        if (ds->Tables[L"Single-Output-Policy-Learner"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_Single_Output_Policy_LearnerDataTable(ds->Tables[L"Single-Output-Policy-Learner"])));
        }
        if (ds->Tables[L"CACLA"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::CACLADataTable(ds->Tables[L"CACLA"])));
        }
        if (ds->Tables[L"ETRACES"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::ETRACESDataTable(ds->Tables[L"ETRACES"])));
        }
        if (ds->Tables[L"LAMBDA"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::LAMBDADataTable(ds->Tables[L"LAMBDA"])));
        }
        if (ds->Tables[L"schedule"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::scheduleDataTable(ds->Tables[L"schedule"])));
        }
        if (ds->Tables[L"THRESHOLD"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::THRESHOLDDataTable(ds->Tables[L"THRESHOLD"])));
        }
        if (ds->Tables[L"ALPHA"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::ALPHADataTable(ds->Tables[L"ALPHA"])));
        }
        if (ds->Tables[L"VFA"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::VFADataTable(ds->Tables[L"VFA"])));
        }
        if (ds->Tables[L"RBF_GRID"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::RBF_GRIDDataTable(ds->Tables[L"RBF_GRID"])));
        }
        if (ds->Tables[L"state-grid-dimension"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_state_grid_dimensionDataTable(ds->Tables[L"state-grid-dimension"])));
        }
        if (ds->Tables[L"EXPLORATION_NOISE"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::EXPLORATION_NOISEDataTable(ds->Tables[L"EXPLORATION_NOISE"])));
        }
        if (ds->Tables[L"SIGMA"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::SIGMADataTable(ds->Tables[L"SIGMA"])));
        }
        if (ds->Tables[L"RegularGradientActor"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::RegularGradientActorDataTable(ds->Tables[L"RegularGradientActor"])));
        }
        if (ds->Tables[L"IncrementalNaturalActor"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::IncrementalNaturalActorDataTable(ds->Tables[L"IncrementalNaturalActor"])));
        }
        if (ds->Tables[L"PID"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::PIDDataTable(ds->Tables[L"PID"])));
        }
        if (ds->Tables[L"KP"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::KPDataTable(ds->Tables[L"KP"])));
        }
        if (ds->Tables[L"KI"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::KIDataTable(ds->Tables[L"KI"])));
        }
        if (ds->Tables[L"KD"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::KDDataTable(ds->Tables[L"KD"])));
        }
        if (ds->Tables[L"LQR"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::LQRDataTable(ds->Tables[L"LQR"])));
        }
        if (ds->Tables[L"LQR-GAIN"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_LQR_GAINDataTable(ds->Tables[L"LQR-GAIN"])));
        }
        if (ds->Tables[L"jonkman"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::jonkmanDataTable(ds->Tables[L"jonkman"])));
        }
        if (ds->Tables[L"VS_RtGnSp"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::VS_RtGnSpDataTable(ds->Tables[L"VS_RtGnSp"])));
        }
        if (ds->Tables[L"VS_SlPc"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::VS_SlPcDataTable(ds->Tables[L"VS_SlPc"])));
        }
        if (ds->Tables[L"VS_Rgn2K"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::VS_Rgn2KDataTable(ds->Tables[L"VS_Rgn2K"])));
        }
        if (ds->Tables[L"VS_Rgn2Sp"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::VS_Rgn2SpDataTable(ds->Tables[L"VS_Rgn2Sp"])));
        }
        if (ds->Tables[L"VS_CtInSp"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::VS_CtInSpDataTable(ds->Tables[L"VS_CtInSp"])));
        }
        if (ds->Tables[L"VS_RtPwr"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::VS_RtPwrDataTable(ds->Tables[L"VS_RtPwr"])));
        }
        if (ds->Tables[L"VS_Rgn3MP"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::VS_Rgn3MPDataTable(ds->Tables[L"VS_Rgn3MP"])));
        }
        if (ds->Tables[L"PC_KI"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::PC_KIDataTable(ds->Tables[L"PC_KI"])));
        }
        if (ds->Tables[L"PC_KK"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::PC_KKDataTable(ds->Tables[L"PC_KK"])));
        }
        if (ds->Tables[L"PC_KP"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::PC_KPDataTable(ds->Tables[L"PC_KP"])));
        }
        if (ds->Tables[L"PC_RefSpd"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::PC_RefSpdDataTable(ds->Tables[L"PC_RefSpd"])));
        }
        if (ds->Tables[L"vidal"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::vidalDataTable(ds->Tables[L"vidal"])));
        }
        if (ds->Tables[L"A"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::ADataTable(ds->Tables[L"A"])));
        }
        if (ds->Tables[L"K_alpha"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::K_alphaDataTable(ds->Tables[L"K_alpha"])));
        }
        if (ds->Tables[L"P_s"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::P_sDataTable(ds->Tables[L"P_s"])));
        }
        if (ds->Tables[L"boukhezzar"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::boukhezzarDataTable(ds->Tables[L"boukhezzar"])));
        }
        if (ds->Tables[L"C_0"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::C_0DataTable(ds->Tables[L"C_0"])));
        }
        if (ds->Tables[L"K_t"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::K_tDataTable(ds->Tables[L"K_t"])));
        }
        if (ds->Tables[L"J_t"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::J_tDataTable(ds->Tables[L"J_t"])));
        }
        if (ds->Tables[L"actor-critic"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_actor_criticDataTable(ds->Tables[L"actor-critic"])));
        }
        if (ds->Tables[L"CRITIC"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::CRITICDataTable(ds->Tables[L"CRITIC"])));
        }
        if (ds->Tables[L"TD-Lambda"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_TD_LambdaDataTable(ds->Tables[L"TD-Lambda"])));
        }
        if (ds->Tables[L"GAMMA"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::GAMMADataTable(ds->Tables[L"GAMMA"])));
        }
        if (ds->Tables[L"True-Online-TD-Lambda"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_True_Online_TD_LambdaDataTable(ds->Tables[L"True-Online-TD-Lambda"])));
        }
        if (ds->Tables[L"TDC-Lambda"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_TDC_LambdaDataTable(ds->Tables[L"TDC-Lambda"])));
        }
        if (ds->Tables[L"BETA"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::BETADataTable(ds->Tables[L"BETA"])));
        }
        if (ds->Tables[L"actor-critic-controller"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::_actor_critic_controllerDataTable(ds->Tables[L"actor-critic-controller"])));
        }
        if (ds->Tables[L"CONTROLLER"] != nullptr) {
            __super::Tables->Add((gcnew RLSimion::CONTROLLERDataTable(ds->Tables[L"CONTROLLER"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXml(reader);
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchema^  RLSimion::GetSchemaSerializable() {
    ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
    this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
    stream->Position = 0;
    return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
}

inline ::System::Void RLSimion::InitVars() {
    this->InitVars(true);
}

inline ::System::Void RLSimion::InitVars(::System::Boolean initTable) {
    this->tableEXPERIMENT = (cli::safe_cast<RLSimion::EXPERIMENTDataTable^  >(__super::Tables[L"EXPERIMENT"]));
    if (initTable == true) {
        if (this->tableEXPERIMENT != nullptr) {
            this->tableEXPERIMENT->InitVars();
        }
    }
    this->tableLOG = (cli::safe_cast<RLSimion::LOGDataTable^  >(__super::Tables[L"LOG"]));
    if (initTable == true) {
        if (this->tableLOG != nullptr) {
            this->tableLOG->InitVars();
        }
    }
    this->tableWORLD = (cli::safe_cast<RLSimion::WORLDDataTable^  >(__super::Tables[L"WORLD"]));
    if (initTable == true) {
        if (this->tableWORLD != nullptr) {
            this->tableWORLD->InitVars();
        }
    }
    this->tablereward = (cli::safe_cast<RLSimion::rewardDataTable^  >(__super::Tables[L"reward"]));
    if (initTable == true) {
        if (this->tablereward != nullptr) {
            this->tablereward->InitVars();
        }
    }
    this->table_reward_component = (cli::safe_cast<RLSimion::_reward_componentDataTable^  >(__super::Tables[L"reward-component"]));
    if (initTable == true) {
        if (this->table_reward_component != nullptr) {
            this->table_reward_component->InitVars();
        }
    }
    this->table_wind_turbine = (cli::safe_cast<RLSimion::_wind_turbineDataTable^  >(__super::Tables[L"wind-turbine"]));
    if (initTable == true) {
        if (this->table_wind_turbine != nullptr) {
            this->table_wind_turbine->InitVars();
        }
    }
    this->tableTRAINING_WIND_DATA_FILES = (cli::safe_cast<RLSimion::TRAINING_WIND_DATA_FILESDataTable^  >(__super::Tables[L"TRAINING_WIND_DATA_FILES"]));
    if (initTable == true) {
        if (this->tableTRAINING_WIND_DATA_FILES != nullptr) {
            this->tableTRAINING_WIND_DATA_FILES->InitVars();
        }
    }
    this->table_magnetic_levitation = (cli::safe_cast<RLSimion::_magnetic_levitationDataTable^  >(__super::Tables[L"magnetic-levitation"]));
    if (initTable == true) {
        if (this->table_magnetic_levitation != nullptr) {
            this->table_magnetic_levitation->InitVars();
        }
    }
    this->tablepitch = (cli::safe_cast<RLSimion::pitchDataTable^  >(__super::Tables[L"pitch"]));
    if (initTable == true) {
        if (this->tablepitch != nullptr) {
            this->tablepitch->InitVars();
        }
    }
    this->table_underwater_vehicle = (cli::safe_cast<RLSimion::_underwater_vehicleDataTable^  >(__super::Tables[L"underwater-vehicle"]));
    if (initTable == true) {
        if (this->table_underwater_vehicle != nullptr) {
            this->table_underwater_vehicle->InitVars();
        }
    }
    this->tableSIMGOD = (cli::safe_cast<RLSimion::SIMGODDataTable^  >(__super::Tables[L"SIMGOD"]));
    if (initTable == true) {
        if (this->tableSIMGOD != nullptr) {
            this->tableSIMGOD->InitVars();
        }
    }
    this->table_actor_only = (cli::safe_cast<RLSimion::_actor_onlyDataTable^  >(__super::Tables[L"actor-only"]));
    if (initTable == true) {
        if (this->table_actor_only != nullptr) {
            this->table_actor_only->InitVars();
        }
    }
    this->tableACTOR = (cli::safe_cast<RLSimion::ACTORDataTable^  >(__super::Tables[L"ACTOR"]));
    if (initTable == true) {
        if (this->tableACTOR != nullptr) {
            this->tableACTOR->InitVars();
        }
    }
    this->table_VFA_Actor = (cli::safe_cast<RLSimion::_VFA_ActorDataTable^  >(__super::Tables[L"VFA-Actor"]));
    if (initTable == true) {
        if (this->table_VFA_Actor != nullptr) {
            this->table_VFA_Actor->InitVars();
        }
    }
    this->table_Single_Output_Policy_Learner = (cli::safe_cast<RLSimion::_Single_Output_Policy_LearnerDataTable^  >(__super::Tables[L"Single-Output-Policy-Learner"]));
    if (initTable == true) {
        if (this->table_Single_Output_Policy_Learner != nullptr) {
            this->table_Single_Output_Policy_Learner->InitVars();
        }
    }
    this->tableCACLA = (cli::safe_cast<RLSimion::CACLADataTable^  >(__super::Tables[L"CACLA"]));
    if (initTable == true) {
        if (this->tableCACLA != nullptr) {
            this->tableCACLA->InitVars();
        }
    }
    this->tableETRACES = (cli::safe_cast<RLSimion::ETRACESDataTable^  >(__super::Tables[L"ETRACES"]));
    if (initTable == true) {
        if (this->tableETRACES != nullptr) {
            this->tableETRACES->InitVars();
        }
    }
    this->tableLAMBDA = (cli::safe_cast<RLSimion::LAMBDADataTable^  >(__super::Tables[L"LAMBDA"]));
    if (initTable == true) {
        if (this->tableLAMBDA != nullptr) {
            this->tableLAMBDA->InitVars();
        }
    }
    this->tableschedule = (cli::safe_cast<RLSimion::scheduleDataTable^  >(__super::Tables[L"schedule"]));
    if (initTable == true) {
        if (this->tableschedule != nullptr) {
            this->tableschedule->InitVars();
        }
    }
    this->tableTHRESHOLD = (cli::safe_cast<RLSimion::THRESHOLDDataTable^  >(__super::Tables[L"THRESHOLD"]));
    if (initTable == true) {
        if (this->tableTHRESHOLD != nullptr) {
            this->tableTHRESHOLD->InitVars();
        }
    }
    this->tableALPHA = (cli::safe_cast<RLSimion::ALPHADataTable^  >(__super::Tables[L"ALPHA"]));
    if (initTable == true) {
        if (this->tableALPHA != nullptr) {
            this->tableALPHA->InitVars();
        }
    }
    this->tableVFA = (cli::safe_cast<RLSimion::VFADataTable^  >(__super::Tables[L"VFA"]));
    if (initTable == true) {
        if (this->tableVFA != nullptr) {
            this->tableVFA->InitVars();
        }
    }
    this->tableRBF_GRID = (cli::safe_cast<RLSimion::RBF_GRIDDataTable^  >(__super::Tables[L"RBF_GRID"]));
    if (initTable == true) {
        if (this->tableRBF_GRID != nullptr) {
            this->tableRBF_GRID->InitVars();
        }
    }
    this->table_state_grid_dimension = (cli::safe_cast<RLSimion::_state_grid_dimensionDataTable^  >(__super::Tables[L"state-grid-dimension"]));
    if (initTable == true) {
        if (this->table_state_grid_dimension != nullptr) {
            this->table_state_grid_dimension->InitVars();
        }
    }
    this->tableEXPLORATION_NOISE = (cli::safe_cast<RLSimion::EXPLORATION_NOISEDataTable^  >(__super::Tables[L"EXPLORATION_NOISE"]));
    if (initTable == true) {
        if (this->tableEXPLORATION_NOISE != nullptr) {
            this->tableEXPLORATION_NOISE->InitVars();
        }
    }
    this->tableSIGMA = (cli::safe_cast<RLSimion::SIGMADataTable^  >(__super::Tables[L"SIGMA"]));
    if (initTable == true) {
        if (this->tableSIGMA != nullptr) {
            this->tableSIGMA->InitVars();
        }
    }
    this->tableRegularGradientActor = (cli::safe_cast<RLSimion::RegularGradientActorDataTable^  >(__super::Tables[L"RegularGradientActor"]));
    if (initTable == true) {
        if (this->tableRegularGradientActor != nullptr) {
            this->tableRegularGradientActor->InitVars();
        }
    }
    this->tableIncrementalNaturalActor = (cli::safe_cast<RLSimion::IncrementalNaturalActorDataTable^  >(__super::Tables[L"IncrementalNaturalActor"]));
    if (initTable == true) {
        if (this->tableIncrementalNaturalActor != nullptr) {
            this->tableIncrementalNaturalActor->InitVars();
        }
    }
    this->tablePID = (cli::safe_cast<RLSimion::PIDDataTable^  >(__super::Tables[L"PID"]));
    if (initTable == true) {
        if (this->tablePID != nullptr) {
            this->tablePID->InitVars();
        }
    }
    this->tableKP = (cli::safe_cast<RLSimion::KPDataTable^  >(__super::Tables[L"KP"]));
    if (initTable == true) {
        if (this->tableKP != nullptr) {
            this->tableKP->InitVars();
        }
    }
    this->tableKI = (cli::safe_cast<RLSimion::KIDataTable^  >(__super::Tables[L"KI"]));
    if (initTable == true) {
        if (this->tableKI != nullptr) {
            this->tableKI->InitVars();
        }
    }
    this->tableKD = (cli::safe_cast<RLSimion::KDDataTable^  >(__super::Tables[L"KD"]));
    if (initTable == true) {
        if (this->tableKD != nullptr) {
            this->tableKD->InitVars();
        }
    }
    this->tableLQR = (cli::safe_cast<RLSimion::LQRDataTable^  >(__super::Tables[L"LQR"]));
    if (initTable == true) {
        if (this->tableLQR != nullptr) {
            this->tableLQR->InitVars();
        }
    }
    this->table_LQR_GAIN = (cli::safe_cast<RLSimion::_LQR_GAINDataTable^  >(__super::Tables[L"LQR-GAIN"]));
    if (initTable == true) {
        if (this->table_LQR_GAIN != nullptr) {
            this->table_LQR_GAIN->InitVars();
        }
    }
    this->tablejonkman = (cli::safe_cast<RLSimion::jonkmanDataTable^  >(__super::Tables[L"jonkman"]));
    if (initTable == true) {
        if (this->tablejonkman != nullptr) {
            this->tablejonkman->InitVars();
        }
    }
    this->tableVS_RtGnSp = (cli::safe_cast<RLSimion::VS_RtGnSpDataTable^  >(__super::Tables[L"VS_RtGnSp"]));
    if (initTable == true) {
        if (this->tableVS_RtGnSp != nullptr) {
            this->tableVS_RtGnSp->InitVars();
        }
    }
    this->tableVS_SlPc = (cli::safe_cast<RLSimion::VS_SlPcDataTable^  >(__super::Tables[L"VS_SlPc"]));
    if (initTable == true) {
        if (this->tableVS_SlPc != nullptr) {
            this->tableVS_SlPc->InitVars();
        }
    }
    this->tableVS_Rgn2K = (cli::safe_cast<RLSimion::VS_Rgn2KDataTable^  >(__super::Tables[L"VS_Rgn2K"]));
    if (initTable == true) {
        if (this->tableVS_Rgn2K != nullptr) {
            this->tableVS_Rgn2K->InitVars();
        }
    }
    this->tableVS_Rgn2Sp = (cli::safe_cast<RLSimion::VS_Rgn2SpDataTable^  >(__super::Tables[L"VS_Rgn2Sp"]));
    if (initTable == true) {
        if (this->tableVS_Rgn2Sp != nullptr) {
            this->tableVS_Rgn2Sp->InitVars();
        }
    }
    this->tableVS_CtInSp = (cli::safe_cast<RLSimion::VS_CtInSpDataTable^  >(__super::Tables[L"VS_CtInSp"]));
    if (initTable == true) {
        if (this->tableVS_CtInSp != nullptr) {
            this->tableVS_CtInSp->InitVars();
        }
    }
    this->tableVS_RtPwr = (cli::safe_cast<RLSimion::VS_RtPwrDataTable^  >(__super::Tables[L"VS_RtPwr"]));
    if (initTable == true) {
        if (this->tableVS_RtPwr != nullptr) {
            this->tableVS_RtPwr->InitVars();
        }
    }
    this->tableVS_Rgn3MP = (cli::safe_cast<RLSimion::VS_Rgn3MPDataTable^  >(__super::Tables[L"VS_Rgn3MP"]));
    if (initTable == true) {
        if (this->tableVS_Rgn3MP != nullptr) {
            this->tableVS_Rgn3MP->InitVars();
        }
    }
    this->tablePC_KI = (cli::safe_cast<RLSimion::PC_KIDataTable^  >(__super::Tables[L"PC_KI"]));
    if (initTable == true) {
        if (this->tablePC_KI != nullptr) {
            this->tablePC_KI->InitVars();
        }
    }
    this->tablePC_KK = (cli::safe_cast<RLSimion::PC_KKDataTable^  >(__super::Tables[L"PC_KK"]));
    if (initTable == true) {
        if (this->tablePC_KK != nullptr) {
            this->tablePC_KK->InitVars();
        }
    }
    this->tablePC_KP = (cli::safe_cast<RLSimion::PC_KPDataTable^  >(__super::Tables[L"PC_KP"]));
    if (initTable == true) {
        if (this->tablePC_KP != nullptr) {
            this->tablePC_KP->InitVars();
        }
    }
    this->tablePC_RefSpd = (cli::safe_cast<RLSimion::PC_RefSpdDataTable^  >(__super::Tables[L"PC_RefSpd"]));
    if (initTable == true) {
        if (this->tablePC_RefSpd != nullptr) {
            this->tablePC_RefSpd->InitVars();
        }
    }
    this->tablevidal = (cli::safe_cast<RLSimion::vidalDataTable^  >(__super::Tables[L"vidal"]));
    if (initTable == true) {
        if (this->tablevidal != nullptr) {
            this->tablevidal->InitVars();
        }
    }
    this->tableA = (cli::safe_cast<RLSimion::ADataTable^  >(__super::Tables[L"A"]));
    if (initTable == true) {
        if (this->tableA != nullptr) {
            this->tableA->InitVars();
        }
    }
    this->tableK_alpha = (cli::safe_cast<RLSimion::K_alphaDataTable^  >(__super::Tables[L"K_alpha"]));
    if (initTable == true) {
        if (this->tableK_alpha != nullptr) {
            this->tableK_alpha->InitVars();
        }
    }
    this->tableP_s = (cli::safe_cast<RLSimion::P_sDataTable^  >(__super::Tables[L"P_s"]));
    if (initTable == true) {
        if (this->tableP_s != nullptr) {
            this->tableP_s->InitVars();
        }
    }
    this->tableboukhezzar = (cli::safe_cast<RLSimion::boukhezzarDataTable^  >(__super::Tables[L"boukhezzar"]));
    if (initTable == true) {
        if (this->tableboukhezzar != nullptr) {
            this->tableboukhezzar->InitVars();
        }
    }
    this->tableC_0 = (cli::safe_cast<RLSimion::C_0DataTable^  >(__super::Tables[L"C_0"]));
    if (initTable == true) {
        if (this->tableC_0 != nullptr) {
            this->tableC_0->InitVars();
        }
    }
    this->tableK_t = (cli::safe_cast<RLSimion::K_tDataTable^  >(__super::Tables[L"K_t"]));
    if (initTable == true) {
        if (this->tableK_t != nullptr) {
            this->tableK_t->InitVars();
        }
    }
    this->tableJ_t = (cli::safe_cast<RLSimion::J_tDataTable^  >(__super::Tables[L"J_t"]));
    if (initTable == true) {
        if (this->tableJ_t != nullptr) {
            this->tableJ_t->InitVars();
        }
    }
    this->table_actor_critic = (cli::safe_cast<RLSimion::_actor_criticDataTable^  >(__super::Tables[L"actor-critic"]));
    if (initTable == true) {
        if (this->table_actor_critic != nullptr) {
            this->table_actor_critic->InitVars();
        }
    }
    this->tableCRITIC = (cli::safe_cast<RLSimion::CRITICDataTable^  >(__super::Tables[L"CRITIC"]));
    if (initTable == true) {
        if (this->tableCRITIC != nullptr) {
            this->tableCRITIC->InitVars();
        }
    }
    this->table_TD_Lambda = (cli::safe_cast<RLSimion::_TD_LambdaDataTable^  >(__super::Tables[L"TD-Lambda"]));
    if (initTable == true) {
        if (this->table_TD_Lambda != nullptr) {
            this->table_TD_Lambda->InitVars();
        }
    }
    this->tableGAMMA = (cli::safe_cast<RLSimion::GAMMADataTable^  >(__super::Tables[L"GAMMA"]));
    if (initTable == true) {
        if (this->tableGAMMA != nullptr) {
            this->tableGAMMA->InitVars();
        }
    }
    this->table_True_Online_TD_Lambda = (cli::safe_cast<RLSimion::_True_Online_TD_LambdaDataTable^  >(__super::Tables[L"True-Online-TD-Lambda"]));
    if (initTable == true) {
        if (this->table_True_Online_TD_Lambda != nullptr) {
            this->table_True_Online_TD_Lambda->InitVars();
        }
    }
    this->table_TDC_Lambda = (cli::safe_cast<RLSimion::_TDC_LambdaDataTable^  >(__super::Tables[L"TDC-Lambda"]));
    if (initTable == true) {
        if (this->table_TDC_Lambda != nullptr) {
            this->table_TDC_Lambda->InitVars();
        }
    }
    this->tableBETA = (cli::safe_cast<RLSimion::BETADataTable^  >(__super::Tables[L"BETA"]));
    if (initTable == true) {
        if (this->tableBETA != nullptr) {
            this->tableBETA->InitVars();
        }
    }
    this->table_actor_critic_controller = (cli::safe_cast<RLSimion::_actor_critic_controllerDataTable^  >(__super::Tables[L"actor-critic-controller"]));
    if (initTable == true) {
        if (this->table_actor_critic_controller != nullptr) {
            this->table_actor_critic_controller->InitVars();
        }
    }
    this->tableCONTROLLER = (cli::safe_cast<RLSimion::CONTROLLERDataTable^  >(__super::Tables[L"CONTROLLER"]));
    if (initTable == true) {
        if (this->tableCONTROLLER != nullptr) {
            this->tableCONTROLLER->InitVars();
        }
    }
    this->relationEXPERIMENT_LOG = this->Relations[L"EXPERIMENT_LOG"];
    this->relationWORLD_reward = this->Relations[L"WORLD_reward"];
    this->_relationreward_reward_component = this->Relations[L"reward_reward-component"];
    this->_relationWORLD_wind_turbine = this->Relations[L"WORLD_wind-turbine"];
    this->_relationwind_turbine_TRAINING_WIND_DATA_FILES = this->Relations[L"wind-turbine_TRAINING_WIND_DATA_FILES"];
    this->_relationWORLD_magnetic_levitation = this->Relations[L"WORLD_magnetic-levitation"];
    this->relationWORLD_pitch = this->Relations[L"WORLD_pitch"];
    this->_relationWORLD_underwater_vehicle = this->Relations[L"WORLD_underwater-vehicle"];
    this->_relationSIMGOD_actor_only = this->Relations[L"SIMGOD_actor-only"];
    this->_relationactor_only_ACTOR = this->Relations[L"actor-only_ACTOR"];
    this->_relationactor_critic_ACTOR = this->Relations[L"actor-critic_ACTOR"];
    this->_relationactor_critic_controller_ACTOR = this->Relations[L"actor-critic-controller_ACTOR"];
    this->_relationACTOR_VFA_Actor = this->Relations[L"ACTOR_VFA-Actor"];
    this->_relationCONTROLLER_VFA_Actor = this->Relations[L"CONTROLLER_VFA-Actor"];
    this->_relationVFA_Actor_Single_Output_Policy_Learner = this->Relations[L"VFA-Actor_Single-Output-Policy-Learner"];
    this->_relationSingle_Output_Policy_Learner_CACLA = this->Relations[L"Single-Output-Policy-Learner_CACLA"];
    this->relationCACLA_ETRACES = this->Relations[L"CACLA_ETRACES"];
    this->relationRegularGradientActor_ETRACES = this->Relations[L"RegularGradientActor_ETRACES"];
    this->relationIncrementalNaturalActor_ETRACES = this->Relations[L"IncrementalNaturalActor_ETRACES"];
    this->_relationTD_Lambda_ETRACES = this->Relations[L"TD-Lambda_ETRACES"];
    this->_relationTrue_Online_TD_Lambda_ETRACES = this->Relations[L"True-Online-TD-Lambda_ETRACES"];
    this->_relationTDC_Lambda_ETRACES = this->Relations[L"TDC-Lambda_ETRACES"];
    this->relationETRACES_LAMBDA = this->Relations[L"ETRACES_LAMBDA"];
    this->relationLAMBDA_schedule = this->Relations[L"LAMBDA_schedule"];
    this->relationTHRESHOLD_schedule = this->Relations[L"THRESHOLD_schedule"];
    this->relationALPHA_schedule = this->Relations[L"ALPHA_schedule"];
    this->relationSIGMA_schedule = this->Relations[L"SIGMA_schedule"];
    this->relationKP_schedule = this->Relations[L"KP_schedule"];
    this->relationKI_schedule = this->Relations[L"KI_schedule"];
    this->relationKD_schedule = this->Relations[L"KD_schedule"];
    this->relationVS_RtGnSp_schedule = this->Relations[L"VS_RtGnSp_schedule"];
    this->relationVS_SlPc_schedule = this->Relations[L"VS_SlPc_schedule"];
    this->relationVS_Rgn2K_schedule = this->Relations[L"VS_Rgn2K_schedule"];
    this->relationVS_Rgn2Sp_schedule = this->Relations[L"VS_Rgn2Sp_schedule"];
    this->relationVS_CtInSp_schedule = this->Relations[L"VS_CtInSp_schedule"];
    this->relationVS_RtPwr_schedule = this->Relations[L"VS_RtPwr_schedule"];
    this->relationVS_Rgn3MP_schedule = this->Relations[L"VS_Rgn3MP_schedule"];
    this->relationPC_KI_schedule = this->Relations[L"PC_KI_schedule"];
    this->relationPC_KK_schedule = this->Relations[L"PC_KK_schedule"];
    this->relationPC_KP_schedule = this->Relations[L"PC_KP_schedule"];
    this->relationPC_RefSpd_schedule = this->Relations[L"PC_RefSpd_schedule"];
    this->relationA_schedule = this->Relations[L"A_schedule"];
    this->relationK_alpha_schedule = this->Relations[L"K_alpha_schedule"];
    this->relationP_s_schedule = this->Relations[L"P_s_schedule"];
    this->relationC_0_schedule = this->Relations[L"C_0_schedule"];
    this->relationK_t_schedule = this->Relations[L"K_t_schedule"];
    this->relationJ_t_schedule = this->Relations[L"J_t_schedule"];
    this->relationGAMMA_schedule = this->Relations[L"GAMMA_schedule"];
    this->relationBETA_schedule = this->Relations[L"BETA_schedule"];
    this->relationETRACES_THRESHOLD = this->Relations[L"ETRACES_THRESHOLD"];
    this->relationCACLA_ALPHA = this->Relations[L"CACLA_ALPHA"];
    this->relationRegularGradientActor_ALPHA = this->Relations[L"RegularGradientActor_ALPHA"];
    this->relationIncrementalNaturalActor_ALPHA = this->Relations[L"IncrementalNaturalActor_ALPHA"];
    this->_relationTD_Lambda_ALPHA = this->Relations[L"TD-Lambda_ALPHA"];
    this->_relationTrue_Online_TD_Lambda_ALPHA = this->Relations[L"True-Online-TD-Lambda_ALPHA"];
    this->_relationTDC_Lambda_ALPHA = this->Relations[L"TDC-Lambda_ALPHA"];
    this->relationCACLA_VFA = this->Relations[L"CACLA_VFA"];
    this->relationRegularGradientActor_VFA = this->Relations[L"RegularGradientActor_VFA"];
    this->relationIncrementalNaturalActor_VFA = this->Relations[L"IncrementalNaturalActor_VFA"];
    this->_relationTD_Lambda_VFA = this->Relations[L"TD-Lambda_VFA"];
    this->_relationTrue_Online_TD_Lambda_VFA = this->Relations[L"True-Online-TD-Lambda_VFA"];
    this->_relationTDC_Lambda_VFA = this->Relations[L"TDC-Lambda_VFA"];
    this->relationVFA_RBF_GRID = this->Relations[L"VFA_RBF_GRID"];
    this->_relationRBF_GRID_state_grid_dimension = this->Relations[L"RBF_GRID_state-grid-dimension"];
    this->relationCACLA_EXPLORATION_NOISE = this->Relations[L"CACLA_EXPLORATION_NOISE"];
    this->relationRegularGradientActor_EXPLORATION_NOISE = this->Relations[L"RegularGradientActor_EXPLORATION_NOISE"];
    this->relationIncrementalNaturalActor_EXPLORATION_NOISE = this->Relations[L"IncrementalNaturalActor_EXPLORATION_NOISE"];
    this->relationEXPLORATION_NOISE_SIGMA = this->Relations[L"EXPLORATION_NOISE_SIGMA"];
    this->_relationSingle_Output_Policy_Learner_RegularGradientActor = this->Relations[L"Single-Output-Policy-Learner_RegularGradientActor"];
    this->_relationSingle_Output_Policy_Learner_IncrementalNaturalActor = this->Relations[L"Single-Output-Policy-Learner_IncrementalNaturalActor"];
    this->relationACTOR_PID = this->Relations[L"ACTOR_PID"];
    this->relationCONTROLLER_PID = this->Relations[L"CONTROLLER_PID"];
    this->relationPID_KP = this->Relations[L"PID_KP"];
    this->relationvidal_KP = this->Relations[L"vidal_KP"];
    this->relationboukhezzar_KP = this->Relations[L"boukhezzar_KP"];
    this->relationPID_KI = this->Relations[L"PID_KI"];
    this->relationvidal_KI = this->Relations[L"vidal_KI"];
    this->relationboukhezzar_KI = this->Relations[L"boukhezzar_KI"];
    this->relationPID_KD = this->Relations[L"PID_KD"];
    this->relationACTOR_LQR = this->Relations[L"ACTOR_LQR"];
    this->relationCONTROLLER_LQR = this->Relations[L"CONTROLLER_LQR"];
    this->_relationLQR_LQR_GAIN = this->Relations[L"LQR_LQR-GAIN"];
    this->relationACTOR_jonkman = this->Relations[L"ACTOR_jonkman"];
    this->relationCONTROLLER_jonkman = this->Relations[L"CONTROLLER_jonkman"];
    this->relationjonkman_VS_RtGnSp = this->Relations[L"jonkman_VS_RtGnSp"];
    this->relationjonkman_VS_SlPc = this->Relations[L"jonkman_VS_SlPc"];
    this->relationjonkman_VS_Rgn2K = this->Relations[L"jonkman_VS_Rgn2K"];
    this->relationjonkman_VS_Rgn2Sp = this->Relations[L"jonkman_VS_Rgn2Sp"];
    this->relationjonkman_VS_CtInSp = this->Relations[L"jonkman_VS_CtInSp"];
    this->relationjonkman_VS_RtPwr = this->Relations[L"jonkman_VS_RtPwr"];
    this->relationjonkman_VS_Rgn3MP = this->Relations[L"jonkman_VS_Rgn3MP"];
    this->relationjonkman_PC_KI = this->Relations[L"jonkman_PC_KI"];
    this->relationjonkman_PC_KK = this->Relations[L"jonkman_PC_KK"];
    this->relationjonkman_PC_KP = this->Relations[L"jonkman_PC_KP"];
    this->relationjonkman_PC_RefSpd = this->Relations[L"jonkman_PC_RefSpd"];
    this->relationACTOR_vidal = this->Relations[L"ACTOR_vidal"];
    this->relationCONTROLLER_vidal = this->Relations[L"CONTROLLER_vidal"];
    this->relationvidal_A = this->Relations[L"vidal_A"];
    this->relationvidal_K_alpha = this->Relations[L"vidal_K_alpha"];
    this->relationvidal_P_s = this->Relations[L"vidal_P_s"];
    this->relationACTOR_boukhezzar = this->Relations[L"ACTOR_boukhezzar"];
    this->relationCONTROLLER_boukhezzar = this->Relations[L"CONTROLLER_boukhezzar"];
    this->relationboukhezzar_C_0 = this->Relations[L"boukhezzar_C_0"];
    this->relationboukhezzar_K_t = this->Relations[L"boukhezzar_K_t"];
    this->relationboukhezzar_J_t = this->Relations[L"boukhezzar_J_t"];
    this->_relationSIMGOD_actor_critic = this->Relations[L"SIMGOD_actor-critic"];
    this->_relationactor_critic_CRITIC = this->Relations[L"actor-critic_CRITIC"];
    this->_relationactor_critic_controller_CRITIC = this->Relations[L"actor-critic-controller_CRITIC"];
    this->_relationCRITIC_TD_Lambda = this->Relations[L"CRITIC_TD-Lambda"];
    this->_relationTD_Lambda_GAMMA = this->Relations[L"TD-Lambda_GAMMA"];
    this->_relationTrue_Online_TD_Lambda_GAMMA = this->Relations[L"True-Online-TD-Lambda_GAMMA"];
    this->_relationTDC_Lambda_GAMMA = this->Relations[L"TDC-Lambda_GAMMA"];
    this->_relationCRITIC_True_Online_TD_Lambda = this->Relations[L"CRITIC_True-Online-TD-Lambda"];
    this->_relationCRITIC_TDC_Lambda = this->Relations[L"CRITIC_TDC-Lambda"];
    this->_relationTDC_Lambda_BETA = this->Relations[L"TDC-Lambda_BETA"];
    this->_relationSIMGOD_actor_critic_controller = this->Relations[L"SIMGOD_actor-critic-controller"];
    this->_relationactor_critic_controller_CONTROLLER = this->Relations[L"actor-critic-controller_CONTROLLER"];
}

inline ::System::Void RLSimion::InitClass() {
    this->DataSetName = L"RLSimion";
    this->Prefix = L"";
    this->EnforceConstraints = true;
    this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
    this->tableEXPERIMENT = (gcnew RLSimion::EXPERIMENTDataTable());
    __super::Tables->Add(this->tableEXPERIMENT);
    this->tableLOG = (gcnew RLSimion::LOGDataTable());
    __super::Tables->Add(this->tableLOG);
    this->tableWORLD = (gcnew RLSimion::WORLDDataTable());
    __super::Tables->Add(this->tableWORLD);
    this->tablereward = (gcnew RLSimion::rewardDataTable());
    __super::Tables->Add(this->tablereward);
    this->table_reward_component = (gcnew RLSimion::_reward_componentDataTable());
    __super::Tables->Add(this->table_reward_component);
    this->table_wind_turbine = (gcnew RLSimion::_wind_turbineDataTable());
    __super::Tables->Add(this->table_wind_turbine);
    this->tableTRAINING_WIND_DATA_FILES = (gcnew RLSimion::TRAINING_WIND_DATA_FILESDataTable());
    __super::Tables->Add(this->tableTRAINING_WIND_DATA_FILES);
    this->table_magnetic_levitation = (gcnew RLSimion::_magnetic_levitationDataTable());
    __super::Tables->Add(this->table_magnetic_levitation);
    this->tablepitch = (gcnew RLSimion::pitchDataTable());
    __super::Tables->Add(this->tablepitch);
    this->table_underwater_vehicle = (gcnew RLSimion::_underwater_vehicleDataTable());
    __super::Tables->Add(this->table_underwater_vehicle);
    this->tableSIMGOD = (gcnew RLSimion::SIMGODDataTable());
    __super::Tables->Add(this->tableSIMGOD);
    this->table_actor_only = (gcnew RLSimion::_actor_onlyDataTable());
    __super::Tables->Add(this->table_actor_only);
    this->tableACTOR = (gcnew RLSimion::ACTORDataTable());
    __super::Tables->Add(this->tableACTOR);
    this->table_VFA_Actor = (gcnew RLSimion::_VFA_ActorDataTable());
    __super::Tables->Add(this->table_VFA_Actor);
    this->table_Single_Output_Policy_Learner = (gcnew RLSimion::_Single_Output_Policy_LearnerDataTable());
    __super::Tables->Add(this->table_Single_Output_Policy_Learner);
    this->tableCACLA = (gcnew RLSimion::CACLADataTable());
    __super::Tables->Add(this->tableCACLA);
    this->tableETRACES = (gcnew RLSimion::ETRACESDataTable());
    __super::Tables->Add(this->tableETRACES);
    this->tableLAMBDA = (gcnew RLSimion::LAMBDADataTable());
    __super::Tables->Add(this->tableLAMBDA);
    this->tableschedule = (gcnew RLSimion::scheduleDataTable());
    __super::Tables->Add(this->tableschedule);
    this->tableTHRESHOLD = (gcnew RLSimion::THRESHOLDDataTable());
    __super::Tables->Add(this->tableTHRESHOLD);
    this->tableALPHA = (gcnew RLSimion::ALPHADataTable());
    __super::Tables->Add(this->tableALPHA);
    this->tableVFA = (gcnew RLSimion::VFADataTable());
    __super::Tables->Add(this->tableVFA);
    this->tableRBF_GRID = (gcnew RLSimion::RBF_GRIDDataTable());
    __super::Tables->Add(this->tableRBF_GRID);
    this->table_state_grid_dimension = (gcnew RLSimion::_state_grid_dimensionDataTable());
    __super::Tables->Add(this->table_state_grid_dimension);
    this->tableEXPLORATION_NOISE = (gcnew RLSimion::EXPLORATION_NOISEDataTable());
    __super::Tables->Add(this->tableEXPLORATION_NOISE);
    this->tableSIGMA = (gcnew RLSimion::SIGMADataTable());
    __super::Tables->Add(this->tableSIGMA);
    this->tableRegularGradientActor = (gcnew RLSimion::RegularGradientActorDataTable());
    __super::Tables->Add(this->tableRegularGradientActor);
    this->tableIncrementalNaturalActor = (gcnew RLSimion::IncrementalNaturalActorDataTable());
    __super::Tables->Add(this->tableIncrementalNaturalActor);
    this->tablePID = (gcnew RLSimion::PIDDataTable());
    __super::Tables->Add(this->tablePID);
    this->tableKP = (gcnew RLSimion::KPDataTable());
    __super::Tables->Add(this->tableKP);
    this->tableKI = (gcnew RLSimion::KIDataTable());
    __super::Tables->Add(this->tableKI);
    this->tableKD = (gcnew RLSimion::KDDataTable());
    __super::Tables->Add(this->tableKD);
    this->tableLQR = (gcnew RLSimion::LQRDataTable());
    __super::Tables->Add(this->tableLQR);
    this->table_LQR_GAIN = (gcnew RLSimion::_LQR_GAINDataTable());
    __super::Tables->Add(this->table_LQR_GAIN);
    this->tablejonkman = (gcnew RLSimion::jonkmanDataTable());
    __super::Tables->Add(this->tablejonkman);
    this->tableVS_RtGnSp = (gcnew RLSimion::VS_RtGnSpDataTable());
    __super::Tables->Add(this->tableVS_RtGnSp);
    this->tableVS_SlPc = (gcnew RLSimion::VS_SlPcDataTable());
    __super::Tables->Add(this->tableVS_SlPc);
    this->tableVS_Rgn2K = (gcnew RLSimion::VS_Rgn2KDataTable());
    __super::Tables->Add(this->tableVS_Rgn2K);
    this->tableVS_Rgn2Sp = (gcnew RLSimion::VS_Rgn2SpDataTable());
    __super::Tables->Add(this->tableVS_Rgn2Sp);
    this->tableVS_CtInSp = (gcnew RLSimion::VS_CtInSpDataTable());
    __super::Tables->Add(this->tableVS_CtInSp);
    this->tableVS_RtPwr = (gcnew RLSimion::VS_RtPwrDataTable());
    __super::Tables->Add(this->tableVS_RtPwr);
    this->tableVS_Rgn3MP = (gcnew RLSimion::VS_Rgn3MPDataTable());
    __super::Tables->Add(this->tableVS_Rgn3MP);
    this->tablePC_KI = (gcnew RLSimion::PC_KIDataTable());
    __super::Tables->Add(this->tablePC_KI);
    this->tablePC_KK = (gcnew RLSimion::PC_KKDataTable());
    __super::Tables->Add(this->tablePC_KK);
    this->tablePC_KP = (gcnew RLSimion::PC_KPDataTable());
    __super::Tables->Add(this->tablePC_KP);
    this->tablePC_RefSpd = (gcnew RLSimion::PC_RefSpdDataTable());
    __super::Tables->Add(this->tablePC_RefSpd);
    this->tablevidal = (gcnew RLSimion::vidalDataTable());
    __super::Tables->Add(this->tablevidal);
    this->tableA = (gcnew RLSimion::ADataTable());
    __super::Tables->Add(this->tableA);
    this->tableK_alpha = (gcnew RLSimion::K_alphaDataTable());
    __super::Tables->Add(this->tableK_alpha);
    this->tableP_s = (gcnew RLSimion::P_sDataTable());
    __super::Tables->Add(this->tableP_s);
    this->tableboukhezzar = (gcnew RLSimion::boukhezzarDataTable());
    __super::Tables->Add(this->tableboukhezzar);
    this->tableC_0 = (gcnew RLSimion::C_0DataTable());
    __super::Tables->Add(this->tableC_0);
    this->tableK_t = (gcnew RLSimion::K_tDataTable());
    __super::Tables->Add(this->tableK_t);
    this->tableJ_t = (gcnew RLSimion::J_tDataTable());
    __super::Tables->Add(this->tableJ_t);
    this->table_actor_critic = (gcnew RLSimion::_actor_criticDataTable());
    __super::Tables->Add(this->table_actor_critic);
    this->tableCRITIC = (gcnew RLSimion::CRITICDataTable());
    __super::Tables->Add(this->tableCRITIC);
    this->table_TD_Lambda = (gcnew RLSimion::_TD_LambdaDataTable());
    __super::Tables->Add(this->table_TD_Lambda);
    this->tableGAMMA = (gcnew RLSimion::GAMMADataTable());
    __super::Tables->Add(this->tableGAMMA);
    this->table_True_Online_TD_Lambda = (gcnew RLSimion::_True_Online_TD_LambdaDataTable());
    __super::Tables->Add(this->table_True_Online_TD_Lambda);
    this->table_TDC_Lambda = (gcnew RLSimion::_TDC_LambdaDataTable());
    __super::Tables->Add(this->table_TDC_Lambda);
    this->tableBETA = (gcnew RLSimion::BETADataTable());
    __super::Tables->Add(this->tableBETA);
    this->table_actor_critic_controller = (gcnew RLSimion::_actor_critic_controllerDataTable());
    __super::Tables->Add(this->table_actor_critic_controller);
    this->tableCONTROLLER = (gcnew RLSimion::CONTROLLERDataTable());
    __super::Tables->Add(this->tableCONTROLLER);
    ::System::Data::ForeignKeyConstraint^  fkc;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"EXPERIMENT_LOG", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXPERIMENT->EXPERIMENT_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLOG->EXPERIMENT_IdColumn}));
    this->tableLOG->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"WORLD_reward", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWORLD->WORLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablereward->WORLD_IdColumn}));
    this->tablereward->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"reward_reward-component", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablereward->reward_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_reward_component->reward_IdColumn}));
    this->table_reward_component->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"WORLD_wind-turbine", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWORLD->WORLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_wind_turbine->WORLD_IdColumn}));
    this->table_wind_turbine->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"wind-turbine_TRAINING_WIND_DATA_FILES", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_wind_turbine->_wind_turbine_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTRAINING_WIND_DATA_FILES->_wind_turbine_IdColumn}));
    this->tableTRAINING_WIND_DATA_FILES->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"WORLD_magnetic-levitation", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWORLD->WORLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_magnetic_levitation->WORLD_IdColumn}));
    this->table_magnetic_levitation->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"WORLD_pitch", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWORLD->WORLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepitch->WORLD_IdColumn}));
    this->tablepitch->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"WORLD_underwater-vehicle", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWORLD->WORLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_underwater_vehicle->WORLD_IdColumn}));
    this->table_underwater_vehicle->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"SIMGOD_actor-only", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSIMGOD->SIMGOD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_actor_only->SIMGOD_IdColumn}));
    this->table_actor_only->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"actor-only_ACTOR", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_actor_only->_actor_only_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableACTOR->_actor_only_IdColumn}));
    this->tableACTOR->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"actor-critic_ACTOR", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_actor_critic->_actor_critic_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableACTOR->_actor_critic_IdColumn}));
    this->tableACTOR->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"actor-critic-controller_ACTOR", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_actor_critic_controller->_actor_critic_controller_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableACTOR->_actor_critic_controller_IdColumn}));
    this->tableACTOR->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"ACTOR_VFA-Actor", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableACTOR->ACTOR_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_VFA_Actor->ACTOR_IdColumn}));
    this->table_VFA_Actor->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"CONTROLLER_VFA-Actor", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCONTROLLER->CONTROLLER_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_VFA_Actor->CONTROLLER_IdColumn}));
    this->table_VFA_Actor->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"VFA-Actor_Single-Output-Policy-Learner", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_VFA_Actor->_VFA_Actor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_Single_Output_Policy_Learner->_VFA_Actor_IdColumn}));
    this->table_Single_Output_Policy_Learner->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Single-Output-Policy-Learner_CACLA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_Single_Output_Policy_Learner->_Single_Output_Policy_Learner_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCACLA->_Single_Output_Policy_Learner_IdColumn}));
    this->tableCACLA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"CACLA_ETRACES", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCACLA->CACLA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableETRACES->CACLA_IdColumn}));
    this->tableETRACES->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"RegularGradientActor_ETRACES", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRegularGradientActor->RegularGradientActor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableETRACES->RegularGradientActor_IdColumn}));
    this->tableETRACES->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"IncrementalNaturalActor_ETRACES", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIncrementalNaturalActor->IncrementalNaturalActor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableETRACES->IncrementalNaturalActor_IdColumn}));
    this->tableETRACES->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TD-Lambda_ETRACES", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TD_Lambda->_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableETRACES->_TD_Lambda_IdColumn}));
    this->tableETRACES->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"True-Online-TD-Lambda_ETRACES", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_True_Online_TD_Lambda->_True_Online_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableETRACES->_True_Online_TD_Lambda_IdColumn}));
    this->tableETRACES->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TDC-Lambda_ETRACES", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TDC_Lambda->_TDC_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableETRACES->_TDC_Lambda_IdColumn}));
    this->tableETRACES->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"ETRACES_LAMBDA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableETRACES->ETRACES_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLAMBDA->ETRACES_IdColumn}));
    this->tableLAMBDA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"LAMBDA_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLAMBDA->LAMBDA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->LAMBDA_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"THRESHOLD_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTHRESHOLD->THRESHOLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->THRESHOLD_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"ALPHA_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableALPHA->ALPHA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->ALPHA_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"SIGMA_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSIGMA->SIGMA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->SIGMA_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"KP_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKP->KP_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->KP_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"KI_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKI->KI_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->KI_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"KD_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKD->KD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->KD_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"VS_RtGnSp_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_RtGnSp->VS_RtGnSp_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_RtGnSp_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"VS_SlPc_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_SlPc->VS_SlPc_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_SlPc_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"VS_Rgn2K_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn2K->VS_Rgn2K_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_Rgn2K_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"VS_Rgn2Sp_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn2Sp->VS_Rgn2Sp_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_Rgn2Sp_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"VS_CtInSp_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_CtInSp->VS_CtInSp_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_CtInSp_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"VS_RtPwr_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_RtPwr->VS_RtPwr_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_RtPwr_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"VS_Rgn3MP_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn3MP->VS_Rgn3MP_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_Rgn3MP_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"PC_KI_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KI->PC_KI_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->PC_KI_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"PC_KK_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KK->PC_KK_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->PC_KK_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"PC_KP_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KP->PC_KP_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->PC_KP_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"PC_RefSpd_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_RefSpd->PC_RefSpd_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->PC_RefSpd_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"A_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableA->A_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->A_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"K_alpha_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableK_alpha->K_alpha_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->K_alpha_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"P_s_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableP_s->P_s_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->P_s_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"C_0_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableC_0->C_0_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->C_0_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"K_t_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableK_t->K_t_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->K_t_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"J_t_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableJ_t->J_t_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->J_t_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"GAMMA_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGAMMA->GAMMA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->GAMMA_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"BETA_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableBETA->BETA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->BETA_IdColumn}));
    this->tableschedule->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"ETRACES_THRESHOLD", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableETRACES->ETRACES_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTHRESHOLD->ETRACES_IdColumn}));
    this->tableTHRESHOLD->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"CACLA_ALPHA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCACLA->CACLA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableALPHA->CACLA_IdColumn}));
    this->tableALPHA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"RegularGradientActor_ALPHA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRegularGradientActor->RegularGradientActor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableALPHA->RegularGradientActor_IdColumn}));
    this->tableALPHA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"IncrementalNaturalActor_ALPHA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIncrementalNaturalActor->IncrementalNaturalActor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableALPHA->IncrementalNaturalActor_IdColumn}));
    this->tableALPHA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TD-Lambda_ALPHA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TD_Lambda->_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableALPHA->_TD_Lambda_IdColumn}));
    this->tableALPHA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"True-Online-TD-Lambda_ALPHA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_True_Online_TD_Lambda->_True_Online_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableALPHA->_True_Online_TD_Lambda_IdColumn}));
    this->tableALPHA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TDC-Lambda_ALPHA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TDC_Lambda->_TDC_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableALPHA->_TDC_Lambda_IdColumn}));
    this->tableALPHA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"CACLA_VFA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCACLA->CACLA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVFA->CACLA_IdColumn}));
    this->tableVFA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"RegularGradientActor_VFA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRegularGradientActor->RegularGradientActor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVFA->RegularGradientActor_IdColumn}));
    this->tableVFA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"IncrementalNaturalActor_VFA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIncrementalNaturalActor->IncrementalNaturalActor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVFA->IncrementalNaturalActor_IdColumn}));
    this->tableVFA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TD-Lambda_VFA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TD_Lambda->_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVFA->_TD_Lambda_IdColumn}));
    this->tableVFA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"True-Online-TD-Lambda_VFA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_True_Online_TD_Lambda->_True_Online_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVFA->_True_Online_TD_Lambda_IdColumn}));
    this->tableVFA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TDC-Lambda_VFA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TDC_Lambda->_TDC_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVFA->_TDC_Lambda_IdColumn}));
    this->tableVFA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"VFA_RBF_GRID", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVFA->VFA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRBF_GRID->VFA_IdColumn}));
    this->tableRBF_GRID->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"RBF_GRID_state-grid-dimension", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRBF_GRID->RBF_GRID_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_state_grid_dimension->RBF_GRID_IdColumn}));
    this->table_state_grid_dimension->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"CACLA_EXPLORATION_NOISE", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCACLA->CACLA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXPLORATION_NOISE->CACLA_IdColumn}));
    this->tableEXPLORATION_NOISE->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"RegularGradientActor_EXPLORATION_NOISE", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRegularGradientActor->RegularGradientActor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXPLORATION_NOISE->RegularGradientActor_IdColumn}));
    this->tableEXPLORATION_NOISE->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"IncrementalNaturalActor_EXPLORATION_NOISE", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIncrementalNaturalActor->IncrementalNaturalActor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXPLORATION_NOISE->IncrementalNaturalActor_IdColumn}));
    this->tableEXPLORATION_NOISE->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"EXPLORATION_NOISE_SIGMA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXPLORATION_NOISE->EXPLORATION_NOISE_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSIGMA->EXPLORATION_NOISE_IdColumn}));
    this->tableSIGMA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Single-Output-Policy-Learner_RegularGradientActor", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_Single_Output_Policy_Learner->_Single_Output_Policy_Learner_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRegularGradientActor->_Single_Output_Policy_Learner_IdColumn}));
    this->tableRegularGradientActor->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"Single-Output-Policy-Learner_IncrementalNaturalActor", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_Single_Output_Policy_Learner->_Single_Output_Policy_Learner_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIncrementalNaturalActor->_Single_Output_Policy_Learner_IdColumn}));
    this->tableIncrementalNaturalActor->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"ACTOR_PID", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableACTOR->ACTOR_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePID->ACTOR_IdColumn}));
    this->tablePID->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"CONTROLLER_PID", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCONTROLLER->CONTROLLER_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePID->CONTROLLER_IdColumn}));
    this->tablePID->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"PID_KP", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePID->PID_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKP->PID_IdColumn}));
    this->tableKP->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"vidal_KP", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->vidal_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKP->vidal_IdColumn}));
    this->tableKP->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"boukhezzar_KP", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->boukhezzar_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKP->boukhezzar_IdColumn}));
    this->tableKP->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"PID_KI", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePID->PID_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKI->PID_IdColumn}));
    this->tableKI->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"vidal_KI", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->vidal_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKI->vidal_IdColumn}));
    this->tableKI->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"boukhezzar_KI", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->boukhezzar_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKI->boukhezzar_IdColumn}));
    this->tableKI->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"PID_KD", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePID->PID_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKD->PID_IdColumn}));
    this->tableKD->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"ACTOR_LQR", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableACTOR->ACTOR_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLQR->ACTOR_IdColumn}));
    this->tableLQR->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"CONTROLLER_LQR", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCONTROLLER->CONTROLLER_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLQR->CONTROLLER_IdColumn}));
    this->tableLQR->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"LQR_LQR-GAIN", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLQR->LQR_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_LQR_GAIN->LQR_IdColumn}));
    this->table_LQR_GAIN->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"ACTOR_jonkman", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableACTOR->ACTOR_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->ACTOR_IdColumn}));
    this->tablejonkman->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"CONTROLLER_jonkman", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCONTROLLER->CONTROLLER_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->CONTROLLER_IdColumn}));
    this->tablejonkman->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_VS_RtGnSp", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_RtGnSp->jonkman_IdColumn}));
    this->tableVS_RtGnSp->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_VS_SlPc", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_SlPc->jonkman_IdColumn}));
    this->tableVS_SlPc->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_VS_Rgn2K", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn2K->jonkman_IdColumn}));
    this->tableVS_Rgn2K->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_VS_Rgn2Sp", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn2Sp->jonkman_IdColumn}));
    this->tableVS_Rgn2Sp->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_VS_CtInSp", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_CtInSp->jonkman_IdColumn}));
    this->tableVS_CtInSp->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_VS_RtPwr", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_RtPwr->jonkman_IdColumn}));
    this->tableVS_RtPwr->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_VS_Rgn3MP", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn3MP->jonkman_IdColumn}));
    this->tableVS_Rgn3MP->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_PC_KI", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KI->jonkman_IdColumn}));
    this->tablePC_KI->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_PC_KK", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KK->jonkman_IdColumn}));
    this->tablePC_KK->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_PC_KP", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KP->jonkman_IdColumn}));
    this->tablePC_KP->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"jonkman_PC_RefSpd", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_RefSpd->jonkman_IdColumn}));
    this->tablePC_RefSpd->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"ACTOR_vidal", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableACTOR->ACTOR_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->ACTOR_IdColumn}));
    this->tablevidal->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"CONTROLLER_vidal", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCONTROLLER->CONTROLLER_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->CONTROLLER_IdColumn}));
    this->tablevidal->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"vidal_A", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->vidal_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableA->vidal_IdColumn}));
    this->tableA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"vidal_K_alpha", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->vidal_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableK_alpha->vidal_IdColumn}));
    this->tableK_alpha->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"vidal_P_s", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->vidal_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableP_s->vidal_IdColumn}));
    this->tableP_s->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"ACTOR_boukhezzar", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableACTOR->ACTOR_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->ACTOR_IdColumn}));
    this->tableboukhezzar->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"CONTROLLER_boukhezzar", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCONTROLLER->CONTROLLER_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->CONTROLLER_IdColumn}));
    this->tableboukhezzar->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"boukhezzar_C_0", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->boukhezzar_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableC_0->boukhezzar_IdColumn}));
    this->tableC_0->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"boukhezzar_K_t", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->boukhezzar_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableK_t->boukhezzar_IdColumn}));
    this->tableK_t->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"boukhezzar_J_t", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->boukhezzar_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableJ_t->boukhezzar_IdColumn}));
    this->tableJ_t->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"SIMGOD_actor-critic", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSIMGOD->SIMGOD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_actor_critic->SIMGOD_IdColumn}));
    this->table_actor_critic->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"actor-critic_CRITIC", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_actor_critic->_actor_critic_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCRITIC->_actor_critic_IdColumn}));
    this->tableCRITIC->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"actor-critic-controller_CRITIC", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_actor_critic_controller->_actor_critic_controller_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCRITIC->_actor_critic_controller_IdColumn}));
    this->tableCRITIC->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"CRITIC_TD-Lambda", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCRITIC->CRITIC_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TD_Lambda->CRITIC_IdColumn}));
    this->table_TD_Lambda->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TD-Lambda_GAMMA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TD_Lambda->_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGAMMA->_TD_Lambda_IdColumn}));
    this->tableGAMMA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"True-Online-TD-Lambda_GAMMA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_True_Online_TD_Lambda->_True_Online_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGAMMA->_True_Online_TD_Lambda_IdColumn}));
    this->tableGAMMA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TDC-Lambda_GAMMA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TDC_Lambda->_TDC_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGAMMA->_TDC_Lambda_IdColumn}));
    this->tableGAMMA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"CRITIC_True-Online-TD-Lambda", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCRITIC->CRITIC_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_True_Online_TD_Lambda->CRITIC_IdColumn}));
    this->table_True_Online_TD_Lambda->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"CRITIC_TDC-Lambda", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCRITIC->CRITIC_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TDC_Lambda->CRITIC_IdColumn}));
    this->table_TDC_Lambda->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"TDC-Lambda_BETA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TDC_Lambda->_TDC_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableBETA->_TDC_Lambda_IdColumn}));
    this->tableBETA->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"SIMGOD_actor-critic-controller", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSIMGOD->SIMGOD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_actor_critic_controller->SIMGOD_IdColumn}));
    this->table_actor_critic_controller->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"actor-critic-controller_CONTROLLER", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_actor_critic_controller->_actor_critic_controller_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCONTROLLER->_actor_critic_controller_IdColumn}));
    this->tableCONTROLLER->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    this->relationEXPERIMENT_LOG = (gcnew ::System::Data::DataRelation(L"EXPERIMENT_LOG", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXPERIMENT->EXPERIMENT_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLOG->EXPERIMENT_IdColumn}, false));
    this->relationEXPERIMENT_LOG->Nested = true;
    this->Relations->Add(this->relationEXPERIMENT_LOG);
    this->relationWORLD_reward = (gcnew ::System::Data::DataRelation(L"WORLD_reward", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWORLD->WORLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablereward->WORLD_IdColumn}, false));
    this->relationWORLD_reward->Nested = true;
    this->Relations->Add(this->relationWORLD_reward);
    this->_relationreward_reward_component = (gcnew ::System::Data::DataRelation(L"reward_reward-component", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablereward->reward_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_reward_component->reward_IdColumn}, false));
    this->_relationreward_reward_component->Nested = true;
    this->Relations->Add(this->_relationreward_reward_component);
    this->_relationWORLD_wind_turbine = (gcnew ::System::Data::DataRelation(L"WORLD_wind-turbine", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWORLD->WORLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_wind_turbine->WORLD_IdColumn}, false));
    this->_relationWORLD_wind_turbine->Nested = true;
    this->Relations->Add(this->_relationWORLD_wind_turbine);
    this->_relationwind_turbine_TRAINING_WIND_DATA_FILES = (gcnew ::System::Data::DataRelation(L"wind-turbine_TRAINING_WIND_DATA_FILES", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_wind_turbine->_wind_turbine_IdColumn}, gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTRAINING_WIND_DATA_FILES->_wind_turbine_IdColumn}, 
        false));
    this->_relationwind_turbine_TRAINING_WIND_DATA_FILES->Nested = true;
    this->Relations->Add(this->_relationwind_turbine_TRAINING_WIND_DATA_FILES);
    this->_relationWORLD_magnetic_levitation = (gcnew ::System::Data::DataRelation(L"WORLD_magnetic-levitation", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWORLD->WORLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_magnetic_levitation->WORLD_IdColumn}, false));
    this->_relationWORLD_magnetic_levitation->Nested = true;
    this->Relations->Add(this->_relationWORLD_magnetic_levitation);
    this->relationWORLD_pitch = (gcnew ::System::Data::DataRelation(L"WORLD_pitch", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWORLD->WORLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepitch->WORLD_IdColumn}, false));
    this->relationWORLD_pitch->Nested = true;
    this->Relations->Add(this->relationWORLD_pitch);
    this->_relationWORLD_underwater_vehicle = (gcnew ::System::Data::DataRelation(L"WORLD_underwater-vehicle", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableWORLD->WORLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_underwater_vehicle->WORLD_IdColumn}, false));
    this->_relationWORLD_underwater_vehicle->Nested = true;
    this->Relations->Add(this->_relationWORLD_underwater_vehicle);
    this->_relationSIMGOD_actor_only = (gcnew ::System::Data::DataRelation(L"SIMGOD_actor-only", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSIMGOD->SIMGOD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_actor_only->SIMGOD_IdColumn}, false));
    this->_relationSIMGOD_actor_only->Nested = true;
    this->Relations->Add(this->_relationSIMGOD_actor_only);
    this->_relationactor_only_ACTOR = (gcnew ::System::Data::DataRelation(L"actor-only_ACTOR", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_actor_only->_actor_only_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableACTOR->_actor_only_IdColumn}, false));
    this->_relationactor_only_ACTOR->Nested = true;
    this->Relations->Add(this->_relationactor_only_ACTOR);
    this->_relationactor_critic_ACTOR = (gcnew ::System::Data::DataRelation(L"actor-critic_ACTOR", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_actor_critic->_actor_critic_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableACTOR->_actor_critic_IdColumn}, false));
    this->_relationactor_critic_ACTOR->Nested = true;
    this->Relations->Add(this->_relationactor_critic_ACTOR);
    this->_relationactor_critic_controller_ACTOR = (gcnew ::System::Data::DataRelation(L"actor-critic-controller_ACTOR", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_actor_critic_controller->_actor_critic_controller_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableACTOR->_actor_critic_controller_IdColumn}, false));
    this->_relationactor_critic_controller_ACTOR->Nested = true;
    this->Relations->Add(this->_relationactor_critic_controller_ACTOR);
    this->_relationACTOR_VFA_Actor = (gcnew ::System::Data::DataRelation(L"ACTOR_VFA-Actor", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableACTOR->ACTOR_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_VFA_Actor->ACTOR_IdColumn}, false));
    this->_relationACTOR_VFA_Actor->Nested = true;
    this->Relations->Add(this->_relationACTOR_VFA_Actor);
    this->_relationCONTROLLER_VFA_Actor = (gcnew ::System::Data::DataRelation(L"CONTROLLER_VFA-Actor", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCONTROLLER->CONTROLLER_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_VFA_Actor->CONTROLLER_IdColumn}, false));
    this->_relationCONTROLLER_VFA_Actor->Nested = true;
    this->Relations->Add(this->_relationCONTROLLER_VFA_Actor);
    this->_relationVFA_Actor_Single_Output_Policy_Learner = (gcnew ::System::Data::DataRelation(L"VFA-Actor_Single-Output-Policy-Learner", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_VFA_Actor->_VFA_Actor_IdColumn}, gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_Single_Output_Policy_Learner->_VFA_Actor_IdColumn}, 
        false));
    this->_relationVFA_Actor_Single_Output_Policy_Learner->Nested = true;
    this->Relations->Add(this->_relationVFA_Actor_Single_Output_Policy_Learner);
    this->_relationSingle_Output_Policy_Learner_CACLA = (gcnew ::System::Data::DataRelation(L"Single-Output-Policy-Learner_CACLA", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_Single_Output_Policy_Learner->_Single_Output_Policy_Learner_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCACLA->_Single_Output_Policy_Learner_IdColumn}, false));
    this->_relationSingle_Output_Policy_Learner_CACLA->Nested = true;
    this->Relations->Add(this->_relationSingle_Output_Policy_Learner_CACLA);
    this->relationCACLA_ETRACES = (gcnew ::System::Data::DataRelation(L"CACLA_ETRACES", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCACLA->CACLA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableETRACES->CACLA_IdColumn}, false));
    this->relationCACLA_ETRACES->Nested = true;
    this->Relations->Add(this->relationCACLA_ETRACES);
    this->relationRegularGradientActor_ETRACES = (gcnew ::System::Data::DataRelation(L"RegularGradientActor_ETRACES", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRegularGradientActor->RegularGradientActor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableETRACES->RegularGradientActor_IdColumn}, false));
    this->relationRegularGradientActor_ETRACES->Nested = true;
    this->Relations->Add(this->relationRegularGradientActor_ETRACES);
    this->relationIncrementalNaturalActor_ETRACES = (gcnew ::System::Data::DataRelation(L"IncrementalNaturalActor_ETRACES", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIncrementalNaturalActor->IncrementalNaturalActor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableETRACES->IncrementalNaturalActor_IdColumn}, false));
    this->relationIncrementalNaturalActor_ETRACES->Nested = true;
    this->Relations->Add(this->relationIncrementalNaturalActor_ETRACES);
    this->_relationTD_Lambda_ETRACES = (gcnew ::System::Data::DataRelation(L"TD-Lambda_ETRACES", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TD_Lambda->_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableETRACES->_TD_Lambda_IdColumn}, false));
    this->_relationTD_Lambda_ETRACES->Nested = true;
    this->Relations->Add(this->_relationTD_Lambda_ETRACES);
    this->_relationTrue_Online_TD_Lambda_ETRACES = (gcnew ::System::Data::DataRelation(L"True-Online-TD-Lambda_ETRACES", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_True_Online_TD_Lambda->_True_Online_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableETRACES->_True_Online_TD_Lambda_IdColumn}, false));
    this->_relationTrue_Online_TD_Lambda_ETRACES->Nested = true;
    this->Relations->Add(this->_relationTrue_Online_TD_Lambda_ETRACES);
    this->_relationTDC_Lambda_ETRACES = (gcnew ::System::Data::DataRelation(L"TDC-Lambda_ETRACES", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TDC_Lambda->_TDC_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableETRACES->_TDC_Lambda_IdColumn}, false));
    this->_relationTDC_Lambda_ETRACES->Nested = true;
    this->Relations->Add(this->_relationTDC_Lambda_ETRACES);
    this->relationETRACES_LAMBDA = (gcnew ::System::Data::DataRelation(L"ETRACES_LAMBDA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableETRACES->ETRACES_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLAMBDA->ETRACES_IdColumn}, false));
    this->relationETRACES_LAMBDA->Nested = true;
    this->Relations->Add(this->relationETRACES_LAMBDA);
    this->relationLAMBDA_schedule = (gcnew ::System::Data::DataRelation(L"LAMBDA_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLAMBDA->LAMBDA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->LAMBDA_IdColumn}, false));
    this->relationLAMBDA_schedule->Nested = true;
    this->Relations->Add(this->relationLAMBDA_schedule);
    this->relationTHRESHOLD_schedule = (gcnew ::System::Data::DataRelation(L"THRESHOLD_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTHRESHOLD->THRESHOLD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->THRESHOLD_IdColumn}, false));
    this->relationTHRESHOLD_schedule->Nested = true;
    this->Relations->Add(this->relationTHRESHOLD_schedule);
    this->relationALPHA_schedule = (gcnew ::System::Data::DataRelation(L"ALPHA_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableALPHA->ALPHA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->ALPHA_IdColumn}, false));
    this->relationALPHA_schedule->Nested = true;
    this->Relations->Add(this->relationALPHA_schedule);
    this->relationSIGMA_schedule = (gcnew ::System::Data::DataRelation(L"SIGMA_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSIGMA->SIGMA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->SIGMA_IdColumn}, false));
    this->relationSIGMA_schedule->Nested = true;
    this->Relations->Add(this->relationSIGMA_schedule);
    this->relationKP_schedule = (gcnew ::System::Data::DataRelation(L"KP_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKP->KP_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->KP_IdColumn}, false));
    this->relationKP_schedule->Nested = true;
    this->Relations->Add(this->relationKP_schedule);
    this->relationKI_schedule = (gcnew ::System::Data::DataRelation(L"KI_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKI->KI_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->KI_IdColumn}, false));
    this->relationKI_schedule->Nested = true;
    this->Relations->Add(this->relationKI_schedule);
    this->relationKD_schedule = (gcnew ::System::Data::DataRelation(L"KD_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKD->KD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->KD_IdColumn}, false));
    this->relationKD_schedule->Nested = true;
    this->Relations->Add(this->relationKD_schedule);
    this->relationVS_RtGnSp_schedule = (gcnew ::System::Data::DataRelation(L"VS_RtGnSp_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_RtGnSp->VS_RtGnSp_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_RtGnSp_IdColumn}, false));
    this->relationVS_RtGnSp_schedule->Nested = true;
    this->Relations->Add(this->relationVS_RtGnSp_schedule);
    this->relationVS_SlPc_schedule = (gcnew ::System::Data::DataRelation(L"VS_SlPc_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_SlPc->VS_SlPc_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_SlPc_IdColumn}, false));
    this->relationVS_SlPc_schedule->Nested = true;
    this->Relations->Add(this->relationVS_SlPc_schedule);
    this->relationVS_Rgn2K_schedule = (gcnew ::System::Data::DataRelation(L"VS_Rgn2K_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn2K->VS_Rgn2K_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_Rgn2K_IdColumn}, false));
    this->relationVS_Rgn2K_schedule->Nested = true;
    this->Relations->Add(this->relationVS_Rgn2K_schedule);
    this->relationVS_Rgn2Sp_schedule = (gcnew ::System::Data::DataRelation(L"VS_Rgn2Sp_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn2Sp->VS_Rgn2Sp_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_Rgn2Sp_IdColumn}, false));
    this->relationVS_Rgn2Sp_schedule->Nested = true;
    this->Relations->Add(this->relationVS_Rgn2Sp_schedule);
    this->relationVS_CtInSp_schedule = (gcnew ::System::Data::DataRelation(L"VS_CtInSp_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_CtInSp->VS_CtInSp_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_CtInSp_IdColumn}, false));
    this->relationVS_CtInSp_schedule->Nested = true;
    this->Relations->Add(this->relationVS_CtInSp_schedule);
    this->relationVS_RtPwr_schedule = (gcnew ::System::Data::DataRelation(L"VS_RtPwr_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_RtPwr->VS_RtPwr_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_RtPwr_IdColumn}, false));
    this->relationVS_RtPwr_schedule->Nested = true;
    this->Relations->Add(this->relationVS_RtPwr_schedule);
    this->relationVS_Rgn3MP_schedule = (gcnew ::System::Data::DataRelation(L"VS_Rgn3MP_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn3MP->VS_Rgn3MP_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->VS_Rgn3MP_IdColumn}, false));
    this->relationVS_Rgn3MP_schedule->Nested = true;
    this->Relations->Add(this->relationVS_Rgn3MP_schedule);
    this->relationPC_KI_schedule = (gcnew ::System::Data::DataRelation(L"PC_KI_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KI->PC_KI_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->PC_KI_IdColumn}, false));
    this->relationPC_KI_schedule->Nested = true;
    this->Relations->Add(this->relationPC_KI_schedule);
    this->relationPC_KK_schedule = (gcnew ::System::Data::DataRelation(L"PC_KK_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KK->PC_KK_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->PC_KK_IdColumn}, false));
    this->relationPC_KK_schedule->Nested = true;
    this->Relations->Add(this->relationPC_KK_schedule);
    this->relationPC_KP_schedule = (gcnew ::System::Data::DataRelation(L"PC_KP_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KP->PC_KP_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->PC_KP_IdColumn}, false));
    this->relationPC_KP_schedule->Nested = true;
    this->Relations->Add(this->relationPC_KP_schedule);
    this->relationPC_RefSpd_schedule = (gcnew ::System::Data::DataRelation(L"PC_RefSpd_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_RefSpd->PC_RefSpd_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->PC_RefSpd_IdColumn}, false));
    this->relationPC_RefSpd_schedule->Nested = true;
    this->Relations->Add(this->relationPC_RefSpd_schedule);
    this->relationA_schedule = (gcnew ::System::Data::DataRelation(L"A_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableA->A_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->A_IdColumn}, false));
    this->relationA_schedule->Nested = true;
    this->Relations->Add(this->relationA_schedule);
    this->relationK_alpha_schedule = (gcnew ::System::Data::DataRelation(L"K_alpha_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableK_alpha->K_alpha_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->K_alpha_IdColumn}, false));
    this->relationK_alpha_schedule->Nested = true;
    this->Relations->Add(this->relationK_alpha_schedule);
    this->relationP_s_schedule = (gcnew ::System::Data::DataRelation(L"P_s_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableP_s->P_s_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->P_s_IdColumn}, false));
    this->relationP_s_schedule->Nested = true;
    this->Relations->Add(this->relationP_s_schedule);
    this->relationC_0_schedule = (gcnew ::System::Data::DataRelation(L"C_0_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableC_0->C_0_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->C_0_IdColumn}, false));
    this->relationC_0_schedule->Nested = true;
    this->Relations->Add(this->relationC_0_schedule);
    this->relationK_t_schedule = (gcnew ::System::Data::DataRelation(L"K_t_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableK_t->K_t_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->K_t_IdColumn}, false));
    this->relationK_t_schedule->Nested = true;
    this->Relations->Add(this->relationK_t_schedule);
    this->relationJ_t_schedule = (gcnew ::System::Data::DataRelation(L"J_t_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableJ_t->J_t_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->J_t_IdColumn}, false));
    this->relationJ_t_schedule->Nested = true;
    this->Relations->Add(this->relationJ_t_schedule);
    this->relationGAMMA_schedule = (gcnew ::System::Data::DataRelation(L"GAMMA_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGAMMA->GAMMA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->GAMMA_IdColumn}, false));
    this->relationGAMMA_schedule->Nested = true;
    this->Relations->Add(this->relationGAMMA_schedule);
    this->relationBETA_schedule = (gcnew ::System::Data::DataRelation(L"BETA_schedule", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableBETA->BETA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableschedule->BETA_IdColumn}, false));
    this->relationBETA_schedule->Nested = true;
    this->Relations->Add(this->relationBETA_schedule);
    this->relationETRACES_THRESHOLD = (gcnew ::System::Data::DataRelation(L"ETRACES_THRESHOLD", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableETRACES->ETRACES_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableTHRESHOLD->ETRACES_IdColumn}, false));
    this->relationETRACES_THRESHOLD->Nested = true;
    this->Relations->Add(this->relationETRACES_THRESHOLD);
    this->relationCACLA_ALPHA = (gcnew ::System::Data::DataRelation(L"CACLA_ALPHA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCACLA->CACLA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableALPHA->CACLA_IdColumn}, false));
    this->relationCACLA_ALPHA->Nested = true;
    this->Relations->Add(this->relationCACLA_ALPHA);
    this->relationRegularGradientActor_ALPHA = (gcnew ::System::Data::DataRelation(L"RegularGradientActor_ALPHA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRegularGradientActor->RegularGradientActor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableALPHA->RegularGradientActor_IdColumn}, false));
    this->relationRegularGradientActor_ALPHA->Nested = true;
    this->Relations->Add(this->relationRegularGradientActor_ALPHA);
    this->relationIncrementalNaturalActor_ALPHA = (gcnew ::System::Data::DataRelation(L"IncrementalNaturalActor_ALPHA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIncrementalNaturalActor->IncrementalNaturalActor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableALPHA->IncrementalNaturalActor_IdColumn}, false));
    this->relationIncrementalNaturalActor_ALPHA->Nested = true;
    this->Relations->Add(this->relationIncrementalNaturalActor_ALPHA);
    this->_relationTD_Lambda_ALPHA = (gcnew ::System::Data::DataRelation(L"TD-Lambda_ALPHA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TD_Lambda->_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableALPHA->_TD_Lambda_IdColumn}, false));
    this->_relationTD_Lambda_ALPHA->Nested = true;
    this->Relations->Add(this->_relationTD_Lambda_ALPHA);
    this->_relationTrue_Online_TD_Lambda_ALPHA = (gcnew ::System::Data::DataRelation(L"True-Online-TD-Lambda_ALPHA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_True_Online_TD_Lambda->_True_Online_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableALPHA->_True_Online_TD_Lambda_IdColumn}, false));
    this->_relationTrue_Online_TD_Lambda_ALPHA->Nested = true;
    this->Relations->Add(this->_relationTrue_Online_TD_Lambda_ALPHA);
    this->_relationTDC_Lambda_ALPHA = (gcnew ::System::Data::DataRelation(L"TDC-Lambda_ALPHA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TDC_Lambda->_TDC_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableALPHA->_TDC_Lambda_IdColumn}, false));
    this->_relationTDC_Lambda_ALPHA->Nested = true;
    this->Relations->Add(this->_relationTDC_Lambda_ALPHA);
    this->relationCACLA_VFA = (gcnew ::System::Data::DataRelation(L"CACLA_VFA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCACLA->CACLA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVFA->CACLA_IdColumn}, false));
    this->relationCACLA_VFA->Nested = true;
    this->Relations->Add(this->relationCACLA_VFA);
    this->relationRegularGradientActor_VFA = (gcnew ::System::Data::DataRelation(L"RegularGradientActor_VFA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRegularGradientActor->RegularGradientActor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVFA->RegularGradientActor_IdColumn}, false));
    this->relationRegularGradientActor_VFA->Nested = true;
    this->Relations->Add(this->relationRegularGradientActor_VFA);
    this->relationIncrementalNaturalActor_VFA = (gcnew ::System::Data::DataRelation(L"IncrementalNaturalActor_VFA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIncrementalNaturalActor->IncrementalNaturalActor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVFA->IncrementalNaturalActor_IdColumn}, false));
    this->relationIncrementalNaturalActor_VFA->Nested = true;
    this->Relations->Add(this->relationIncrementalNaturalActor_VFA);
    this->_relationTD_Lambda_VFA = (gcnew ::System::Data::DataRelation(L"TD-Lambda_VFA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TD_Lambda->_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVFA->_TD_Lambda_IdColumn}, false));
    this->_relationTD_Lambda_VFA->Nested = true;
    this->Relations->Add(this->_relationTD_Lambda_VFA);
    this->_relationTrue_Online_TD_Lambda_VFA = (gcnew ::System::Data::DataRelation(L"True-Online-TD-Lambda_VFA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_True_Online_TD_Lambda->_True_Online_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVFA->_True_Online_TD_Lambda_IdColumn}, false));
    this->_relationTrue_Online_TD_Lambda_VFA->Nested = true;
    this->Relations->Add(this->_relationTrue_Online_TD_Lambda_VFA);
    this->_relationTDC_Lambda_VFA = (gcnew ::System::Data::DataRelation(L"TDC-Lambda_VFA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TDC_Lambda->_TDC_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVFA->_TDC_Lambda_IdColumn}, false));
    this->_relationTDC_Lambda_VFA->Nested = true;
    this->Relations->Add(this->_relationTDC_Lambda_VFA);
    this->relationVFA_RBF_GRID = (gcnew ::System::Data::DataRelation(L"VFA_RBF_GRID", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVFA->VFA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRBF_GRID->VFA_IdColumn}, false));
    this->relationVFA_RBF_GRID->Nested = true;
    this->Relations->Add(this->relationVFA_RBF_GRID);
    this->_relationRBF_GRID_state_grid_dimension = (gcnew ::System::Data::DataRelation(L"RBF_GRID_state-grid-dimension", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRBF_GRID->RBF_GRID_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_state_grid_dimension->RBF_GRID_IdColumn}, false));
    this->_relationRBF_GRID_state_grid_dimension->Nested = true;
    this->Relations->Add(this->_relationRBF_GRID_state_grid_dimension);
    this->relationCACLA_EXPLORATION_NOISE = (gcnew ::System::Data::DataRelation(L"CACLA_EXPLORATION_NOISE", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCACLA->CACLA_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXPLORATION_NOISE->CACLA_IdColumn}, false));
    this->relationCACLA_EXPLORATION_NOISE->Nested = true;
    this->Relations->Add(this->relationCACLA_EXPLORATION_NOISE);
    this->relationRegularGradientActor_EXPLORATION_NOISE = (gcnew ::System::Data::DataRelation(L"RegularGradientActor_EXPLORATION_NOISE", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRegularGradientActor->RegularGradientActor_IdColumn}, gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXPLORATION_NOISE->RegularGradientActor_IdColumn}, 
        false));
    this->relationRegularGradientActor_EXPLORATION_NOISE->Nested = true;
    this->Relations->Add(this->relationRegularGradientActor_EXPLORATION_NOISE);
    this->relationIncrementalNaturalActor_EXPLORATION_NOISE = (gcnew ::System::Data::DataRelation(L"IncrementalNaturalActor_EXPLORATION_NOISE", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIncrementalNaturalActor->IncrementalNaturalActor_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXPLORATION_NOISE->IncrementalNaturalActor_IdColumn}, false));
    this->relationIncrementalNaturalActor_EXPLORATION_NOISE->Nested = true;
    this->Relations->Add(this->relationIncrementalNaturalActor_EXPLORATION_NOISE);
    this->relationEXPLORATION_NOISE_SIGMA = (gcnew ::System::Data::DataRelation(L"EXPLORATION_NOISE_SIGMA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableEXPLORATION_NOISE->EXPLORATION_NOISE_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSIGMA->EXPLORATION_NOISE_IdColumn}, false));
    this->relationEXPLORATION_NOISE_SIGMA->Nested = true;
    this->Relations->Add(this->relationEXPLORATION_NOISE_SIGMA);
    this->_relationSingle_Output_Policy_Learner_RegularGradientActor = (gcnew ::System::Data::DataRelation(L"Single-Output-Policy-Learner_RegularGradientActor", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_Single_Output_Policy_Learner->_Single_Output_Policy_Learner_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableRegularGradientActor->_Single_Output_Policy_Learner_IdColumn}, 
        false));
    this->_relationSingle_Output_Policy_Learner_RegularGradientActor->Nested = true;
    this->Relations->Add(this->_relationSingle_Output_Policy_Learner_RegularGradientActor);
    this->_relationSingle_Output_Policy_Learner_IncrementalNaturalActor = (gcnew ::System::Data::DataRelation(L"Single-Output-Policy-Learner_IncrementalNaturalActor", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_Single_Output_Policy_Learner->_Single_Output_Policy_Learner_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableIncrementalNaturalActor->_Single_Output_Policy_Learner_IdColumn}, 
        false));
    this->_relationSingle_Output_Policy_Learner_IncrementalNaturalActor->Nested = true;
    this->Relations->Add(this->_relationSingle_Output_Policy_Learner_IncrementalNaturalActor);
    this->relationACTOR_PID = (gcnew ::System::Data::DataRelation(L"ACTOR_PID", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableACTOR->ACTOR_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePID->ACTOR_IdColumn}, false));
    this->relationACTOR_PID->Nested = true;
    this->Relations->Add(this->relationACTOR_PID);
    this->relationCONTROLLER_PID = (gcnew ::System::Data::DataRelation(L"CONTROLLER_PID", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCONTROLLER->CONTROLLER_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePID->CONTROLLER_IdColumn}, false));
    this->relationCONTROLLER_PID->Nested = true;
    this->Relations->Add(this->relationCONTROLLER_PID);
    this->relationPID_KP = (gcnew ::System::Data::DataRelation(L"PID_KP", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePID->PID_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKP->PID_IdColumn}, false));
    this->relationPID_KP->Nested = true;
    this->Relations->Add(this->relationPID_KP);
    this->relationvidal_KP = (gcnew ::System::Data::DataRelation(L"vidal_KP", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->vidal_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKP->vidal_IdColumn}, false));
    this->relationvidal_KP->Nested = true;
    this->Relations->Add(this->relationvidal_KP);
    this->relationboukhezzar_KP = (gcnew ::System::Data::DataRelation(L"boukhezzar_KP", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->boukhezzar_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKP->boukhezzar_IdColumn}, false));
    this->relationboukhezzar_KP->Nested = true;
    this->Relations->Add(this->relationboukhezzar_KP);
    this->relationPID_KI = (gcnew ::System::Data::DataRelation(L"PID_KI", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePID->PID_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKI->PID_IdColumn}, false));
    this->relationPID_KI->Nested = true;
    this->Relations->Add(this->relationPID_KI);
    this->relationvidal_KI = (gcnew ::System::Data::DataRelation(L"vidal_KI", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->vidal_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKI->vidal_IdColumn}, false));
    this->relationvidal_KI->Nested = true;
    this->Relations->Add(this->relationvidal_KI);
    this->relationboukhezzar_KI = (gcnew ::System::Data::DataRelation(L"boukhezzar_KI", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->boukhezzar_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKI->boukhezzar_IdColumn}, false));
    this->relationboukhezzar_KI->Nested = true;
    this->Relations->Add(this->relationboukhezzar_KI);
    this->relationPID_KD = (gcnew ::System::Data::DataRelation(L"PID_KD", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePID->PID_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableKD->PID_IdColumn}, false));
    this->relationPID_KD->Nested = true;
    this->Relations->Add(this->relationPID_KD);
    this->relationACTOR_LQR = (gcnew ::System::Data::DataRelation(L"ACTOR_LQR", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableACTOR->ACTOR_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLQR->ACTOR_IdColumn}, false));
    this->relationACTOR_LQR->Nested = true;
    this->Relations->Add(this->relationACTOR_LQR);
    this->relationCONTROLLER_LQR = (gcnew ::System::Data::DataRelation(L"CONTROLLER_LQR", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCONTROLLER->CONTROLLER_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLQR->CONTROLLER_IdColumn}, false));
    this->relationCONTROLLER_LQR->Nested = true;
    this->Relations->Add(this->relationCONTROLLER_LQR);
    this->_relationLQR_LQR_GAIN = (gcnew ::System::Data::DataRelation(L"LQR_LQR-GAIN", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableLQR->LQR_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_LQR_GAIN->LQR_IdColumn}, false));
    this->_relationLQR_LQR_GAIN->Nested = true;
    this->Relations->Add(this->_relationLQR_LQR_GAIN);
    this->relationACTOR_jonkman = (gcnew ::System::Data::DataRelation(L"ACTOR_jonkman", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableACTOR->ACTOR_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->ACTOR_IdColumn}, false));
    this->relationACTOR_jonkman->Nested = true;
    this->Relations->Add(this->relationACTOR_jonkman);
    this->relationCONTROLLER_jonkman = (gcnew ::System::Data::DataRelation(L"CONTROLLER_jonkman", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCONTROLLER->CONTROLLER_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->CONTROLLER_IdColumn}, false));
    this->relationCONTROLLER_jonkman->Nested = true;
    this->Relations->Add(this->relationCONTROLLER_jonkman);
    this->relationjonkman_VS_RtGnSp = (gcnew ::System::Data::DataRelation(L"jonkman_VS_RtGnSp", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_RtGnSp->jonkman_IdColumn}, false));
    this->relationjonkman_VS_RtGnSp->Nested = true;
    this->Relations->Add(this->relationjonkman_VS_RtGnSp);
    this->relationjonkman_VS_SlPc = (gcnew ::System::Data::DataRelation(L"jonkman_VS_SlPc", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_SlPc->jonkman_IdColumn}, false));
    this->relationjonkman_VS_SlPc->Nested = true;
    this->Relations->Add(this->relationjonkman_VS_SlPc);
    this->relationjonkman_VS_Rgn2K = (gcnew ::System::Data::DataRelation(L"jonkman_VS_Rgn2K", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn2K->jonkman_IdColumn}, false));
    this->relationjonkman_VS_Rgn2K->Nested = true;
    this->Relations->Add(this->relationjonkman_VS_Rgn2K);
    this->relationjonkman_VS_Rgn2Sp = (gcnew ::System::Data::DataRelation(L"jonkman_VS_Rgn2Sp", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn2Sp->jonkman_IdColumn}, false));
    this->relationjonkman_VS_Rgn2Sp->Nested = true;
    this->Relations->Add(this->relationjonkman_VS_Rgn2Sp);
    this->relationjonkman_VS_CtInSp = (gcnew ::System::Data::DataRelation(L"jonkman_VS_CtInSp", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_CtInSp->jonkman_IdColumn}, false));
    this->relationjonkman_VS_CtInSp->Nested = true;
    this->Relations->Add(this->relationjonkman_VS_CtInSp);
    this->relationjonkman_VS_RtPwr = (gcnew ::System::Data::DataRelation(L"jonkman_VS_RtPwr", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_RtPwr->jonkman_IdColumn}, false));
    this->relationjonkman_VS_RtPwr->Nested = true;
    this->Relations->Add(this->relationjonkman_VS_RtPwr);
    this->relationjonkman_VS_Rgn3MP = (gcnew ::System::Data::DataRelation(L"jonkman_VS_Rgn3MP", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableVS_Rgn3MP->jonkman_IdColumn}, false));
    this->relationjonkman_VS_Rgn3MP->Nested = true;
    this->Relations->Add(this->relationjonkman_VS_Rgn3MP);
    this->relationjonkman_PC_KI = (gcnew ::System::Data::DataRelation(L"jonkman_PC_KI", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KI->jonkman_IdColumn}, false));
    this->relationjonkman_PC_KI->Nested = true;
    this->Relations->Add(this->relationjonkman_PC_KI);
    this->relationjonkman_PC_KK = (gcnew ::System::Data::DataRelation(L"jonkman_PC_KK", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KK->jonkman_IdColumn}, false));
    this->relationjonkman_PC_KK->Nested = true;
    this->Relations->Add(this->relationjonkman_PC_KK);
    this->relationjonkman_PC_KP = (gcnew ::System::Data::DataRelation(L"jonkman_PC_KP", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_KP->jonkman_IdColumn}, false));
    this->relationjonkman_PC_KP->Nested = true;
    this->Relations->Add(this->relationjonkman_PC_KP);
    this->relationjonkman_PC_RefSpd = (gcnew ::System::Data::DataRelation(L"jonkman_PC_RefSpd", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablejonkman->jonkman_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablePC_RefSpd->jonkman_IdColumn}, false));
    this->relationjonkman_PC_RefSpd->Nested = true;
    this->Relations->Add(this->relationjonkman_PC_RefSpd);
    this->relationACTOR_vidal = (gcnew ::System::Data::DataRelation(L"ACTOR_vidal", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableACTOR->ACTOR_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->ACTOR_IdColumn}, false));
    this->relationACTOR_vidal->Nested = true;
    this->Relations->Add(this->relationACTOR_vidal);
    this->relationCONTROLLER_vidal = (gcnew ::System::Data::DataRelation(L"CONTROLLER_vidal", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCONTROLLER->CONTROLLER_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->CONTROLLER_IdColumn}, false));
    this->relationCONTROLLER_vidal->Nested = true;
    this->Relations->Add(this->relationCONTROLLER_vidal);
    this->relationvidal_A = (gcnew ::System::Data::DataRelation(L"vidal_A", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->vidal_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableA->vidal_IdColumn}, false));
    this->relationvidal_A->Nested = true;
    this->Relations->Add(this->relationvidal_A);
    this->relationvidal_K_alpha = (gcnew ::System::Data::DataRelation(L"vidal_K_alpha", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->vidal_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableK_alpha->vidal_IdColumn}, false));
    this->relationvidal_K_alpha->Nested = true;
    this->Relations->Add(this->relationvidal_K_alpha);
    this->relationvidal_P_s = (gcnew ::System::Data::DataRelation(L"vidal_P_s", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevidal->vidal_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableP_s->vidal_IdColumn}, false));
    this->relationvidal_P_s->Nested = true;
    this->Relations->Add(this->relationvidal_P_s);
    this->relationACTOR_boukhezzar = (gcnew ::System::Data::DataRelation(L"ACTOR_boukhezzar", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableACTOR->ACTOR_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->ACTOR_IdColumn}, false));
    this->relationACTOR_boukhezzar->Nested = true;
    this->Relations->Add(this->relationACTOR_boukhezzar);
    this->relationCONTROLLER_boukhezzar = (gcnew ::System::Data::DataRelation(L"CONTROLLER_boukhezzar", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCONTROLLER->CONTROLLER_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->CONTROLLER_IdColumn}, false));
    this->relationCONTROLLER_boukhezzar->Nested = true;
    this->Relations->Add(this->relationCONTROLLER_boukhezzar);
    this->relationboukhezzar_C_0 = (gcnew ::System::Data::DataRelation(L"boukhezzar_C_0", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->boukhezzar_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableC_0->boukhezzar_IdColumn}, false));
    this->relationboukhezzar_C_0->Nested = true;
    this->Relations->Add(this->relationboukhezzar_C_0);
    this->relationboukhezzar_K_t = (gcnew ::System::Data::DataRelation(L"boukhezzar_K_t", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->boukhezzar_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableK_t->boukhezzar_IdColumn}, false));
    this->relationboukhezzar_K_t->Nested = true;
    this->Relations->Add(this->relationboukhezzar_K_t);
    this->relationboukhezzar_J_t = (gcnew ::System::Data::DataRelation(L"boukhezzar_J_t", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableboukhezzar->boukhezzar_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableJ_t->boukhezzar_IdColumn}, false));
    this->relationboukhezzar_J_t->Nested = true;
    this->Relations->Add(this->relationboukhezzar_J_t);
    this->_relationSIMGOD_actor_critic = (gcnew ::System::Data::DataRelation(L"SIMGOD_actor-critic", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSIMGOD->SIMGOD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_actor_critic->SIMGOD_IdColumn}, false));
    this->_relationSIMGOD_actor_critic->Nested = true;
    this->Relations->Add(this->_relationSIMGOD_actor_critic);
    this->_relationactor_critic_CRITIC = (gcnew ::System::Data::DataRelation(L"actor-critic_CRITIC", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_actor_critic->_actor_critic_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCRITIC->_actor_critic_IdColumn}, false));
    this->_relationactor_critic_CRITIC->Nested = true;
    this->Relations->Add(this->_relationactor_critic_CRITIC);
    this->_relationactor_critic_controller_CRITIC = (gcnew ::System::Data::DataRelation(L"actor-critic-controller_CRITIC", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_actor_critic_controller->_actor_critic_controller_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCRITIC->_actor_critic_controller_IdColumn}, false));
    this->_relationactor_critic_controller_CRITIC->Nested = true;
    this->Relations->Add(this->_relationactor_critic_controller_CRITIC);
    this->_relationCRITIC_TD_Lambda = (gcnew ::System::Data::DataRelation(L"CRITIC_TD-Lambda", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCRITIC->CRITIC_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TD_Lambda->CRITIC_IdColumn}, false));
    this->_relationCRITIC_TD_Lambda->Nested = true;
    this->Relations->Add(this->_relationCRITIC_TD_Lambda);
    this->_relationTD_Lambda_GAMMA = (gcnew ::System::Data::DataRelation(L"TD-Lambda_GAMMA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TD_Lambda->_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGAMMA->_TD_Lambda_IdColumn}, false));
    this->_relationTD_Lambda_GAMMA->Nested = true;
    this->Relations->Add(this->_relationTD_Lambda_GAMMA);
    this->_relationTrue_Online_TD_Lambda_GAMMA = (gcnew ::System::Data::DataRelation(L"True-Online-TD-Lambda_GAMMA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_True_Online_TD_Lambda->_True_Online_TD_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGAMMA->_True_Online_TD_Lambda_IdColumn}, false));
    this->_relationTrue_Online_TD_Lambda_GAMMA->Nested = true;
    this->Relations->Add(this->_relationTrue_Online_TD_Lambda_GAMMA);
    this->_relationTDC_Lambda_GAMMA = (gcnew ::System::Data::DataRelation(L"TDC-Lambda_GAMMA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TDC_Lambda->_TDC_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableGAMMA->_TDC_Lambda_IdColumn}, false));
    this->_relationTDC_Lambda_GAMMA->Nested = true;
    this->Relations->Add(this->_relationTDC_Lambda_GAMMA);
    this->_relationCRITIC_True_Online_TD_Lambda = (gcnew ::System::Data::DataRelation(L"CRITIC_True-Online-TD-Lambda", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCRITIC->CRITIC_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_True_Online_TD_Lambda->CRITIC_IdColumn}, false));
    this->_relationCRITIC_True_Online_TD_Lambda->Nested = true;
    this->Relations->Add(this->_relationCRITIC_True_Online_TD_Lambda);
    this->_relationCRITIC_TDC_Lambda = (gcnew ::System::Data::DataRelation(L"CRITIC_TDC-Lambda", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCRITIC->CRITIC_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TDC_Lambda->CRITIC_IdColumn}, false));
    this->_relationCRITIC_TDC_Lambda->Nested = true;
    this->Relations->Add(this->_relationCRITIC_TDC_Lambda);
    this->_relationTDC_Lambda_BETA = (gcnew ::System::Data::DataRelation(L"TDC-Lambda_BETA", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_TDC_Lambda->_TDC_Lambda_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableBETA->_TDC_Lambda_IdColumn}, false));
    this->_relationTDC_Lambda_BETA->Nested = true;
    this->Relations->Add(this->_relationTDC_Lambda_BETA);
    this->_relationSIMGOD_actor_critic_controller = (gcnew ::System::Data::DataRelation(L"SIMGOD_actor-critic-controller", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableSIMGOD->SIMGOD_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_actor_critic_controller->SIMGOD_IdColumn}, false));
    this->_relationSIMGOD_actor_critic_controller->Nested = true;
    this->Relations->Add(this->_relationSIMGOD_actor_critic_controller);
    this->_relationactor_critic_controller_CONTROLLER = (gcnew ::System::Data::DataRelation(L"actor-critic-controller_CONTROLLER", 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_actor_critic_controller->_actor_critic_controller_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableCONTROLLER->_actor_critic_controller_IdColumn}, false));
    this->_relationactor_critic_controller_CONTROLLER->Nested = true;
    this->Relations->Add(this->_relationactor_critic_controller_CONTROLLER);
}

inline ::System::Boolean RLSimion::ShouldSerializeEXPERIMENT() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeLOG() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeWORLD() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializereward() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerialize_reward_component() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerialize_wind_turbine() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeTRAINING_WIND_DATA_FILES() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerialize_magnetic_levitation() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializepitch() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerialize_underwater_vehicle() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeSIMGOD() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerialize_actor_only() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeACTOR() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerialize_VFA_Actor() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerialize_Single_Output_Policy_Learner() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeCACLA() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeETRACES() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeLAMBDA() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeschedule() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeTHRESHOLD() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeALPHA() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeVFA() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeRBF_GRID() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerialize_state_grid_dimension() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeEXPLORATION_NOISE() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeSIGMA() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeRegularGradientActor() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeIncrementalNaturalActor() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializePID() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeKP() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeKI() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeKD() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeLQR() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerialize_LQR_GAIN() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializejonkman() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeVS_RtGnSp() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeVS_SlPc() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeVS_Rgn2K() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeVS_Rgn2Sp() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeVS_CtInSp() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeVS_RtPwr() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeVS_Rgn3MP() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializePC_KI() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializePC_KK() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializePC_KP() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializePC_RefSpd() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializevidal() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeA() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeK_alpha() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeP_s() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeboukhezzar() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeC_0() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeK_t() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeJ_t() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerialize_actor_critic() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeCRITIC() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerialize_TD_Lambda() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeGAMMA() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerialize_True_Online_TD_Lambda() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerialize_TDC_Lambda() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeBETA() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerialize_actor_critic_controller() {
    return false;
}

inline ::System::Boolean RLSimion::ShouldSerializeCONTROLLER() {
    return false;
}

inline ::System::Void RLSimion::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
    if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any->Namespace = ds->Namespace;
    sequence->Items->Add(any);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::EXPERIMENTDataTable::EXPERIMENTDataTable() {
    this->TableName = L"EXPERIMENT";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::EXPERIMENTDataTable::EXPERIMENTDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::EXPERIMENTDataTable::EXPERIMENTDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::EXPERIMENTDataTable::NUM_EPISODESColumn::get() {
    return this->columnNUM_EPISODES;
}

inline ::System::Data::DataColumn^  RLSimion::EXPERIMENTDataTable::EPISODE_LENGTHColumn::get() {
    return this->columnEPISODE_LENGTH;
}

inline ::System::Data::DataColumn^  RLSimion::EXPERIMENTDataTable::RANDOM_SEEDColumn::get() {
    return this->columnRANDOM_SEED;
}

inline ::System::Data::DataColumn^  RLSimion::EXPERIMENTDataTable::EVAL_FREQColumn::get() {
    return this->columnEVAL_FREQ;
}

inline ::System::Data::DataColumn^  RLSimion::EXPERIMENTDataTable::EXPERIMENT_IdColumn::get() {
    return this->columnEXPERIMENT_Id;
}

inline ::System::Int32 RLSimion::EXPERIMENTDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::EXPERIMENTRow^  RLSimion::EXPERIMENTDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::EXPERIMENTRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::EXPERIMENTDataTable::AddEXPERIMENTRow(RLSimion::EXPERIMENTRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::EXPERIMENTRow^  RLSimion::EXPERIMENTDataTable::AddEXPERIMENTRow(System::Int64 NUM_EPISODES, System::Int64 EPISODE_LENGTH, 
            System::Int64 RANDOM_SEED, System::Int64 EVAL_FREQ) {
    RLSimion::EXPERIMENTRow^  rowEXPERIMENTRow = (cli::safe_cast<RLSimion::EXPERIMENTRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {NUM_EPISODES, EPISODE_LENGTH, 
        RANDOM_SEED, EVAL_FREQ, nullptr};
    rowEXPERIMENTRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowEXPERIMENTRow);
    return rowEXPERIMENTRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::EXPERIMENTDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::EXPERIMENTDataTable::Clone() {
    RLSimion::EXPERIMENTDataTable^  cln = (cli::safe_cast<RLSimion::EXPERIMENTDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::EXPERIMENTDataTable::CreateInstance() {
    return (gcnew RLSimion::EXPERIMENTDataTable());
}

inline ::System::Void RLSimion::EXPERIMENTDataTable::InitVars() {
    this->columnNUM_EPISODES = __super::Columns[L"NUM_EPISODES"];
    this->columnEPISODE_LENGTH = __super::Columns[L"EPISODE_LENGTH"];
    this->columnRANDOM_SEED = __super::Columns[L"RANDOM_SEED"];
    this->columnEVAL_FREQ = __super::Columns[L"EVAL_FREQ"];
    this->columnEXPERIMENT_Id = __super::Columns[L"EXPERIMENT_Id"];
}

inline ::System::Void RLSimion::EXPERIMENTDataTable::InitClass() {
    this->columnNUM_EPISODES = (gcnew ::System::Data::DataColumn(L"NUM_EPISODES", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnNUM_EPISODES);
    this->columnEPISODE_LENGTH = (gcnew ::System::Data::DataColumn(L"EPISODE_LENGTH", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnEPISODE_LENGTH);
    this->columnRANDOM_SEED = (gcnew ::System::Data::DataColumn(L"RANDOM_SEED", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnRANDOM_SEED);
    this->columnEVAL_FREQ = (gcnew ::System::Data::DataColumn(L"EVAL_FREQ", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnEVAL_FREQ);
    this->columnEXPERIMENT_Id = (gcnew ::System::Data::DataColumn(L"EXPERIMENT_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnEXPERIMENT_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnEXPERIMENT_Id}, 
            true)));
    this->columnNUM_EPISODES->AllowDBNull = false;
    this->columnNUM_EPISODES->DefaultValue = static_cast<System::Int64>(1);
    this->columnEPISODE_LENGTH->AllowDBNull = false;
    this->columnRANDOM_SEED->AllowDBNull = false;
    this->columnEVAL_FREQ->AllowDBNull = false;
    this->columnEXPERIMENT_Id->AutoIncrement = true;
    this->columnEXPERIMENT_Id->AllowDBNull = false;
    this->columnEXPERIMENT_Id->Unique = true;
}

inline RLSimion::EXPERIMENTRow^  RLSimion::EXPERIMENTDataTable::NewEXPERIMENTRow() {
    return (cli::safe_cast<RLSimion::EXPERIMENTRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::EXPERIMENTDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::EXPERIMENTRow(builder));
}

inline ::System::Type^  RLSimion::EXPERIMENTDataTable::GetRowType() {
    return RLSimion::EXPERIMENTRow::typeid;
}

inline ::System::Void RLSimion::EXPERIMENTDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->EXPERIMENTRowChanged(this, (gcnew RLSimion::EXPERIMENTRowChangeEvent((cli::safe_cast<RLSimion::EXPERIMENTRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::EXPERIMENTDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->EXPERIMENTRowChanging(this, (gcnew RLSimion::EXPERIMENTRowChangeEvent((cli::safe_cast<RLSimion::EXPERIMENTRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::EXPERIMENTDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->EXPERIMENTRowDeleted(this, (gcnew RLSimion::EXPERIMENTRowChangeEvent((cli::safe_cast<RLSimion::EXPERIMENTRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::EXPERIMENTDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->EXPERIMENTRowDeleting(this, (gcnew RLSimion::EXPERIMENTRowChangeEvent((cli::safe_cast<RLSimion::EXPERIMENTRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::EXPERIMENTDataTable::RemoveEXPERIMENTRow(RLSimion::EXPERIMENTRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::EXPERIMENTDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"EXPERIMENTDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::LOGDataTable::LOGDataTable() {
    this->TableName = L"LOG";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::LOGDataTable::LOGDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::LOGDataTable::LOGDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::LOGDataTable::FREQColumn::get() {
    return this->columnFREQ;
}

inline ::System::Data::DataColumn^  RLSimion::LOGDataTable::OUTPUT_DIRColumn::get() {
    return this->columnOUTPUT_DIR;
}

inline ::System::Data::DataColumn^  RLSimion::LOGDataTable::FILE_PREFIXColumn::get() {
    return this->columnFILE_PREFIX;
}

inline ::System::Data::DataColumn^  RLSimion::LOGDataTable::EVALUATION_EPISODESColumn::get() {
    return this->columnEVALUATION_EPISODES;
}

inline ::System::Data::DataColumn^  RLSimion::LOGDataTable::TRAINING_EPISODESColumn::get() {
    return this->columnTRAINING_EPISODES;
}

inline ::System::Data::DataColumn^  RLSimion::LOGDataTable::EVALUATION_AVG_REWARDSColumn::get() {
    return this->columnEVALUATION_AVG_REWARDS;
}

inline ::System::Data::DataColumn^  RLSimion::LOGDataTable::EXPERIMENT_IdColumn::get() {
    return this->columnEXPERIMENT_Id;
}

inline ::System::Int32 RLSimion::LOGDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::LOGRow^  RLSimion::LOGDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::LOGRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::LOGDataTable::AddLOGRow(RLSimion::LOGRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::LOGRow^  RLSimion::LOGDataTable::AddLOGRow(
            System::Decimal FREQ, 
            System::String^  OUTPUT_DIR, 
            System::Int64 FILE_PREFIX, 
            System::Boolean EVALUATION_EPISODES, 
            System::Boolean TRAINING_EPISODES, 
            System::Boolean EVALUATION_AVG_REWARDS, 
            RLSimion::EXPERIMENTRow^  parentEXPERIMENTRowByEXPERIMENT_LOG) {
    RLSimion::LOGRow^  rowLOGRow = (cli::safe_cast<RLSimion::LOGRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(7) {FREQ, OUTPUT_DIR, FILE_PREFIX, 
        EVALUATION_EPISODES, TRAINING_EPISODES, EVALUATION_AVG_REWARDS, nullptr};
    if (parentEXPERIMENTRowByEXPERIMENT_LOG != nullptr) {
        columnValuesArray[6] = parentEXPERIMENTRowByEXPERIMENT_LOG[4];
    }
    rowLOGRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowLOGRow);
    return rowLOGRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::LOGDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::LOGDataTable::Clone() {
    RLSimion::LOGDataTable^  cln = (cli::safe_cast<RLSimion::LOGDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::LOGDataTable::CreateInstance() {
    return (gcnew RLSimion::LOGDataTable());
}

inline ::System::Void RLSimion::LOGDataTable::InitVars() {
    this->columnFREQ = __super::Columns[L"FREQ"];
    this->columnOUTPUT_DIR = __super::Columns[L"OUTPUT_DIR"];
    this->columnFILE_PREFIX = __super::Columns[L"FILE_PREFIX"];
    this->columnEVALUATION_EPISODES = __super::Columns[L"EVALUATION_EPISODES"];
    this->columnTRAINING_EPISODES = __super::Columns[L"TRAINING_EPISODES"];
    this->columnEVALUATION_AVG_REWARDS = __super::Columns[L"EVALUATION_AVG_REWARDS"];
    this->columnEXPERIMENT_Id = __super::Columns[L"EXPERIMENT_Id"];
}

inline ::System::Void RLSimion::LOGDataTable::InitClass() {
    this->columnFREQ = (gcnew ::System::Data::DataColumn(L"FREQ", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnFREQ);
    this->columnOUTPUT_DIR = (gcnew ::System::Data::DataColumn(L"OUTPUT_DIR", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnOUTPUT_DIR);
    this->columnFILE_PREFIX = (gcnew ::System::Data::DataColumn(L"FILE_PREFIX", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnFILE_PREFIX);
    this->columnEVALUATION_EPISODES = (gcnew ::System::Data::DataColumn(L"EVALUATION_EPISODES", ::System::Boolean::typeid, nullptr, 
        ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnEVALUATION_EPISODES);
    this->columnTRAINING_EPISODES = (gcnew ::System::Data::DataColumn(L"TRAINING_EPISODES", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnTRAINING_EPISODES);
    this->columnEVALUATION_AVG_REWARDS = (gcnew ::System::Data::DataColumn(L"EVALUATION_AVG_REWARDS", ::System::Boolean::typeid, 
        nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnEVALUATION_AVG_REWARDS);
    this->columnEXPERIMENT_Id = (gcnew ::System::Data::DataColumn(L"EXPERIMENT_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnEXPERIMENT_Id);
    this->columnFREQ->AllowDBNull = false;
    this->columnOUTPUT_DIR->AllowDBNull = false;
    this->columnFILE_PREFIX->AllowDBNull = false;
    this->columnEVALUATION_EPISODES->AllowDBNull = false;
    this->columnTRAINING_EPISODES->AllowDBNull = false;
    this->columnEVALUATION_AVG_REWARDS->AllowDBNull = false;
}

inline RLSimion::LOGRow^  RLSimion::LOGDataTable::NewLOGRow() {
    return (cli::safe_cast<RLSimion::LOGRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::LOGDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::LOGRow(builder));
}

inline ::System::Type^  RLSimion::LOGDataTable::GetRowType() {
    return RLSimion::LOGRow::typeid;
}

inline ::System::Void RLSimion::LOGDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->LOGRowChanged(this, (gcnew RLSimion::LOGRowChangeEvent((cli::safe_cast<RLSimion::LOGRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::LOGDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->LOGRowChanging(this, (gcnew RLSimion::LOGRowChangeEvent((cli::safe_cast<RLSimion::LOGRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::LOGDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->LOGRowDeleted(this, (gcnew RLSimion::LOGRowChangeEvent((cli::safe_cast<RLSimion::LOGRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::LOGDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->LOGRowDeleting(this, (gcnew RLSimion::LOGRowChangeEvent((cli::safe_cast<RLSimion::LOGRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::LOGDataTable::RemoveLOGRow(RLSimion::LOGRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::LOGDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"LOGDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::WORLDDataTable::WORLDDataTable() {
    this->TableName = L"WORLD";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::WORLDDataTable::WORLDDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::WORLDDataTable::WORLDDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::WORLDDataTable::DELTA_TColumn::get() {
    return this->columnDELTA_T;
}

inline ::System::Data::DataColumn^  RLSimion::WORLDDataTable::NUM_SIMULATION_STEPSColumn::get() {
    return this->columnNUM_SIMULATION_STEPS;
}

inline ::System::Data::DataColumn^  RLSimion::WORLDDataTable::WORLD_IdColumn::get() {
    return this->columnWORLD_Id;
}

inline ::System::Int32 RLSimion::WORLDDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::WORLDRow^  RLSimion::WORLDDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::WORLDRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::WORLDDataTable::AddWORLDRow(RLSimion::WORLDRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::WORLDRow^  RLSimion::WORLDDataTable::AddWORLDRow(System::Decimal DELTA_T, System::Int64 NUM_SIMULATION_STEPS) {
    RLSimion::WORLDRow^  rowWORLDRow = (cli::safe_cast<RLSimion::WORLDRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {DELTA_T, NUM_SIMULATION_STEPS, 
        nullptr};
    rowWORLDRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowWORLDRow);
    return rowWORLDRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::WORLDDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::WORLDDataTable::Clone() {
    RLSimion::WORLDDataTable^  cln = (cli::safe_cast<RLSimion::WORLDDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::WORLDDataTable::CreateInstance() {
    return (gcnew RLSimion::WORLDDataTable());
}

inline ::System::Void RLSimion::WORLDDataTable::InitVars() {
    this->columnDELTA_T = __super::Columns[L"DELTA_T"];
    this->columnNUM_SIMULATION_STEPS = __super::Columns[L"NUM_SIMULATION_STEPS"];
    this->columnWORLD_Id = __super::Columns[L"WORLD_Id"];
}

inline ::System::Void RLSimion::WORLDDataTable::InitClass() {
    this->columnDELTA_T = (gcnew ::System::Data::DataColumn(L"DELTA_T", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnDELTA_T);
    this->columnNUM_SIMULATION_STEPS = (gcnew ::System::Data::DataColumn(L"NUM_SIMULATION_STEPS", ::System::Int64::typeid, nullptr, 
        ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnNUM_SIMULATION_STEPS);
    this->columnWORLD_Id = (gcnew ::System::Data::DataColumn(L"WORLD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnWORLD_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnWORLD_Id}, 
            true)));
    this->columnDELTA_T->AllowDBNull = false;
    this->columnNUM_SIMULATION_STEPS->AllowDBNull = false;
    this->columnWORLD_Id->AutoIncrement = true;
    this->columnWORLD_Id->AllowDBNull = false;
    this->columnWORLD_Id->Unique = true;
}

inline RLSimion::WORLDRow^  RLSimion::WORLDDataTable::NewWORLDRow() {
    return (cli::safe_cast<RLSimion::WORLDRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::WORLDDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::WORLDRow(builder));
}

inline ::System::Type^  RLSimion::WORLDDataTable::GetRowType() {
    return RLSimion::WORLDRow::typeid;
}

inline ::System::Void RLSimion::WORLDDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->WORLDRowChanged(this, (gcnew RLSimion::WORLDRowChangeEvent((cli::safe_cast<RLSimion::WORLDRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::WORLDDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->WORLDRowChanging(this, (gcnew RLSimion::WORLDRowChangeEvent((cli::safe_cast<RLSimion::WORLDRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::WORLDDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->WORLDRowDeleted(this, (gcnew RLSimion::WORLDRowChangeEvent((cli::safe_cast<RLSimion::WORLDRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::WORLDDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->WORLDRowDeleting(this, (gcnew RLSimion::WORLDRowChangeEvent((cli::safe_cast<RLSimion::WORLDRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::WORLDDataTable::RemoveWORLDRow(RLSimion::WORLDRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::WORLDDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"WORLDDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::rewardDataTable::rewardDataTable() {
    this->TableName = L"reward";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::rewardDataTable::rewardDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::rewardDataTable::rewardDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::rewardDataTable::MIN_REWARDColumn::get() {
    return this->columnMIN_REWARD;
}

inline ::System::Data::DataColumn^  RLSimion::rewardDataTable::MAX_REWARDColumn::get() {
    return this->columnMAX_REWARD;
}

inline ::System::Data::DataColumn^  RLSimion::rewardDataTable::reward_IdColumn::get() {
    return this->columnreward_Id;
}

inline ::System::Data::DataColumn^  RLSimion::rewardDataTable::WORLD_IdColumn::get() {
    return this->columnWORLD_Id;
}

inline ::System::Int32 RLSimion::rewardDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::rewardRow^  RLSimion::rewardDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::rewardRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::rewardDataTable::AddrewardRow(RLSimion::rewardRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::rewardRow^  RLSimion::rewardDataTable::AddrewardRow(System::Decimal MIN_REWARD, System::Decimal MAX_REWARD, 
            RLSimion::WORLDRow^  parentWORLDRowByWORLD_reward) {
    RLSimion::rewardRow^  rowrewardRow = (cli::safe_cast<RLSimion::rewardRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {MIN_REWARD, MAX_REWARD, 
        nullptr, nullptr};
    if (parentWORLDRowByWORLD_reward != nullptr) {
        columnValuesArray[3] = parentWORLDRowByWORLD_reward[2];
    }
    rowrewardRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowrewardRow);
    return rowrewardRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::rewardDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::rewardDataTable::Clone() {
    RLSimion::rewardDataTable^  cln = (cli::safe_cast<RLSimion::rewardDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::rewardDataTable::CreateInstance() {
    return (gcnew RLSimion::rewardDataTable());
}

inline ::System::Void RLSimion::rewardDataTable::InitVars() {
    this->columnMIN_REWARD = __super::Columns[L"MIN_REWARD"];
    this->columnMAX_REWARD = __super::Columns[L"MAX_REWARD"];
    this->columnreward_Id = __super::Columns[L"reward_Id"];
    this->columnWORLD_Id = __super::Columns[L"WORLD_Id"];
}

inline ::System::Void RLSimion::rewardDataTable::InitClass() {
    this->columnMIN_REWARD = (gcnew ::System::Data::DataColumn(L"MIN_REWARD", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnMIN_REWARD);
    this->columnMAX_REWARD = (gcnew ::System::Data::DataColumn(L"MAX_REWARD", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnMAX_REWARD);
    this->columnreward_Id = (gcnew ::System::Data::DataColumn(L"reward_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnreward_Id);
    this->columnWORLD_Id = (gcnew ::System::Data::DataColumn(L"WORLD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnWORLD_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnreward_Id}, 
            true)));
    this->columnMIN_REWARD->AllowDBNull = false;
    this->columnMAX_REWARD->AllowDBNull = false;
    this->columnreward_Id->AutoIncrement = true;
    this->columnreward_Id->AllowDBNull = false;
    this->columnreward_Id->Unique = true;
}

inline RLSimion::rewardRow^  RLSimion::rewardDataTable::NewrewardRow() {
    return (cli::safe_cast<RLSimion::rewardRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::rewardDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::rewardRow(builder));
}

inline ::System::Type^  RLSimion::rewardDataTable::GetRowType() {
    return RLSimion::rewardRow::typeid;
}

inline ::System::Void RLSimion::rewardDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->rewardRowChanged(this, (gcnew RLSimion::rewardRowChangeEvent((cli::safe_cast<RLSimion::rewardRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::rewardDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->rewardRowChanging(this, (gcnew RLSimion::rewardRowChangeEvent((cli::safe_cast<RLSimion::rewardRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::rewardDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->rewardRowDeleted(this, (gcnew RLSimion::rewardRowChangeEvent((cli::safe_cast<RLSimion::rewardRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::rewardDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->rewardRowDeleting(this, (gcnew RLSimion::rewardRowChangeEvent((cli::safe_cast<RLSimion::rewardRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::rewardDataTable::RemoverewardRow(RLSimion::rewardRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::rewardDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"rewardDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::_reward_componentDataTable::_reward_componentDataTable() {
    this->TableName = L"reward-component";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::_reward_componentDataTable::_reward_componentDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::_reward_componentDataTable::_reward_componentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::_reward_componentDataTable::COMPONENT_TYPEColumn::get() {
    return this->columnCOMPONENT_TYPE;
}

inline ::System::Data::DataColumn^  RLSimion::_reward_componentDataTable::COMPONENT_WEIGHTColumn::get() {
    return this->columnCOMPONENT_WEIGHT;
}

inline ::System::Data::DataColumn^  RLSimion::_reward_componentDataTable::COMPONENT_TOLERANCEColumn::get() {
    return this->columnCOMPONENT_TOLERANCE;
}

inline ::System::Data::DataColumn^  RLSimion::_reward_componentDataTable::CONTROL_ERROR_VARIABLEColumn::get() {
    return this->columnCONTROL_ERROR_VARIABLE;
}

inline ::System::Data::DataColumn^  RLSimion::_reward_componentDataTable::reward_IdColumn::get() {
    return this->columnreward_Id;
}

inline ::System::Int32 RLSimion::_reward_componentDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::_reward_componentRow^  RLSimion::_reward_componentDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::_reward_componentRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::_reward_componentDataTable::Add_reward_componentRow(RLSimion::_reward_componentRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::_reward_componentRow^  RLSimion::_reward_componentDataTable::Add_reward_componentRow(System::String^  COMPONENT_TYPE, 
            System::Decimal COMPONENT_WEIGHT, System::Decimal COMPONENT_TOLERANCE, System::String^  CONTROL_ERROR_VARIABLE, RLSimion::rewardRow^  _parentrewardRowByreward_reward_component) {
    RLSimion::_reward_componentRow^  row_reward_componentRow = (cli::safe_cast<RLSimion::_reward_componentRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {COMPONENT_TYPE, COMPONENT_WEIGHT, 
        COMPONENT_TOLERANCE, CONTROL_ERROR_VARIABLE, nullptr};
    if (_parentrewardRowByreward_reward_component != nullptr) {
        columnValuesArray[4] = _parentrewardRowByreward_reward_component[2];
    }
    row_reward_componentRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_reward_componentRow);
    return row_reward_componentRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::_reward_componentDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::_reward_componentDataTable::Clone() {
    RLSimion::_reward_componentDataTable^  cln = (cli::safe_cast<RLSimion::_reward_componentDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::_reward_componentDataTable::CreateInstance() {
    return (gcnew RLSimion::_reward_componentDataTable());
}

inline ::System::Void RLSimion::_reward_componentDataTable::InitVars() {
    this->columnCOMPONENT_TYPE = __super::Columns[L"COMPONENT_TYPE"];
    this->columnCOMPONENT_WEIGHT = __super::Columns[L"COMPONENT_WEIGHT"];
    this->columnCOMPONENT_TOLERANCE = __super::Columns[L"COMPONENT_TOLERANCE"];
    this->columnCONTROL_ERROR_VARIABLE = __super::Columns[L"CONTROL_ERROR_VARIABLE"];
    this->columnreward_Id = __super::Columns[L"reward_Id"];
}

inline ::System::Void RLSimion::_reward_componentDataTable::InitClass() {
    this->columnCOMPONENT_TYPE = (gcnew ::System::Data::DataColumn(L"COMPONENT_TYPE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnCOMPONENT_TYPE);
    this->columnCOMPONENT_WEIGHT = (gcnew ::System::Data::DataColumn(L"COMPONENT_WEIGHT", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnCOMPONENT_WEIGHT);
    this->columnCOMPONENT_TOLERANCE = (gcnew ::System::Data::DataColumn(L"COMPONENT_TOLERANCE", ::System::Decimal::typeid, nullptr, 
        ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnCOMPONENT_TOLERANCE);
    this->columnCONTROL_ERROR_VARIABLE = (gcnew ::System::Data::DataColumn(L"CONTROL_ERROR_VARIABLE", ::System::String::typeid, nullptr, 
        ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnCONTROL_ERROR_VARIABLE);
    this->columnreward_Id = (gcnew ::System::Data::DataColumn(L"reward_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnreward_Id);
    this->columnCOMPONENT_TYPE->AllowDBNull = false;
    this->columnCOMPONENT_WEIGHT->AllowDBNull = false;
    this->columnCOMPONENT_TOLERANCE->AllowDBNull = false;
    this->columnCONTROL_ERROR_VARIABLE->AllowDBNull = false;
}

inline RLSimion::_reward_componentRow^  RLSimion::_reward_componentDataTable::New_reward_componentRow() {
    return (cli::safe_cast<RLSimion::_reward_componentRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::_reward_componentDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::_reward_componentRow(builder));
}

inline ::System::Type^  RLSimion::_reward_componentDataTable::GetRowType() {
    return RLSimion::_reward_componentRow::typeid;
}

inline ::System::Void RLSimion::_reward_componentDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_reward_componentRowChanged(this, (gcnew RLSimion::_reward_componentRowChangeEvent((cli::safe_cast<RLSimion::_reward_componentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_reward_componentDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_reward_componentRowChanging(this, (gcnew RLSimion::_reward_componentRowChangeEvent((cli::safe_cast<RLSimion::_reward_componentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_reward_componentDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_reward_componentRowDeleted(this, (gcnew RLSimion::_reward_componentRowChangeEvent((cli::safe_cast<RLSimion::_reward_componentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_reward_componentDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_reward_componentRowDeleting(this, (gcnew RLSimion::_reward_componentRowChangeEvent((cli::safe_cast<RLSimion::_reward_componentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_reward_componentDataTable::Remove_reward_componentRow(RLSimion::_reward_componentRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::_reward_componentDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_reward_componentDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::_wind_turbineDataTable::_wind_turbineDataTable() {
    this->TableName = L"wind-turbine";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::_wind_turbineDataTable::_wind_turbineDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::_wind_turbineDataTable::_wind_turbineDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::_wind_turbineDataTable::EVALUATION_WIND_DATA_FILEColumn::get() {
    return this->columnEVALUATION_WIND_DATA_FILE;
}

inline ::System::Data::DataColumn^  RLSimion::_wind_turbineDataTable::POWER_SET_POINT_FILEColumn::get() {
    return this->columnPOWER_SET_POINT_FILE;
}

inline ::System::Data::DataColumn^  RLSimion::_wind_turbineDataTable::_wind_turbine_IdColumn::get() {
    return this->column_wind_turbine_Id;
}

inline ::System::Data::DataColumn^  RLSimion::_wind_turbineDataTable::WORLD_IdColumn::get() {
    return this->columnWORLD_Id;
}

inline ::System::Int32 RLSimion::_wind_turbineDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::_wind_turbineRow^  RLSimion::_wind_turbineDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::_wind_turbineRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::_wind_turbineDataTable::Add_wind_turbineRow(RLSimion::_wind_turbineRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::_wind_turbineRow^  RLSimion::_wind_turbineDataTable::Add_wind_turbineRow(System::String^  EVALUATION_WIND_DATA_FILE, 
            System::String^  POWER_SET_POINT_FILE, RLSimion::WORLDRow^  _parentWORLDRowByWORLD_wind_turbine) {
    RLSimion::_wind_turbineRow^  row_wind_turbineRow = (cli::safe_cast<RLSimion::_wind_turbineRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {EVALUATION_WIND_DATA_FILE, 
        POWER_SET_POINT_FILE, nullptr, nullptr};
    if (_parentWORLDRowByWORLD_wind_turbine != nullptr) {
        columnValuesArray[3] = _parentWORLDRowByWORLD_wind_turbine[2];
    }
    row_wind_turbineRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_wind_turbineRow);
    return row_wind_turbineRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::_wind_turbineDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::_wind_turbineDataTable::Clone() {
    RLSimion::_wind_turbineDataTable^  cln = (cli::safe_cast<RLSimion::_wind_turbineDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::_wind_turbineDataTable::CreateInstance() {
    return (gcnew RLSimion::_wind_turbineDataTable());
}

inline ::System::Void RLSimion::_wind_turbineDataTable::InitVars() {
    this->columnEVALUATION_WIND_DATA_FILE = __super::Columns[L"EVALUATION_WIND_DATA_FILE"];
    this->columnPOWER_SET_POINT_FILE = __super::Columns[L"POWER_SET_POINT_FILE"];
    this->column_wind_turbine_Id = __super::Columns[L"wind-turbine_Id"];
    this->columnWORLD_Id = __super::Columns[L"WORLD_Id"];
}

inline ::System::Void RLSimion::_wind_turbineDataTable::InitClass() {
    this->columnEVALUATION_WIND_DATA_FILE = (gcnew ::System::Data::DataColumn(L"EVALUATION_WIND_DATA_FILE", ::System::String::typeid, 
        nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnEVALUATION_WIND_DATA_FILE);
    this->columnPOWER_SET_POINT_FILE = (gcnew ::System::Data::DataColumn(L"POWER_SET_POINT_FILE", ::System::String::typeid, nullptr, 
        ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnPOWER_SET_POINT_FILE);
    this->column_wind_turbine_Id = (gcnew ::System::Data::DataColumn(L"wind-turbine_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_wind_turbine_Id);
    this->columnWORLD_Id = (gcnew ::System::Data::DataColumn(L"WORLD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnWORLD_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->column_wind_turbine_Id}, 
            true)));
    this->columnEVALUATION_WIND_DATA_FILE->AllowDBNull = false;
    this->columnPOWER_SET_POINT_FILE->AllowDBNull = false;
    this->column_wind_turbine_Id->AutoIncrement = true;
    this->column_wind_turbine_Id->AllowDBNull = false;
    this->column_wind_turbine_Id->Unique = true;
}

inline RLSimion::_wind_turbineRow^  RLSimion::_wind_turbineDataTable::New_wind_turbineRow() {
    return (cli::safe_cast<RLSimion::_wind_turbineRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::_wind_turbineDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::_wind_turbineRow(builder));
}

inline ::System::Type^  RLSimion::_wind_turbineDataTable::GetRowType() {
    return RLSimion::_wind_turbineRow::typeid;
}

inline ::System::Void RLSimion::_wind_turbineDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_wind_turbineRowChanged(this, (gcnew RLSimion::_wind_turbineRowChangeEvent((cli::safe_cast<RLSimion::_wind_turbineRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_wind_turbineDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_wind_turbineRowChanging(this, (gcnew RLSimion::_wind_turbineRowChangeEvent((cli::safe_cast<RLSimion::_wind_turbineRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_wind_turbineDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_wind_turbineRowDeleted(this, (gcnew RLSimion::_wind_turbineRowChangeEvent((cli::safe_cast<RLSimion::_wind_turbineRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_wind_turbineDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_wind_turbineRowDeleting(this, (gcnew RLSimion::_wind_turbineRowChangeEvent((cli::safe_cast<RLSimion::_wind_turbineRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_wind_turbineDataTable::Remove_wind_turbineRow(RLSimion::_wind_turbineRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::_wind_turbineDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_wind_turbineDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::TRAINING_WIND_DATA_FILESDataTable::TRAINING_WIND_DATA_FILESDataTable() {
    this->TableName = L"TRAINING_WIND_DATA_FILES";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::TRAINING_WIND_DATA_FILESDataTable::TRAINING_WIND_DATA_FILESDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::TRAINING_WIND_DATA_FILESDataTable::TRAINING_WIND_DATA_FILESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::TRAINING_WIND_DATA_FILESDataTable::TRAINING_WIND_DATA_FILES_ColumnColumn::get() {
    return this->columnTRAINING_WIND_DATA_FILES_Column;
}

inline ::System::Data::DataColumn^  RLSimion::TRAINING_WIND_DATA_FILESDataTable::_wind_turbine_IdColumn::get() {
    return this->column_wind_turbine_Id;
}

inline ::System::Int32 RLSimion::TRAINING_WIND_DATA_FILESDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::TRAINING_WIND_DATA_FILESRow^  RLSimion::TRAINING_WIND_DATA_FILESDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::TRAINING_WIND_DATA_FILESRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::TRAINING_WIND_DATA_FILESDataTable::AddTRAINING_WIND_DATA_FILESRow(RLSimion::TRAINING_WIND_DATA_FILESRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::TRAINING_WIND_DATA_FILESRow^  RLSimion::TRAINING_WIND_DATA_FILESDataTable::AddTRAINING_WIND_DATA_FILESRow(
            System::String^  TRAINING_WIND_DATA_FILES_Column, RLSimion::_wind_turbineRow^  _parent_wind_turbineRowBywind_turbine_TRAINING_WIND_DATA_FILES) {
    RLSimion::TRAINING_WIND_DATA_FILESRow^  rowTRAINING_WIND_DATA_FILESRow = (cli::safe_cast<RLSimion::TRAINING_WIND_DATA_FILESRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {TRAINING_WIND_DATA_FILES_Column, 
        nullptr};
    if (_parent_wind_turbineRowBywind_turbine_TRAINING_WIND_DATA_FILES != nullptr) {
        columnValuesArray[1] = _parent_wind_turbineRowBywind_turbine_TRAINING_WIND_DATA_FILES[2];
    }
    rowTRAINING_WIND_DATA_FILESRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowTRAINING_WIND_DATA_FILESRow);
    return rowTRAINING_WIND_DATA_FILESRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::TRAINING_WIND_DATA_FILESDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::TRAINING_WIND_DATA_FILESDataTable::Clone() {
    RLSimion::TRAINING_WIND_DATA_FILESDataTable^  cln = (cli::safe_cast<RLSimion::TRAINING_WIND_DATA_FILESDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::TRAINING_WIND_DATA_FILESDataTable::CreateInstance() {
    return (gcnew RLSimion::TRAINING_WIND_DATA_FILESDataTable());
}

inline ::System::Void RLSimion::TRAINING_WIND_DATA_FILESDataTable::InitVars() {
    this->columnTRAINING_WIND_DATA_FILES_Column = __super::Columns[L"TRAINING_WIND_DATA_FILES_Column"];
    this->column_wind_turbine_Id = __super::Columns[L"wind-turbine_Id"];
}

inline ::System::Void RLSimion::TRAINING_WIND_DATA_FILESDataTable::InitClass() {
    this->columnTRAINING_WIND_DATA_FILES_Column = (gcnew ::System::Data::DataColumn(L"TRAINING_WIND_DATA_FILES_Column", ::System::String::typeid, 
        nullptr, ::System::Data::MappingType::SimpleContent));
    __super::Columns->Add(this->columnTRAINING_WIND_DATA_FILES_Column);
    this->column_wind_turbine_Id = (gcnew ::System::Data::DataColumn(L"wind-turbine_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_wind_turbine_Id);
    this->columnTRAINING_WIND_DATA_FILES_Column->AllowDBNull = false;
}

inline RLSimion::TRAINING_WIND_DATA_FILESRow^  RLSimion::TRAINING_WIND_DATA_FILESDataTable::NewTRAINING_WIND_DATA_FILESRow() {
    return (cli::safe_cast<RLSimion::TRAINING_WIND_DATA_FILESRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::TRAINING_WIND_DATA_FILESDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::TRAINING_WIND_DATA_FILESRow(builder));
}

inline ::System::Type^  RLSimion::TRAINING_WIND_DATA_FILESDataTable::GetRowType() {
    return RLSimion::TRAINING_WIND_DATA_FILESRow::typeid;
}

inline ::System::Void RLSimion::TRAINING_WIND_DATA_FILESDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->TRAINING_WIND_DATA_FILESRowChanged(this, (gcnew RLSimion::TRAINING_WIND_DATA_FILESRowChangeEvent((cli::safe_cast<RLSimion::TRAINING_WIND_DATA_FILESRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::TRAINING_WIND_DATA_FILESDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->TRAINING_WIND_DATA_FILESRowChanging(this, (gcnew RLSimion::TRAINING_WIND_DATA_FILESRowChangeEvent((cli::safe_cast<RLSimion::TRAINING_WIND_DATA_FILESRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::TRAINING_WIND_DATA_FILESDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->TRAINING_WIND_DATA_FILESRowDeleted(this, (gcnew RLSimion::TRAINING_WIND_DATA_FILESRowChangeEvent((cli::safe_cast<RLSimion::TRAINING_WIND_DATA_FILESRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::TRAINING_WIND_DATA_FILESDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->TRAINING_WIND_DATA_FILESRowDeleting(this, (gcnew RLSimion::TRAINING_WIND_DATA_FILESRowChangeEvent((cli::safe_cast<RLSimion::TRAINING_WIND_DATA_FILESRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::TRAINING_WIND_DATA_FILESDataTable::RemoveTRAINING_WIND_DATA_FILESRow(RLSimion::TRAINING_WIND_DATA_FILESRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::TRAINING_WIND_DATA_FILESDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"TRAINING_WIND_DATA_FILESDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::_magnetic_levitationDataTable::_magnetic_levitationDataTable() {
    this->TableName = L"magnetic-levitation";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::_magnetic_levitationDataTable::_magnetic_levitationDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::_magnetic_levitationDataTable::_magnetic_levitationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::_magnetic_levitationDataTable::SET_POINT_FILEColumn::get() {
    return this->columnSET_POINT_FILE;
}

inline ::System::Data::DataColumn^  RLSimion::_magnetic_levitationDataTable::WORLD_IdColumn::get() {
    return this->columnWORLD_Id;
}

inline ::System::Int32 RLSimion::_magnetic_levitationDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::_magnetic_levitationRow^  RLSimion::_magnetic_levitationDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::_magnetic_levitationRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::_magnetic_levitationDataTable::Add_magnetic_levitationRow(RLSimion::_magnetic_levitationRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::_magnetic_levitationRow^  RLSimion::_magnetic_levitationDataTable::Add_magnetic_levitationRow(System::String^  SET_POINT_FILE, 
            RLSimion::WORLDRow^  _parentWORLDRowByWORLD_magnetic_levitation) {
    RLSimion::_magnetic_levitationRow^  row_magnetic_levitationRow = (cli::safe_cast<RLSimion::_magnetic_levitationRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {SET_POINT_FILE, nullptr};
    if (_parentWORLDRowByWORLD_magnetic_levitation != nullptr) {
        columnValuesArray[1] = _parentWORLDRowByWORLD_magnetic_levitation[2];
    }
    row_magnetic_levitationRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_magnetic_levitationRow);
    return row_magnetic_levitationRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::_magnetic_levitationDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::_magnetic_levitationDataTable::Clone() {
    RLSimion::_magnetic_levitationDataTable^  cln = (cli::safe_cast<RLSimion::_magnetic_levitationDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::_magnetic_levitationDataTable::CreateInstance() {
    return (gcnew RLSimion::_magnetic_levitationDataTable());
}

inline ::System::Void RLSimion::_magnetic_levitationDataTable::InitVars() {
    this->columnSET_POINT_FILE = __super::Columns[L"SET_POINT_FILE"];
    this->columnWORLD_Id = __super::Columns[L"WORLD_Id"];
}

inline ::System::Void RLSimion::_magnetic_levitationDataTable::InitClass() {
    this->columnSET_POINT_FILE = (gcnew ::System::Data::DataColumn(L"SET_POINT_FILE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSET_POINT_FILE);
    this->columnWORLD_Id = (gcnew ::System::Data::DataColumn(L"WORLD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnWORLD_Id);
    this->columnSET_POINT_FILE->AllowDBNull = false;
}

inline RLSimion::_magnetic_levitationRow^  RLSimion::_magnetic_levitationDataTable::New_magnetic_levitationRow() {
    return (cli::safe_cast<RLSimion::_magnetic_levitationRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::_magnetic_levitationDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::_magnetic_levitationRow(builder));
}

inline ::System::Type^  RLSimion::_magnetic_levitationDataTable::GetRowType() {
    return RLSimion::_magnetic_levitationRow::typeid;
}

inline ::System::Void RLSimion::_magnetic_levitationDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_magnetic_levitationRowChanged(this, (gcnew RLSimion::_magnetic_levitationRowChangeEvent((cli::safe_cast<RLSimion::_magnetic_levitationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_magnetic_levitationDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_magnetic_levitationRowChanging(this, (gcnew RLSimion::_magnetic_levitationRowChangeEvent((cli::safe_cast<RLSimion::_magnetic_levitationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_magnetic_levitationDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_magnetic_levitationRowDeleted(this, (gcnew RLSimion::_magnetic_levitationRowChangeEvent((cli::safe_cast<RLSimion::_magnetic_levitationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_magnetic_levitationDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_magnetic_levitationRowDeleting(this, (gcnew RLSimion::_magnetic_levitationRowChangeEvent((cli::safe_cast<RLSimion::_magnetic_levitationRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_magnetic_levitationDataTable::Remove_magnetic_levitationRow(RLSimion::_magnetic_levitationRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::_magnetic_levitationDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_magnetic_levitationDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::pitchDataTable::pitchDataTable() {
    this->TableName = L"pitch";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::pitchDataTable::pitchDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::pitchDataTable::pitchDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::pitchDataTable::SET_POINT_FILEColumn::get() {
    return this->columnSET_POINT_FILE;
}

inline ::System::Data::DataColumn^  RLSimion::pitchDataTable::WORLD_IdColumn::get() {
    return this->columnWORLD_Id;
}

inline ::System::Int32 RLSimion::pitchDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::pitchRow^  RLSimion::pitchDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::pitchRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::pitchDataTable::AddpitchRow(RLSimion::pitchRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::pitchRow^  RLSimion::pitchDataTable::AddpitchRow(System::String^  SET_POINT_FILE, RLSimion::WORLDRow^  parentWORLDRowByWORLD_pitch) {
    RLSimion::pitchRow^  rowpitchRow = (cli::safe_cast<RLSimion::pitchRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {SET_POINT_FILE, nullptr};
    if (parentWORLDRowByWORLD_pitch != nullptr) {
        columnValuesArray[1] = parentWORLDRowByWORLD_pitch[2];
    }
    rowpitchRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowpitchRow);
    return rowpitchRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::pitchDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::pitchDataTable::Clone() {
    RLSimion::pitchDataTable^  cln = (cli::safe_cast<RLSimion::pitchDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::pitchDataTable::CreateInstance() {
    return (gcnew RLSimion::pitchDataTable());
}

inline ::System::Void RLSimion::pitchDataTable::InitVars() {
    this->columnSET_POINT_FILE = __super::Columns[L"SET_POINT_FILE"];
    this->columnWORLD_Id = __super::Columns[L"WORLD_Id"];
}

inline ::System::Void RLSimion::pitchDataTable::InitClass() {
    this->columnSET_POINT_FILE = (gcnew ::System::Data::DataColumn(L"SET_POINT_FILE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSET_POINT_FILE);
    this->columnWORLD_Id = (gcnew ::System::Data::DataColumn(L"WORLD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnWORLD_Id);
    this->columnSET_POINT_FILE->AllowDBNull = false;
}

inline RLSimion::pitchRow^  RLSimion::pitchDataTable::NewpitchRow() {
    return (cli::safe_cast<RLSimion::pitchRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::pitchDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::pitchRow(builder));
}

inline ::System::Type^  RLSimion::pitchDataTable::GetRowType() {
    return RLSimion::pitchRow::typeid;
}

inline ::System::Void RLSimion::pitchDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->pitchRowChanged(this, (gcnew RLSimion::pitchRowChangeEvent((cli::safe_cast<RLSimion::pitchRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::pitchDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->pitchRowChanging(this, (gcnew RLSimion::pitchRowChangeEvent((cli::safe_cast<RLSimion::pitchRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::pitchDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->pitchRowDeleted(this, (gcnew RLSimion::pitchRowChangeEvent((cli::safe_cast<RLSimion::pitchRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::pitchDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->pitchRowDeleting(this, (gcnew RLSimion::pitchRowChangeEvent((cli::safe_cast<RLSimion::pitchRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::pitchDataTable::RemovepitchRow(RLSimion::pitchRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::pitchDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"pitchDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::_underwater_vehicleDataTable::_underwater_vehicleDataTable() {
    this->TableName = L"underwater-vehicle";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::_underwater_vehicleDataTable::_underwater_vehicleDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::_underwater_vehicleDataTable::_underwater_vehicleDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::_underwater_vehicleDataTable::SET_POINT_FILEColumn::get() {
    return this->columnSET_POINT_FILE;
}

inline ::System::Data::DataColumn^  RLSimion::_underwater_vehicleDataTable::WORLD_IdColumn::get() {
    return this->columnWORLD_Id;
}

inline ::System::Int32 RLSimion::_underwater_vehicleDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::_underwater_vehicleRow^  RLSimion::_underwater_vehicleDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::_underwater_vehicleRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::_underwater_vehicleDataTable::Add_underwater_vehicleRow(RLSimion::_underwater_vehicleRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::_underwater_vehicleRow^  RLSimion::_underwater_vehicleDataTable::Add_underwater_vehicleRow(System::String^  SET_POINT_FILE, 
            RLSimion::WORLDRow^  _parentWORLDRowByWORLD_underwater_vehicle) {
    RLSimion::_underwater_vehicleRow^  row_underwater_vehicleRow = (cli::safe_cast<RLSimion::_underwater_vehicleRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {SET_POINT_FILE, nullptr};
    if (_parentWORLDRowByWORLD_underwater_vehicle != nullptr) {
        columnValuesArray[1] = _parentWORLDRowByWORLD_underwater_vehicle[2];
    }
    row_underwater_vehicleRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_underwater_vehicleRow);
    return row_underwater_vehicleRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::_underwater_vehicleDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::_underwater_vehicleDataTable::Clone() {
    RLSimion::_underwater_vehicleDataTable^  cln = (cli::safe_cast<RLSimion::_underwater_vehicleDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::_underwater_vehicleDataTable::CreateInstance() {
    return (gcnew RLSimion::_underwater_vehicleDataTable());
}

inline ::System::Void RLSimion::_underwater_vehicleDataTable::InitVars() {
    this->columnSET_POINT_FILE = __super::Columns[L"SET_POINT_FILE"];
    this->columnWORLD_Id = __super::Columns[L"WORLD_Id"];
}

inline ::System::Void RLSimion::_underwater_vehicleDataTable::InitClass() {
    this->columnSET_POINT_FILE = (gcnew ::System::Data::DataColumn(L"SET_POINT_FILE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSET_POINT_FILE);
    this->columnWORLD_Id = (gcnew ::System::Data::DataColumn(L"WORLD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnWORLD_Id);
    this->columnSET_POINT_FILE->AllowDBNull = false;
}

inline RLSimion::_underwater_vehicleRow^  RLSimion::_underwater_vehicleDataTable::New_underwater_vehicleRow() {
    return (cli::safe_cast<RLSimion::_underwater_vehicleRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::_underwater_vehicleDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::_underwater_vehicleRow(builder));
}

inline ::System::Type^  RLSimion::_underwater_vehicleDataTable::GetRowType() {
    return RLSimion::_underwater_vehicleRow::typeid;
}

inline ::System::Void RLSimion::_underwater_vehicleDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_underwater_vehicleRowChanged(this, (gcnew RLSimion::_underwater_vehicleRowChangeEvent((cli::safe_cast<RLSimion::_underwater_vehicleRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_underwater_vehicleDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_underwater_vehicleRowChanging(this, (gcnew RLSimion::_underwater_vehicleRowChangeEvent((cli::safe_cast<RLSimion::_underwater_vehicleRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_underwater_vehicleDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_underwater_vehicleRowDeleted(this, (gcnew RLSimion::_underwater_vehicleRowChangeEvent((cli::safe_cast<RLSimion::_underwater_vehicleRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_underwater_vehicleDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_underwater_vehicleRowDeleting(this, (gcnew RLSimion::_underwater_vehicleRowChangeEvent((cli::safe_cast<RLSimion::_underwater_vehicleRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_underwater_vehicleDataTable::Remove_underwater_vehicleRow(RLSimion::_underwater_vehicleRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::_underwater_vehicleDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_underwater_vehicleDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::SIMGODDataTable::SIMGODDataTable() {
    this->TableName = L"SIMGOD";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::SIMGODDataTable::SIMGODDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::SIMGODDataTable::SIMGODDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::SIMGODDataTable::SIMGOD_IdColumn::get() {
    return this->columnSIMGOD_Id;
}

inline ::System::Int32 RLSimion::SIMGODDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::SIMGODRow^  RLSimion::SIMGODDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::SIMGODRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::SIMGODDataTable::AddSIMGODRow(RLSimion::SIMGODRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::SIMGODRow^  RLSimion::SIMGODDataTable::AddSIMGODRow() {
    RLSimion::SIMGODRow^  rowSIMGODRow = (cli::safe_cast<RLSimion::SIMGODRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(1) {nullptr};
    rowSIMGODRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowSIMGODRow);
    return rowSIMGODRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::SIMGODDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::SIMGODDataTable::Clone() {
    RLSimion::SIMGODDataTable^  cln = (cli::safe_cast<RLSimion::SIMGODDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::SIMGODDataTable::CreateInstance() {
    return (gcnew RLSimion::SIMGODDataTable());
}

inline ::System::Void RLSimion::SIMGODDataTable::InitVars() {
    this->columnSIMGOD_Id = __super::Columns[L"SIMGOD_Id"];
}

inline ::System::Void RLSimion::SIMGODDataTable::InitClass() {
    this->columnSIMGOD_Id = (gcnew ::System::Data::DataColumn(L"SIMGOD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnSIMGOD_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnSIMGOD_Id}, 
            true)));
    this->columnSIMGOD_Id->AutoIncrement = true;
    this->columnSIMGOD_Id->AllowDBNull = false;
    this->columnSIMGOD_Id->Unique = true;
}

inline RLSimion::SIMGODRow^  RLSimion::SIMGODDataTable::NewSIMGODRow() {
    return (cli::safe_cast<RLSimion::SIMGODRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::SIMGODDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::SIMGODRow(builder));
}

inline ::System::Type^  RLSimion::SIMGODDataTable::GetRowType() {
    return RLSimion::SIMGODRow::typeid;
}

inline ::System::Void RLSimion::SIMGODDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->SIMGODRowChanged(this, (gcnew RLSimion::SIMGODRowChangeEvent((cli::safe_cast<RLSimion::SIMGODRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::SIMGODDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->SIMGODRowChanging(this, (gcnew RLSimion::SIMGODRowChangeEvent((cli::safe_cast<RLSimion::SIMGODRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::SIMGODDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->SIMGODRowDeleted(this, (gcnew RLSimion::SIMGODRowChangeEvent((cli::safe_cast<RLSimion::SIMGODRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::SIMGODDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->SIMGODRowDeleting(this, (gcnew RLSimion::SIMGODRowChangeEvent((cli::safe_cast<RLSimion::SIMGODRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::SIMGODDataTable::RemoveSIMGODRow(RLSimion::SIMGODRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::SIMGODDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"SIMGODDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::_actor_onlyDataTable::_actor_onlyDataTable() {
    this->TableName = L"actor-only";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::_actor_onlyDataTable::_actor_onlyDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::_actor_onlyDataTable::_actor_onlyDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::_actor_onlyDataTable::_actor_only_IdColumn::get() {
    return this->column_actor_only_Id;
}

inline ::System::Data::DataColumn^  RLSimion::_actor_onlyDataTable::SIMGOD_IdColumn::get() {
    return this->columnSIMGOD_Id;
}

inline ::System::Int32 RLSimion::_actor_onlyDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::_actor_onlyRow^  RLSimion::_actor_onlyDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::_actor_onlyRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::_actor_onlyDataTable::Add_actor_onlyRow(RLSimion::_actor_onlyRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::_actor_onlyRow^  RLSimion::_actor_onlyDataTable::Add_actor_onlyRow(RLSimion::SIMGODRow^  _parentSIMGODRowBySIMGOD_actor_only) {
    RLSimion::_actor_onlyRow^  row_actor_onlyRow = (cli::safe_cast<RLSimion::_actor_onlyRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (_parentSIMGODRowBySIMGOD_actor_only != nullptr) {
        columnValuesArray[1] = _parentSIMGODRowBySIMGOD_actor_only[0];
    }
    row_actor_onlyRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_actor_onlyRow);
    return row_actor_onlyRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::_actor_onlyDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::_actor_onlyDataTable::Clone() {
    RLSimion::_actor_onlyDataTable^  cln = (cli::safe_cast<RLSimion::_actor_onlyDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::_actor_onlyDataTable::CreateInstance() {
    return (gcnew RLSimion::_actor_onlyDataTable());
}

inline ::System::Void RLSimion::_actor_onlyDataTable::InitVars() {
    this->column_actor_only_Id = __super::Columns[L"actor-only_Id"];
    this->columnSIMGOD_Id = __super::Columns[L"SIMGOD_Id"];
}

inline ::System::Void RLSimion::_actor_onlyDataTable::InitClass() {
    this->column_actor_only_Id = (gcnew ::System::Data::DataColumn(L"actor-only_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_actor_only_Id);
    this->columnSIMGOD_Id = (gcnew ::System::Data::DataColumn(L"SIMGOD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnSIMGOD_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->column_actor_only_Id}, 
            true)));
    this->column_actor_only_Id->AutoIncrement = true;
    this->column_actor_only_Id->AllowDBNull = false;
    this->column_actor_only_Id->Unique = true;
}

inline RLSimion::_actor_onlyRow^  RLSimion::_actor_onlyDataTable::New_actor_onlyRow() {
    return (cli::safe_cast<RLSimion::_actor_onlyRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::_actor_onlyDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::_actor_onlyRow(builder));
}

inline ::System::Type^  RLSimion::_actor_onlyDataTable::GetRowType() {
    return RLSimion::_actor_onlyRow::typeid;
}

inline ::System::Void RLSimion::_actor_onlyDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_actor_onlyRowChanged(this, (gcnew RLSimion::_actor_onlyRowChangeEvent((cli::safe_cast<RLSimion::_actor_onlyRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_actor_onlyDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_actor_onlyRowChanging(this, (gcnew RLSimion::_actor_onlyRowChangeEvent((cli::safe_cast<RLSimion::_actor_onlyRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_actor_onlyDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_actor_onlyRowDeleted(this, (gcnew RLSimion::_actor_onlyRowChangeEvent((cli::safe_cast<RLSimion::_actor_onlyRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_actor_onlyDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_actor_onlyRowDeleting(this, (gcnew RLSimion::_actor_onlyRowChangeEvent((cli::safe_cast<RLSimion::_actor_onlyRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_actor_onlyDataTable::Remove_actor_onlyRow(RLSimion::_actor_onlyRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::_actor_onlyDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_actor_onlyDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::ACTORDataTable::ACTORDataTable() {
    this->TableName = L"ACTOR";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::ACTORDataTable::ACTORDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::ACTORDataTable::ACTORDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::ACTORDataTable::ACTOR_IdColumn::get() {
    return this->columnACTOR_Id;
}

inline ::System::Data::DataColumn^  RLSimion::ACTORDataTable::_actor_only_IdColumn::get() {
    return this->column_actor_only_Id;
}

inline ::System::Data::DataColumn^  RLSimion::ACTORDataTable::_actor_critic_IdColumn::get() {
    return this->column_actor_critic_Id;
}

inline ::System::Data::DataColumn^  RLSimion::ACTORDataTable::_actor_critic_controller_IdColumn::get() {
    return this->column_actor_critic_controller_Id;
}

inline ::System::Int32 RLSimion::ACTORDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::ACTORRow^  RLSimion::ACTORDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::ACTORRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::ACTORDataTable::AddACTORRow(RLSimion::ACTORRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::ACTORRow^  RLSimion::ACTORDataTable::AddACTORRow(RLSimion::_actor_onlyRow^  _parent_actor_onlyRowByactor_only_ACTOR, 
            RLSimion::_actor_criticRow^  _parent_actor_criticRowByactor_critic_ACTOR, RLSimion::_actor_critic_controllerRow^  _parent_actor_critic_controllerRowByactor_critic_controller_ACTOR) {
    RLSimion::ACTORRow^  rowACTORRow = (cli::safe_cast<RLSimion::ACTORRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {nullptr, nullptr, nullptr, 
        nullptr};
    if (_parent_actor_onlyRowByactor_only_ACTOR != nullptr) {
        columnValuesArray[1] = _parent_actor_onlyRowByactor_only_ACTOR[0];
    }
    if (_parent_actor_criticRowByactor_critic_ACTOR != nullptr) {
        columnValuesArray[2] = _parent_actor_criticRowByactor_critic_ACTOR[0];
    }
    if (_parent_actor_critic_controllerRowByactor_critic_controller_ACTOR != nullptr) {
        columnValuesArray[3] = _parent_actor_critic_controllerRowByactor_critic_controller_ACTOR[0];
    }
    rowACTORRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowACTORRow);
    return rowACTORRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::ACTORDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::ACTORDataTable::Clone() {
    RLSimion::ACTORDataTable^  cln = (cli::safe_cast<RLSimion::ACTORDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::ACTORDataTable::CreateInstance() {
    return (gcnew RLSimion::ACTORDataTable());
}

inline ::System::Void RLSimion::ACTORDataTable::InitVars() {
    this->columnACTOR_Id = __super::Columns[L"ACTOR_Id"];
    this->column_actor_only_Id = __super::Columns[L"actor-only_Id"];
    this->column_actor_critic_Id = __super::Columns[L"actor-critic_Id"];
    this->column_actor_critic_controller_Id = __super::Columns[L"actor-critic-controller_Id"];
}

inline ::System::Void RLSimion::ACTORDataTable::InitClass() {
    this->columnACTOR_Id = (gcnew ::System::Data::DataColumn(L"ACTOR_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnACTOR_Id);
    this->column_actor_only_Id = (gcnew ::System::Data::DataColumn(L"actor-only_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_actor_only_Id);
    this->column_actor_critic_Id = (gcnew ::System::Data::DataColumn(L"actor-critic_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_actor_critic_Id);
    this->column_actor_critic_controller_Id = (gcnew ::System::Data::DataColumn(L"actor-critic-controller_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_actor_critic_controller_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnACTOR_Id}, 
            true)));
    this->columnACTOR_Id->AutoIncrement = true;
    this->columnACTOR_Id->AllowDBNull = false;
    this->columnACTOR_Id->Unique = true;
}

inline RLSimion::ACTORRow^  RLSimion::ACTORDataTable::NewACTORRow() {
    return (cli::safe_cast<RLSimion::ACTORRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::ACTORDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::ACTORRow(builder));
}

inline ::System::Type^  RLSimion::ACTORDataTable::GetRowType() {
    return RLSimion::ACTORRow::typeid;
}

inline ::System::Void RLSimion::ACTORDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->ACTORRowChanged(this, (gcnew RLSimion::ACTORRowChangeEvent((cli::safe_cast<RLSimion::ACTORRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::ACTORDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->ACTORRowChanging(this, (gcnew RLSimion::ACTORRowChangeEvent((cli::safe_cast<RLSimion::ACTORRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::ACTORDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->ACTORRowDeleted(this, (gcnew RLSimion::ACTORRowChangeEvent((cli::safe_cast<RLSimion::ACTORRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::ACTORDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->ACTORRowDeleting(this, (gcnew RLSimion::ACTORRowChangeEvent((cli::safe_cast<RLSimion::ACTORRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::ACTORDataTable::RemoveACTORRow(RLSimion::ACTORRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::ACTORDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"ACTORDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::_VFA_ActorDataTable::_VFA_ActorDataTable() {
    this->TableName = L"VFA-Actor";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::_VFA_ActorDataTable::_VFA_ActorDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::_VFA_ActorDataTable::_VFA_ActorDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::_VFA_ActorDataTable::LOADColumn::get() {
    return this->columnLOAD;
}

inline ::System::Data::DataColumn^  RLSimion::_VFA_ActorDataTable::SAVEColumn::get() {
    return this->columnSAVE;
}

inline ::System::Data::DataColumn^  RLSimion::_VFA_ActorDataTable::_VFA_Actor_IdColumn::get() {
    return this->column_VFA_Actor_Id;
}

inline ::System::Data::DataColumn^  RLSimion::_VFA_ActorDataTable::ACTOR_IdColumn::get() {
    return this->columnACTOR_Id;
}

inline ::System::Data::DataColumn^  RLSimion::_VFA_ActorDataTable::CONTROLLER_IdColumn::get() {
    return this->columnCONTROLLER_Id;
}

inline ::System::Int32 RLSimion::_VFA_ActorDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::_VFA_ActorRow^  RLSimion::_VFA_ActorDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::_VFA_ActorRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::_VFA_ActorDataTable::Add_VFA_ActorRow(RLSimion::_VFA_ActorRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::_VFA_ActorRow^  RLSimion::_VFA_ActorDataTable::Add_VFA_ActorRow(System::String^  LOAD, System::String^  SAVE, 
            RLSimion::ACTORRow^  _parentACTORRowByACTOR_VFA_Actor, RLSimion::CONTROLLERRow^  _parentCONTROLLERRowByCONTROLLER_VFA_Actor) {
    RLSimion::_VFA_ActorRow^  row_VFA_ActorRow = (cli::safe_cast<RLSimion::_VFA_ActorRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {LOAD, SAVE, nullptr, nullptr, 
        nullptr};
    if (_parentACTORRowByACTOR_VFA_Actor != nullptr) {
        columnValuesArray[3] = _parentACTORRowByACTOR_VFA_Actor[0];
    }
    if (_parentCONTROLLERRowByCONTROLLER_VFA_Actor != nullptr) {
        columnValuesArray[4] = _parentCONTROLLERRowByCONTROLLER_VFA_Actor[0];
    }
    row_VFA_ActorRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_VFA_ActorRow);
    return row_VFA_ActorRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::_VFA_ActorDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::_VFA_ActorDataTable::Clone() {
    RLSimion::_VFA_ActorDataTable^  cln = (cli::safe_cast<RLSimion::_VFA_ActorDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::_VFA_ActorDataTable::CreateInstance() {
    return (gcnew RLSimion::_VFA_ActorDataTable());
}

inline ::System::Void RLSimion::_VFA_ActorDataTable::InitVars() {
    this->columnLOAD = __super::Columns[L"LOAD"];
    this->columnSAVE = __super::Columns[L"SAVE"];
    this->column_VFA_Actor_Id = __super::Columns[L"VFA-Actor_Id"];
    this->columnACTOR_Id = __super::Columns[L"ACTOR_Id"];
    this->columnCONTROLLER_Id = __super::Columns[L"CONTROLLER_Id"];
}

inline ::System::Void RLSimion::_VFA_ActorDataTable::InitClass() {
    this->columnLOAD = (gcnew ::System::Data::DataColumn(L"LOAD", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnLOAD);
    this->columnSAVE = (gcnew ::System::Data::DataColumn(L"SAVE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSAVE);
    this->column_VFA_Actor_Id = (gcnew ::System::Data::DataColumn(L"VFA-Actor_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_VFA_Actor_Id);
    this->columnACTOR_Id = (gcnew ::System::Data::DataColumn(L"ACTOR_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnACTOR_Id);
    this->columnCONTROLLER_Id = (gcnew ::System::Data::DataColumn(L"CONTROLLER_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnCONTROLLER_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->column_VFA_Actor_Id}, 
            true)));
    this->column_VFA_Actor_Id->AutoIncrement = true;
    this->column_VFA_Actor_Id->AllowDBNull = false;
    this->column_VFA_Actor_Id->Unique = true;
}

inline RLSimion::_VFA_ActorRow^  RLSimion::_VFA_ActorDataTable::New_VFA_ActorRow() {
    return (cli::safe_cast<RLSimion::_VFA_ActorRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::_VFA_ActorDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::_VFA_ActorRow(builder));
}

inline ::System::Type^  RLSimion::_VFA_ActorDataTable::GetRowType() {
    return RLSimion::_VFA_ActorRow::typeid;
}

inline ::System::Void RLSimion::_VFA_ActorDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_VFA_ActorRowChanged(this, (gcnew RLSimion::_VFA_ActorRowChangeEvent((cli::safe_cast<RLSimion::_VFA_ActorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_VFA_ActorDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_VFA_ActorRowChanging(this, (gcnew RLSimion::_VFA_ActorRowChangeEvent((cli::safe_cast<RLSimion::_VFA_ActorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_VFA_ActorDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_VFA_ActorRowDeleted(this, (gcnew RLSimion::_VFA_ActorRowChangeEvent((cli::safe_cast<RLSimion::_VFA_ActorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_VFA_ActorDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_VFA_ActorRowDeleting(this, (gcnew RLSimion::_VFA_ActorRowChangeEvent((cli::safe_cast<RLSimion::_VFA_ActorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_VFA_ActorDataTable::Remove_VFA_ActorRow(RLSimion::_VFA_ActorRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::_VFA_ActorDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_VFA_ActorDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::_Single_Output_Policy_LearnerDataTable::_Single_Output_Policy_LearnerDataTable() {
    this->TableName = L"Single-Output-Policy-Learner";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::_Single_Output_Policy_LearnerDataTable::_Single_Output_Policy_LearnerDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::_Single_Output_Policy_LearnerDataTable::_Single_Output_Policy_LearnerDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::_Single_Output_Policy_LearnerDataTable::_Single_Output_Policy_Learner_IdColumn::get() {
    return this->column_Single_Output_Policy_Learner_Id;
}

inline ::System::Data::DataColumn^  RLSimion::_Single_Output_Policy_LearnerDataTable::_VFA_Actor_IdColumn::get() {
    return this->column_VFA_Actor_Id;
}

inline ::System::Int32 RLSimion::_Single_Output_Policy_LearnerDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::_Single_Output_Policy_LearnerRow^  RLSimion::_Single_Output_Policy_LearnerDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::_Single_Output_Policy_LearnerRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::_Single_Output_Policy_LearnerDataTable::Add_Single_Output_Policy_LearnerRow(RLSimion::_Single_Output_Policy_LearnerRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::_Single_Output_Policy_LearnerRow^  RLSimion::_Single_Output_Policy_LearnerDataTable::Add_Single_Output_Policy_LearnerRow(
            RLSimion::_VFA_ActorRow^  _parent_VFA_ActorRowByVFA_Actor_Single_Output_Policy_Learner) {
    RLSimion::_Single_Output_Policy_LearnerRow^  row_Single_Output_Policy_LearnerRow = (cli::safe_cast<RLSimion::_Single_Output_Policy_LearnerRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (_parent_VFA_ActorRowByVFA_Actor_Single_Output_Policy_Learner != nullptr) {
        columnValuesArray[1] = _parent_VFA_ActorRowByVFA_Actor_Single_Output_Policy_Learner[2];
    }
    row_Single_Output_Policy_LearnerRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_Single_Output_Policy_LearnerRow);
    return row_Single_Output_Policy_LearnerRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::_Single_Output_Policy_LearnerDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::_Single_Output_Policy_LearnerDataTable::Clone() {
    RLSimion::_Single_Output_Policy_LearnerDataTable^  cln = (cli::safe_cast<RLSimion::_Single_Output_Policy_LearnerDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::_Single_Output_Policy_LearnerDataTable::CreateInstance() {
    return (gcnew RLSimion::_Single_Output_Policy_LearnerDataTable());
}

inline ::System::Void RLSimion::_Single_Output_Policy_LearnerDataTable::InitVars() {
    this->column_Single_Output_Policy_Learner_Id = __super::Columns[L"Single-Output-Policy-Learner_Id"];
    this->column_VFA_Actor_Id = __super::Columns[L"VFA-Actor_Id"];
}

inline ::System::Void RLSimion::_Single_Output_Policy_LearnerDataTable::InitClass() {
    this->column_Single_Output_Policy_Learner_Id = (gcnew ::System::Data::DataColumn(L"Single-Output-Policy-Learner_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_Single_Output_Policy_Learner_Id);
    this->column_VFA_Actor_Id = (gcnew ::System::Data::DataColumn(L"VFA-Actor_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_VFA_Actor_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->column_Single_Output_Policy_Learner_Id}, 
            true)));
    this->column_Single_Output_Policy_Learner_Id->AutoIncrement = true;
    this->column_Single_Output_Policy_Learner_Id->AllowDBNull = false;
    this->column_Single_Output_Policy_Learner_Id->Unique = true;
}

inline RLSimion::_Single_Output_Policy_LearnerRow^  RLSimion::_Single_Output_Policy_LearnerDataTable::New_Single_Output_Policy_LearnerRow() {
    return (cli::safe_cast<RLSimion::_Single_Output_Policy_LearnerRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::_Single_Output_Policy_LearnerDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::_Single_Output_Policy_LearnerRow(builder));
}

inline ::System::Type^  RLSimion::_Single_Output_Policy_LearnerDataTable::GetRowType() {
    return RLSimion::_Single_Output_Policy_LearnerRow::typeid;
}

inline ::System::Void RLSimion::_Single_Output_Policy_LearnerDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_Single_Output_Policy_LearnerRowChanged(this, (gcnew RLSimion::_Single_Output_Policy_LearnerRowChangeEvent((cli::safe_cast<RLSimion::_Single_Output_Policy_LearnerRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_Single_Output_Policy_LearnerDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_Single_Output_Policy_LearnerRowChanging(this, (gcnew RLSimion::_Single_Output_Policy_LearnerRowChangeEvent((cli::safe_cast<RLSimion::_Single_Output_Policy_LearnerRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_Single_Output_Policy_LearnerDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_Single_Output_Policy_LearnerRowDeleted(this, (gcnew RLSimion::_Single_Output_Policy_LearnerRowChangeEvent((cli::safe_cast<RLSimion::_Single_Output_Policy_LearnerRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_Single_Output_Policy_LearnerDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_Single_Output_Policy_LearnerRowDeleting(this, (gcnew RLSimion::_Single_Output_Policy_LearnerRowChangeEvent((cli::safe_cast<RLSimion::_Single_Output_Policy_LearnerRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_Single_Output_Policy_LearnerDataTable::Remove_Single_Output_Policy_LearnerRow(RLSimion::_Single_Output_Policy_LearnerRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::_Single_Output_Policy_LearnerDataTable::GetTypedTableSchema(
            ::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_Single_Output_Policy_LearnerDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::CACLADataTable::CACLADataTable() {
    this->TableName = L"CACLA";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::CACLADataTable::CACLADataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::CACLADataTable::CACLADataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::CACLADataTable::ACTIONColumn::get() {
    return this->columnACTION;
}

inline ::System::Data::DataColumn^  RLSimion::CACLADataTable::CACLA_IdColumn::get() {
    return this->columnCACLA_Id;
}

inline ::System::Data::DataColumn^  RLSimion::CACLADataTable::_Single_Output_Policy_Learner_IdColumn::get() {
    return this->column_Single_Output_Policy_Learner_Id;
}

inline ::System::Int32 RLSimion::CACLADataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::CACLARow^  RLSimion::CACLADataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::CACLARow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::CACLADataTable::AddCACLARow(RLSimion::CACLARow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::CACLARow^  RLSimion::CACLADataTable::AddCACLARow(System::String^  ACTION, RLSimion::_Single_Output_Policy_LearnerRow^  _parent_Single_Output_Policy_LearnerRowBySingle_Output_Policy_Learner_CACLA) {
    RLSimion::CACLARow^  rowCACLARow = (cli::safe_cast<RLSimion::CACLARow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {ACTION, nullptr, nullptr};
    if (_parent_Single_Output_Policy_LearnerRowBySingle_Output_Policy_Learner_CACLA != nullptr) {
        columnValuesArray[2] = _parent_Single_Output_Policy_LearnerRowBySingle_Output_Policy_Learner_CACLA[0];
    }
    rowCACLARow->ItemArray = columnValuesArray;
    this->Rows->Add(rowCACLARow);
    return rowCACLARow;
}

inline ::System::Collections::IEnumerator^  RLSimion::CACLADataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::CACLADataTable::Clone() {
    RLSimion::CACLADataTable^  cln = (cli::safe_cast<RLSimion::CACLADataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::CACLADataTable::CreateInstance() {
    return (gcnew RLSimion::CACLADataTable());
}

inline ::System::Void RLSimion::CACLADataTable::InitVars() {
    this->columnACTION = __super::Columns[L"ACTION"];
    this->columnCACLA_Id = __super::Columns[L"CACLA_Id"];
    this->column_Single_Output_Policy_Learner_Id = __super::Columns[L"Single-Output-Policy-Learner_Id"];
}

inline ::System::Void RLSimion::CACLADataTable::InitClass() {
    this->columnACTION = (gcnew ::System::Data::DataColumn(L"ACTION", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnACTION);
    this->columnCACLA_Id = (gcnew ::System::Data::DataColumn(L"CACLA_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnCACLA_Id);
    this->column_Single_Output_Policy_Learner_Id = (gcnew ::System::Data::DataColumn(L"Single-Output-Policy-Learner_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_Single_Output_Policy_Learner_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnCACLA_Id}, 
            true)));
    this->columnACTION->AllowDBNull = false;
    this->columnCACLA_Id->AutoIncrement = true;
    this->columnCACLA_Id->AllowDBNull = false;
    this->columnCACLA_Id->Unique = true;
}

inline RLSimion::CACLARow^  RLSimion::CACLADataTable::NewCACLARow() {
    return (cli::safe_cast<RLSimion::CACLARow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::CACLADataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::CACLARow(builder));
}

inline ::System::Type^  RLSimion::CACLADataTable::GetRowType() {
    return RLSimion::CACLARow::typeid;
}

inline ::System::Void RLSimion::CACLADataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->CACLARowChanged(this, (gcnew RLSimion::CACLARowChangeEvent((cli::safe_cast<RLSimion::CACLARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::CACLADataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->CACLARowChanging(this, (gcnew RLSimion::CACLARowChangeEvent((cli::safe_cast<RLSimion::CACLARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::CACLADataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->CACLARowDeleted(this, (gcnew RLSimion::CACLARowChangeEvent((cli::safe_cast<RLSimion::CACLARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::CACLADataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->CACLARowDeleting(this, (gcnew RLSimion::CACLARowChangeEvent((cli::safe_cast<RLSimion::CACLARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::CACLADataTable::RemoveCACLARow(RLSimion::CACLARow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::CACLADataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"CACLADataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::ETRACESDataTable::ETRACESDataTable() {
    this->TableName = L"ETRACES";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::ETRACESDataTable::ETRACESDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::ETRACESDataTable::ETRACESDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::ETRACESDataTable::ETRACES_IdColumn::get() {
    return this->columnETRACES_Id;
}

inline ::System::Data::DataColumn^  RLSimion::ETRACESDataTable::CACLA_IdColumn::get() {
    return this->columnCACLA_Id;
}

inline ::System::Data::DataColumn^  RLSimion::ETRACESDataTable::RegularGradientActor_IdColumn::get() {
    return this->columnRegularGradientActor_Id;
}

inline ::System::Data::DataColumn^  RLSimion::ETRACESDataTable::IncrementalNaturalActor_IdColumn::get() {
    return this->columnIncrementalNaturalActor_Id;
}

inline ::System::Data::DataColumn^  RLSimion::ETRACESDataTable::_TD_Lambda_IdColumn::get() {
    return this->column_TD_Lambda_Id;
}

inline ::System::Data::DataColumn^  RLSimion::ETRACESDataTable::_True_Online_TD_Lambda_IdColumn::get() {
    return this->column_True_Online_TD_Lambda_Id;
}

inline ::System::Data::DataColumn^  RLSimion::ETRACESDataTable::_TDC_Lambda_IdColumn::get() {
    return this->column_TDC_Lambda_Id;
}

inline ::System::Int32 RLSimion::ETRACESDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::ETRACESRow^  RLSimion::ETRACESDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::ETRACESRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::ETRACESDataTable::AddETRACESRow(RLSimion::ETRACESRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::ETRACESRow^  RLSimion::ETRACESDataTable::AddETRACESRow(
            RLSimion::CACLARow^  parentCACLARowByCACLA_ETRACES, 
            RLSimion::RegularGradientActorRow^  parentRegularGradientActorRowByRegularGradientActor_ETRACES, 
            RLSimion::IncrementalNaturalActorRow^  parentIncrementalNaturalActorRowByIncrementalNaturalActor_ETRACES, 
            RLSimion::_TD_LambdaRow^  _parent_TD_LambdaRowByTD_Lambda_ETRACES, 
            RLSimion::_True_Online_TD_LambdaRow^  _parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_ETRACES, 
            RLSimion::_TDC_LambdaRow^  _parent_TDC_LambdaRowByTDC_Lambda_ETRACES) {
    RLSimion::ETRACESRow^  rowETRACESRow = (cli::safe_cast<RLSimion::ETRACESRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(7) {nullptr, nullptr, nullptr, 
        nullptr, nullptr, nullptr, nullptr};
    if (parentCACLARowByCACLA_ETRACES != nullptr) {
        columnValuesArray[1] = parentCACLARowByCACLA_ETRACES[1];
    }
    if (parentRegularGradientActorRowByRegularGradientActor_ETRACES != nullptr) {
        columnValuesArray[2] = parentRegularGradientActorRowByRegularGradientActor_ETRACES[1];
    }
    if (parentIncrementalNaturalActorRowByIncrementalNaturalActor_ETRACES != nullptr) {
        columnValuesArray[3] = parentIncrementalNaturalActorRowByIncrementalNaturalActor_ETRACES[1];
    }
    if (_parent_TD_LambdaRowByTD_Lambda_ETRACES != nullptr) {
        columnValuesArray[4] = _parent_TD_LambdaRowByTD_Lambda_ETRACES[0];
    }
    if (_parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_ETRACES != nullptr) {
        columnValuesArray[5] = _parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_ETRACES[0];
    }
    if (_parent_TDC_LambdaRowByTDC_Lambda_ETRACES != nullptr) {
        columnValuesArray[6] = _parent_TDC_LambdaRowByTDC_Lambda_ETRACES[0];
    }
    rowETRACESRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowETRACESRow);
    return rowETRACESRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::ETRACESDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::ETRACESDataTable::Clone() {
    RLSimion::ETRACESDataTable^  cln = (cli::safe_cast<RLSimion::ETRACESDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::ETRACESDataTable::CreateInstance() {
    return (gcnew RLSimion::ETRACESDataTable());
}

inline ::System::Void RLSimion::ETRACESDataTable::InitVars() {
    this->columnETRACES_Id = __super::Columns[L"ETRACES_Id"];
    this->columnCACLA_Id = __super::Columns[L"CACLA_Id"];
    this->columnRegularGradientActor_Id = __super::Columns[L"RegularGradientActor_Id"];
    this->columnIncrementalNaturalActor_Id = __super::Columns[L"IncrementalNaturalActor_Id"];
    this->column_TD_Lambda_Id = __super::Columns[L"TD-Lambda_Id"];
    this->column_True_Online_TD_Lambda_Id = __super::Columns[L"True-Online-TD-Lambda_Id"];
    this->column_TDC_Lambda_Id = __super::Columns[L"TDC-Lambda_Id"];
}

inline ::System::Void RLSimion::ETRACESDataTable::InitClass() {
    this->columnETRACES_Id = (gcnew ::System::Data::DataColumn(L"ETRACES_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnETRACES_Id);
    this->columnCACLA_Id = (gcnew ::System::Data::DataColumn(L"CACLA_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnCACLA_Id);
    this->columnRegularGradientActor_Id = (gcnew ::System::Data::DataColumn(L"RegularGradientActor_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnRegularGradientActor_Id);
    this->columnIncrementalNaturalActor_Id = (gcnew ::System::Data::DataColumn(L"IncrementalNaturalActor_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnIncrementalNaturalActor_Id);
    this->column_TD_Lambda_Id = (gcnew ::System::Data::DataColumn(L"TD-Lambda_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_TD_Lambda_Id);
    this->column_True_Online_TD_Lambda_Id = (gcnew ::System::Data::DataColumn(L"True-Online-TD-Lambda_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_True_Online_TD_Lambda_Id);
    this->column_TDC_Lambda_Id = (gcnew ::System::Data::DataColumn(L"TDC-Lambda_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_TDC_Lambda_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnETRACES_Id}, 
            true)));
    this->columnETRACES_Id->AutoIncrement = true;
    this->columnETRACES_Id->AllowDBNull = false;
    this->columnETRACES_Id->Unique = true;
}

inline RLSimion::ETRACESRow^  RLSimion::ETRACESDataTable::NewETRACESRow() {
    return (cli::safe_cast<RLSimion::ETRACESRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::ETRACESDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::ETRACESRow(builder));
}

inline ::System::Type^  RLSimion::ETRACESDataTable::GetRowType() {
    return RLSimion::ETRACESRow::typeid;
}

inline ::System::Void RLSimion::ETRACESDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->ETRACESRowChanged(this, (gcnew RLSimion::ETRACESRowChangeEvent((cli::safe_cast<RLSimion::ETRACESRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::ETRACESDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->ETRACESRowChanging(this, (gcnew RLSimion::ETRACESRowChangeEvent((cli::safe_cast<RLSimion::ETRACESRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::ETRACESDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->ETRACESRowDeleted(this, (gcnew RLSimion::ETRACESRowChangeEvent((cli::safe_cast<RLSimion::ETRACESRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::ETRACESDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->ETRACESRowDeleting(this, (gcnew RLSimion::ETRACESRowChangeEvent((cli::safe_cast<RLSimion::ETRACESRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::ETRACESDataTable::RemoveETRACESRow(RLSimion::ETRACESRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::ETRACESDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"ETRACESDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::LAMBDADataTable::LAMBDADataTable() {
    this->TableName = L"LAMBDA";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::LAMBDADataTable::LAMBDADataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::LAMBDADataTable::LAMBDADataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::LAMBDADataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::LAMBDADataTable::LAMBDA_IdColumn::get() {
    return this->columnLAMBDA_Id;
}

inline ::System::Data::DataColumn^  RLSimion::LAMBDADataTable::ETRACES_IdColumn::get() {
    return this->columnETRACES_Id;
}

inline ::System::Int32 RLSimion::LAMBDADataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::LAMBDARow^  RLSimion::LAMBDADataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::LAMBDARow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::LAMBDADataTable::AddLAMBDARow(RLSimion::LAMBDARow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::LAMBDARow^  RLSimion::LAMBDADataTable::AddLAMBDARow(System::Decimal decimal, RLSimion::ETRACESRow^  parentETRACESRowByETRACES_LAMBDA) {
    RLSimion::LAMBDARow^  rowLAMBDARow = (cli::safe_cast<RLSimion::LAMBDARow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentETRACESRowByETRACES_LAMBDA != nullptr) {
        columnValuesArray[2] = parentETRACESRowByETRACES_LAMBDA[0];
    }
    rowLAMBDARow->ItemArray = columnValuesArray;
    this->Rows->Add(rowLAMBDARow);
    return rowLAMBDARow;
}

inline ::System::Collections::IEnumerator^  RLSimion::LAMBDADataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::LAMBDADataTable::Clone() {
    RLSimion::LAMBDADataTable^  cln = (cli::safe_cast<RLSimion::LAMBDADataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::LAMBDADataTable::CreateInstance() {
    return (gcnew RLSimion::LAMBDADataTable());
}

inline ::System::Void RLSimion::LAMBDADataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnLAMBDA_Id = __super::Columns[L"LAMBDA_Id"];
    this->columnETRACES_Id = __super::Columns[L"ETRACES_Id"];
}

inline ::System::Void RLSimion::LAMBDADataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnLAMBDA_Id = (gcnew ::System::Data::DataColumn(L"LAMBDA_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnLAMBDA_Id);
    this->columnETRACES_Id = (gcnew ::System::Data::DataColumn(L"ETRACES_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnETRACES_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnLAMBDA_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnLAMBDA_Id->AutoIncrement = true;
    this->columnLAMBDA_Id->AllowDBNull = false;
    this->columnLAMBDA_Id->Unique = true;
}

inline RLSimion::LAMBDARow^  RLSimion::LAMBDADataTable::NewLAMBDARow() {
    return (cli::safe_cast<RLSimion::LAMBDARow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::LAMBDADataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::LAMBDARow(builder));
}

inline ::System::Type^  RLSimion::LAMBDADataTable::GetRowType() {
    return RLSimion::LAMBDARow::typeid;
}

inline ::System::Void RLSimion::LAMBDADataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->LAMBDARowChanged(this, (gcnew RLSimion::LAMBDARowChangeEvent((cli::safe_cast<RLSimion::LAMBDARow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::LAMBDADataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->LAMBDARowChanging(this, (gcnew RLSimion::LAMBDARowChangeEvent((cli::safe_cast<RLSimion::LAMBDARow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::LAMBDADataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->LAMBDARowDeleted(this, (gcnew RLSimion::LAMBDARowChangeEvent((cli::safe_cast<RLSimion::LAMBDARow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::LAMBDADataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->LAMBDARowDeleting(this, (gcnew RLSimion::LAMBDARowChangeEvent((cli::safe_cast<RLSimion::LAMBDARow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::LAMBDADataTable::RemoveLAMBDARow(RLSimion::LAMBDARow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::LAMBDADataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"LAMBDADataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::scheduleDataTable::scheduleDataTable() {
    this->TableName = L"schedule";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::scheduleDataTable::scheduleDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::scheduleDataTable::scheduleDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::INITIAL_VALUEColumn::get() {
    return this->columnINITIAL_VALUE;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::FINAL_VALUEColumn::get() {
    return this->columnFINAL_VALUE;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::EVALUATION_EPISODE_VALUEColumn::get() {
    return this->columnEVALUATION_EPISODE_VALUE;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::INTERPOLATIONColumn::get() {
    return this->columnINTERPOLATION;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::LAMBDA_IdColumn::get() {
    return this->columnLAMBDA_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::THRESHOLD_IdColumn::get() {
    return this->columnTHRESHOLD_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::ALPHA_IdColumn::get() {
    return this->columnALPHA_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::SIGMA_IdColumn::get() {
    return this->columnSIGMA_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::KP_IdColumn::get() {
    return this->columnKP_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::KI_IdColumn::get() {
    return this->columnKI_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::KD_IdColumn::get() {
    return this->columnKD_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::VS_RtGnSp_IdColumn::get() {
    return this->columnVS_RtGnSp_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::VS_SlPc_IdColumn::get() {
    return this->columnVS_SlPc_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::VS_Rgn2K_IdColumn::get() {
    return this->columnVS_Rgn2K_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::VS_Rgn2Sp_IdColumn::get() {
    return this->columnVS_Rgn2Sp_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::VS_CtInSp_IdColumn::get() {
    return this->columnVS_CtInSp_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::VS_RtPwr_IdColumn::get() {
    return this->columnVS_RtPwr_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::VS_Rgn3MP_IdColumn::get() {
    return this->columnVS_Rgn3MP_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::PC_KI_IdColumn::get() {
    return this->columnPC_KI_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::PC_KK_IdColumn::get() {
    return this->columnPC_KK_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::PC_KP_IdColumn::get() {
    return this->columnPC_KP_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::PC_RefSpd_IdColumn::get() {
    return this->columnPC_RefSpd_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::A_IdColumn::get() {
    return this->columnA_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::K_alpha_IdColumn::get() {
    return this->columnK_alpha_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::P_s_IdColumn::get() {
    return this->columnP_s_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::C_0_IdColumn::get() {
    return this->columnC_0_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::K_t_IdColumn::get() {
    return this->columnK_t_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::J_t_IdColumn::get() {
    return this->columnJ_t_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::GAMMA_IdColumn::get() {
    return this->columnGAMMA_Id;
}

inline ::System::Data::DataColumn^  RLSimion::scheduleDataTable::BETA_IdColumn::get() {
    return this->columnBETA_Id;
}

inline ::System::Int32 RLSimion::scheduleDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::scheduleRow^  RLSimion::scheduleDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::scheduleRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::scheduleDataTable::AddscheduleRow(RLSimion::scheduleRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::scheduleRow^  RLSimion::scheduleDataTable::AddscheduleRow(
            System::Decimal INITIAL_VALUE, 
            System::Decimal FINAL_VALUE, 
            System::Decimal EVALUATION_EPISODE_VALUE, 
            System::String^  INTERPOLATION, 
            RLSimion::LAMBDARow^  parentLAMBDARowByLAMBDA_schedule, 
            RLSimion::THRESHOLDRow^  parentTHRESHOLDRowByTHRESHOLD_schedule, 
            RLSimion::ALPHARow^  parentALPHARowByALPHA_schedule, 
            RLSimion::SIGMARow^  parentSIGMARowBySIGMA_schedule, 
            RLSimion::KPRow^  parentKPRowByKP_schedule, 
            RLSimion::KIRow^  parentKIRowByKI_schedule, 
            RLSimion::KDRow^  parentKDRowByKD_schedule, 
            RLSimion::VS_RtGnSpRow^  parentVS_RtGnSpRowByVS_RtGnSp_schedule, 
            RLSimion::VS_SlPcRow^  parentVS_SlPcRowByVS_SlPc_schedule, 
            RLSimion::VS_Rgn2KRow^  parentVS_Rgn2KRowByVS_Rgn2K_schedule, 
            RLSimion::VS_Rgn2SpRow^  parentVS_Rgn2SpRowByVS_Rgn2Sp_schedule, 
            RLSimion::VS_CtInSpRow^  parentVS_CtInSpRowByVS_CtInSp_schedule, 
            RLSimion::VS_RtPwrRow^  parentVS_RtPwrRowByVS_RtPwr_schedule, 
            RLSimion::VS_Rgn3MPRow^  parentVS_Rgn3MPRowByVS_Rgn3MP_schedule, 
            RLSimion::PC_KIRow^  parentPC_KIRowByPC_KI_schedule, 
            RLSimion::PC_KKRow^  parentPC_KKRowByPC_KK_schedule, 
            RLSimion::PC_KPRow^  parentPC_KPRowByPC_KP_schedule, 
            RLSimion::PC_RefSpdRow^  parentPC_RefSpdRowByPC_RefSpd_schedule, 
            RLSimion::ARow^  parentARowByA_schedule, 
            RLSimion::K_alphaRow^  parentK_alphaRowByK_alpha_schedule, 
            RLSimion::P_sRow^  parentP_sRowByP_s_schedule, 
            RLSimion::C_0Row^  parentC_0RowByC_0_schedule, 
            RLSimion::K_tRow^  parentK_tRowByK_t_schedule, 
            RLSimion::J_tRow^  parentJ_tRowByJ_t_schedule, 
            RLSimion::GAMMARow^  parentGAMMARowByGAMMA_schedule, 
            RLSimion::BETARow^  parentBETARowByBETA_schedule) {
    RLSimion::scheduleRow^  rowscheduleRow = (cli::safe_cast<RLSimion::scheduleRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(30) {INITIAL_VALUE, FINAL_VALUE, 
        EVALUATION_EPISODE_VALUE, INTERPOLATION, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, 
        nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, 
        nullptr, nullptr};
    if (parentLAMBDARowByLAMBDA_schedule != nullptr) {
        columnValuesArray[4] = parentLAMBDARowByLAMBDA_schedule[1];
    }
    if (parentTHRESHOLDRowByTHRESHOLD_schedule != nullptr) {
        columnValuesArray[5] = parentTHRESHOLDRowByTHRESHOLD_schedule[1];
    }
    if (parentALPHARowByALPHA_schedule != nullptr) {
        columnValuesArray[6] = parentALPHARowByALPHA_schedule[1];
    }
    if (parentSIGMARowBySIGMA_schedule != nullptr) {
        columnValuesArray[7] = parentSIGMARowBySIGMA_schedule[1];
    }
    if (parentKPRowByKP_schedule != nullptr) {
        columnValuesArray[8] = parentKPRowByKP_schedule[1];
    }
    if (parentKIRowByKI_schedule != nullptr) {
        columnValuesArray[9] = parentKIRowByKI_schedule[1];
    }
    if (parentKDRowByKD_schedule != nullptr) {
        columnValuesArray[10] = parentKDRowByKD_schedule[1];
    }
    if (parentVS_RtGnSpRowByVS_RtGnSp_schedule != nullptr) {
        columnValuesArray[11] = parentVS_RtGnSpRowByVS_RtGnSp_schedule[1];
    }
    if (parentVS_SlPcRowByVS_SlPc_schedule != nullptr) {
        columnValuesArray[12] = parentVS_SlPcRowByVS_SlPc_schedule[1];
    }
    if (parentVS_Rgn2KRowByVS_Rgn2K_schedule != nullptr) {
        columnValuesArray[13] = parentVS_Rgn2KRowByVS_Rgn2K_schedule[1];
    }
    if (parentVS_Rgn2SpRowByVS_Rgn2Sp_schedule != nullptr) {
        columnValuesArray[14] = parentVS_Rgn2SpRowByVS_Rgn2Sp_schedule[1];
    }
    if (parentVS_CtInSpRowByVS_CtInSp_schedule != nullptr) {
        columnValuesArray[15] = parentVS_CtInSpRowByVS_CtInSp_schedule[1];
    }
    if (parentVS_RtPwrRowByVS_RtPwr_schedule != nullptr) {
        columnValuesArray[16] = parentVS_RtPwrRowByVS_RtPwr_schedule[1];
    }
    if (parentVS_Rgn3MPRowByVS_Rgn3MP_schedule != nullptr) {
        columnValuesArray[17] = parentVS_Rgn3MPRowByVS_Rgn3MP_schedule[1];
    }
    if (parentPC_KIRowByPC_KI_schedule != nullptr) {
        columnValuesArray[18] = parentPC_KIRowByPC_KI_schedule[1];
    }
    if (parentPC_KKRowByPC_KK_schedule != nullptr) {
        columnValuesArray[19] = parentPC_KKRowByPC_KK_schedule[1];
    }
    if (parentPC_KPRowByPC_KP_schedule != nullptr) {
        columnValuesArray[20] = parentPC_KPRowByPC_KP_schedule[1];
    }
    if (parentPC_RefSpdRowByPC_RefSpd_schedule != nullptr) {
        columnValuesArray[21] = parentPC_RefSpdRowByPC_RefSpd_schedule[1];
    }
    if (parentARowByA_schedule != nullptr) {
        columnValuesArray[22] = parentARowByA_schedule[1];
    }
    if (parentK_alphaRowByK_alpha_schedule != nullptr) {
        columnValuesArray[23] = parentK_alphaRowByK_alpha_schedule[1];
    }
    if (parentP_sRowByP_s_schedule != nullptr) {
        columnValuesArray[24] = parentP_sRowByP_s_schedule[1];
    }
    if (parentC_0RowByC_0_schedule != nullptr) {
        columnValuesArray[25] = parentC_0RowByC_0_schedule[1];
    }
    if (parentK_tRowByK_t_schedule != nullptr) {
        columnValuesArray[26] = parentK_tRowByK_t_schedule[1];
    }
    if (parentJ_tRowByJ_t_schedule != nullptr) {
        columnValuesArray[27] = parentJ_tRowByJ_t_schedule[1];
    }
    if (parentGAMMARowByGAMMA_schedule != nullptr) {
        columnValuesArray[28] = parentGAMMARowByGAMMA_schedule[1];
    }
    if (parentBETARowByBETA_schedule != nullptr) {
        columnValuesArray[29] = parentBETARowByBETA_schedule[1];
    }
    rowscheduleRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowscheduleRow);
    return rowscheduleRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::scheduleDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::scheduleDataTable::Clone() {
    RLSimion::scheduleDataTable^  cln = (cli::safe_cast<RLSimion::scheduleDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::scheduleDataTable::CreateInstance() {
    return (gcnew RLSimion::scheduleDataTable());
}

inline ::System::Void RLSimion::scheduleDataTable::InitVars() {
    this->columnINITIAL_VALUE = __super::Columns[L"INITIAL_VALUE"];
    this->columnFINAL_VALUE = __super::Columns[L"FINAL_VALUE"];
    this->columnEVALUATION_EPISODE_VALUE = __super::Columns[L"EVALUATION_EPISODE_VALUE"];
    this->columnINTERPOLATION = __super::Columns[L"INTERPOLATION"];
    this->columnLAMBDA_Id = __super::Columns[L"LAMBDA_Id"];
    this->columnTHRESHOLD_Id = __super::Columns[L"THRESHOLD_Id"];
    this->columnALPHA_Id = __super::Columns[L"ALPHA_Id"];
    this->columnSIGMA_Id = __super::Columns[L"SIGMA_Id"];
    this->columnKP_Id = __super::Columns[L"KP_Id"];
    this->columnKI_Id = __super::Columns[L"KI_Id"];
    this->columnKD_Id = __super::Columns[L"KD_Id"];
    this->columnVS_RtGnSp_Id = __super::Columns[L"VS_RtGnSp_Id"];
    this->columnVS_SlPc_Id = __super::Columns[L"VS_SlPc_Id"];
    this->columnVS_Rgn2K_Id = __super::Columns[L"VS_Rgn2K_Id"];
    this->columnVS_Rgn2Sp_Id = __super::Columns[L"VS_Rgn2Sp_Id"];
    this->columnVS_CtInSp_Id = __super::Columns[L"VS_CtInSp_Id"];
    this->columnVS_RtPwr_Id = __super::Columns[L"VS_RtPwr_Id"];
    this->columnVS_Rgn3MP_Id = __super::Columns[L"VS_Rgn3MP_Id"];
    this->columnPC_KI_Id = __super::Columns[L"PC_KI_Id"];
    this->columnPC_KK_Id = __super::Columns[L"PC_KK_Id"];
    this->columnPC_KP_Id = __super::Columns[L"PC_KP_Id"];
    this->columnPC_RefSpd_Id = __super::Columns[L"PC_RefSpd_Id"];
    this->columnA_Id = __super::Columns[L"A_Id"];
    this->columnK_alpha_Id = __super::Columns[L"K_alpha_Id"];
    this->columnP_s_Id = __super::Columns[L"P_s_Id"];
    this->columnC_0_Id = __super::Columns[L"C_0_Id"];
    this->columnK_t_Id = __super::Columns[L"K_t_Id"];
    this->columnJ_t_Id = __super::Columns[L"J_t_Id"];
    this->columnGAMMA_Id = __super::Columns[L"GAMMA_Id"];
    this->columnBETA_Id = __super::Columns[L"BETA_Id"];
}

inline ::System::Void RLSimion::scheduleDataTable::InitClass() {
    this->columnINITIAL_VALUE = (gcnew ::System::Data::DataColumn(L"INITIAL_VALUE", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnINITIAL_VALUE);
    this->columnFINAL_VALUE = (gcnew ::System::Data::DataColumn(L"FINAL_VALUE", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnFINAL_VALUE);
    this->columnEVALUATION_EPISODE_VALUE = (gcnew ::System::Data::DataColumn(L"EVALUATION_EPISODE_VALUE", ::System::Decimal::typeid, 
        nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnEVALUATION_EPISODE_VALUE);
    this->columnINTERPOLATION = (gcnew ::System::Data::DataColumn(L"INTERPOLATION", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnINTERPOLATION);
    this->columnLAMBDA_Id = (gcnew ::System::Data::DataColumn(L"LAMBDA_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnLAMBDA_Id);
    this->columnTHRESHOLD_Id = (gcnew ::System::Data::DataColumn(L"THRESHOLD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnTHRESHOLD_Id);
    this->columnALPHA_Id = (gcnew ::System::Data::DataColumn(L"ALPHA_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnALPHA_Id);
    this->columnSIGMA_Id = (gcnew ::System::Data::DataColumn(L"SIGMA_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnSIGMA_Id);
    this->columnKP_Id = (gcnew ::System::Data::DataColumn(L"KP_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnKP_Id);
    this->columnKI_Id = (gcnew ::System::Data::DataColumn(L"KI_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnKI_Id);
    this->columnKD_Id = (gcnew ::System::Data::DataColumn(L"KD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnKD_Id);
    this->columnVS_RtGnSp_Id = (gcnew ::System::Data::DataColumn(L"VS_RtGnSp_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_RtGnSp_Id);
    this->columnVS_SlPc_Id = (gcnew ::System::Data::DataColumn(L"VS_SlPc_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_SlPc_Id);
    this->columnVS_Rgn2K_Id = (gcnew ::System::Data::DataColumn(L"VS_Rgn2K_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_Rgn2K_Id);
    this->columnVS_Rgn2Sp_Id = (gcnew ::System::Data::DataColumn(L"VS_Rgn2Sp_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_Rgn2Sp_Id);
    this->columnVS_CtInSp_Id = (gcnew ::System::Data::DataColumn(L"VS_CtInSp_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_CtInSp_Id);
    this->columnVS_RtPwr_Id = (gcnew ::System::Data::DataColumn(L"VS_RtPwr_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_RtPwr_Id);
    this->columnVS_Rgn3MP_Id = (gcnew ::System::Data::DataColumn(L"VS_Rgn3MP_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_Rgn3MP_Id);
    this->columnPC_KI_Id = (gcnew ::System::Data::DataColumn(L"PC_KI_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPC_KI_Id);
    this->columnPC_KK_Id = (gcnew ::System::Data::DataColumn(L"PC_KK_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPC_KK_Id);
    this->columnPC_KP_Id = (gcnew ::System::Data::DataColumn(L"PC_KP_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPC_KP_Id);
    this->columnPC_RefSpd_Id = (gcnew ::System::Data::DataColumn(L"PC_RefSpd_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPC_RefSpd_Id);
    this->columnA_Id = (gcnew ::System::Data::DataColumn(L"A_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnA_Id);
    this->columnK_alpha_Id = (gcnew ::System::Data::DataColumn(L"K_alpha_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnK_alpha_Id);
    this->columnP_s_Id = (gcnew ::System::Data::DataColumn(L"P_s_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnP_s_Id);
    this->columnC_0_Id = (gcnew ::System::Data::DataColumn(L"C_0_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnC_0_Id);
    this->columnK_t_Id = (gcnew ::System::Data::DataColumn(L"K_t_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnK_t_Id);
    this->columnJ_t_Id = (gcnew ::System::Data::DataColumn(L"J_t_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnJ_t_Id);
    this->columnGAMMA_Id = (gcnew ::System::Data::DataColumn(L"GAMMA_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnGAMMA_Id);
    this->columnBETA_Id = (gcnew ::System::Data::DataColumn(L"BETA_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnBETA_Id);
    this->columnINITIAL_VALUE->AllowDBNull = false;
    this->columnFINAL_VALUE->AllowDBNull = false;
    this->columnEVALUATION_EPISODE_VALUE->AllowDBNull = false;
    this->columnINTERPOLATION->AllowDBNull = false;
}

inline RLSimion::scheduleRow^  RLSimion::scheduleDataTable::NewscheduleRow() {
    return (cli::safe_cast<RLSimion::scheduleRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::scheduleDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::scheduleRow(builder));
}

inline ::System::Type^  RLSimion::scheduleDataTable::GetRowType() {
    return RLSimion::scheduleRow::typeid;
}

inline ::System::Void RLSimion::scheduleDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->scheduleRowChanged(this, (gcnew RLSimion::scheduleRowChangeEvent((cli::safe_cast<RLSimion::scheduleRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::scheduleDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->scheduleRowChanging(this, (gcnew RLSimion::scheduleRowChangeEvent((cli::safe_cast<RLSimion::scheduleRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::scheduleDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->scheduleRowDeleted(this, (gcnew RLSimion::scheduleRowChangeEvent((cli::safe_cast<RLSimion::scheduleRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::scheduleDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->scheduleRowDeleting(this, (gcnew RLSimion::scheduleRowChangeEvent((cli::safe_cast<RLSimion::scheduleRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::scheduleDataTable::RemovescheduleRow(RLSimion::scheduleRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::scheduleDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"scheduleDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::THRESHOLDDataTable::THRESHOLDDataTable() {
    this->TableName = L"THRESHOLD";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::THRESHOLDDataTable::THRESHOLDDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::THRESHOLDDataTable::THRESHOLDDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::THRESHOLDDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::THRESHOLDDataTable::THRESHOLD_IdColumn::get() {
    return this->columnTHRESHOLD_Id;
}

inline ::System::Data::DataColumn^  RLSimion::THRESHOLDDataTable::ETRACES_IdColumn::get() {
    return this->columnETRACES_Id;
}

inline ::System::Int32 RLSimion::THRESHOLDDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::THRESHOLDRow^  RLSimion::THRESHOLDDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::THRESHOLDRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::THRESHOLDDataTable::AddTHRESHOLDRow(RLSimion::THRESHOLDRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::THRESHOLDRow^  RLSimion::THRESHOLDDataTable::AddTHRESHOLDRow(System::Decimal decimal, RLSimion::ETRACESRow^  parentETRACESRowByETRACES_THRESHOLD) {
    RLSimion::THRESHOLDRow^  rowTHRESHOLDRow = (cli::safe_cast<RLSimion::THRESHOLDRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentETRACESRowByETRACES_THRESHOLD != nullptr) {
        columnValuesArray[2] = parentETRACESRowByETRACES_THRESHOLD[0];
    }
    rowTHRESHOLDRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowTHRESHOLDRow);
    return rowTHRESHOLDRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::THRESHOLDDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::THRESHOLDDataTable::Clone() {
    RLSimion::THRESHOLDDataTable^  cln = (cli::safe_cast<RLSimion::THRESHOLDDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::THRESHOLDDataTable::CreateInstance() {
    return (gcnew RLSimion::THRESHOLDDataTable());
}

inline ::System::Void RLSimion::THRESHOLDDataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnTHRESHOLD_Id = __super::Columns[L"THRESHOLD_Id"];
    this->columnETRACES_Id = __super::Columns[L"ETRACES_Id"];
}

inline ::System::Void RLSimion::THRESHOLDDataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnTHRESHOLD_Id = (gcnew ::System::Data::DataColumn(L"THRESHOLD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnTHRESHOLD_Id);
    this->columnETRACES_Id = (gcnew ::System::Data::DataColumn(L"ETRACES_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnETRACES_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnTHRESHOLD_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnTHRESHOLD_Id->AutoIncrement = true;
    this->columnTHRESHOLD_Id->AllowDBNull = false;
    this->columnTHRESHOLD_Id->Unique = true;
}

inline RLSimion::THRESHOLDRow^  RLSimion::THRESHOLDDataTable::NewTHRESHOLDRow() {
    return (cli::safe_cast<RLSimion::THRESHOLDRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::THRESHOLDDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::THRESHOLDRow(builder));
}

inline ::System::Type^  RLSimion::THRESHOLDDataTable::GetRowType() {
    return RLSimion::THRESHOLDRow::typeid;
}

inline ::System::Void RLSimion::THRESHOLDDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->THRESHOLDRowChanged(this, (gcnew RLSimion::THRESHOLDRowChangeEvent((cli::safe_cast<RLSimion::THRESHOLDRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::THRESHOLDDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->THRESHOLDRowChanging(this, (gcnew RLSimion::THRESHOLDRowChangeEvent((cli::safe_cast<RLSimion::THRESHOLDRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::THRESHOLDDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->THRESHOLDRowDeleted(this, (gcnew RLSimion::THRESHOLDRowChangeEvent((cli::safe_cast<RLSimion::THRESHOLDRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::THRESHOLDDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->THRESHOLDRowDeleting(this, (gcnew RLSimion::THRESHOLDRowChangeEvent((cli::safe_cast<RLSimion::THRESHOLDRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::THRESHOLDDataTable::RemoveTHRESHOLDRow(RLSimion::THRESHOLDRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::THRESHOLDDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"THRESHOLDDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::ALPHADataTable::ALPHADataTable() {
    this->TableName = L"ALPHA";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::ALPHADataTable::ALPHADataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::ALPHADataTable::ALPHADataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::ALPHADataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::ALPHADataTable::ALPHA_IdColumn::get() {
    return this->columnALPHA_Id;
}

inline ::System::Data::DataColumn^  RLSimion::ALPHADataTable::CACLA_IdColumn::get() {
    return this->columnCACLA_Id;
}

inline ::System::Data::DataColumn^  RLSimion::ALPHADataTable::RegularGradientActor_IdColumn::get() {
    return this->columnRegularGradientActor_Id;
}

inline ::System::Data::DataColumn^  RLSimion::ALPHADataTable::IncrementalNaturalActor_IdColumn::get() {
    return this->columnIncrementalNaturalActor_Id;
}

inline ::System::Data::DataColumn^  RLSimion::ALPHADataTable::_TD_Lambda_IdColumn::get() {
    return this->column_TD_Lambda_Id;
}

inline ::System::Data::DataColumn^  RLSimion::ALPHADataTable::_True_Online_TD_Lambda_IdColumn::get() {
    return this->column_True_Online_TD_Lambda_Id;
}

inline ::System::Data::DataColumn^  RLSimion::ALPHADataTable::_TDC_Lambda_IdColumn::get() {
    return this->column_TDC_Lambda_Id;
}

inline ::System::Int32 RLSimion::ALPHADataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::ALPHARow^  RLSimion::ALPHADataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::ALPHARow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::ALPHADataTable::AddALPHARow(RLSimion::ALPHARow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::ALPHARow^  RLSimion::ALPHADataTable::AddALPHARow(
            System::Decimal decimal, 
            RLSimion::CACLARow^  parentCACLARowByCACLA_ALPHA, 
            RLSimion::RegularGradientActorRow^  parentRegularGradientActorRowByRegularGradientActor_ALPHA, 
            RLSimion::IncrementalNaturalActorRow^  parentIncrementalNaturalActorRowByIncrementalNaturalActor_ALPHA, 
            RLSimion::_TD_LambdaRow^  _parent_TD_LambdaRowByTD_Lambda_ALPHA, 
            RLSimion::_True_Online_TD_LambdaRow^  _parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_ALPHA, 
            RLSimion::_TDC_LambdaRow^  _parent_TDC_LambdaRowByTDC_Lambda_ALPHA) {
    RLSimion::ALPHARow^  rowALPHARow = (cli::safe_cast<RLSimion::ALPHARow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(8) {decimal, nullptr, nullptr, 
        nullptr, nullptr, nullptr, nullptr, nullptr};
    if (parentCACLARowByCACLA_ALPHA != nullptr) {
        columnValuesArray[2] = parentCACLARowByCACLA_ALPHA[1];
    }
    if (parentRegularGradientActorRowByRegularGradientActor_ALPHA != nullptr) {
        columnValuesArray[3] = parentRegularGradientActorRowByRegularGradientActor_ALPHA[1];
    }
    if (parentIncrementalNaturalActorRowByIncrementalNaturalActor_ALPHA != nullptr) {
        columnValuesArray[4] = parentIncrementalNaturalActorRowByIncrementalNaturalActor_ALPHA[1];
    }
    if (_parent_TD_LambdaRowByTD_Lambda_ALPHA != nullptr) {
        columnValuesArray[5] = _parent_TD_LambdaRowByTD_Lambda_ALPHA[0];
    }
    if (_parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_ALPHA != nullptr) {
        columnValuesArray[6] = _parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_ALPHA[0];
    }
    if (_parent_TDC_LambdaRowByTDC_Lambda_ALPHA != nullptr) {
        columnValuesArray[7] = _parent_TDC_LambdaRowByTDC_Lambda_ALPHA[0];
    }
    rowALPHARow->ItemArray = columnValuesArray;
    this->Rows->Add(rowALPHARow);
    return rowALPHARow;
}

inline ::System::Collections::IEnumerator^  RLSimion::ALPHADataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::ALPHADataTable::Clone() {
    RLSimion::ALPHADataTable^  cln = (cli::safe_cast<RLSimion::ALPHADataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::ALPHADataTable::CreateInstance() {
    return (gcnew RLSimion::ALPHADataTable());
}

inline ::System::Void RLSimion::ALPHADataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnALPHA_Id = __super::Columns[L"ALPHA_Id"];
    this->columnCACLA_Id = __super::Columns[L"CACLA_Id"];
    this->columnRegularGradientActor_Id = __super::Columns[L"RegularGradientActor_Id"];
    this->columnIncrementalNaturalActor_Id = __super::Columns[L"IncrementalNaturalActor_Id"];
    this->column_TD_Lambda_Id = __super::Columns[L"TD-Lambda_Id"];
    this->column_True_Online_TD_Lambda_Id = __super::Columns[L"True-Online-TD-Lambda_Id"];
    this->column_TDC_Lambda_Id = __super::Columns[L"TDC-Lambda_Id"];
}

inline ::System::Void RLSimion::ALPHADataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnALPHA_Id = (gcnew ::System::Data::DataColumn(L"ALPHA_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnALPHA_Id);
    this->columnCACLA_Id = (gcnew ::System::Data::DataColumn(L"CACLA_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnCACLA_Id);
    this->columnRegularGradientActor_Id = (gcnew ::System::Data::DataColumn(L"RegularGradientActor_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnRegularGradientActor_Id);
    this->columnIncrementalNaturalActor_Id = (gcnew ::System::Data::DataColumn(L"IncrementalNaturalActor_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnIncrementalNaturalActor_Id);
    this->column_TD_Lambda_Id = (gcnew ::System::Data::DataColumn(L"TD-Lambda_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_TD_Lambda_Id);
    this->column_True_Online_TD_Lambda_Id = (gcnew ::System::Data::DataColumn(L"True-Online-TD-Lambda_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_True_Online_TD_Lambda_Id);
    this->column_TDC_Lambda_Id = (gcnew ::System::Data::DataColumn(L"TDC-Lambda_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_TDC_Lambda_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnALPHA_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnALPHA_Id->AutoIncrement = true;
    this->columnALPHA_Id->AllowDBNull = false;
    this->columnALPHA_Id->Unique = true;
}

inline RLSimion::ALPHARow^  RLSimion::ALPHADataTable::NewALPHARow() {
    return (cli::safe_cast<RLSimion::ALPHARow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::ALPHADataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::ALPHARow(builder));
}

inline ::System::Type^  RLSimion::ALPHADataTable::GetRowType() {
    return RLSimion::ALPHARow::typeid;
}

inline ::System::Void RLSimion::ALPHADataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->ALPHARowChanged(this, (gcnew RLSimion::ALPHARowChangeEvent((cli::safe_cast<RLSimion::ALPHARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::ALPHADataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->ALPHARowChanging(this, (gcnew RLSimion::ALPHARowChangeEvent((cli::safe_cast<RLSimion::ALPHARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::ALPHADataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->ALPHARowDeleted(this, (gcnew RLSimion::ALPHARowChangeEvent((cli::safe_cast<RLSimion::ALPHARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::ALPHADataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->ALPHARowDeleting(this, (gcnew RLSimion::ALPHARowChangeEvent((cli::safe_cast<RLSimion::ALPHARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::ALPHADataTable::RemoveALPHARow(RLSimion::ALPHARow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::ALPHADataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"ALPHADataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::VFADataTable::VFADataTable() {
    this->TableName = L"VFA";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::VFADataTable::VFADataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::VFADataTable::VFADataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::VFADataTable::VFA_IdColumn::get() {
    return this->columnVFA_Id;
}

inline ::System::Data::DataColumn^  RLSimion::VFADataTable::CACLA_IdColumn::get() {
    return this->columnCACLA_Id;
}

inline ::System::Data::DataColumn^  RLSimion::VFADataTable::RegularGradientActor_IdColumn::get() {
    return this->columnRegularGradientActor_Id;
}

inline ::System::Data::DataColumn^  RLSimion::VFADataTable::IncrementalNaturalActor_IdColumn::get() {
    return this->columnIncrementalNaturalActor_Id;
}

inline ::System::Data::DataColumn^  RLSimion::VFADataTable::_TD_Lambda_IdColumn::get() {
    return this->column_TD_Lambda_Id;
}

inline ::System::Data::DataColumn^  RLSimion::VFADataTable::_True_Online_TD_Lambda_IdColumn::get() {
    return this->column_True_Online_TD_Lambda_Id;
}

inline ::System::Data::DataColumn^  RLSimion::VFADataTable::_TDC_Lambda_IdColumn::get() {
    return this->column_TDC_Lambda_Id;
}

inline ::System::Int32 RLSimion::VFADataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::VFARow^  RLSimion::VFADataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::VFARow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::VFADataTable::AddVFARow(RLSimion::VFARow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::VFARow^  RLSimion::VFADataTable::AddVFARow(
            RLSimion::CACLARow^  parentCACLARowByCACLA_VFA, 
            RLSimion::RegularGradientActorRow^  parentRegularGradientActorRowByRegularGradientActor_VFA, 
            RLSimion::IncrementalNaturalActorRow^  parentIncrementalNaturalActorRowByIncrementalNaturalActor_VFA, 
            RLSimion::_TD_LambdaRow^  _parent_TD_LambdaRowByTD_Lambda_VFA, 
            RLSimion::_True_Online_TD_LambdaRow^  _parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_VFA, 
            RLSimion::_TDC_LambdaRow^  _parent_TDC_LambdaRowByTDC_Lambda_VFA) {
    RLSimion::VFARow^  rowVFARow = (cli::safe_cast<RLSimion::VFARow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(7) {nullptr, nullptr, nullptr, 
        nullptr, nullptr, nullptr, nullptr};
    if (parentCACLARowByCACLA_VFA != nullptr) {
        columnValuesArray[1] = parentCACLARowByCACLA_VFA[1];
    }
    if (parentRegularGradientActorRowByRegularGradientActor_VFA != nullptr) {
        columnValuesArray[2] = parentRegularGradientActorRowByRegularGradientActor_VFA[1];
    }
    if (parentIncrementalNaturalActorRowByIncrementalNaturalActor_VFA != nullptr) {
        columnValuesArray[3] = parentIncrementalNaturalActorRowByIncrementalNaturalActor_VFA[1];
    }
    if (_parent_TD_LambdaRowByTD_Lambda_VFA != nullptr) {
        columnValuesArray[4] = _parent_TD_LambdaRowByTD_Lambda_VFA[0];
    }
    if (_parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_VFA != nullptr) {
        columnValuesArray[5] = _parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_VFA[0];
    }
    if (_parent_TDC_LambdaRowByTDC_Lambda_VFA != nullptr) {
        columnValuesArray[6] = _parent_TDC_LambdaRowByTDC_Lambda_VFA[0];
    }
    rowVFARow->ItemArray = columnValuesArray;
    this->Rows->Add(rowVFARow);
    return rowVFARow;
}

inline ::System::Collections::IEnumerator^  RLSimion::VFADataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::VFADataTable::Clone() {
    RLSimion::VFADataTable^  cln = (cli::safe_cast<RLSimion::VFADataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::VFADataTable::CreateInstance() {
    return (gcnew RLSimion::VFADataTable());
}

inline ::System::Void RLSimion::VFADataTable::InitVars() {
    this->columnVFA_Id = __super::Columns[L"VFA_Id"];
    this->columnCACLA_Id = __super::Columns[L"CACLA_Id"];
    this->columnRegularGradientActor_Id = __super::Columns[L"RegularGradientActor_Id"];
    this->columnIncrementalNaturalActor_Id = __super::Columns[L"IncrementalNaturalActor_Id"];
    this->column_TD_Lambda_Id = __super::Columns[L"TD-Lambda_Id"];
    this->column_True_Online_TD_Lambda_Id = __super::Columns[L"True-Online-TD-Lambda_Id"];
    this->column_TDC_Lambda_Id = __super::Columns[L"TDC-Lambda_Id"];
}

inline ::System::Void RLSimion::VFADataTable::InitClass() {
    this->columnVFA_Id = (gcnew ::System::Data::DataColumn(L"VFA_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVFA_Id);
    this->columnCACLA_Id = (gcnew ::System::Data::DataColumn(L"CACLA_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnCACLA_Id);
    this->columnRegularGradientActor_Id = (gcnew ::System::Data::DataColumn(L"RegularGradientActor_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnRegularGradientActor_Id);
    this->columnIncrementalNaturalActor_Id = (gcnew ::System::Data::DataColumn(L"IncrementalNaturalActor_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnIncrementalNaturalActor_Id);
    this->column_TD_Lambda_Id = (gcnew ::System::Data::DataColumn(L"TD-Lambda_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_TD_Lambda_Id);
    this->column_True_Online_TD_Lambda_Id = (gcnew ::System::Data::DataColumn(L"True-Online-TD-Lambda_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_True_Online_TD_Lambda_Id);
    this->column_TDC_Lambda_Id = (gcnew ::System::Data::DataColumn(L"TDC-Lambda_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_TDC_Lambda_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnVFA_Id}, 
            true)));
    this->columnVFA_Id->AutoIncrement = true;
    this->columnVFA_Id->AllowDBNull = false;
    this->columnVFA_Id->Unique = true;
}

inline RLSimion::VFARow^  RLSimion::VFADataTable::NewVFARow() {
    return (cli::safe_cast<RLSimion::VFARow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::VFADataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::VFARow(builder));
}

inline ::System::Type^  RLSimion::VFADataTable::GetRowType() {
    return RLSimion::VFARow::typeid;
}

inline ::System::Void RLSimion::VFADataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->VFARowChanged(this, (gcnew RLSimion::VFARowChangeEvent((cli::safe_cast<RLSimion::VFARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::VFADataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->VFARowChanging(this, (gcnew RLSimion::VFARowChangeEvent((cli::safe_cast<RLSimion::VFARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::VFADataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->VFARowDeleted(this, (gcnew RLSimion::VFARowChangeEvent((cli::safe_cast<RLSimion::VFARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::VFADataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->VFARowDeleting(this, (gcnew RLSimion::VFARowChangeEvent((cli::safe_cast<RLSimion::VFARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::VFADataTable::RemoveVFARow(RLSimion::VFARow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::VFADataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"VFADataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::RBF_GRIDDataTable::RBF_GRIDDataTable() {
    this->TableName = L"RBF_GRID";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::RBF_GRIDDataTable::RBF_GRIDDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::RBF_GRIDDataTable::RBF_GRIDDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::RBF_GRIDDataTable::RBF_GRID_IdColumn::get() {
    return this->columnRBF_GRID_Id;
}

inline ::System::Data::DataColumn^  RLSimion::RBF_GRIDDataTable::VFA_IdColumn::get() {
    return this->columnVFA_Id;
}

inline ::System::Int32 RLSimion::RBF_GRIDDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::RBF_GRIDRow^  RLSimion::RBF_GRIDDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::RBF_GRIDRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::RBF_GRIDDataTable::AddRBF_GRIDRow(RLSimion::RBF_GRIDRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::RBF_GRIDRow^  RLSimion::RBF_GRIDDataTable::AddRBF_GRIDRow(RLSimion::VFARow^  parentVFARowByVFA_RBF_GRID) {
    RLSimion::RBF_GRIDRow^  rowRBF_GRIDRow = (cli::safe_cast<RLSimion::RBF_GRIDRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentVFARowByVFA_RBF_GRID != nullptr) {
        columnValuesArray[1] = parentVFARowByVFA_RBF_GRID[0];
    }
    rowRBF_GRIDRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowRBF_GRIDRow);
    return rowRBF_GRIDRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::RBF_GRIDDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::RBF_GRIDDataTable::Clone() {
    RLSimion::RBF_GRIDDataTable^  cln = (cli::safe_cast<RLSimion::RBF_GRIDDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::RBF_GRIDDataTable::CreateInstance() {
    return (gcnew RLSimion::RBF_GRIDDataTable());
}

inline ::System::Void RLSimion::RBF_GRIDDataTable::InitVars() {
    this->columnRBF_GRID_Id = __super::Columns[L"RBF_GRID_Id"];
    this->columnVFA_Id = __super::Columns[L"VFA_Id"];
}

inline ::System::Void RLSimion::RBF_GRIDDataTable::InitClass() {
    this->columnRBF_GRID_Id = (gcnew ::System::Data::DataColumn(L"RBF_GRID_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnRBF_GRID_Id);
    this->columnVFA_Id = (gcnew ::System::Data::DataColumn(L"VFA_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVFA_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnRBF_GRID_Id}, 
            true)));
    this->columnRBF_GRID_Id->AutoIncrement = true;
    this->columnRBF_GRID_Id->AllowDBNull = false;
    this->columnRBF_GRID_Id->Unique = true;
}

inline RLSimion::RBF_GRIDRow^  RLSimion::RBF_GRIDDataTable::NewRBF_GRIDRow() {
    return (cli::safe_cast<RLSimion::RBF_GRIDRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::RBF_GRIDDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::RBF_GRIDRow(builder));
}

inline ::System::Type^  RLSimion::RBF_GRIDDataTable::GetRowType() {
    return RLSimion::RBF_GRIDRow::typeid;
}

inline ::System::Void RLSimion::RBF_GRIDDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->RBF_GRIDRowChanged(this, (gcnew RLSimion::RBF_GRIDRowChangeEvent((cli::safe_cast<RLSimion::RBF_GRIDRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::RBF_GRIDDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->RBF_GRIDRowChanging(this, (gcnew RLSimion::RBF_GRIDRowChangeEvent((cli::safe_cast<RLSimion::RBF_GRIDRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::RBF_GRIDDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->RBF_GRIDRowDeleted(this, (gcnew RLSimion::RBF_GRIDRowChangeEvent((cli::safe_cast<RLSimion::RBF_GRIDRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::RBF_GRIDDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->RBF_GRIDRowDeleting(this, (gcnew RLSimion::RBF_GRIDRowChangeEvent((cli::safe_cast<RLSimion::RBF_GRIDRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::RBF_GRIDDataTable::RemoveRBF_GRIDRow(RLSimion::RBF_GRIDRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::RBF_GRIDDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"RBF_GRIDDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::_state_grid_dimensionDataTable::_state_grid_dimensionDataTable() {
    this->TableName = L"state-grid-dimension";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::_state_grid_dimensionDataTable::_state_grid_dimensionDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::_state_grid_dimensionDataTable::_state_grid_dimensionDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::_state_grid_dimensionDataTable::VARIABLE_NAMEColumn::get() {
    return this->columnVARIABLE_NAME;
}

inline ::System::Data::DataColumn^  RLSimion::_state_grid_dimensionDataTable::NUM_FEATURESColumn::get() {
    return this->columnNUM_FEATURES;
}

inline ::System::Data::DataColumn^  RLSimion::_state_grid_dimensionDataTable::DISTRIBUTIONColumn::get() {
    return this->columnDISTRIBUTION;
}

inline ::System::Data::DataColumn^  RLSimion::_state_grid_dimensionDataTable::RBF_GRID_IdColumn::get() {
    return this->columnRBF_GRID_Id;
}

inline ::System::Int32 RLSimion::_state_grid_dimensionDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::_state_grid_dimensionRow^  RLSimion::_state_grid_dimensionDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::_state_grid_dimensionRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::_state_grid_dimensionDataTable::Add_state_grid_dimensionRow(RLSimion::_state_grid_dimensionRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::_state_grid_dimensionRow^  RLSimion::_state_grid_dimensionDataTable::Add_state_grid_dimensionRow(System::String^  VARIABLE_NAME, 
            System::Int64 NUM_FEATURES, System::String^  DISTRIBUTION, RLSimion::RBF_GRIDRow^  _parentRBF_GRIDRowByRBF_GRID_state_grid_dimension) {
    RLSimion::_state_grid_dimensionRow^  row_state_grid_dimensionRow = (cli::safe_cast<RLSimion::_state_grid_dimensionRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {VARIABLE_NAME, NUM_FEATURES, 
        DISTRIBUTION, nullptr};
    if (_parentRBF_GRIDRowByRBF_GRID_state_grid_dimension != nullptr) {
        columnValuesArray[3] = _parentRBF_GRIDRowByRBF_GRID_state_grid_dimension[0];
    }
    row_state_grid_dimensionRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_state_grid_dimensionRow);
    return row_state_grid_dimensionRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::_state_grid_dimensionDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::_state_grid_dimensionDataTable::Clone() {
    RLSimion::_state_grid_dimensionDataTable^  cln = (cli::safe_cast<RLSimion::_state_grid_dimensionDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::_state_grid_dimensionDataTable::CreateInstance() {
    return (gcnew RLSimion::_state_grid_dimensionDataTable());
}

inline ::System::Void RLSimion::_state_grid_dimensionDataTable::InitVars() {
    this->columnVARIABLE_NAME = __super::Columns[L"VARIABLE_NAME"];
    this->columnNUM_FEATURES = __super::Columns[L"NUM_FEATURES"];
    this->columnDISTRIBUTION = __super::Columns[L"DISTRIBUTION"];
    this->columnRBF_GRID_Id = __super::Columns[L"RBF_GRID_Id"];
}

inline ::System::Void RLSimion::_state_grid_dimensionDataTable::InitClass() {
    this->columnVARIABLE_NAME = (gcnew ::System::Data::DataColumn(L"VARIABLE_NAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnVARIABLE_NAME);
    this->columnNUM_FEATURES = (gcnew ::System::Data::DataColumn(L"NUM_FEATURES", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnNUM_FEATURES);
    this->columnDISTRIBUTION = (gcnew ::System::Data::DataColumn(L"DISTRIBUTION", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnDISTRIBUTION);
    this->columnRBF_GRID_Id = (gcnew ::System::Data::DataColumn(L"RBF_GRID_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnRBF_GRID_Id);
    this->columnVARIABLE_NAME->AllowDBNull = false;
    this->columnNUM_FEATURES->AllowDBNull = false;
    this->columnDISTRIBUTION->AllowDBNull = false;
}

inline RLSimion::_state_grid_dimensionRow^  RLSimion::_state_grid_dimensionDataTable::New_state_grid_dimensionRow() {
    return (cli::safe_cast<RLSimion::_state_grid_dimensionRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::_state_grid_dimensionDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::_state_grid_dimensionRow(builder));
}

inline ::System::Type^  RLSimion::_state_grid_dimensionDataTable::GetRowType() {
    return RLSimion::_state_grid_dimensionRow::typeid;
}

inline ::System::Void RLSimion::_state_grid_dimensionDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_state_grid_dimensionRowChanged(this, (gcnew RLSimion::_state_grid_dimensionRowChangeEvent((cli::safe_cast<RLSimion::_state_grid_dimensionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_state_grid_dimensionDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_state_grid_dimensionRowChanging(this, (gcnew RLSimion::_state_grid_dimensionRowChangeEvent((cli::safe_cast<RLSimion::_state_grid_dimensionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_state_grid_dimensionDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_state_grid_dimensionRowDeleted(this, (gcnew RLSimion::_state_grid_dimensionRowChangeEvent((cli::safe_cast<RLSimion::_state_grid_dimensionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_state_grid_dimensionDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_state_grid_dimensionRowDeleting(this, (gcnew RLSimion::_state_grid_dimensionRowChangeEvent((cli::safe_cast<RLSimion::_state_grid_dimensionRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_state_grid_dimensionDataTable::Remove_state_grid_dimensionRow(RLSimion::_state_grid_dimensionRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::_state_grid_dimensionDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_state_grid_dimensionDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::EXPLORATION_NOISEDataTable::EXPLORATION_NOISEDataTable() {
    this->TableName = L"EXPLORATION_NOISE";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::EXPLORATION_NOISEDataTable::EXPLORATION_NOISEDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::EXPLORATION_NOISEDataTable::EXPLORATION_NOISEDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::EXPLORATION_NOISEDataTable::EXPLORATION_NOISE_IdColumn::get() {
    return this->columnEXPLORATION_NOISE_Id;
}

inline ::System::Data::DataColumn^  RLSimion::EXPLORATION_NOISEDataTable::CACLA_IdColumn::get() {
    return this->columnCACLA_Id;
}

inline ::System::Data::DataColumn^  RLSimion::EXPLORATION_NOISEDataTable::RegularGradientActor_IdColumn::get() {
    return this->columnRegularGradientActor_Id;
}

inline ::System::Data::DataColumn^  RLSimion::EXPLORATION_NOISEDataTable::IncrementalNaturalActor_IdColumn::get() {
    return this->columnIncrementalNaturalActor_Id;
}

inline ::System::Int32 RLSimion::EXPLORATION_NOISEDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::EXPLORATION_NOISERow^  RLSimion::EXPLORATION_NOISEDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::EXPLORATION_NOISERow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::EXPLORATION_NOISEDataTable::AddEXPLORATION_NOISERow(RLSimion::EXPLORATION_NOISERow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::EXPLORATION_NOISERow^  RLSimion::EXPLORATION_NOISEDataTable::AddEXPLORATION_NOISERow(RLSimion::CACLARow^  parentCACLARowByCACLA_EXPLORATION_NOISE, 
            RLSimion::RegularGradientActorRow^  parentRegularGradientActorRowByRegularGradientActor_EXPLORATION_NOISE, RLSimion::IncrementalNaturalActorRow^  parentIncrementalNaturalActorRowByIncrementalNaturalActor_EXPLORATION_NOISE) {
    RLSimion::EXPLORATION_NOISERow^  rowEXPLORATION_NOISERow = (cli::safe_cast<RLSimion::EXPLORATION_NOISERow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {nullptr, nullptr, nullptr, 
        nullptr};
    if (parentCACLARowByCACLA_EXPLORATION_NOISE != nullptr) {
        columnValuesArray[1] = parentCACLARowByCACLA_EXPLORATION_NOISE[1];
    }
    if (parentRegularGradientActorRowByRegularGradientActor_EXPLORATION_NOISE != nullptr) {
        columnValuesArray[2] = parentRegularGradientActorRowByRegularGradientActor_EXPLORATION_NOISE[1];
    }
    if (parentIncrementalNaturalActorRowByIncrementalNaturalActor_EXPLORATION_NOISE != nullptr) {
        columnValuesArray[3] = parentIncrementalNaturalActorRowByIncrementalNaturalActor_EXPLORATION_NOISE[1];
    }
    rowEXPLORATION_NOISERow->ItemArray = columnValuesArray;
    this->Rows->Add(rowEXPLORATION_NOISERow);
    return rowEXPLORATION_NOISERow;
}

inline ::System::Collections::IEnumerator^  RLSimion::EXPLORATION_NOISEDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::EXPLORATION_NOISEDataTable::Clone() {
    RLSimion::EXPLORATION_NOISEDataTable^  cln = (cli::safe_cast<RLSimion::EXPLORATION_NOISEDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::EXPLORATION_NOISEDataTable::CreateInstance() {
    return (gcnew RLSimion::EXPLORATION_NOISEDataTable());
}

inline ::System::Void RLSimion::EXPLORATION_NOISEDataTable::InitVars() {
    this->columnEXPLORATION_NOISE_Id = __super::Columns[L"EXPLORATION_NOISE_Id"];
    this->columnCACLA_Id = __super::Columns[L"CACLA_Id"];
    this->columnRegularGradientActor_Id = __super::Columns[L"RegularGradientActor_Id"];
    this->columnIncrementalNaturalActor_Id = __super::Columns[L"IncrementalNaturalActor_Id"];
}

inline ::System::Void RLSimion::EXPLORATION_NOISEDataTable::InitClass() {
    this->columnEXPLORATION_NOISE_Id = (gcnew ::System::Data::DataColumn(L"EXPLORATION_NOISE_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnEXPLORATION_NOISE_Id);
    this->columnCACLA_Id = (gcnew ::System::Data::DataColumn(L"CACLA_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnCACLA_Id);
    this->columnRegularGradientActor_Id = (gcnew ::System::Data::DataColumn(L"RegularGradientActor_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnRegularGradientActor_Id);
    this->columnIncrementalNaturalActor_Id = (gcnew ::System::Data::DataColumn(L"IncrementalNaturalActor_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnIncrementalNaturalActor_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnEXPLORATION_NOISE_Id}, 
            true)));
    this->columnEXPLORATION_NOISE_Id->AutoIncrement = true;
    this->columnEXPLORATION_NOISE_Id->AllowDBNull = false;
    this->columnEXPLORATION_NOISE_Id->Unique = true;
}

inline RLSimion::EXPLORATION_NOISERow^  RLSimion::EXPLORATION_NOISEDataTable::NewEXPLORATION_NOISERow() {
    return (cli::safe_cast<RLSimion::EXPLORATION_NOISERow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::EXPLORATION_NOISEDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::EXPLORATION_NOISERow(builder));
}

inline ::System::Type^  RLSimion::EXPLORATION_NOISEDataTable::GetRowType() {
    return RLSimion::EXPLORATION_NOISERow::typeid;
}

inline ::System::Void RLSimion::EXPLORATION_NOISEDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->EXPLORATION_NOISERowChanged(this, (gcnew RLSimion::EXPLORATION_NOISERowChangeEvent((cli::safe_cast<RLSimion::EXPLORATION_NOISERow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::EXPLORATION_NOISEDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->EXPLORATION_NOISERowChanging(this, (gcnew RLSimion::EXPLORATION_NOISERowChangeEvent((cli::safe_cast<RLSimion::EXPLORATION_NOISERow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::EXPLORATION_NOISEDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->EXPLORATION_NOISERowDeleted(this, (gcnew RLSimion::EXPLORATION_NOISERowChangeEvent((cli::safe_cast<RLSimion::EXPLORATION_NOISERow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::EXPLORATION_NOISEDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->EXPLORATION_NOISERowDeleting(this, (gcnew RLSimion::EXPLORATION_NOISERowChangeEvent((cli::safe_cast<RLSimion::EXPLORATION_NOISERow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::EXPLORATION_NOISEDataTable::RemoveEXPLORATION_NOISERow(RLSimion::EXPLORATION_NOISERow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::EXPLORATION_NOISEDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"EXPLORATION_NOISEDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::SIGMADataTable::SIGMADataTable() {
    this->TableName = L"SIGMA";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::SIGMADataTable::SIGMADataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::SIGMADataTable::SIGMADataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::SIGMADataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::SIGMADataTable::SIGMA_IdColumn::get() {
    return this->columnSIGMA_Id;
}

inline ::System::Data::DataColumn^  RLSimion::SIGMADataTable::EXPLORATION_NOISE_IdColumn::get() {
    return this->columnEXPLORATION_NOISE_Id;
}

inline ::System::Int32 RLSimion::SIGMADataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::SIGMARow^  RLSimion::SIGMADataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::SIGMARow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::SIGMADataTable::AddSIGMARow(RLSimion::SIGMARow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::SIGMARow^  RLSimion::SIGMADataTable::AddSIGMARow(System::Decimal decimal, RLSimion::EXPLORATION_NOISERow^  parentEXPLORATION_NOISERowByEXPLORATION_NOISE_SIGMA) {
    RLSimion::SIGMARow^  rowSIGMARow = (cli::safe_cast<RLSimion::SIGMARow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentEXPLORATION_NOISERowByEXPLORATION_NOISE_SIGMA != nullptr) {
        columnValuesArray[2] = parentEXPLORATION_NOISERowByEXPLORATION_NOISE_SIGMA[0];
    }
    rowSIGMARow->ItemArray = columnValuesArray;
    this->Rows->Add(rowSIGMARow);
    return rowSIGMARow;
}

inline ::System::Collections::IEnumerator^  RLSimion::SIGMADataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::SIGMADataTable::Clone() {
    RLSimion::SIGMADataTable^  cln = (cli::safe_cast<RLSimion::SIGMADataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::SIGMADataTable::CreateInstance() {
    return (gcnew RLSimion::SIGMADataTable());
}

inline ::System::Void RLSimion::SIGMADataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnSIGMA_Id = __super::Columns[L"SIGMA_Id"];
    this->columnEXPLORATION_NOISE_Id = __super::Columns[L"EXPLORATION_NOISE_Id"];
}

inline ::System::Void RLSimion::SIGMADataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnSIGMA_Id = (gcnew ::System::Data::DataColumn(L"SIGMA_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnSIGMA_Id);
    this->columnEXPLORATION_NOISE_Id = (gcnew ::System::Data::DataColumn(L"EXPLORATION_NOISE_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnEXPLORATION_NOISE_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnSIGMA_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnSIGMA_Id->AutoIncrement = true;
    this->columnSIGMA_Id->AllowDBNull = false;
    this->columnSIGMA_Id->Unique = true;
}

inline RLSimion::SIGMARow^  RLSimion::SIGMADataTable::NewSIGMARow() {
    return (cli::safe_cast<RLSimion::SIGMARow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::SIGMADataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::SIGMARow(builder));
}

inline ::System::Type^  RLSimion::SIGMADataTable::GetRowType() {
    return RLSimion::SIGMARow::typeid;
}

inline ::System::Void RLSimion::SIGMADataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->SIGMARowChanged(this, (gcnew RLSimion::SIGMARowChangeEvent((cli::safe_cast<RLSimion::SIGMARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::SIGMADataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->SIGMARowChanging(this, (gcnew RLSimion::SIGMARowChangeEvent((cli::safe_cast<RLSimion::SIGMARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::SIGMADataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->SIGMARowDeleted(this, (gcnew RLSimion::SIGMARowChangeEvent((cli::safe_cast<RLSimion::SIGMARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::SIGMADataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->SIGMARowDeleting(this, (gcnew RLSimion::SIGMARowChangeEvent((cli::safe_cast<RLSimion::SIGMARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::SIGMADataTable::RemoveSIGMARow(RLSimion::SIGMARow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::SIGMADataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"SIGMADataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::RegularGradientActorDataTable::RegularGradientActorDataTable() {
    this->TableName = L"RegularGradientActor";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::RegularGradientActorDataTable::RegularGradientActorDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::RegularGradientActorDataTable::RegularGradientActorDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::RegularGradientActorDataTable::ACTIONColumn::get() {
    return this->columnACTION;
}

inline ::System::Data::DataColumn^  RLSimion::RegularGradientActorDataTable::RegularGradientActor_IdColumn::get() {
    return this->columnRegularGradientActor_Id;
}

inline ::System::Data::DataColumn^  RLSimion::RegularGradientActorDataTable::_Single_Output_Policy_Learner_IdColumn::get() {
    return this->column_Single_Output_Policy_Learner_Id;
}

inline ::System::Int32 RLSimion::RegularGradientActorDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::RegularGradientActorRow^  RLSimion::RegularGradientActorDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::RegularGradientActorRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::RegularGradientActorDataTable::AddRegularGradientActorRow(RLSimion::RegularGradientActorRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::RegularGradientActorRow^  RLSimion::RegularGradientActorDataTable::AddRegularGradientActorRow(System::String^  ACTION, 
            RLSimion::_Single_Output_Policy_LearnerRow^  _parent_Single_Output_Policy_LearnerRowBySingle_Output_Policy_Learner_RegularGradientActor) {
    RLSimion::RegularGradientActorRow^  rowRegularGradientActorRow = (cli::safe_cast<RLSimion::RegularGradientActorRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {ACTION, nullptr, nullptr};
    if (_parent_Single_Output_Policy_LearnerRowBySingle_Output_Policy_Learner_RegularGradientActor != nullptr) {
        columnValuesArray[2] = _parent_Single_Output_Policy_LearnerRowBySingle_Output_Policy_Learner_RegularGradientActor[0];
    }
    rowRegularGradientActorRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowRegularGradientActorRow);
    return rowRegularGradientActorRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::RegularGradientActorDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::RegularGradientActorDataTable::Clone() {
    RLSimion::RegularGradientActorDataTable^  cln = (cli::safe_cast<RLSimion::RegularGradientActorDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::RegularGradientActorDataTable::CreateInstance() {
    return (gcnew RLSimion::RegularGradientActorDataTable());
}

inline ::System::Void RLSimion::RegularGradientActorDataTable::InitVars() {
    this->columnACTION = __super::Columns[L"ACTION"];
    this->columnRegularGradientActor_Id = __super::Columns[L"RegularGradientActor_Id"];
    this->column_Single_Output_Policy_Learner_Id = __super::Columns[L"Single-Output-Policy-Learner_Id"];
}

inline ::System::Void RLSimion::RegularGradientActorDataTable::InitClass() {
    this->columnACTION = (gcnew ::System::Data::DataColumn(L"ACTION", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnACTION);
    this->columnRegularGradientActor_Id = (gcnew ::System::Data::DataColumn(L"RegularGradientActor_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnRegularGradientActor_Id);
    this->column_Single_Output_Policy_Learner_Id = (gcnew ::System::Data::DataColumn(L"Single-Output-Policy-Learner_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_Single_Output_Policy_Learner_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnRegularGradientActor_Id}, 
            true)));
    this->columnACTION->AllowDBNull = false;
    this->columnRegularGradientActor_Id->AutoIncrement = true;
    this->columnRegularGradientActor_Id->AllowDBNull = false;
    this->columnRegularGradientActor_Id->Unique = true;
}

inline RLSimion::RegularGradientActorRow^  RLSimion::RegularGradientActorDataTable::NewRegularGradientActorRow() {
    return (cli::safe_cast<RLSimion::RegularGradientActorRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::RegularGradientActorDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::RegularGradientActorRow(builder));
}

inline ::System::Type^  RLSimion::RegularGradientActorDataTable::GetRowType() {
    return RLSimion::RegularGradientActorRow::typeid;
}

inline ::System::Void RLSimion::RegularGradientActorDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->RegularGradientActorRowChanged(this, (gcnew RLSimion::RegularGradientActorRowChangeEvent((cli::safe_cast<RLSimion::RegularGradientActorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::RegularGradientActorDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->RegularGradientActorRowChanging(this, (gcnew RLSimion::RegularGradientActorRowChangeEvent((cli::safe_cast<RLSimion::RegularGradientActorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::RegularGradientActorDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->RegularGradientActorRowDeleted(this, (gcnew RLSimion::RegularGradientActorRowChangeEvent((cli::safe_cast<RLSimion::RegularGradientActorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::RegularGradientActorDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->RegularGradientActorRowDeleting(this, (gcnew RLSimion::RegularGradientActorRowChangeEvent((cli::safe_cast<RLSimion::RegularGradientActorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::RegularGradientActorDataTable::RemoveRegularGradientActorRow(RLSimion::RegularGradientActorRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::RegularGradientActorDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"RegularGradientActorDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::IncrementalNaturalActorDataTable::IncrementalNaturalActorDataTable() {
    this->TableName = L"IncrementalNaturalActor";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::IncrementalNaturalActorDataTable::IncrementalNaturalActorDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::IncrementalNaturalActorDataTable::IncrementalNaturalActorDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::IncrementalNaturalActorDataTable::ACTIONColumn::get() {
    return this->columnACTION;
}

inline ::System::Data::DataColumn^  RLSimion::IncrementalNaturalActorDataTable::IncrementalNaturalActor_IdColumn::get() {
    return this->columnIncrementalNaturalActor_Id;
}

inline ::System::Data::DataColumn^  RLSimion::IncrementalNaturalActorDataTable::_Single_Output_Policy_Learner_IdColumn::get() {
    return this->column_Single_Output_Policy_Learner_Id;
}

inline ::System::Int32 RLSimion::IncrementalNaturalActorDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::IncrementalNaturalActorRow^  RLSimion::IncrementalNaturalActorDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::IncrementalNaturalActorRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::IncrementalNaturalActorDataTable::AddIncrementalNaturalActorRow(RLSimion::IncrementalNaturalActorRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::IncrementalNaturalActorRow^  RLSimion::IncrementalNaturalActorDataTable::AddIncrementalNaturalActorRow(System::String^  ACTION, 
            RLSimion::_Single_Output_Policy_LearnerRow^  _parent_Single_Output_Policy_LearnerRowBySingle_Output_Policy_Learner_IncrementalNaturalActor) {
    RLSimion::IncrementalNaturalActorRow^  rowIncrementalNaturalActorRow = (cli::safe_cast<RLSimion::IncrementalNaturalActorRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {ACTION, nullptr, nullptr};
    if (_parent_Single_Output_Policy_LearnerRowBySingle_Output_Policy_Learner_IncrementalNaturalActor != nullptr) {
        columnValuesArray[2] = _parent_Single_Output_Policy_LearnerRowBySingle_Output_Policy_Learner_IncrementalNaturalActor[0];
    }
    rowIncrementalNaturalActorRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowIncrementalNaturalActorRow);
    return rowIncrementalNaturalActorRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::IncrementalNaturalActorDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::IncrementalNaturalActorDataTable::Clone() {
    RLSimion::IncrementalNaturalActorDataTable^  cln = (cli::safe_cast<RLSimion::IncrementalNaturalActorDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::IncrementalNaturalActorDataTable::CreateInstance() {
    return (gcnew RLSimion::IncrementalNaturalActorDataTable());
}

inline ::System::Void RLSimion::IncrementalNaturalActorDataTable::InitVars() {
    this->columnACTION = __super::Columns[L"ACTION"];
    this->columnIncrementalNaturalActor_Id = __super::Columns[L"IncrementalNaturalActor_Id"];
    this->column_Single_Output_Policy_Learner_Id = __super::Columns[L"Single-Output-Policy-Learner_Id"];
}

inline ::System::Void RLSimion::IncrementalNaturalActorDataTable::InitClass() {
    this->columnACTION = (gcnew ::System::Data::DataColumn(L"ACTION", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnACTION);
    this->columnIncrementalNaturalActor_Id = (gcnew ::System::Data::DataColumn(L"IncrementalNaturalActor_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnIncrementalNaturalActor_Id);
    this->column_Single_Output_Policy_Learner_Id = (gcnew ::System::Data::DataColumn(L"Single-Output-Policy-Learner_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_Single_Output_Policy_Learner_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnIncrementalNaturalActor_Id}, 
            true)));
    this->columnACTION->AllowDBNull = false;
    this->columnIncrementalNaturalActor_Id->AutoIncrement = true;
    this->columnIncrementalNaturalActor_Id->AllowDBNull = false;
    this->columnIncrementalNaturalActor_Id->Unique = true;
}

inline RLSimion::IncrementalNaturalActorRow^  RLSimion::IncrementalNaturalActorDataTable::NewIncrementalNaturalActorRow() {
    return (cli::safe_cast<RLSimion::IncrementalNaturalActorRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::IncrementalNaturalActorDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::IncrementalNaturalActorRow(builder));
}

inline ::System::Type^  RLSimion::IncrementalNaturalActorDataTable::GetRowType() {
    return RLSimion::IncrementalNaturalActorRow::typeid;
}

inline ::System::Void RLSimion::IncrementalNaturalActorDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->IncrementalNaturalActorRowChanged(this, (gcnew RLSimion::IncrementalNaturalActorRowChangeEvent((cli::safe_cast<RLSimion::IncrementalNaturalActorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::IncrementalNaturalActorDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->IncrementalNaturalActorRowChanging(this, (gcnew RLSimion::IncrementalNaturalActorRowChangeEvent((cli::safe_cast<RLSimion::IncrementalNaturalActorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::IncrementalNaturalActorDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->IncrementalNaturalActorRowDeleted(this, (gcnew RLSimion::IncrementalNaturalActorRowChangeEvent((cli::safe_cast<RLSimion::IncrementalNaturalActorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::IncrementalNaturalActorDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->IncrementalNaturalActorRowDeleting(this, (gcnew RLSimion::IncrementalNaturalActorRowChangeEvent((cli::safe_cast<RLSimion::IncrementalNaturalActorRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::IncrementalNaturalActorDataTable::RemoveIncrementalNaturalActorRow(RLSimion::IncrementalNaturalActorRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::IncrementalNaturalActorDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"IncrementalNaturalActorDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::PIDDataTable::PIDDataTable() {
    this->TableName = L"PID";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::PIDDataTable::PIDDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::PIDDataTable::PIDDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::PIDDataTable::ERROR_VARIABLEColumn::get() {
    return this->columnERROR_VARIABLE;
}

inline ::System::Data::DataColumn^  RLSimion::PIDDataTable::PID_IdColumn::get() {
    return this->columnPID_Id;
}

inline ::System::Data::DataColumn^  RLSimion::PIDDataTable::ACTOR_IdColumn::get() {
    return this->columnACTOR_Id;
}

inline ::System::Data::DataColumn^  RLSimion::PIDDataTable::CONTROLLER_IdColumn::get() {
    return this->columnCONTROLLER_Id;
}

inline ::System::Int32 RLSimion::PIDDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::PIDRow^  RLSimion::PIDDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::PIDRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::PIDDataTable::AddPIDRow(RLSimion::PIDRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::PIDRow^  RLSimion::PIDDataTable::AddPIDRow(System::String^  ERROR_VARIABLE, RLSimion::ACTORRow^  parentACTORRowByACTOR_PID, 
            RLSimion::CONTROLLERRow^  parentCONTROLLERRowByCONTROLLER_PID) {
    RLSimion::PIDRow^  rowPIDRow = (cli::safe_cast<RLSimion::PIDRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {ERROR_VARIABLE, nullptr, 
        nullptr, nullptr};
    if (parentACTORRowByACTOR_PID != nullptr) {
        columnValuesArray[2] = parentACTORRowByACTOR_PID[0];
    }
    if (parentCONTROLLERRowByCONTROLLER_PID != nullptr) {
        columnValuesArray[3] = parentCONTROLLERRowByCONTROLLER_PID[0];
    }
    rowPIDRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowPIDRow);
    return rowPIDRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::PIDDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::PIDDataTable::Clone() {
    RLSimion::PIDDataTable^  cln = (cli::safe_cast<RLSimion::PIDDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::PIDDataTable::CreateInstance() {
    return (gcnew RLSimion::PIDDataTable());
}

inline ::System::Void RLSimion::PIDDataTable::InitVars() {
    this->columnERROR_VARIABLE = __super::Columns[L"ERROR_VARIABLE"];
    this->columnPID_Id = __super::Columns[L"PID_Id"];
    this->columnACTOR_Id = __super::Columns[L"ACTOR_Id"];
    this->columnCONTROLLER_Id = __super::Columns[L"CONTROLLER_Id"];
}

inline ::System::Void RLSimion::PIDDataTable::InitClass() {
    this->columnERROR_VARIABLE = (gcnew ::System::Data::DataColumn(L"ERROR_VARIABLE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnERROR_VARIABLE);
    this->columnPID_Id = (gcnew ::System::Data::DataColumn(L"PID_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPID_Id);
    this->columnACTOR_Id = (gcnew ::System::Data::DataColumn(L"ACTOR_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnACTOR_Id);
    this->columnCONTROLLER_Id = (gcnew ::System::Data::DataColumn(L"CONTROLLER_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnCONTROLLER_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnPID_Id}, 
            true)));
    this->columnERROR_VARIABLE->AllowDBNull = false;
    this->columnPID_Id->AutoIncrement = true;
    this->columnPID_Id->AllowDBNull = false;
    this->columnPID_Id->Unique = true;
}

inline RLSimion::PIDRow^  RLSimion::PIDDataTable::NewPIDRow() {
    return (cli::safe_cast<RLSimion::PIDRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::PIDDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::PIDRow(builder));
}

inline ::System::Type^  RLSimion::PIDDataTable::GetRowType() {
    return RLSimion::PIDRow::typeid;
}

inline ::System::Void RLSimion::PIDDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->PIDRowChanged(this, (gcnew RLSimion::PIDRowChangeEvent((cli::safe_cast<RLSimion::PIDRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::PIDDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->PIDRowChanging(this, (gcnew RLSimion::PIDRowChangeEvent((cli::safe_cast<RLSimion::PIDRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::PIDDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->PIDRowDeleted(this, (gcnew RLSimion::PIDRowChangeEvent((cli::safe_cast<RLSimion::PIDRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::PIDDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->PIDRowDeleting(this, (gcnew RLSimion::PIDRowChangeEvent((cli::safe_cast<RLSimion::PIDRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::PIDDataTable::RemovePIDRow(RLSimion::PIDRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::PIDDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"PIDDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::KPDataTable::KPDataTable() {
    this->TableName = L"KP";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::KPDataTable::KPDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::KPDataTable::KPDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::KPDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::KPDataTable::KP_IdColumn::get() {
    return this->columnKP_Id;
}

inline ::System::Data::DataColumn^  RLSimion::KPDataTable::PID_IdColumn::get() {
    return this->columnPID_Id;
}

inline ::System::Data::DataColumn^  RLSimion::KPDataTable::vidal_IdColumn::get() {
    return this->columnvidal_Id;
}

inline ::System::Data::DataColumn^  RLSimion::KPDataTable::boukhezzar_IdColumn::get() {
    return this->columnboukhezzar_Id;
}

inline ::System::Int32 RLSimion::KPDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::KPRow^  RLSimion::KPDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::KPRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::KPDataTable::AddKPRow(RLSimion::KPRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::KPRow^  RLSimion::KPDataTable::AddKPRow(System::Decimal decimal, RLSimion::PIDRow^  parentPIDRowByPID_KP, 
            RLSimion::vidalRow^  parentvidalRowByvidal_KP, RLSimion::boukhezzarRow^  parentboukhezzarRowByboukhezzar_KP) {
    RLSimion::KPRow^  rowKPRow = (cli::safe_cast<RLSimion::KPRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {decimal, nullptr, nullptr, 
        nullptr, nullptr};
    if (parentPIDRowByPID_KP != nullptr) {
        columnValuesArray[2] = parentPIDRowByPID_KP[1];
    }
    if (parentvidalRowByvidal_KP != nullptr) {
        columnValuesArray[3] = parentvidalRowByvidal_KP[0];
    }
    if (parentboukhezzarRowByboukhezzar_KP != nullptr) {
        columnValuesArray[4] = parentboukhezzarRowByboukhezzar_KP[0];
    }
    rowKPRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowKPRow);
    return rowKPRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::KPDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::KPDataTable::Clone() {
    RLSimion::KPDataTable^  cln = (cli::safe_cast<RLSimion::KPDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::KPDataTable::CreateInstance() {
    return (gcnew RLSimion::KPDataTable());
}

inline ::System::Void RLSimion::KPDataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnKP_Id = __super::Columns[L"KP_Id"];
    this->columnPID_Id = __super::Columns[L"PID_Id"];
    this->columnvidal_Id = __super::Columns[L"vidal_Id"];
    this->columnboukhezzar_Id = __super::Columns[L"boukhezzar_Id"];
}

inline ::System::Void RLSimion::KPDataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnKP_Id = (gcnew ::System::Data::DataColumn(L"KP_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnKP_Id);
    this->columnPID_Id = (gcnew ::System::Data::DataColumn(L"PID_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPID_Id);
    this->columnvidal_Id = (gcnew ::System::Data::DataColumn(L"vidal_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnvidal_Id);
    this->columnboukhezzar_Id = (gcnew ::System::Data::DataColumn(L"boukhezzar_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnboukhezzar_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnKP_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnKP_Id->AutoIncrement = true;
    this->columnKP_Id->AllowDBNull = false;
    this->columnKP_Id->Unique = true;
}

inline RLSimion::KPRow^  RLSimion::KPDataTable::NewKPRow() {
    return (cli::safe_cast<RLSimion::KPRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::KPDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::KPRow(builder));
}

inline ::System::Type^  RLSimion::KPDataTable::GetRowType() {
    return RLSimion::KPRow::typeid;
}

inline ::System::Void RLSimion::KPDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->KPRowChanged(this, (gcnew RLSimion::KPRowChangeEvent((cli::safe_cast<RLSimion::KPRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::KPDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->KPRowChanging(this, (gcnew RLSimion::KPRowChangeEvent((cli::safe_cast<RLSimion::KPRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::KPDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->KPRowDeleted(this, (gcnew RLSimion::KPRowChangeEvent((cli::safe_cast<RLSimion::KPRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::KPDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->KPRowDeleting(this, (gcnew RLSimion::KPRowChangeEvent((cli::safe_cast<RLSimion::KPRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::KPDataTable::RemoveKPRow(RLSimion::KPRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::KPDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"KPDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::KIDataTable::KIDataTable() {
    this->TableName = L"KI";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::KIDataTable::KIDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::KIDataTable::KIDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::KIDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::KIDataTable::KI_IdColumn::get() {
    return this->columnKI_Id;
}

inline ::System::Data::DataColumn^  RLSimion::KIDataTable::PID_IdColumn::get() {
    return this->columnPID_Id;
}

inline ::System::Data::DataColumn^  RLSimion::KIDataTable::vidal_IdColumn::get() {
    return this->columnvidal_Id;
}

inline ::System::Data::DataColumn^  RLSimion::KIDataTable::boukhezzar_IdColumn::get() {
    return this->columnboukhezzar_Id;
}

inline ::System::Int32 RLSimion::KIDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::KIRow^  RLSimion::KIDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::KIRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::KIDataTable::AddKIRow(RLSimion::KIRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::KIRow^  RLSimion::KIDataTable::AddKIRow(System::Decimal decimal, RLSimion::PIDRow^  parentPIDRowByPID_KI, 
            RLSimion::vidalRow^  parentvidalRowByvidal_KI, RLSimion::boukhezzarRow^  parentboukhezzarRowByboukhezzar_KI) {
    RLSimion::KIRow^  rowKIRow = (cli::safe_cast<RLSimion::KIRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {decimal, nullptr, nullptr, 
        nullptr, nullptr};
    if (parentPIDRowByPID_KI != nullptr) {
        columnValuesArray[2] = parentPIDRowByPID_KI[1];
    }
    if (parentvidalRowByvidal_KI != nullptr) {
        columnValuesArray[3] = parentvidalRowByvidal_KI[0];
    }
    if (parentboukhezzarRowByboukhezzar_KI != nullptr) {
        columnValuesArray[4] = parentboukhezzarRowByboukhezzar_KI[0];
    }
    rowKIRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowKIRow);
    return rowKIRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::KIDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::KIDataTable::Clone() {
    RLSimion::KIDataTable^  cln = (cli::safe_cast<RLSimion::KIDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::KIDataTable::CreateInstance() {
    return (gcnew RLSimion::KIDataTable());
}

inline ::System::Void RLSimion::KIDataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnKI_Id = __super::Columns[L"KI_Id"];
    this->columnPID_Id = __super::Columns[L"PID_Id"];
    this->columnvidal_Id = __super::Columns[L"vidal_Id"];
    this->columnboukhezzar_Id = __super::Columns[L"boukhezzar_Id"];
}

inline ::System::Void RLSimion::KIDataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnKI_Id = (gcnew ::System::Data::DataColumn(L"KI_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnKI_Id);
    this->columnPID_Id = (gcnew ::System::Data::DataColumn(L"PID_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPID_Id);
    this->columnvidal_Id = (gcnew ::System::Data::DataColumn(L"vidal_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnvidal_Id);
    this->columnboukhezzar_Id = (gcnew ::System::Data::DataColumn(L"boukhezzar_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnboukhezzar_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnKI_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnKI_Id->AutoIncrement = true;
    this->columnKI_Id->AllowDBNull = false;
    this->columnKI_Id->Unique = true;
}

inline RLSimion::KIRow^  RLSimion::KIDataTable::NewKIRow() {
    return (cli::safe_cast<RLSimion::KIRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::KIDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::KIRow(builder));
}

inline ::System::Type^  RLSimion::KIDataTable::GetRowType() {
    return RLSimion::KIRow::typeid;
}

inline ::System::Void RLSimion::KIDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->KIRowChanged(this, (gcnew RLSimion::KIRowChangeEvent((cli::safe_cast<RLSimion::KIRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::KIDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->KIRowChanging(this, (gcnew RLSimion::KIRowChangeEvent((cli::safe_cast<RLSimion::KIRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::KIDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->KIRowDeleted(this, (gcnew RLSimion::KIRowChangeEvent((cli::safe_cast<RLSimion::KIRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::KIDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->KIRowDeleting(this, (gcnew RLSimion::KIRowChangeEvent((cli::safe_cast<RLSimion::KIRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::KIDataTable::RemoveKIRow(RLSimion::KIRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::KIDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"KIDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::KDDataTable::KDDataTable() {
    this->TableName = L"KD";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::KDDataTable::KDDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::KDDataTable::KDDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::KDDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::KDDataTable::KD_IdColumn::get() {
    return this->columnKD_Id;
}

inline ::System::Data::DataColumn^  RLSimion::KDDataTable::PID_IdColumn::get() {
    return this->columnPID_Id;
}

inline ::System::Int32 RLSimion::KDDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::KDRow^  RLSimion::KDDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::KDRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::KDDataTable::AddKDRow(RLSimion::KDRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::KDRow^  RLSimion::KDDataTable::AddKDRow(System::Decimal decimal, RLSimion::PIDRow^  parentPIDRowByPID_KD) {
    RLSimion::KDRow^  rowKDRow = (cli::safe_cast<RLSimion::KDRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentPIDRowByPID_KD != nullptr) {
        columnValuesArray[2] = parentPIDRowByPID_KD[1];
    }
    rowKDRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowKDRow);
    return rowKDRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::KDDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::KDDataTable::Clone() {
    RLSimion::KDDataTable^  cln = (cli::safe_cast<RLSimion::KDDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::KDDataTable::CreateInstance() {
    return (gcnew RLSimion::KDDataTable());
}

inline ::System::Void RLSimion::KDDataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnKD_Id = __super::Columns[L"KD_Id"];
    this->columnPID_Id = __super::Columns[L"PID_Id"];
}

inline ::System::Void RLSimion::KDDataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnKD_Id = (gcnew ::System::Data::DataColumn(L"KD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnKD_Id);
    this->columnPID_Id = (gcnew ::System::Data::DataColumn(L"PID_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPID_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnKD_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnKD_Id->AutoIncrement = true;
    this->columnKD_Id->AllowDBNull = false;
    this->columnKD_Id->Unique = true;
}

inline RLSimion::KDRow^  RLSimion::KDDataTable::NewKDRow() {
    return (cli::safe_cast<RLSimion::KDRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::KDDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::KDRow(builder));
}

inline ::System::Type^  RLSimion::KDDataTable::GetRowType() {
    return RLSimion::KDRow::typeid;
}

inline ::System::Void RLSimion::KDDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->KDRowChanged(this, (gcnew RLSimion::KDRowChangeEvent((cli::safe_cast<RLSimion::KDRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::KDDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->KDRowChanging(this, (gcnew RLSimion::KDRowChangeEvent((cli::safe_cast<RLSimion::KDRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::KDDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->KDRowDeleted(this, (gcnew RLSimion::KDRowChangeEvent((cli::safe_cast<RLSimion::KDRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::KDDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->KDRowDeleting(this, (gcnew RLSimion::KDRowChangeEvent((cli::safe_cast<RLSimion::KDRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::KDDataTable::RemoveKDRow(RLSimion::KDRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::KDDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"KDDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::LQRDataTable::LQRDataTable() {
    this->TableName = L"LQR";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::LQRDataTable::LQRDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::LQRDataTable::LQRDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::LQRDataTable::LQR_IdColumn::get() {
    return this->columnLQR_Id;
}

inline ::System::Data::DataColumn^  RLSimion::LQRDataTable::ACTOR_IdColumn::get() {
    return this->columnACTOR_Id;
}

inline ::System::Data::DataColumn^  RLSimion::LQRDataTable::CONTROLLER_IdColumn::get() {
    return this->columnCONTROLLER_Id;
}

inline ::System::Int32 RLSimion::LQRDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::LQRRow^  RLSimion::LQRDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::LQRRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::LQRDataTable::AddLQRRow(RLSimion::LQRRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::LQRRow^  RLSimion::LQRDataTable::AddLQRRow(RLSimion::ACTORRow^  parentACTORRowByACTOR_LQR, RLSimion::CONTROLLERRow^  parentCONTROLLERRowByCONTROLLER_LQR) {
    RLSimion::LQRRow^  rowLQRRow = (cli::safe_cast<RLSimion::LQRRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {nullptr, nullptr, nullptr};
    if (parentACTORRowByACTOR_LQR != nullptr) {
        columnValuesArray[1] = parentACTORRowByACTOR_LQR[0];
    }
    if (parentCONTROLLERRowByCONTROLLER_LQR != nullptr) {
        columnValuesArray[2] = parentCONTROLLERRowByCONTROLLER_LQR[0];
    }
    rowLQRRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowLQRRow);
    return rowLQRRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::LQRDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::LQRDataTable::Clone() {
    RLSimion::LQRDataTable^  cln = (cli::safe_cast<RLSimion::LQRDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::LQRDataTable::CreateInstance() {
    return (gcnew RLSimion::LQRDataTable());
}

inline ::System::Void RLSimion::LQRDataTable::InitVars() {
    this->columnLQR_Id = __super::Columns[L"LQR_Id"];
    this->columnACTOR_Id = __super::Columns[L"ACTOR_Id"];
    this->columnCONTROLLER_Id = __super::Columns[L"CONTROLLER_Id"];
}

inline ::System::Void RLSimion::LQRDataTable::InitClass() {
    this->columnLQR_Id = (gcnew ::System::Data::DataColumn(L"LQR_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnLQR_Id);
    this->columnACTOR_Id = (gcnew ::System::Data::DataColumn(L"ACTOR_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnACTOR_Id);
    this->columnCONTROLLER_Id = (gcnew ::System::Data::DataColumn(L"CONTROLLER_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnCONTROLLER_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnLQR_Id}, 
            true)));
    this->columnLQR_Id->AutoIncrement = true;
    this->columnLQR_Id->AllowDBNull = false;
    this->columnLQR_Id->Unique = true;
}

inline RLSimion::LQRRow^  RLSimion::LQRDataTable::NewLQRRow() {
    return (cli::safe_cast<RLSimion::LQRRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::LQRDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::LQRRow(builder));
}

inline ::System::Type^  RLSimion::LQRDataTable::GetRowType() {
    return RLSimion::LQRRow::typeid;
}

inline ::System::Void RLSimion::LQRDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->LQRRowChanged(this, (gcnew RLSimion::LQRRowChangeEvent((cli::safe_cast<RLSimion::LQRRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::LQRDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->LQRRowChanging(this, (gcnew RLSimion::LQRRowChangeEvent((cli::safe_cast<RLSimion::LQRRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::LQRDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->LQRRowDeleted(this, (gcnew RLSimion::LQRRowChangeEvent((cli::safe_cast<RLSimion::LQRRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::LQRDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->LQRRowDeleting(this, (gcnew RLSimion::LQRRowChangeEvent((cli::safe_cast<RLSimion::LQRRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::LQRDataTable::RemoveLQRRow(RLSimion::LQRRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::LQRDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"LQRDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::_LQR_GAINDataTable::_LQR_GAINDataTable() {
    this->TableName = L"LQR-GAIN";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::_LQR_GAINDataTable::_LQR_GAINDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::_LQR_GAINDataTable::_LQR_GAINDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::_LQR_GAINDataTable::_state_variableColumn::get() {
    return this->column_state_variable;
}

inline ::System::Data::DataColumn^  RLSimion::_LQR_GAINDataTable::gainColumn::get() {
    return this->columngain;
}

inline ::System::Data::DataColumn^  RLSimion::_LQR_GAINDataTable::LQR_IdColumn::get() {
    return this->columnLQR_Id;
}

inline ::System::Int32 RLSimion::_LQR_GAINDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::_LQR_GAINRow^  RLSimion::_LQR_GAINDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::_LQR_GAINRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::_LQR_GAINDataTable::Add_LQR_GAINRow(RLSimion::_LQR_GAINRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::_LQR_GAINRow^  RLSimion::_LQR_GAINDataTable::Add_LQR_GAINRow(System::String^  _state_variable, System::Decimal gain, 
            RLSimion::LQRRow^  _parentLQRRowByLQR_LQR_GAIN) {
    RLSimion::_LQR_GAINRow^  row_LQR_GAINRow = (cli::safe_cast<RLSimion::_LQR_GAINRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {_state_variable, gain, 
        nullptr};
    if (_parentLQRRowByLQR_LQR_GAIN != nullptr) {
        columnValuesArray[2] = _parentLQRRowByLQR_LQR_GAIN[0];
    }
    row_LQR_GAINRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_LQR_GAINRow);
    return row_LQR_GAINRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::_LQR_GAINDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::_LQR_GAINDataTable::Clone() {
    RLSimion::_LQR_GAINDataTable^  cln = (cli::safe_cast<RLSimion::_LQR_GAINDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::_LQR_GAINDataTable::CreateInstance() {
    return (gcnew RLSimion::_LQR_GAINDataTable());
}

inline ::System::Void RLSimion::_LQR_GAINDataTable::InitVars() {
    this->column_state_variable = __super::Columns[L"state-variable"];
    this->columngain = __super::Columns[L"gain"];
    this->columnLQR_Id = __super::Columns[L"LQR_Id"];
}

inline ::System::Void RLSimion::_LQR_GAINDataTable::InitClass() {
    this->column_state_variable = (gcnew ::System::Data::DataColumn(L"state-variable", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->column_state_variable);
    this->columngain = (gcnew ::System::Data::DataColumn(L"gain", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columngain);
    this->columnLQR_Id = (gcnew ::System::Data::DataColumn(L"LQR_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnLQR_Id);
    this->column_state_variable->AllowDBNull = false;
    this->columngain->AllowDBNull = false;
}

inline RLSimion::_LQR_GAINRow^  RLSimion::_LQR_GAINDataTable::New_LQR_GAINRow() {
    return (cli::safe_cast<RLSimion::_LQR_GAINRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::_LQR_GAINDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::_LQR_GAINRow(builder));
}

inline ::System::Type^  RLSimion::_LQR_GAINDataTable::GetRowType() {
    return RLSimion::_LQR_GAINRow::typeid;
}

inline ::System::Void RLSimion::_LQR_GAINDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_LQR_GAINRowChanged(this, (gcnew RLSimion::_LQR_GAINRowChangeEvent((cli::safe_cast<RLSimion::_LQR_GAINRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_LQR_GAINDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_LQR_GAINRowChanging(this, (gcnew RLSimion::_LQR_GAINRowChangeEvent((cli::safe_cast<RLSimion::_LQR_GAINRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_LQR_GAINDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_LQR_GAINRowDeleted(this, (gcnew RLSimion::_LQR_GAINRowChangeEvent((cli::safe_cast<RLSimion::_LQR_GAINRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_LQR_GAINDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_LQR_GAINRowDeleting(this, (gcnew RLSimion::_LQR_GAINRowChangeEvent((cli::safe_cast<RLSimion::_LQR_GAINRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_LQR_GAINDataTable::Remove_LQR_GAINRow(RLSimion::_LQR_GAINRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::_LQR_GAINDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_LQR_GAINDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::jonkmanDataTable::jonkmanDataTable() {
    this->TableName = L"jonkman";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::jonkmanDataTable::jonkmanDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::jonkmanDataTable::jonkmanDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::jonkmanDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Data::DataColumn^  RLSimion::jonkmanDataTable::ACTOR_IdColumn::get() {
    return this->columnACTOR_Id;
}

inline ::System::Data::DataColumn^  RLSimion::jonkmanDataTable::CONTROLLER_IdColumn::get() {
    return this->columnCONTROLLER_Id;
}

inline ::System::Int32 RLSimion::jonkmanDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::jonkmanRow^  RLSimion::jonkmanDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::jonkmanRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::jonkmanDataTable::AddjonkmanRow(RLSimion::jonkmanRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::jonkmanRow^  RLSimion::jonkmanDataTable::AddjonkmanRow(RLSimion::ACTORRow^  parentACTORRowByACTOR_jonkman, 
            RLSimion::CONTROLLERRow^  parentCONTROLLERRowByCONTROLLER_jonkman) {
    RLSimion::jonkmanRow^  rowjonkmanRow = (cli::safe_cast<RLSimion::jonkmanRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {nullptr, nullptr, nullptr};
    if (parentACTORRowByACTOR_jonkman != nullptr) {
        columnValuesArray[1] = parentACTORRowByACTOR_jonkman[0];
    }
    if (parentCONTROLLERRowByCONTROLLER_jonkman != nullptr) {
        columnValuesArray[2] = parentCONTROLLERRowByCONTROLLER_jonkman[0];
    }
    rowjonkmanRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowjonkmanRow);
    return rowjonkmanRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::jonkmanDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::jonkmanDataTable::Clone() {
    RLSimion::jonkmanDataTable^  cln = (cli::safe_cast<RLSimion::jonkmanDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::jonkmanDataTable::CreateInstance() {
    return (gcnew RLSimion::jonkmanDataTable());
}

inline ::System::Void RLSimion::jonkmanDataTable::InitVars() {
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
    this->columnACTOR_Id = __super::Columns[L"ACTOR_Id"];
    this->columnCONTROLLER_Id = __super::Columns[L"CONTROLLER_Id"];
}

inline ::System::Void RLSimion::jonkmanDataTable::InitClass() {
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->columnACTOR_Id = (gcnew ::System::Data::DataColumn(L"ACTOR_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnACTOR_Id);
    this->columnCONTROLLER_Id = (gcnew ::System::Data::DataColumn(L"CONTROLLER_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnCONTROLLER_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnjonkman_Id}, 
            true)));
    this->columnjonkman_Id->AutoIncrement = true;
    this->columnjonkman_Id->AllowDBNull = false;
    this->columnjonkman_Id->Unique = true;
}

inline RLSimion::jonkmanRow^  RLSimion::jonkmanDataTable::NewjonkmanRow() {
    return (cli::safe_cast<RLSimion::jonkmanRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::jonkmanDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::jonkmanRow(builder));
}

inline ::System::Type^  RLSimion::jonkmanDataTable::GetRowType() {
    return RLSimion::jonkmanRow::typeid;
}

inline ::System::Void RLSimion::jonkmanDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->jonkmanRowChanged(this, (gcnew RLSimion::jonkmanRowChangeEvent((cli::safe_cast<RLSimion::jonkmanRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::jonkmanDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->jonkmanRowChanging(this, (gcnew RLSimion::jonkmanRowChangeEvent((cli::safe_cast<RLSimion::jonkmanRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::jonkmanDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->jonkmanRowDeleted(this, (gcnew RLSimion::jonkmanRowChangeEvent((cli::safe_cast<RLSimion::jonkmanRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::jonkmanDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->jonkmanRowDeleting(this, (gcnew RLSimion::jonkmanRowChangeEvent((cli::safe_cast<RLSimion::jonkmanRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::jonkmanDataTable::RemovejonkmanRow(RLSimion::jonkmanRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::jonkmanDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"jonkmanDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::VS_RtGnSpDataTable::VS_RtGnSpDataTable() {
    this->TableName = L"VS_RtGnSp";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::VS_RtGnSpDataTable::VS_RtGnSpDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::VS_RtGnSpDataTable::VS_RtGnSpDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::VS_RtGnSpDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::VS_RtGnSpDataTable::VS_RtGnSp_IdColumn::get() {
    return this->columnVS_RtGnSp_Id;
}

inline ::System::Data::DataColumn^  RLSimion::VS_RtGnSpDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 RLSimion::VS_RtGnSpDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::VS_RtGnSpRow^  RLSimion::VS_RtGnSpDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::VS_RtGnSpRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::VS_RtGnSpDataTable::AddVS_RtGnSpRow(RLSimion::VS_RtGnSpRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::VS_RtGnSpRow^  RLSimion::VS_RtGnSpDataTable::AddVS_RtGnSpRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_VS_RtGnSp) {
    RLSimion::VS_RtGnSpRow^  rowVS_RtGnSpRow = (cli::safe_cast<RLSimion::VS_RtGnSpRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentjonkmanRowByjonkman_VS_RtGnSp != nullptr) {
        columnValuesArray[2] = parentjonkmanRowByjonkman_VS_RtGnSp[0];
    }
    rowVS_RtGnSpRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowVS_RtGnSpRow);
    return rowVS_RtGnSpRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::VS_RtGnSpDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::VS_RtGnSpDataTable::Clone() {
    RLSimion::VS_RtGnSpDataTable^  cln = (cli::safe_cast<RLSimion::VS_RtGnSpDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::VS_RtGnSpDataTable::CreateInstance() {
    return (gcnew RLSimion::VS_RtGnSpDataTable());
}

inline ::System::Void RLSimion::VS_RtGnSpDataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnVS_RtGnSp_Id = __super::Columns[L"VS_RtGnSp_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void RLSimion::VS_RtGnSpDataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnVS_RtGnSp_Id = (gcnew ::System::Data::DataColumn(L"VS_RtGnSp_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_RtGnSp_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnVS_RtGnSp_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnVS_RtGnSp_Id->AutoIncrement = true;
    this->columnVS_RtGnSp_Id->AllowDBNull = false;
    this->columnVS_RtGnSp_Id->Unique = true;
}

inline RLSimion::VS_RtGnSpRow^  RLSimion::VS_RtGnSpDataTable::NewVS_RtGnSpRow() {
    return (cli::safe_cast<RLSimion::VS_RtGnSpRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::VS_RtGnSpDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::VS_RtGnSpRow(builder));
}

inline ::System::Type^  RLSimion::VS_RtGnSpDataTable::GetRowType() {
    return RLSimion::VS_RtGnSpRow::typeid;
}

inline ::System::Void RLSimion::VS_RtGnSpDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->VS_RtGnSpRowChanged(this, (gcnew RLSimion::VS_RtGnSpRowChangeEvent((cli::safe_cast<RLSimion::VS_RtGnSpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_RtGnSpDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->VS_RtGnSpRowChanging(this, (gcnew RLSimion::VS_RtGnSpRowChangeEvent((cli::safe_cast<RLSimion::VS_RtGnSpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_RtGnSpDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->VS_RtGnSpRowDeleted(this, (gcnew RLSimion::VS_RtGnSpRowChangeEvent((cli::safe_cast<RLSimion::VS_RtGnSpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_RtGnSpDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->VS_RtGnSpRowDeleting(this, (gcnew RLSimion::VS_RtGnSpRowChangeEvent((cli::safe_cast<RLSimion::VS_RtGnSpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_RtGnSpDataTable::RemoveVS_RtGnSpRow(RLSimion::VS_RtGnSpRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::VS_RtGnSpDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"VS_RtGnSpDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::VS_SlPcDataTable::VS_SlPcDataTable() {
    this->TableName = L"VS_SlPc";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::VS_SlPcDataTable::VS_SlPcDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::VS_SlPcDataTable::VS_SlPcDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::VS_SlPcDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::VS_SlPcDataTable::VS_SlPc_IdColumn::get() {
    return this->columnVS_SlPc_Id;
}

inline ::System::Data::DataColumn^  RLSimion::VS_SlPcDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 RLSimion::VS_SlPcDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::VS_SlPcRow^  RLSimion::VS_SlPcDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::VS_SlPcRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::VS_SlPcDataTable::AddVS_SlPcRow(RLSimion::VS_SlPcRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::VS_SlPcRow^  RLSimion::VS_SlPcDataTable::AddVS_SlPcRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_VS_SlPc) {
    RLSimion::VS_SlPcRow^  rowVS_SlPcRow = (cli::safe_cast<RLSimion::VS_SlPcRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentjonkmanRowByjonkman_VS_SlPc != nullptr) {
        columnValuesArray[2] = parentjonkmanRowByjonkman_VS_SlPc[0];
    }
    rowVS_SlPcRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowVS_SlPcRow);
    return rowVS_SlPcRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::VS_SlPcDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::VS_SlPcDataTable::Clone() {
    RLSimion::VS_SlPcDataTable^  cln = (cli::safe_cast<RLSimion::VS_SlPcDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::VS_SlPcDataTable::CreateInstance() {
    return (gcnew RLSimion::VS_SlPcDataTable());
}

inline ::System::Void RLSimion::VS_SlPcDataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnVS_SlPc_Id = __super::Columns[L"VS_SlPc_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void RLSimion::VS_SlPcDataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnVS_SlPc_Id = (gcnew ::System::Data::DataColumn(L"VS_SlPc_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_SlPc_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnVS_SlPc_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnVS_SlPc_Id->AutoIncrement = true;
    this->columnVS_SlPc_Id->AllowDBNull = false;
    this->columnVS_SlPc_Id->Unique = true;
}

inline RLSimion::VS_SlPcRow^  RLSimion::VS_SlPcDataTable::NewVS_SlPcRow() {
    return (cli::safe_cast<RLSimion::VS_SlPcRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::VS_SlPcDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::VS_SlPcRow(builder));
}

inline ::System::Type^  RLSimion::VS_SlPcDataTable::GetRowType() {
    return RLSimion::VS_SlPcRow::typeid;
}

inline ::System::Void RLSimion::VS_SlPcDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->VS_SlPcRowChanged(this, (gcnew RLSimion::VS_SlPcRowChangeEvent((cli::safe_cast<RLSimion::VS_SlPcRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_SlPcDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->VS_SlPcRowChanging(this, (gcnew RLSimion::VS_SlPcRowChangeEvent((cli::safe_cast<RLSimion::VS_SlPcRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_SlPcDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->VS_SlPcRowDeleted(this, (gcnew RLSimion::VS_SlPcRowChangeEvent((cli::safe_cast<RLSimion::VS_SlPcRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_SlPcDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->VS_SlPcRowDeleting(this, (gcnew RLSimion::VS_SlPcRowChangeEvent((cli::safe_cast<RLSimion::VS_SlPcRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_SlPcDataTable::RemoveVS_SlPcRow(RLSimion::VS_SlPcRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::VS_SlPcDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"VS_SlPcDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::VS_Rgn2KDataTable::VS_Rgn2KDataTable() {
    this->TableName = L"VS_Rgn2K";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::VS_Rgn2KDataTable::VS_Rgn2KDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::VS_Rgn2KDataTable::VS_Rgn2KDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::VS_Rgn2KDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::VS_Rgn2KDataTable::VS_Rgn2K_IdColumn::get() {
    return this->columnVS_Rgn2K_Id;
}

inline ::System::Data::DataColumn^  RLSimion::VS_Rgn2KDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 RLSimion::VS_Rgn2KDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::VS_Rgn2KRow^  RLSimion::VS_Rgn2KDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::VS_Rgn2KRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::VS_Rgn2KDataTable::AddVS_Rgn2KRow(RLSimion::VS_Rgn2KRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::VS_Rgn2KRow^  RLSimion::VS_Rgn2KDataTable::AddVS_Rgn2KRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_VS_Rgn2K) {
    RLSimion::VS_Rgn2KRow^  rowVS_Rgn2KRow = (cli::safe_cast<RLSimion::VS_Rgn2KRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentjonkmanRowByjonkman_VS_Rgn2K != nullptr) {
        columnValuesArray[2] = parentjonkmanRowByjonkman_VS_Rgn2K[0];
    }
    rowVS_Rgn2KRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowVS_Rgn2KRow);
    return rowVS_Rgn2KRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::VS_Rgn2KDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::VS_Rgn2KDataTable::Clone() {
    RLSimion::VS_Rgn2KDataTable^  cln = (cli::safe_cast<RLSimion::VS_Rgn2KDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::VS_Rgn2KDataTable::CreateInstance() {
    return (gcnew RLSimion::VS_Rgn2KDataTable());
}

inline ::System::Void RLSimion::VS_Rgn2KDataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnVS_Rgn2K_Id = __super::Columns[L"VS_Rgn2K_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void RLSimion::VS_Rgn2KDataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnVS_Rgn2K_Id = (gcnew ::System::Data::DataColumn(L"VS_Rgn2K_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_Rgn2K_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnVS_Rgn2K_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnVS_Rgn2K_Id->AutoIncrement = true;
    this->columnVS_Rgn2K_Id->AllowDBNull = false;
    this->columnVS_Rgn2K_Id->Unique = true;
}

inline RLSimion::VS_Rgn2KRow^  RLSimion::VS_Rgn2KDataTable::NewVS_Rgn2KRow() {
    return (cli::safe_cast<RLSimion::VS_Rgn2KRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::VS_Rgn2KDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::VS_Rgn2KRow(builder));
}

inline ::System::Type^  RLSimion::VS_Rgn2KDataTable::GetRowType() {
    return RLSimion::VS_Rgn2KRow::typeid;
}

inline ::System::Void RLSimion::VS_Rgn2KDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->VS_Rgn2KRowChanged(this, (gcnew RLSimion::VS_Rgn2KRowChangeEvent((cli::safe_cast<RLSimion::VS_Rgn2KRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_Rgn2KDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->VS_Rgn2KRowChanging(this, (gcnew RLSimion::VS_Rgn2KRowChangeEvent((cli::safe_cast<RLSimion::VS_Rgn2KRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_Rgn2KDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->VS_Rgn2KRowDeleted(this, (gcnew RLSimion::VS_Rgn2KRowChangeEvent((cli::safe_cast<RLSimion::VS_Rgn2KRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_Rgn2KDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->VS_Rgn2KRowDeleting(this, (gcnew RLSimion::VS_Rgn2KRowChangeEvent((cli::safe_cast<RLSimion::VS_Rgn2KRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_Rgn2KDataTable::RemoveVS_Rgn2KRow(RLSimion::VS_Rgn2KRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::VS_Rgn2KDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"VS_Rgn2KDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::VS_Rgn2SpDataTable::VS_Rgn2SpDataTable() {
    this->TableName = L"VS_Rgn2Sp";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::VS_Rgn2SpDataTable::VS_Rgn2SpDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::VS_Rgn2SpDataTable::VS_Rgn2SpDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::VS_Rgn2SpDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::VS_Rgn2SpDataTable::VS_Rgn2Sp_IdColumn::get() {
    return this->columnVS_Rgn2Sp_Id;
}

inline ::System::Data::DataColumn^  RLSimion::VS_Rgn2SpDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 RLSimion::VS_Rgn2SpDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::VS_Rgn2SpRow^  RLSimion::VS_Rgn2SpDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::VS_Rgn2SpRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::VS_Rgn2SpDataTable::AddVS_Rgn2SpRow(RLSimion::VS_Rgn2SpRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::VS_Rgn2SpRow^  RLSimion::VS_Rgn2SpDataTable::AddVS_Rgn2SpRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_VS_Rgn2Sp) {
    RLSimion::VS_Rgn2SpRow^  rowVS_Rgn2SpRow = (cli::safe_cast<RLSimion::VS_Rgn2SpRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentjonkmanRowByjonkman_VS_Rgn2Sp != nullptr) {
        columnValuesArray[2] = parentjonkmanRowByjonkman_VS_Rgn2Sp[0];
    }
    rowVS_Rgn2SpRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowVS_Rgn2SpRow);
    return rowVS_Rgn2SpRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::VS_Rgn2SpDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::VS_Rgn2SpDataTable::Clone() {
    RLSimion::VS_Rgn2SpDataTable^  cln = (cli::safe_cast<RLSimion::VS_Rgn2SpDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::VS_Rgn2SpDataTable::CreateInstance() {
    return (gcnew RLSimion::VS_Rgn2SpDataTable());
}

inline ::System::Void RLSimion::VS_Rgn2SpDataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnVS_Rgn2Sp_Id = __super::Columns[L"VS_Rgn2Sp_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void RLSimion::VS_Rgn2SpDataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnVS_Rgn2Sp_Id = (gcnew ::System::Data::DataColumn(L"VS_Rgn2Sp_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_Rgn2Sp_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnVS_Rgn2Sp_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnVS_Rgn2Sp_Id->AutoIncrement = true;
    this->columnVS_Rgn2Sp_Id->AllowDBNull = false;
    this->columnVS_Rgn2Sp_Id->Unique = true;
}

inline RLSimion::VS_Rgn2SpRow^  RLSimion::VS_Rgn2SpDataTable::NewVS_Rgn2SpRow() {
    return (cli::safe_cast<RLSimion::VS_Rgn2SpRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::VS_Rgn2SpDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::VS_Rgn2SpRow(builder));
}

inline ::System::Type^  RLSimion::VS_Rgn2SpDataTable::GetRowType() {
    return RLSimion::VS_Rgn2SpRow::typeid;
}

inline ::System::Void RLSimion::VS_Rgn2SpDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->VS_Rgn2SpRowChanged(this, (gcnew RLSimion::VS_Rgn2SpRowChangeEvent((cli::safe_cast<RLSimion::VS_Rgn2SpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_Rgn2SpDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->VS_Rgn2SpRowChanging(this, (gcnew RLSimion::VS_Rgn2SpRowChangeEvent((cli::safe_cast<RLSimion::VS_Rgn2SpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_Rgn2SpDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->VS_Rgn2SpRowDeleted(this, (gcnew RLSimion::VS_Rgn2SpRowChangeEvent((cli::safe_cast<RLSimion::VS_Rgn2SpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_Rgn2SpDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->VS_Rgn2SpRowDeleting(this, (gcnew RLSimion::VS_Rgn2SpRowChangeEvent((cli::safe_cast<RLSimion::VS_Rgn2SpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_Rgn2SpDataTable::RemoveVS_Rgn2SpRow(RLSimion::VS_Rgn2SpRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::VS_Rgn2SpDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"VS_Rgn2SpDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::VS_CtInSpDataTable::VS_CtInSpDataTable() {
    this->TableName = L"VS_CtInSp";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::VS_CtInSpDataTable::VS_CtInSpDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::VS_CtInSpDataTable::VS_CtInSpDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::VS_CtInSpDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::VS_CtInSpDataTable::VS_CtInSp_IdColumn::get() {
    return this->columnVS_CtInSp_Id;
}

inline ::System::Data::DataColumn^  RLSimion::VS_CtInSpDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 RLSimion::VS_CtInSpDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::VS_CtInSpRow^  RLSimion::VS_CtInSpDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::VS_CtInSpRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::VS_CtInSpDataTable::AddVS_CtInSpRow(RLSimion::VS_CtInSpRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::VS_CtInSpRow^  RLSimion::VS_CtInSpDataTable::AddVS_CtInSpRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_VS_CtInSp) {
    RLSimion::VS_CtInSpRow^  rowVS_CtInSpRow = (cli::safe_cast<RLSimion::VS_CtInSpRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentjonkmanRowByjonkman_VS_CtInSp != nullptr) {
        columnValuesArray[2] = parentjonkmanRowByjonkman_VS_CtInSp[0];
    }
    rowVS_CtInSpRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowVS_CtInSpRow);
    return rowVS_CtInSpRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::VS_CtInSpDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::VS_CtInSpDataTable::Clone() {
    RLSimion::VS_CtInSpDataTable^  cln = (cli::safe_cast<RLSimion::VS_CtInSpDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::VS_CtInSpDataTable::CreateInstance() {
    return (gcnew RLSimion::VS_CtInSpDataTable());
}

inline ::System::Void RLSimion::VS_CtInSpDataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnVS_CtInSp_Id = __super::Columns[L"VS_CtInSp_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void RLSimion::VS_CtInSpDataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnVS_CtInSp_Id = (gcnew ::System::Data::DataColumn(L"VS_CtInSp_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_CtInSp_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnVS_CtInSp_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnVS_CtInSp_Id->AutoIncrement = true;
    this->columnVS_CtInSp_Id->AllowDBNull = false;
    this->columnVS_CtInSp_Id->Unique = true;
}

inline RLSimion::VS_CtInSpRow^  RLSimion::VS_CtInSpDataTable::NewVS_CtInSpRow() {
    return (cli::safe_cast<RLSimion::VS_CtInSpRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::VS_CtInSpDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::VS_CtInSpRow(builder));
}

inline ::System::Type^  RLSimion::VS_CtInSpDataTable::GetRowType() {
    return RLSimion::VS_CtInSpRow::typeid;
}

inline ::System::Void RLSimion::VS_CtInSpDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->VS_CtInSpRowChanged(this, (gcnew RLSimion::VS_CtInSpRowChangeEvent((cli::safe_cast<RLSimion::VS_CtInSpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_CtInSpDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->VS_CtInSpRowChanging(this, (gcnew RLSimion::VS_CtInSpRowChangeEvent((cli::safe_cast<RLSimion::VS_CtInSpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_CtInSpDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->VS_CtInSpRowDeleted(this, (gcnew RLSimion::VS_CtInSpRowChangeEvent((cli::safe_cast<RLSimion::VS_CtInSpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_CtInSpDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->VS_CtInSpRowDeleting(this, (gcnew RLSimion::VS_CtInSpRowChangeEvent((cli::safe_cast<RLSimion::VS_CtInSpRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_CtInSpDataTable::RemoveVS_CtInSpRow(RLSimion::VS_CtInSpRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::VS_CtInSpDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"VS_CtInSpDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::VS_RtPwrDataTable::VS_RtPwrDataTable() {
    this->TableName = L"VS_RtPwr";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::VS_RtPwrDataTable::VS_RtPwrDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::VS_RtPwrDataTable::VS_RtPwrDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::VS_RtPwrDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::VS_RtPwrDataTable::VS_RtPwr_IdColumn::get() {
    return this->columnVS_RtPwr_Id;
}

inline ::System::Data::DataColumn^  RLSimion::VS_RtPwrDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 RLSimion::VS_RtPwrDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::VS_RtPwrRow^  RLSimion::VS_RtPwrDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::VS_RtPwrRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::VS_RtPwrDataTable::AddVS_RtPwrRow(RLSimion::VS_RtPwrRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::VS_RtPwrRow^  RLSimion::VS_RtPwrDataTable::AddVS_RtPwrRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_VS_RtPwr) {
    RLSimion::VS_RtPwrRow^  rowVS_RtPwrRow = (cli::safe_cast<RLSimion::VS_RtPwrRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentjonkmanRowByjonkman_VS_RtPwr != nullptr) {
        columnValuesArray[2] = parentjonkmanRowByjonkman_VS_RtPwr[0];
    }
    rowVS_RtPwrRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowVS_RtPwrRow);
    return rowVS_RtPwrRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::VS_RtPwrDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::VS_RtPwrDataTable::Clone() {
    RLSimion::VS_RtPwrDataTable^  cln = (cli::safe_cast<RLSimion::VS_RtPwrDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::VS_RtPwrDataTable::CreateInstance() {
    return (gcnew RLSimion::VS_RtPwrDataTable());
}

inline ::System::Void RLSimion::VS_RtPwrDataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnVS_RtPwr_Id = __super::Columns[L"VS_RtPwr_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void RLSimion::VS_RtPwrDataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnVS_RtPwr_Id = (gcnew ::System::Data::DataColumn(L"VS_RtPwr_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_RtPwr_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnVS_RtPwr_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnVS_RtPwr_Id->AutoIncrement = true;
    this->columnVS_RtPwr_Id->AllowDBNull = false;
    this->columnVS_RtPwr_Id->Unique = true;
}

inline RLSimion::VS_RtPwrRow^  RLSimion::VS_RtPwrDataTable::NewVS_RtPwrRow() {
    return (cli::safe_cast<RLSimion::VS_RtPwrRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::VS_RtPwrDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::VS_RtPwrRow(builder));
}

inline ::System::Type^  RLSimion::VS_RtPwrDataTable::GetRowType() {
    return RLSimion::VS_RtPwrRow::typeid;
}

inline ::System::Void RLSimion::VS_RtPwrDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->VS_RtPwrRowChanged(this, (gcnew RLSimion::VS_RtPwrRowChangeEvent((cli::safe_cast<RLSimion::VS_RtPwrRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_RtPwrDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->VS_RtPwrRowChanging(this, (gcnew RLSimion::VS_RtPwrRowChangeEvent((cli::safe_cast<RLSimion::VS_RtPwrRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_RtPwrDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->VS_RtPwrRowDeleted(this, (gcnew RLSimion::VS_RtPwrRowChangeEvent((cli::safe_cast<RLSimion::VS_RtPwrRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_RtPwrDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->VS_RtPwrRowDeleting(this, (gcnew RLSimion::VS_RtPwrRowChangeEvent((cli::safe_cast<RLSimion::VS_RtPwrRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_RtPwrDataTable::RemoveVS_RtPwrRow(RLSimion::VS_RtPwrRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::VS_RtPwrDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"VS_RtPwrDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::VS_Rgn3MPDataTable::VS_Rgn3MPDataTable() {
    this->TableName = L"VS_Rgn3MP";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::VS_Rgn3MPDataTable::VS_Rgn3MPDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::VS_Rgn3MPDataTable::VS_Rgn3MPDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::VS_Rgn3MPDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::VS_Rgn3MPDataTable::VS_Rgn3MP_IdColumn::get() {
    return this->columnVS_Rgn3MP_Id;
}

inline ::System::Data::DataColumn^  RLSimion::VS_Rgn3MPDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 RLSimion::VS_Rgn3MPDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::VS_Rgn3MPRow^  RLSimion::VS_Rgn3MPDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::VS_Rgn3MPRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::VS_Rgn3MPDataTable::AddVS_Rgn3MPRow(RLSimion::VS_Rgn3MPRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::VS_Rgn3MPRow^  RLSimion::VS_Rgn3MPDataTable::AddVS_Rgn3MPRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_VS_Rgn3MP) {
    RLSimion::VS_Rgn3MPRow^  rowVS_Rgn3MPRow = (cli::safe_cast<RLSimion::VS_Rgn3MPRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentjonkmanRowByjonkman_VS_Rgn3MP != nullptr) {
        columnValuesArray[2] = parentjonkmanRowByjonkman_VS_Rgn3MP[0];
    }
    rowVS_Rgn3MPRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowVS_Rgn3MPRow);
    return rowVS_Rgn3MPRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::VS_Rgn3MPDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::VS_Rgn3MPDataTable::Clone() {
    RLSimion::VS_Rgn3MPDataTable^  cln = (cli::safe_cast<RLSimion::VS_Rgn3MPDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::VS_Rgn3MPDataTable::CreateInstance() {
    return (gcnew RLSimion::VS_Rgn3MPDataTable());
}

inline ::System::Void RLSimion::VS_Rgn3MPDataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnVS_Rgn3MP_Id = __super::Columns[L"VS_Rgn3MP_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void RLSimion::VS_Rgn3MPDataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnVS_Rgn3MP_Id = (gcnew ::System::Data::DataColumn(L"VS_Rgn3MP_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnVS_Rgn3MP_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnVS_Rgn3MP_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnVS_Rgn3MP_Id->AutoIncrement = true;
    this->columnVS_Rgn3MP_Id->AllowDBNull = false;
    this->columnVS_Rgn3MP_Id->Unique = true;
}

inline RLSimion::VS_Rgn3MPRow^  RLSimion::VS_Rgn3MPDataTable::NewVS_Rgn3MPRow() {
    return (cli::safe_cast<RLSimion::VS_Rgn3MPRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::VS_Rgn3MPDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::VS_Rgn3MPRow(builder));
}

inline ::System::Type^  RLSimion::VS_Rgn3MPDataTable::GetRowType() {
    return RLSimion::VS_Rgn3MPRow::typeid;
}

inline ::System::Void RLSimion::VS_Rgn3MPDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->VS_Rgn3MPRowChanged(this, (gcnew RLSimion::VS_Rgn3MPRowChangeEvent((cli::safe_cast<RLSimion::VS_Rgn3MPRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_Rgn3MPDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->VS_Rgn3MPRowChanging(this, (gcnew RLSimion::VS_Rgn3MPRowChangeEvent((cli::safe_cast<RLSimion::VS_Rgn3MPRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_Rgn3MPDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->VS_Rgn3MPRowDeleted(this, (gcnew RLSimion::VS_Rgn3MPRowChangeEvent((cli::safe_cast<RLSimion::VS_Rgn3MPRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_Rgn3MPDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->VS_Rgn3MPRowDeleting(this, (gcnew RLSimion::VS_Rgn3MPRowChangeEvent((cli::safe_cast<RLSimion::VS_Rgn3MPRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::VS_Rgn3MPDataTable::RemoveVS_Rgn3MPRow(RLSimion::VS_Rgn3MPRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::VS_Rgn3MPDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"VS_Rgn3MPDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::PC_KIDataTable::PC_KIDataTable() {
    this->TableName = L"PC_KI";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::PC_KIDataTable::PC_KIDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::PC_KIDataTable::PC_KIDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::PC_KIDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::PC_KIDataTable::PC_KI_IdColumn::get() {
    return this->columnPC_KI_Id;
}

inline ::System::Data::DataColumn^  RLSimion::PC_KIDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 RLSimion::PC_KIDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::PC_KIRow^  RLSimion::PC_KIDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::PC_KIRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::PC_KIDataTable::AddPC_KIRow(RLSimion::PC_KIRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::PC_KIRow^  RLSimion::PC_KIDataTable::AddPC_KIRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_PC_KI) {
    RLSimion::PC_KIRow^  rowPC_KIRow = (cli::safe_cast<RLSimion::PC_KIRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentjonkmanRowByjonkman_PC_KI != nullptr) {
        columnValuesArray[2] = parentjonkmanRowByjonkman_PC_KI[0];
    }
    rowPC_KIRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowPC_KIRow);
    return rowPC_KIRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::PC_KIDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::PC_KIDataTable::Clone() {
    RLSimion::PC_KIDataTable^  cln = (cli::safe_cast<RLSimion::PC_KIDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::PC_KIDataTable::CreateInstance() {
    return (gcnew RLSimion::PC_KIDataTable());
}

inline ::System::Void RLSimion::PC_KIDataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnPC_KI_Id = __super::Columns[L"PC_KI_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void RLSimion::PC_KIDataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnPC_KI_Id = (gcnew ::System::Data::DataColumn(L"PC_KI_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPC_KI_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnPC_KI_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnPC_KI_Id->AutoIncrement = true;
    this->columnPC_KI_Id->AllowDBNull = false;
    this->columnPC_KI_Id->Unique = true;
}

inline RLSimion::PC_KIRow^  RLSimion::PC_KIDataTable::NewPC_KIRow() {
    return (cli::safe_cast<RLSimion::PC_KIRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::PC_KIDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::PC_KIRow(builder));
}

inline ::System::Type^  RLSimion::PC_KIDataTable::GetRowType() {
    return RLSimion::PC_KIRow::typeid;
}

inline ::System::Void RLSimion::PC_KIDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->PC_KIRowChanged(this, (gcnew RLSimion::PC_KIRowChangeEvent((cli::safe_cast<RLSimion::PC_KIRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::PC_KIDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->PC_KIRowChanging(this, (gcnew RLSimion::PC_KIRowChangeEvent((cli::safe_cast<RLSimion::PC_KIRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::PC_KIDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->PC_KIRowDeleted(this, (gcnew RLSimion::PC_KIRowChangeEvent((cli::safe_cast<RLSimion::PC_KIRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::PC_KIDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->PC_KIRowDeleting(this, (gcnew RLSimion::PC_KIRowChangeEvent((cli::safe_cast<RLSimion::PC_KIRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::PC_KIDataTable::RemovePC_KIRow(RLSimion::PC_KIRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::PC_KIDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"PC_KIDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::PC_KKDataTable::PC_KKDataTable() {
    this->TableName = L"PC_KK";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::PC_KKDataTable::PC_KKDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::PC_KKDataTable::PC_KKDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::PC_KKDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::PC_KKDataTable::PC_KK_IdColumn::get() {
    return this->columnPC_KK_Id;
}

inline ::System::Data::DataColumn^  RLSimion::PC_KKDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 RLSimion::PC_KKDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::PC_KKRow^  RLSimion::PC_KKDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::PC_KKRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::PC_KKDataTable::AddPC_KKRow(RLSimion::PC_KKRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::PC_KKRow^  RLSimion::PC_KKDataTable::AddPC_KKRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_PC_KK) {
    RLSimion::PC_KKRow^  rowPC_KKRow = (cli::safe_cast<RLSimion::PC_KKRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentjonkmanRowByjonkman_PC_KK != nullptr) {
        columnValuesArray[2] = parentjonkmanRowByjonkman_PC_KK[0];
    }
    rowPC_KKRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowPC_KKRow);
    return rowPC_KKRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::PC_KKDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::PC_KKDataTable::Clone() {
    RLSimion::PC_KKDataTable^  cln = (cli::safe_cast<RLSimion::PC_KKDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::PC_KKDataTable::CreateInstance() {
    return (gcnew RLSimion::PC_KKDataTable());
}

inline ::System::Void RLSimion::PC_KKDataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnPC_KK_Id = __super::Columns[L"PC_KK_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void RLSimion::PC_KKDataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnPC_KK_Id = (gcnew ::System::Data::DataColumn(L"PC_KK_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPC_KK_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnPC_KK_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnPC_KK_Id->AutoIncrement = true;
    this->columnPC_KK_Id->AllowDBNull = false;
    this->columnPC_KK_Id->Unique = true;
}

inline RLSimion::PC_KKRow^  RLSimion::PC_KKDataTable::NewPC_KKRow() {
    return (cli::safe_cast<RLSimion::PC_KKRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::PC_KKDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::PC_KKRow(builder));
}

inline ::System::Type^  RLSimion::PC_KKDataTable::GetRowType() {
    return RLSimion::PC_KKRow::typeid;
}

inline ::System::Void RLSimion::PC_KKDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->PC_KKRowChanged(this, (gcnew RLSimion::PC_KKRowChangeEvent((cli::safe_cast<RLSimion::PC_KKRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::PC_KKDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->PC_KKRowChanging(this, (gcnew RLSimion::PC_KKRowChangeEvent((cli::safe_cast<RLSimion::PC_KKRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::PC_KKDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->PC_KKRowDeleted(this, (gcnew RLSimion::PC_KKRowChangeEvent((cli::safe_cast<RLSimion::PC_KKRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::PC_KKDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->PC_KKRowDeleting(this, (gcnew RLSimion::PC_KKRowChangeEvent((cli::safe_cast<RLSimion::PC_KKRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::PC_KKDataTable::RemovePC_KKRow(RLSimion::PC_KKRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::PC_KKDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"PC_KKDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::PC_KPDataTable::PC_KPDataTable() {
    this->TableName = L"PC_KP";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::PC_KPDataTable::PC_KPDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::PC_KPDataTable::PC_KPDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::PC_KPDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::PC_KPDataTable::PC_KP_IdColumn::get() {
    return this->columnPC_KP_Id;
}

inline ::System::Data::DataColumn^  RLSimion::PC_KPDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 RLSimion::PC_KPDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::PC_KPRow^  RLSimion::PC_KPDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::PC_KPRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::PC_KPDataTable::AddPC_KPRow(RLSimion::PC_KPRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::PC_KPRow^  RLSimion::PC_KPDataTable::AddPC_KPRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_PC_KP) {
    RLSimion::PC_KPRow^  rowPC_KPRow = (cli::safe_cast<RLSimion::PC_KPRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentjonkmanRowByjonkman_PC_KP != nullptr) {
        columnValuesArray[2] = parentjonkmanRowByjonkman_PC_KP[0];
    }
    rowPC_KPRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowPC_KPRow);
    return rowPC_KPRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::PC_KPDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::PC_KPDataTable::Clone() {
    RLSimion::PC_KPDataTable^  cln = (cli::safe_cast<RLSimion::PC_KPDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::PC_KPDataTable::CreateInstance() {
    return (gcnew RLSimion::PC_KPDataTable());
}

inline ::System::Void RLSimion::PC_KPDataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnPC_KP_Id = __super::Columns[L"PC_KP_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void RLSimion::PC_KPDataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnPC_KP_Id = (gcnew ::System::Data::DataColumn(L"PC_KP_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPC_KP_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnPC_KP_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnPC_KP_Id->AutoIncrement = true;
    this->columnPC_KP_Id->AllowDBNull = false;
    this->columnPC_KP_Id->Unique = true;
}

inline RLSimion::PC_KPRow^  RLSimion::PC_KPDataTable::NewPC_KPRow() {
    return (cli::safe_cast<RLSimion::PC_KPRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::PC_KPDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::PC_KPRow(builder));
}

inline ::System::Type^  RLSimion::PC_KPDataTable::GetRowType() {
    return RLSimion::PC_KPRow::typeid;
}

inline ::System::Void RLSimion::PC_KPDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->PC_KPRowChanged(this, (gcnew RLSimion::PC_KPRowChangeEvent((cli::safe_cast<RLSimion::PC_KPRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::PC_KPDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->PC_KPRowChanging(this, (gcnew RLSimion::PC_KPRowChangeEvent((cli::safe_cast<RLSimion::PC_KPRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::PC_KPDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->PC_KPRowDeleted(this, (gcnew RLSimion::PC_KPRowChangeEvent((cli::safe_cast<RLSimion::PC_KPRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::PC_KPDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->PC_KPRowDeleting(this, (gcnew RLSimion::PC_KPRowChangeEvent((cli::safe_cast<RLSimion::PC_KPRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::PC_KPDataTable::RemovePC_KPRow(RLSimion::PC_KPRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::PC_KPDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"PC_KPDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::PC_RefSpdDataTable::PC_RefSpdDataTable() {
    this->TableName = L"PC_RefSpd";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::PC_RefSpdDataTable::PC_RefSpdDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::PC_RefSpdDataTable::PC_RefSpdDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::PC_RefSpdDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::PC_RefSpdDataTable::PC_RefSpd_IdColumn::get() {
    return this->columnPC_RefSpd_Id;
}

inline ::System::Data::DataColumn^  RLSimion::PC_RefSpdDataTable::jonkman_IdColumn::get() {
    return this->columnjonkman_Id;
}

inline ::System::Int32 RLSimion::PC_RefSpdDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::PC_RefSpdRow^  RLSimion::PC_RefSpdDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::PC_RefSpdRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::PC_RefSpdDataTable::AddPC_RefSpdRow(RLSimion::PC_RefSpdRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::PC_RefSpdRow^  RLSimion::PC_RefSpdDataTable::AddPC_RefSpdRow(System::Decimal decimal, RLSimion::jonkmanRow^  parentjonkmanRowByjonkman_PC_RefSpd) {
    RLSimion::PC_RefSpdRow^  rowPC_RefSpdRow = (cli::safe_cast<RLSimion::PC_RefSpdRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentjonkmanRowByjonkman_PC_RefSpd != nullptr) {
        columnValuesArray[2] = parentjonkmanRowByjonkman_PC_RefSpd[0];
    }
    rowPC_RefSpdRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowPC_RefSpdRow);
    return rowPC_RefSpdRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::PC_RefSpdDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::PC_RefSpdDataTable::Clone() {
    RLSimion::PC_RefSpdDataTable^  cln = (cli::safe_cast<RLSimion::PC_RefSpdDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::PC_RefSpdDataTable::CreateInstance() {
    return (gcnew RLSimion::PC_RefSpdDataTable());
}

inline ::System::Void RLSimion::PC_RefSpdDataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnPC_RefSpd_Id = __super::Columns[L"PC_RefSpd_Id"];
    this->columnjonkman_Id = __super::Columns[L"jonkman_Id"];
}

inline ::System::Void RLSimion::PC_RefSpdDataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnPC_RefSpd_Id = (gcnew ::System::Data::DataColumn(L"PC_RefSpd_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnPC_RefSpd_Id);
    this->columnjonkman_Id = (gcnew ::System::Data::DataColumn(L"jonkman_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnjonkman_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnPC_RefSpd_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnPC_RefSpd_Id->AutoIncrement = true;
    this->columnPC_RefSpd_Id->AllowDBNull = false;
    this->columnPC_RefSpd_Id->Unique = true;
}

inline RLSimion::PC_RefSpdRow^  RLSimion::PC_RefSpdDataTable::NewPC_RefSpdRow() {
    return (cli::safe_cast<RLSimion::PC_RefSpdRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::PC_RefSpdDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::PC_RefSpdRow(builder));
}

inline ::System::Type^  RLSimion::PC_RefSpdDataTable::GetRowType() {
    return RLSimion::PC_RefSpdRow::typeid;
}

inline ::System::Void RLSimion::PC_RefSpdDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->PC_RefSpdRowChanged(this, (gcnew RLSimion::PC_RefSpdRowChangeEvent((cli::safe_cast<RLSimion::PC_RefSpdRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::PC_RefSpdDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->PC_RefSpdRowChanging(this, (gcnew RLSimion::PC_RefSpdRowChangeEvent((cli::safe_cast<RLSimion::PC_RefSpdRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::PC_RefSpdDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->PC_RefSpdRowDeleted(this, (gcnew RLSimion::PC_RefSpdRowChangeEvent((cli::safe_cast<RLSimion::PC_RefSpdRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::PC_RefSpdDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->PC_RefSpdRowDeleting(this, (gcnew RLSimion::PC_RefSpdRowChangeEvent((cli::safe_cast<RLSimion::PC_RefSpdRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::PC_RefSpdDataTable::RemovePC_RefSpdRow(RLSimion::PC_RefSpdRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::PC_RefSpdDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"PC_RefSpdDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::vidalDataTable::vidalDataTable() {
    this->TableName = L"vidal";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::vidalDataTable::vidalDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::vidalDataTable::vidalDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::vidalDataTable::vidal_IdColumn::get() {
    return this->columnvidal_Id;
}

inline ::System::Data::DataColumn^  RLSimion::vidalDataTable::ACTOR_IdColumn::get() {
    return this->columnACTOR_Id;
}

inline ::System::Data::DataColumn^  RLSimion::vidalDataTable::CONTROLLER_IdColumn::get() {
    return this->columnCONTROLLER_Id;
}

inline ::System::Int32 RLSimion::vidalDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::vidalRow^  RLSimion::vidalDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::vidalRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::vidalDataTable::AddvidalRow(RLSimion::vidalRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::vidalRow^  RLSimion::vidalDataTable::AddvidalRow(RLSimion::ACTORRow^  parentACTORRowByACTOR_vidal, RLSimion::CONTROLLERRow^  parentCONTROLLERRowByCONTROLLER_vidal) {
    RLSimion::vidalRow^  rowvidalRow = (cli::safe_cast<RLSimion::vidalRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {nullptr, nullptr, nullptr};
    if (parentACTORRowByACTOR_vidal != nullptr) {
        columnValuesArray[1] = parentACTORRowByACTOR_vidal[0];
    }
    if (parentCONTROLLERRowByCONTROLLER_vidal != nullptr) {
        columnValuesArray[2] = parentCONTROLLERRowByCONTROLLER_vidal[0];
    }
    rowvidalRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowvidalRow);
    return rowvidalRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::vidalDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::vidalDataTable::Clone() {
    RLSimion::vidalDataTable^  cln = (cli::safe_cast<RLSimion::vidalDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::vidalDataTable::CreateInstance() {
    return (gcnew RLSimion::vidalDataTable());
}

inline ::System::Void RLSimion::vidalDataTable::InitVars() {
    this->columnvidal_Id = __super::Columns[L"vidal_Id"];
    this->columnACTOR_Id = __super::Columns[L"ACTOR_Id"];
    this->columnCONTROLLER_Id = __super::Columns[L"CONTROLLER_Id"];
}

inline ::System::Void RLSimion::vidalDataTable::InitClass() {
    this->columnvidal_Id = (gcnew ::System::Data::DataColumn(L"vidal_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnvidal_Id);
    this->columnACTOR_Id = (gcnew ::System::Data::DataColumn(L"ACTOR_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnACTOR_Id);
    this->columnCONTROLLER_Id = (gcnew ::System::Data::DataColumn(L"CONTROLLER_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnCONTROLLER_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnvidal_Id}, 
            true)));
    this->columnvidal_Id->AutoIncrement = true;
    this->columnvidal_Id->AllowDBNull = false;
    this->columnvidal_Id->Unique = true;
}

inline RLSimion::vidalRow^  RLSimion::vidalDataTable::NewvidalRow() {
    return (cli::safe_cast<RLSimion::vidalRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::vidalDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::vidalRow(builder));
}

inline ::System::Type^  RLSimion::vidalDataTable::GetRowType() {
    return RLSimion::vidalRow::typeid;
}

inline ::System::Void RLSimion::vidalDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->vidalRowChanged(this, (gcnew RLSimion::vidalRowChangeEvent((cli::safe_cast<RLSimion::vidalRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::vidalDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->vidalRowChanging(this, (gcnew RLSimion::vidalRowChangeEvent((cli::safe_cast<RLSimion::vidalRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::vidalDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->vidalRowDeleted(this, (gcnew RLSimion::vidalRowChangeEvent((cli::safe_cast<RLSimion::vidalRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::vidalDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->vidalRowDeleting(this, (gcnew RLSimion::vidalRowChangeEvent((cli::safe_cast<RLSimion::vidalRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::vidalDataTable::RemovevidalRow(RLSimion::vidalRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::vidalDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"vidalDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::ADataTable::ADataTable() {
    this->TableName = L"A";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::ADataTable::ADataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::ADataTable::ADataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::ADataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::ADataTable::A_IdColumn::get() {
    return this->columnA_Id;
}

inline ::System::Data::DataColumn^  RLSimion::ADataTable::vidal_IdColumn::get() {
    return this->columnvidal_Id;
}

inline ::System::Int32 RLSimion::ADataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::ARow^  RLSimion::ADataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::ARow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::ADataTable::AddARow(RLSimion::ARow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::ARow^  RLSimion::ADataTable::AddARow(System::Decimal decimal, RLSimion::vidalRow^  parentvidalRowByvidal_A) {
    RLSimion::ARow^  rowARow = (cli::safe_cast<RLSimion::ARow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentvidalRowByvidal_A != nullptr) {
        columnValuesArray[2] = parentvidalRowByvidal_A[0];
    }
    rowARow->ItemArray = columnValuesArray;
    this->Rows->Add(rowARow);
    return rowARow;
}

inline ::System::Collections::IEnumerator^  RLSimion::ADataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::ADataTable::Clone() {
    RLSimion::ADataTable^  cln = (cli::safe_cast<RLSimion::ADataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::ADataTable::CreateInstance() {
    return (gcnew RLSimion::ADataTable());
}

inline ::System::Void RLSimion::ADataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnA_Id = __super::Columns[L"A_Id"];
    this->columnvidal_Id = __super::Columns[L"vidal_Id"];
}

inline ::System::Void RLSimion::ADataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnA_Id = (gcnew ::System::Data::DataColumn(L"A_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnA_Id);
    this->columnvidal_Id = (gcnew ::System::Data::DataColumn(L"vidal_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnvidal_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnA_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnA_Id->AutoIncrement = true;
    this->columnA_Id->AllowDBNull = false;
    this->columnA_Id->Unique = true;
}

inline RLSimion::ARow^  RLSimion::ADataTable::NewARow() {
    return (cli::safe_cast<RLSimion::ARow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::ADataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::ARow(builder));
}

inline ::System::Type^  RLSimion::ADataTable::GetRowType() {
    return RLSimion::ARow::typeid;
}

inline ::System::Void RLSimion::ADataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->ARowChanged(this, (gcnew RLSimion::ARowChangeEvent((cli::safe_cast<RLSimion::ARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::ADataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->ARowChanging(this, (gcnew RLSimion::ARowChangeEvent((cli::safe_cast<RLSimion::ARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::ADataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->ARowDeleted(this, (gcnew RLSimion::ARowChangeEvent((cli::safe_cast<RLSimion::ARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::ADataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->ARowDeleting(this, (gcnew RLSimion::ARowChangeEvent((cli::safe_cast<RLSimion::ARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::ADataTable::RemoveARow(RLSimion::ARow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::ADataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"ADataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::K_alphaDataTable::K_alphaDataTable() {
    this->TableName = L"K_alpha";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::K_alphaDataTable::K_alphaDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::K_alphaDataTable::K_alphaDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::K_alphaDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::K_alphaDataTable::K_alpha_IdColumn::get() {
    return this->columnK_alpha_Id;
}

inline ::System::Data::DataColumn^  RLSimion::K_alphaDataTable::vidal_IdColumn::get() {
    return this->columnvidal_Id;
}

inline ::System::Int32 RLSimion::K_alphaDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::K_alphaRow^  RLSimion::K_alphaDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::K_alphaRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::K_alphaDataTable::AddK_alphaRow(RLSimion::K_alphaRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::K_alphaRow^  RLSimion::K_alphaDataTable::AddK_alphaRow(System::Decimal decimal, RLSimion::vidalRow^  parentvidalRowByvidal_K_alpha) {
    RLSimion::K_alphaRow^  rowK_alphaRow = (cli::safe_cast<RLSimion::K_alphaRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentvidalRowByvidal_K_alpha != nullptr) {
        columnValuesArray[2] = parentvidalRowByvidal_K_alpha[0];
    }
    rowK_alphaRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowK_alphaRow);
    return rowK_alphaRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::K_alphaDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::K_alphaDataTable::Clone() {
    RLSimion::K_alphaDataTable^  cln = (cli::safe_cast<RLSimion::K_alphaDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::K_alphaDataTable::CreateInstance() {
    return (gcnew RLSimion::K_alphaDataTable());
}

inline ::System::Void RLSimion::K_alphaDataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnK_alpha_Id = __super::Columns[L"K_alpha_Id"];
    this->columnvidal_Id = __super::Columns[L"vidal_Id"];
}

inline ::System::Void RLSimion::K_alphaDataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnK_alpha_Id = (gcnew ::System::Data::DataColumn(L"K_alpha_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnK_alpha_Id);
    this->columnvidal_Id = (gcnew ::System::Data::DataColumn(L"vidal_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnvidal_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnK_alpha_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnK_alpha_Id->AutoIncrement = true;
    this->columnK_alpha_Id->AllowDBNull = false;
    this->columnK_alpha_Id->Unique = true;
}

inline RLSimion::K_alphaRow^  RLSimion::K_alphaDataTable::NewK_alphaRow() {
    return (cli::safe_cast<RLSimion::K_alphaRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::K_alphaDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::K_alphaRow(builder));
}

inline ::System::Type^  RLSimion::K_alphaDataTable::GetRowType() {
    return RLSimion::K_alphaRow::typeid;
}

inline ::System::Void RLSimion::K_alphaDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->K_alphaRowChanged(this, (gcnew RLSimion::K_alphaRowChangeEvent((cli::safe_cast<RLSimion::K_alphaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::K_alphaDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->K_alphaRowChanging(this, (gcnew RLSimion::K_alphaRowChangeEvent((cli::safe_cast<RLSimion::K_alphaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::K_alphaDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->K_alphaRowDeleted(this, (gcnew RLSimion::K_alphaRowChangeEvent((cli::safe_cast<RLSimion::K_alphaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::K_alphaDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->K_alphaRowDeleting(this, (gcnew RLSimion::K_alphaRowChangeEvent((cli::safe_cast<RLSimion::K_alphaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::K_alphaDataTable::RemoveK_alphaRow(RLSimion::K_alphaRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::K_alphaDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"K_alphaDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::P_sDataTable::P_sDataTable() {
    this->TableName = L"P_s";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::P_sDataTable::P_sDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::P_sDataTable::P_sDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::P_sDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::P_sDataTable::P_s_IdColumn::get() {
    return this->columnP_s_Id;
}

inline ::System::Data::DataColumn^  RLSimion::P_sDataTable::vidal_IdColumn::get() {
    return this->columnvidal_Id;
}

inline ::System::Int32 RLSimion::P_sDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::P_sRow^  RLSimion::P_sDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::P_sRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::P_sDataTable::AddP_sRow(RLSimion::P_sRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::P_sRow^  RLSimion::P_sDataTable::AddP_sRow(System::Decimal decimal, RLSimion::vidalRow^  parentvidalRowByvidal_P_s) {
    RLSimion::P_sRow^  rowP_sRow = (cli::safe_cast<RLSimion::P_sRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentvidalRowByvidal_P_s != nullptr) {
        columnValuesArray[2] = parentvidalRowByvidal_P_s[0];
    }
    rowP_sRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowP_sRow);
    return rowP_sRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::P_sDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::P_sDataTable::Clone() {
    RLSimion::P_sDataTable^  cln = (cli::safe_cast<RLSimion::P_sDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::P_sDataTable::CreateInstance() {
    return (gcnew RLSimion::P_sDataTable());
}

inline ::System::Void RLSimion::P_sDataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnP_s_Id = __super::Columns[L"P_s_Id"];
    this->columnvidal_Id = __super::Columns[L"vidal_Id"];
}

inline ::System::Void RLSimion::P_sDataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnP_s_Id = (gcnew ::System::Data::DataColumn(L"P_s_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnP_s_Id);
    this->columnvidal_Id = (gcnew ::System::Data::DataColumn(L"vidal_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnvidal_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnP_s_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnP_s_Id->AutoIncrement = true;
    this->columnP_s_Id->AllowDBNull = false;
    this->columnP_s_Id->Unique = true;
}

inline RLSimion::P_sRow^  RLSimion::P_sDataTable::NewP_sRow() {
    return (cli::safe_cast<RLSimion::P_sRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::P_sDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::P_sRow(builder));
}

inline ::System::Type^  RLSimion::P_sDataTable::GetRowType() {
    return RLSimion::P_sRow::typeid;
}

inline ::System::Void RLSimion::P_sDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->P_sRowChanged(this, (gcnew RLSimion::P_sRowChangeEvent((cli::safe_cast<RLSimion::P_sRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::P_sDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->P_sRowChanging(this, (gcnew RLSimion::P_sRowChangeEvent((cli::safe_cast<RLSimion::P_sRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::P_sDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->P_sRowDeleted(this, (gcnew RLSimion::P_sRowChangeEvent((cli::safe_cast<RLSimion::P_sRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::P_sDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->P_sRowDeleting(this, (gcnew RLSimion::P_sRowChangeEvent((cli::safe_cast<RLSimion::P_sRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::P_sDataTable::RemoveP_sRow(RLSimion::P_sRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::P_sDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"P_sDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::boukhezzarDataTable::boukhezzarDataTable() {
    this->TableName = L"boukhezzar";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::boukhezzarDataTable::boukhezzarDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::boukhezzarDataTable::boukhezzarDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::boukhezzarDataTable::boukhezzar_IdColumn::get() {
    return this->columnboukhezzar_Id;
}

inline ::System::Data::DataColumn^  RLSimion::boukhezzarDataTable::ACTOR_IdColumn::get() {
    return this->columnACTOR_Id;
}

inline ::System::Data::DataColumn^  RLSimion::boukhezzarDataTable::CONTROLLER_IdColumn::get() {
    return this->columnCONTROLLER_Id;
}

inline ::System::Int32 RLSimion::boukhezzarDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::boukhezzarRow^  RLSimion::boukhezzarDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::boukhezzarRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::boukhezzarDataTable::AddboukhezzarRow(RLSimion::boukhezzarRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::boukhezzarRow^  RLSimion::boukhezzarDataTable::AddboukhezzarRow(RLSimion::ACTORRow^  parentACTORRowByACTOR_boukhezzar, 
            RLSimion::CONTROLLERRow^  parentCONTROLLERRowByCONTROLLER_boukhezzar) {
    RLSimion::boukhezzarRow^  rowboukhezzarRow = (cli::safe_cast<RLSimion::boukhezzarRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {nullptr, nullptr, nullptr};
    if (parentACTORRowByACTOR_boukhezzar != nullptr) {
        columnValuesArray[1] = parentACTORRowByACTOR_boukhezzar[0];
    }
    if (parentCONTROLLERRowByCONTROLLER_boukhezzar != nullptr) {
        columnValuesArray[2] = parentCONTROLLERRowByCONTROLLER_boukhezzar[0];
    }
    rowboukhezzarRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowboukhezzarRow);
    return rowboukhezzarRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::boukhezzarDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::boukhezzarDataTable::Clone() {
    RLSimion::boukhezzarDataTable^  cln = (cli::safe_cast<RLSimion::boukhezzarDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::boukhezzarDataTable::CreateInstance() {
    return (gcnew RLSimion::boukhezzarDataTable());
}

inline ::System::Void RLSimion::boukhezzarDataTable::InitVars() {
    this->columnboukhezzar_Id = __super::Columns[L"boukhezzar_Id"];
    this->columnACTOR_Id = __super::Columns[L"ACTOR_Id"];
    this->columnCONTROLLER_Id = __super::Columns[L"CONTROLLER_Id"];
}

inline ::System::Void RLSimion::boukhezzarDataTable::InitClass() {
    this->columnboukhezzar_Id = (gcnew ::System::Data::DataColumn(L"boukhezzar_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnboukhezzar_Id);
    this->columnACTOR_Id = (gcnew ::System::Data::DataColumn(L"ACTOR_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnACTOR_Id);
    this->columnCONTROLLER_Id = (gcnew ::System::Data::DataColumn(L"CONTROLLER_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnCONTROLLER_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnboukhezzar_Id}, 
            true)));
    this->columnboukhezzar_Id->AutoIncrement = true;
    this->columnboukhezzar_Id->AllowDBNull = false;
    this->columnboukhezzar_Id->Unique = true;
}

inline RLSimion::boukhezzarRow^  RLSimion::boukhezzarDataTable::NewboukhezzarRow() {
    return (cli::safe_cast<RLSimion::boukhezzarRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::boukhezzarDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::boukhezzarRow(builder));
}

inline ::System::Type^  RLSimion::boukhezzarDataTable::GetRowType() {
    return RLSimion::boukhezzarRow::typeid;
}

inline ::System::Void RLSimion::boukhezzarDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->boukhezzarRowChanged(this, (gcnew RLSimion::boukhezzarRowChangeEvent((cli::safe_cast<RLSimion::boukhezzarRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::boukhezzarDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->boukhezzarRowChanging(this, (gcnew RLSimion::boukhezzarRowChangeEvent((cli::safe_cast<RLSimion::boukhezzarRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::boukhezzarDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->boukhezzarRowDeleted(this, (gcnew RLSimion::boukhezzarRowChangeEvent((cli::safe_cast<RLSimion::boukhezzarRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::boukhezzarDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->boukhezzarRowDeleting(this, (gcnew RLSimion::boukhezzarRowChangeEvent((cli::safe_cast<RLSimion::boukhezzarRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::boukhezzarDataTable::RemoveboukhezzarRow(RLSimion::boukhezzarRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::boukhezzarDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"boukhezzarDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::C_0DataTable::C_0DataTable() {
    this->TableName = L"C_0";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::C_0DataTable::C_0DataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::C_0DataTable::C_0DataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::C_0DataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::C_0DataTable::C_0_IdColumn::get() {
    return this->columnC_0_Id;
}

inline ::System::Data::DataColumn^  RLSimion::C_0DataTable::boukhezzar_IdColumn::get() {
    return this->columnboukhezzar_Id;
}

inline ::System::Int32 RLSimion::C_0DataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::C_0Row^  RLSimion::C_0DataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::C_0Row^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::C_0DataTable::AddC_0Row(RLSimion::C_0Row^  row) {
    this->Rows->Add(row);
}

inline RLSimion::C_0Row^  RLSimion::C_0DataTable::AddC_0Row(System::Decimal decimal, RLSimion::boukhezzarRow^  parentboukhezzarRowByboukhezzar_C_0) {
    RLSimion::C_0Row^  rowC_0Row = (cli::safe_cast<RLSimion::C_0Row^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentboukhezzarRowByboukhezzar_C_0 != nullptr) {
        columnValuesArray[2] = parentboukhezzarRowByboukhezzar_C_0[0];
    }
    rowC_0Row->ItemArray = columnValuesArray;
    this->Rows->Add(rowC_0Row);
    return rowC_0Row;
}

inline ::System::Collections::IEnumerator^  RLSimion::C_0DataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::C_0DataTable::Clone() {
    RLSimion::C_0DataTable^  cln = (cli::safe_cast<RLSimion::C_0DataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::C_0DataTable::CreateInstance() {
    return (gcnew RLSimion::C_0DataTable());
}

inline ::System::Void RLSimion::C_0DataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnC_0_Id = __super::Columns[L"C_0_Id"];
    this->columnboukhezzar_Id = __super::Columns[L"boukhezzar_Id"];
}

inline ::System::Void RLSimion::C_0DataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnC_0_Id = (gcnew ::System::Data::DataColumn(L"C_0_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnC_0_Id);
    this->columnboukhezzar_Id = (gcnew ::System::Data::DataColumn(L"boukhezzar_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnboukhezzar_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnC_0_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnC_0_Id->AutoIncrement = true;
    this->columnC_0_Id->AllowDBNull = false;
    this->columnC_0_Id->Unique = true;
}

inline RLSimion::C_0Row^  RLSimion::C_0DataTable::NewC_0Row() {
    return (cli::safe_cast<RLSimion::C_0Row^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::C_0DataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::C_0Row(builder));
}

inline ::System::Type^  RLSimion::C_0DataTable::GetRowType() {
    return RLSimion::C_0Row::typeid;
}

inline ::System::Void RLSimion::C_0DataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->C_0RowChanged(this, (gcnew RLSimion::C_0RowChangeEvent((cli::safe_cast<RLSimion::C_0Row^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::C_0DataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->C_0RowChanging(this, (gcnew RLSimion::C_0RowChangeEvent((cli::safe_cast<RLSimion::C_0Row^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::C_0DataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->C_0RowDeleted(this, (gcnew RLSimion::C_0RowChangeEvent((cli::safe_cast<RLSimion::C_0Row^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::C_0DataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->C_0RowDeleting(this, (gcnew RLSimion::C_0RowChangeEvent((cli::safe_cast<RLSimion::C_0Row^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::C_0DataTable::RemoveC_0Row(RLSimion::C_0Row^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::C_0DataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"C_0DataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::K_tDataTable::K_tDataTable() {
    this->TableName = L"K_t";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::K_tDataTable::K_tDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::K_tDataTable::K_tDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::K_tDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::K_tDataTable::K_t_IdColumn::get() {
    return this->columnK_t_Id;
}

inline ::System::Data::DataColumn^  RLSimion::K_tDataTable::boukhezzar_IdColumn::get() {
    return this->columnboukhezzar_Id;
}

inline ::System::Int32 RLSimion::K_tDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::K_tRow^  RLSimion::K_tDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::K_tRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::K_tDataTable::AddK_tRow(RLSimion::K_tRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::K_tRow^  RLSimion::K_tDataTable::AddK_tRow(System::Decimal decimal, RLSimion::boukhezzarRow^  parentboukhezzarRowByboukhezzar_K_t) {
    RLSimion::K_tRow^  rowK_tRow = (cli::safe_cast<RLSimion::K_tRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentboukhezzarRowByboukhezzar_K_t != nullptr) {
        columnValuesArray[2] = parentboukhezzarRowByboukhezzar_K_t[0];
    }
    rowK_tRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowK_tRow);
    return rowK_tRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::K_tDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::K_tDataTable::Clone() {
    RLSimion::K_tDataTable^  cln = (cli::safe_cast<RLSimion::K_tDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::K_tDataTable::CreateInstance() {
    return (gcnew RLSimion::K_tDataTable());
}

inline ::System::Void RLSimion::K_tDataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnK_t_Id = __super::Columns[L"K_t_Id"];
    this->columnboukhezzar_Id = __super::Columns[L"boukhezzar_Id"];
}

inline ::System::Void RLSimion::K_tDataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnK_t_Id = (gcnew ::System::Data::DataColumn(L"K_t_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnK_t_Id);
    this->columnboukhezzar_Id = (gcnew ::System::Data::DataColumn(L"boukhezzar_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnboukhezzar_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnK_t_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnK_t_Id->AutoIncrement = true;
    this->columnK_t_Id->AllowDBNull = false;
    this->columnK_t_Id->Unique = true;
}

inline RLSimion::K_tRow^  RLSimion::K_tDataTable::NewK_tRow() {
    return (cli::safe_cast<RLSimion::K_tRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::K_tDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::K_tRow(builder));
}

inline ::System::Type^  RLSimion::K_tDataTable::GetRowType() {
    return RLSimion::K_tRow::typeid;
}

inline ::System::Void RLSimion::K_tDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->K_tRowChanged(this, (gcnew RLSimion::K_tRowChangeEvent((cli::safe_cast<RLSimion::K_tRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::K_tDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->K_tRowChanging(this, (gcnew RLSimion::K_tRowChangeEvent((cli::safe_cast<RLSimion::K_tRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::K_tDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->K_tRowDeleted(this, (gcnew RLSimion::K_tRowChangeEvent((cli::safe_cast<RLSimion::K_tRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::K_tDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->K_tRowDeleting(this, (gcnew RLSimion::K_tRowChangeEvent((cli::safe_cast<RLSimion::K_tRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::K_tDataTable::RemoveK_tRow(RLSimion::K_tRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::K_tDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"K_tDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::J_tDataTable::J_tDataTable() {
    this->TableName = L"J_t";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::J_tDataTable::J_tDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::J_tDataTable::J_tDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::J_tDataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::J_tDataTable::J_t_IdColumn::get() {
    return this->columnJ_t_Id;
}

inline ::System::Data::DataColumn^  RLSimion::J_tDataTable::boukhezzar_IdColumn::get() {
    return this->columnboukhezzar_Id;
}

inline ::System::Int32 RLSimion::J_tDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::J_tRow^  RLSimion::J_tDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::J_tRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::J_tDataTable::AddJ_tRow(RLSimion::J_tRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::J_tRow^  RLSimion::J_tDataTable::AddJ_tRow(System::Decimal decimal, RLSimion::boukhezzarRow^  parentboukhezzarRowByboukhezzar_J_t) {
    RLSimion::J_tRow^  rowJ_tRow = (cli::safe_cast<RLSimion::J_tRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (parentboukhezzarRowByboukhezzar_J_t != nullptr) {
        columnValuesArray[2] = parentboukhezzarRowByboukhezzar_J_t[0];
    }
    rowJ_tRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowJ_tRow);
    return rowJ_tRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::J_tDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::J_tDataTable::Clone() {
    RLSimion::J_tDataTable^  cln = (cli::safe_cast<RLSimion::J_tDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::J_tDataTable::CreateInstance() {
    return (gcnew RLSimion::J_tDataTable());
}

inline ::System::Void RLSimion::J_tDataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnJ_t_Id = __super::Columns[L"J_t_Id"];
    this->columnboukhezzar_Id = __super::Columns[L"boukhezzar_Id"];
}

inline ::System::Void RLSimion::J_tDataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnJ_t_Id = (gcnew ::System::Data::DataColumn(L"J_t_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnJ_t_Id);
    this->columnboukhezzar_Id = (gcnew ::System::Data::DataColumn(L"boukhezzar_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnboukhezzar_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnJ_t_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnJ_t_Id->AutoIncrement = true;
    this->columnJ_t_Id->AllowDBNull = false;
    this->columnJ_t_Id->Unique = true;
}

inline RLSimion::J_tRow^  RLSimion::J_tDataTable::NewJ_tRow() {
    return (cli::safe_cast<RLSimion::J_tRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::J_tDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::J_tRow(builder));
}

inline ::System::Type^  RLSimion::J_tDataTable::GetRowType() {
    return RLSimion::J_tRow::typeid;
}

inline ::System::Void RLSimion::J_tDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->J_tRowChanged(this, (gcnew RLSimion::J_tRowChangeEvent((cli::safe_cast<RLSimion::J_tRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::J_tDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->J_tRowChanging(this, (gcnew RLSimion::J_tRowChangeEvent((cli::safe_cast<RLSimion::J_tRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::J_tDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->J_tRowDeleted(this, (gcnew RLSimion::J_tRowChangeEvent((cli::safe_cast<RLSimion::J_tRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::J_tDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->J_tRowDeleting(this, (gcnew RLSimion::J_tRowChangeEvent((cli::safe_cast<RLSimion::J_tRow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::J_tDataTable::RemoveJ_tRow(RLSimion::J_tRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::J_tDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"J_tDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::_actor_criticDataTable::_actor_criticDataTable() {
    this->TableName = L"actor-critic";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::_actor_criticDataTable::_actor_criticDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::_actor_criticDataTable::_actor_criticDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::_actor_criticDataTable::_actor_critic_IdColumn::get() {
    return this->column_actor_critic_Id;
}

inline ::System::Data::DataColumn^  RLSimion::_actor_criticDataTable::SIMGOD_IdColumn::get() {
    return this->columnSIMGOD_Id;
}

inline ::System::Int32 RLSimion::_actor_criticDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::_actor_criticRow^  RLSimion::_actor_criticDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::_actor_criticRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::_actor_criticDataTable::Add_actor_criticRow(RLSimion::_actor_criticRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::_actor_criticRow^  RLSimion::_actor_criticDataTable::Add_actor_criticRow(RLSimion::SIMGODRow^  _parentSIMGODRowBySIMGOD_actor_critic) {
    RLSimion::_actor_criticRow^  row_actor_criticRow = (cli::safe_cast<RLSimion::_actor_criticRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (_parentSIMGODRowBySIMGOD_actor_critic != nullptr) {
        columnValuesArray[1] = _parentSIMGODRowBySIMGOD_actor_critic[0];
    }
    row_actor_criticRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_actor_criticRow);
    return row_actor_criticRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::_actor_criticDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::_actor_criticDataTable::Clone() {
    RLSimion::_actor_criticDataTable^  cln = (cli::safe_cast<RLSimion::_actor_criticDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::_actor_criticDataTable::CreateInstance() {
    return (gcnew RLSimion::_actor_criticDataTable());
}

inline ::System::Void RLSimion::_actor_criticDataTable::InitVars() {
    this->column_actor_critic_Id = __super::Columns[L"actor-critic_Id"];
    this->columnSIMGOD_Id = __super::Columns[L"SIMGOD_Id"];
}

inline ::System::Void RLSimion::_actor_criticDataTable::InitClass() {
    this->column_actor_critic_Id = (gcnew ::System::Data::DataColumn(L"actor-critic_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_actor_critic_Id);
    this->columnSIMGOD_Id = (gcnew ::System::Data::DataColumn(L"SIMGOD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnSIMGOD_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->column_actor_critic_Id}, 
            true)));
    this->column_actor_critic_Id->AutoIncrement = true;
    this->column_actor_critic_Id->AllowDBNull = false;
    this->column_actor_critic_Id->Unique = true;
}

inline RLSimion::_actor_criticRow^  RLSimion::_actor_criticDataTable::New_actor_criticRow() {
    return (cli::safe_cast<RLSimion::_actor_criticRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::_actor_criticDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::_actor_criticRow(builder));
}

inline ::System::Type^  RLSimion::_actor_criticDataTable::GetRowType() {
    return RLSimion::_actor_criticRow::typeid;
}

inline ::System::Void RLSimion::_actor_criticDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_actor_criticRowChanged(this, (gcnew RLSimion::_actor_criticRowChangeEvent((cli::safe_cast<RLSimion::_actor_criticRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_actor_criticDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_actor_criticRowChanging(this, (gcnew RLSimion::_actor_criticRowChangeEvent((cli::safe_cast<RLSimion::_actor_criticRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_actor_criticDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_actor_criticRowDeleted(this, (gcnew RLSimion::_actor_criticRowChangeEvent((cli::safe_cast<RLSimion::_actor_criticRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_actor_criticDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_actor_criticRowDeleting(this, (gcnew RLSimion::_actor_criticRowChangeEvent((cli::safe_cast<RLSimion::_actor_criticRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_actor_criticDataTable::Remove_actor_criticRow(RLSimion::_actor_criticRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::_actor_criticDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_actor_criticDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::CRITICDataTable::CRITICDataTable() {
    this->TableName = L"CRITIC";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::CRITICDataTable::CRITICDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::CRITICDataTable::CRITICDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::CRITICDataTable::LOADColumn::get() {
    return this->columnLOAD;
}

inline ::System::Data::DataColumn^  RLSimion::CRITICDataTable::SAVEColumn::get() {
    return this->columnSAVE;
}

inline ::System::Data::DataColumn^  RLSimion::CRITICDataTable::CRITIC_IdColumn::get() {
    return this->columnCRITIC_Id;
}

inline ::System::Data::DataColumn^  RLSimion::CRITICDataTable::_actor_critic_IdColumn::get() {
    return this->column_actor_critic_Id;
}

inline ::System::Data::DataColumn^  RLSimion::CRITICDataTable::_actor_critic_controller_IdColumn::get() {
    return this->column_actor_critic_controller_Id;
}

inline ::System::Int32 RLSimion::CRITICDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::CRITICRow^  RLSimion::CRITICDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::CRITICRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::CRITICDataTable::AddCRITICRow(RLSimion::CRITICRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::CRITICRow^  RLSimion::CRITICDataTable::AddCRITICRow(System::String^  LOAD, System::String^  SAVE, RLSimion::_actor_criticRow^  _parent_actor_criticRowByactor_critic_CRITIC, 
            RLSimion::_actor_critic_controllerRow^  _parent_actor_critic_controllerRowByactor_critic_controller_CRITIC) {
    RLSimion::CRITICRow^  rowCRITICRow = (cli::safe_cast<RLSimion::CRITICRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {LOAD, SAVE, nullptr, nullptr, 
        nullptr};
    if (_parent_actor_criticRowByactor_critic_CRITIC != nullptr) {
        columnValuesArray[3] = _parent_actor_criticRowByactor_critic_CRITIC[0];
    }
    if (_parent_actor_critic_controllerRowByactor_critic_controller_CRITIC != nullptr) {
        columnValuesArray[4] = _parent_actor_critic_controllerRowByactor_critic_controller_CRITIC[0];
    }
    rowCRITICRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowCRITICRow);
    return rowCRITICRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::CRITICDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::CRITICDataTable::Clone() {
    RLSimion::CRITICDataTable^  cln = (cli::safe_cast<RLSimion::CRITICDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::CRITICDataTable::CreateInstance() {
    return (gcnew RLSimion::CRITICDataTable());
}

inline ::System::Void RLSimion::CRITICDataTable::InitVars() {
    this->columnLOAD = __super::Columns[L"LOAD"];
    this->columnSAVE = __super::Columns[L"SAVE"];
    this->columnCRITIC_Id = __super::Columns[L"CRITIC_Id"];
    this->column_actor_critic_Id = __super::Columns[L"actor-critic_Id"];
    this->column_actor_critic_controller_Id = __super::Columns[L"actor-critic-controller_Id"];
}

inline ::System::Void RLSimion::CRITICDataTable::InitClass() {
    this->columnLOAD = (gcnew ::System::Data::DataColumn(L"LOAD", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnLOAD);
    this->columnSAVE = (gcnew ::System::Data::DataColumn(L"SAVE", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSAVE);
    this->columnCRITIC_Id = (gcnew ::System::Data::DataColumn(L"CRITIC_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnCRITIC_Id);
    this->column_actor_critic_Id = (gcnew ::System::Data::DataColumn(L"actor-critic_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_actor_critic_Id);
    this->column_actor_critic_controller_Id = (gcnew ::System::Data::DataColumn(L"actor-critic-controller_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_actor_critic_controller_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnCRITIC_Id}, 
            true)));
    this->columnCRITIC_Id->AutoIncrement = true;
    this->columnCRITIC_Id->AllowDBNull = false;
    this->columnCRITIC_Id->Unique = true;
}

inline RLSimion::CRITICRow^  RLSimion::CRITICDataTable::NewCRITICRow() {
    return (cli::safe_cast<RLSimion::CRITICRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::CRITICDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::CRITICRow(builder));
}

inline ::System::Type^  RLSimion::CRITICDataTable::GetRowType() {
    return RLSimion::CRITICRow::typeid;
}

inline ::System::Void RLSimion::CRITICDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->CRITICRowChanged(this, (gcnew RLSimion::CRITICRowChangeEvent((cli::safe_cast<RLSimion::CRITICRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::CRITICDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->CRITICRowChanging(this, (gcnew RLSimion::CRITICRowChangeEvent((cli::safe_cast<RLSimion::CRITICRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::CRITICDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->CRITICRowDeleted(this, (gcnew RLSimion::CRITICRowChangeEvent((cli::safe_cast<RLSimion::CRITICRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::CRITICDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->CRITICRowDeleting(this, (gcnew RLSimion::CRITICRowChangeEvent((cli::safe_cast<RLSimion::CRITICRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::CRITICDataTable::RemoveCRITICRow(RLSimion::CRITICRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::CRITICDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"CRITICDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::_TD_LambdaDataTable::_TD_LambdaDataTable() {
    this->TableName = L"TD-Lambda";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::_TD_LambdaDataTable::_TD_LambdaDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::_TD_LambdaDataTable::_TD_LambdaDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::_TD_LambdaDataTable::_TD_Lambda_IdColumn::get() {
    return this->column_TD_Lambda_Id;
}

inline ::System::Data::DataColumn^  RLSimion::_TD_LambdaDataTable::CRITIC_IdColumn::get() {
    return this->columnCRITIC_Id;
}

inline ::System::Int32 RLSimion::_TD_LambdaDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::_TD_LambdaRow^  RLSimion::_TD_LambdaDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::_TD_LambdaRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::_TD_LambdaDataTable::Add_TD_LambdaRow(RLSimion::_TD_LambdaRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::_TD_LambdaRow^  RLSimion::_TD_LambdaDataTable::Add_TD_LambdaRow(RLSimion::CRITICRow^  _parentCRITICRowByCRITIC_TD_Lambda) {
    RLSimion::_TD_LambdaRow^  row_TD_LambdaRow = (cli::safe_cast<RLSimion::_TD_LambdaRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (_parentCRITICRowByCRITIC_TD_Lambda != nullptr) {
        columnValuesArray[1] = _parentCRITICRowByCRITIC_TD_Lambda[2];
    }
    row_TD_LambdaRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_TD_LambdaRow);
    return row_TD_LambdaRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::_TD_LambdaDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::_TD_LambdaDataTable::Clone() {
    RLSimion::_TD_LambdaDataTable^  cln = (cli::safe_cast<RLSimion::_TD_LambdaDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::_TD_LambdaDataTable::CreateInstance() {
    return (gcnew RLSimion::_TD_LambdaDataTable());
}

inline ::System::Void RLSimion::_TD_LambdaDataTable::InitVars() {
    this->column_TD_Lambda_Id = __super::Columns[L"TD-Lambda_Id"];
    this->columnCRITIC_Id = __super::Columns[L"CRITIC_Id"];
}

inline ::System::Void RLSimion::_TD_LambdaDataTable::InitClass() {
    this->column_TD_Lambda_Id = (gcnew ::System::Data::DataColumn(L"TD-Lambda_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_TD_Lambda_Id);
    this->columnCRITIC_Id = (gcnew ::System::Data::DataColumn(L"CRITIC_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnCRITIC_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->column_TD_Lambda_Id}, 
            true)));
    this->column_TD_Lambda_Id->AutoIncrement = true;
    this->column_TD_Lambda_Id->AllowDBNull = false;
    this->column_TD_Lambda_Id->Unique = true;
}

inline RLSimion::_TD_LambdaRow^  RLSimion::_TD_LambdaDataTable::New_TD_LambdaRow() {
    return (cli::safe_cast<RLSimion::_TD_LambdaRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::_TD_LambdaDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::_TD_LambdaRow(builder));
}

inline ::System::Type^  RLSimion::_TD_LambdaDataTable::GetRowType() {
    return RLSimion::_TD_LambdaRow::typeid;
}

inline ::System::Void RLSimion::_TD_LambdaDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_TD_LambdaRowChanged(this, (gcnew RLSimion::_TD_LambdaRowChangeEvent((cli::safe_cast<RLSimion::_TD_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_TD_LambdaDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_TD_LambdaRowChanging(this, (gcnew RLSimion::_TD_LambdaRowChangeEvent((cli::safe_cast<RLSimion::_TD_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_TD_LambdaDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_TD_LambdaRowDeleted(this, (gcnew RLSimion::_TD_LambdaRowChangeEvent((cli::safe_cast<RLSimion::_TD_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_TD_LambdaDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_TD_LambdaRowDeleting(this, (gcnew RLSimion::_TD_LambdaRowChangeEvent((cli::safe_cast<RLSimion::_TD_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_TD_LambdaDataTable::Remove_TD_LambdaRow(RLSimion::_TD_LambdaRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::_TD_LambdaDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_TD_LambdaDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::GAMMADataTable::GAMMADataTable() {
    this->TableName = L"GAMMA";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::GAMMADataTable::GAMMADataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::GAMMADataTable::GAMMADataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::GAMMADataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::GAMMADataTable::GAMMA_IdColumn::get() {
    return this->columnGAMMA_Id;
}

inline ::System::Data::DataColumn^  RLSimion::GAMMADataTable::_TD_Lambda_IdColumn::get() {
    return this->column_TD_Lambda_Id;
}

inline ::System::Data::DataColumn^  RLSimion::GAMMADataTable::_True_Online_TD_Lambda_IdColumn::get() {
    return this->column_True_Online_TD_Lambda_Id;
}

inline ::System::Data::DataColumn^  RLSimion::GAMMADataTable::_TDC_Lambda_IdColumn::get() {
    return this->column_TDC_Lambda_Id;
}

inline ::System::Int32 RLSimion::GAMMADataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::GAMMARow^  RLSimion::GAMMADataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::GAMMARow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::GAMMADataTable::AddGAMMARow(RLSimion::GAMMARow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::GAMMARow^  RLSimion::GAMMADataTable::AddGAMMARow(System::Decimal decimal, RLSimion::_TD_LambdaRow^  _parent_TD_LambdaRowByTD_Lambda_GAMMA, 
            RLSimion::_True_Online_TD_LambdaRow^  _parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_GAMMA, RLSimion::_TDC_LambdaRow^  _parent_TDC_LambdaRowByTDC_Lambda_GAMMA) {
    RLSimion::GAMMARow^  rowGAMMARow = (cli::safe_cast<RLSimion::GAMMARow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {decimal, nullptr, nullptr, 
        nullptr, nullptr};
    if (_parent_TD_LambdaRowByTD_Lambda_GAMMA != nullptr) {
        columnValuesArray[2] = _parent_TD_LambdaRowByTD_Lambda_GAMMA[0];
    }
    if (_parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_GAMMA != nullptr) {
        columnValuesArray[3] = _parent_True_Online_TD_LambdaRowByTrue_Online_TD_Lambda_GAMMA[0];
    }
    if (_parent_TDC_LambdaRowByTDC_Lambda_GAMMA != nullptr) {
        columnValuesArray[4] = _parent_TDC_LambdaRowByTDC_Lambda_GAMMA[0];
    }
    rowGAMMARow->ItemArray = columnValuesArray;
    this->Rows->Add(rowGAMMARow);
    return rowGAMMARow;
}

inline ::System::Collections::IEnumerator^  RLSimion::GAMMADataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::GAMMADataTable::Clone() {
    RLSimion::GAMMADataTable^  cln = (cli::safe_cast<RLSimion::GAMMADataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::GAMMADataTable::CreateInstance() {
    return (gcnew RLSimion::GAMMADataTable());
}

inline ::System::Void RLSimion::GAMMADataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnGAMMA_Id = __super::Columns[L"GAMMA_Id"];
    this->column_TD_Lambda_Id = __super::Columns[L"TD-Lambda_Id"];
    this->column_True_Online_TD_Lambda_Id = __super::Columns[L"True-Online-TD-Lambda_Id"];
    this->column_TDC_Lambda_Id = __super::Columns[L"TDC-Lambda_Id"];
}

inline ::System::Void RLSimion::GAMMADataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnGAMMA_Id = (gcnew ::System::Data::DataColumn(L"GAMMA_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnGAMMA_Id);
    this->column_TD_Lambda_Id = (gcnew ::System::Data::DataColumn(L"TD-Lambda_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_TD_Lambda_Id);
    this->column_True_Online_TD_Lambda_Id = (gcnew ::System::Data::DataColumn(L"True-Online-TD-Lambda_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_True_Online_TD_Lambda_Id);
    this->column_TDC_Lambda_Id = (gcnew ::System::Data::DataColumn(L"TDC-Lambda_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_TDC_Lambda_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnGAMMA_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnGAMMA_Id->AutoIncrement = true;
    this->columnGAMMA_Id->AllowDBNull = false;
    this->columnGAMMA_Id->Unique = true;
}

inline RLSimion::GAMMARow^  RLSimion::GAMMADataTable::NewGAMMARow() {
    return (cli::safe_cast<RLSimion::GAMMARow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::GAMMADataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::GAMMARow(builder));
}

inline ::System::Type^  RLSimion::GAMMADataTable::GetRowType() {
    return RLSimion::GAMMARow::typeid;
}

inline ::System::Void RLSimion::GAMMADataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->GAMMARowChanged(this, (gcnew RLSimion::GAMMARowChangeEvent((cli::safe_cast<RLSimion::GAMMARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::GAMMADataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->GAMMARowChanging(this, (gcnew RLSimion::GAMMARowChangeEvent((cli::safe_cast<RLSimion::GAMMARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::GAMMADataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->GAMMARowDeleted(this, (gcnew RLSimion::GAMMARowChangeEvent((cli::safe_cast<RLSimion::GAMMARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::GAMMADataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->GAMMARowDeleting(this, (gcnew RLSimion::GAMMARowChangeEvent((cli::safe_cast<RLSimion::GAMMARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::GAMMADataTable::RemoveGAMMARow(RLSimion::GAMMARow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::GAMMADataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"GAMMADataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::_True_Online_TD_LambdaDataTable::_True_Online_TD_LambdaDataTable() {
    this->TableName = L"True-Online-TD-Lambda";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::_True_Online_TD_LambdaDataTable::_True_Online_TD_LambdaDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::_True_Online_TD_LambdaDataTable::_True_Online_TD_LambdaDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::_True_Online_TD_LambdaDataTable::_True_Online_TD_Lambda_IdColumn::get() {
    return this->column_True_Online_TD_Lambda_Id;
}

inline ::System::Data::DataColumn^  RLSimion::_True_Online_TD_LambdaDataTable::CRITIC_IdColumn::get() {
    return this->columnCRITIC_Id;
}

inline ::System::Int32 RLSimion::_True_Online_TD_LambdaDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::_True_Online_TD_LambdaRow^  RLSimion::_True_Online_TD_LambdaDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::_True_Online_TD_LambdaRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::_True_Online_TD_LambdaDataTable::Add_True_Online_TD_LambdaRow(RLSimion::_True_Online_TD_LambdaRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::_True_Online_TD_LambdaRow^  RLSimion::_True_Online_TD_LambdaDataTable::Add_True_Online_TD_LambdaRow(RLSimion::CRITICRow^  _parentCRITICRowByCRITIC_True_Online_TD_Lambda) {
    RLSimion::_True_Online_TD_LambdaRow^  row_True_Online_TD_LambdaRow = (cli::safe_cast<RLSimion::_True_Online_TD_LambdaRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (_parentCRITICRowByCRITIC_True_Online_TD_Lambda != nullptr) {
        columnValuesArray[1] = _parentCRITICRowByCRITIC_True_Online_TD_Lambda[2];
    }
    row_True_Online_TD_LambdaRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_True_Online_TD_LambdaRow);
    return row_True_Online_TD_LambdaRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::_True_Online_TD_LambdaDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::_True_Online_TD_LambdaDataTable::Clone() {
    RLSimion::_True_Online_TD_LambdaDataTable^  cln = (cli::safe_cast<RLSimion::_True_Online_TD_LambdaDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::_True_Online_TD_LambdaDataTable::CreateInstance() {
    return (gcnew RLSimion::_True_Online_TD_LambdaDataTable());
}

inline ::System::Void RLSimion::_True_Online_TD_LambdaDataTable::InitVars() {
    this->column_True_Online_TD_Lambda_Id = __super::Columns[L"True-Online-TD-Lambda_Id"];
    this->columnCRITIC_Id = __super::Columns[L"CRITIC_Id"];
}

inline ::System::Void RLSimion::_True_Online_TD_LambdaDataTable::InitClass() {
    this->column_True_Online_TD_Lambda_Id = (gcnew ::System::Data::DataColumn(L"True-Online-TD-Lambda_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_True_Online_TD_Lambda_Id);
    this->columnCRITIC_Id = (gcnew ::System::Data::DataColumn(L"CRITIC_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnCRITIC_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->column_True_Online_TD_Lambda_Id}, 
            true)));
    this->column_True_Online_TD_Lambda_Id->AutoIncrement = true;
    this->column_True_Online_TD_Lambda_Id->AllowDBNull = false;
    this->column_True_Online_TD_Lambda_Id->Unique = true;
}

inline RLSimion::_True_Online_TD_LambdaRow^  RLSimion::_True_Online_TD_LambdaDataTable::New_True_Online_TD_LambdaRow() {
    return (cli::safe_cast<RLSimion::_True_Online_TD_LambdaRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::_True_Online_TD_LambdaDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::_True_Online_TD_LambdaRow(builder));
}

inline ::System::Type^  RLSimion::_True_Online_TD_LambdaDataTable::GetRowType() {
    return RLSimion::_True_Online_TD_LambdaRow::typeid;
}

inline ::System::Void RLSimion::_True_Online_TD_LambdaDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_True_Online_TD_LambdaRowChanged(this, (gcnew RLSimion::_True_Online_TD_LambdaRowChangeEvent((cli::safe_cast<RLSimion::_True_Online_TD_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_True_Online_TD_LambdaDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_True_Online_TD_LambdaRowChanging(this, (gcnew RLSimion::_True_Online_TD_LambdaRowChangeEvent((cli::safe_cast<RLSimion::_True_Online_TD_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_True_Online_TD_LambdaDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_True_Online_TD_LambdaRowDeleted(this, (gcnew RLSimion::_True_Online_TD_LambdaRowChangeEvent((cli::safe_cast<RLSimion::_True_Online_TD_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_True_Online_TD_LambdaDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_True_Online_TD_LambdaRowDeleting(this, (gcnew RLSimion::_True_Online_TD_LambdaRowChangeEvent((cli::safe_cast<RLSimion::_True_Online_TD_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_True_Online_TD_LambdaDataTable::Remove_True_Online_TD_LambdaRow(RLSimion::_True_Online_TD_LambdaRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::_True_Online_TD_LambdaDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_True_Online_TD_LambdaDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::_TDC_LambdaDataTable::_TDC_LambdaDataTable() {
    this->TableName = L"TDC-Lambda";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::_TDC_LambdaDataTable::_TDC_LambdaDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::_TDC_LambdaDataTable::_TDC_LambdaDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::_TDC_LambdaDataTable::_TDC_Lambda_IdColumn::get() {
    return this->column_TDC_Lambda_Id;
}

inline ::System::Data::DataColumn^  RLSimion::_TDC_LambdaDataTable::CRITIC_IdColumn::get() {
    return this->columnCRITIC_Id;
}

inline ::System::Int32 RLSimion::_TDC_LambdaDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::_TDC_LambdaRow^  RLSimion::_TDC_LambdaDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::_TDC_LambdaRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::_TDC_LambdaDataTable::Add_TDC_LambdaRow(RLSimion::_TDC_LambdaRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::_TDC_LambdaRow^  RLSimion::_TDC_LambdaDataTable::Add_TDC_LambdaRow(RLSimion::CRITICRow^  _parentCRITICRowByCRITIC_TDC_Lambda) {
    RLSimion::_TDC_LambdaRow^  row_TDC_LambdaRow = (cli::safe_cast<RLSimion::_TDC_LambdaRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (_parentCRITICRowByCRITIC_TDC_Lambda != nullptr) {
        columnValuesArray[1] = _parentCRITICRowByCRITIC_TDC_Lambda[2];
    }
    row_TDC_LambdaRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_TDC_LambdaRow);
    return row_TDC_LambdaRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::_TDC_LambdaDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::_TDC_LambdaDataTable::Clone() {
    RLSimion::_TDC_LambdaDataTable^  cln = (cli::safe_cast<RLSimion::_TDC_LambdaDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::_TDC_LambdaDataTable::CreateInstance() {
    return (gcnew RLSimion::_TDC_LambdaDataTable());
}

inline ::System::Void RLSimion::_TDC_LambdaDataTable::InitVars() {
    this->column_TDC_Lambda_Id = __super::Columns[L"TDC-Lambda_Id"];
    this->columnCRITIC_Id = __super::Columns[L"CRITIC_Id"];
}

inline ::System::Void RLSimion::_TDC_LambdaDataTable::InitClass() {
    this->column_TDC_Lambda_Id = (gcnew ::System::Data::DataColumn(L"TDC-Lambda_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_TDC_Lambda_Id);
    this->columnCRITIC_Id = (gcnew ::System::Data::DataColumn(L"CRITIC_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnCRITIC_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->column_TDC_Lambda_Id}, 
            true)));
    this->column_TDC_Lambda_Id->AutoIncrement = true;
    this->column_TDC_Lambda_Id->AllowDBNull = false;
    this->column_TDC_Lambda_Id->Unique = true;
}

inline RLSimion::_TDC_LambdaRow^  RLSimion::_TDC_LambdaDataTable::New_TDC_LambdaRow() {
    return (cli::safe_cast<RLSimion::_TDC_LambdaRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::_TDC_LambdaDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::_TDC_LambdaRow(builder));
}

inline ::System::Type^  RLSimion::_TDC_LambdaDataTable::GetRowType() {
    return RLSimion::_TDC_LambdaRow::typeid;
}

inline ::System::Void RLSimion::_TDC_LambdaDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_TDC_LambdaRowChanged(this, (gcnew RLSimion::_TDC_LambdaRowChangeEvent((cli::safe_cast<RLSimion::_TDC_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_TDC_LambdaDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_TDC_LambdaRowChanging(this, (gcnew RLSimion::_TDC_LambdaRowChangeEvent((cli::safe_cast<RLSimion::_TDC_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_TDC_LambdaDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_TDC_LambdaRowDeleted(this, (gcnew RLSimion::_TDC_LambdaRowChangeEvent((cli::safe_cast<RLSimion::_TDC_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_TDC_LambdaDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_TDC_LambdaRowDeleting(this, (gcnew RLSimion::_TDC_LambdaRowChangeEvent((cli::safe_cast<RLSimion::_TDC_LambdaRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_TDC_LambdaDataTable::Remove_TDC_LambdaRow(RLSimion::_TDC_LambdaRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::_TDC_LambdaDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_TDC_LambdaDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::BETADataTable::BETADataTable() {
    this->TableName = L"BETA";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::BETADataTable::BETADataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::BETADataTable::BETADataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::BETADataTable::decimalColumn::get() {
    return this->columndecimal;
}

inline ::System::Data::DataColumn^  RLSimion::BETADataTable::BETA_IdColumn::get() {
    return this->columnBETA_Id;
}

inline ::System::Data::DataColumn^  RLSimion::BETADataTable::_TDC_Lambda_IdColumn::get() {
    return this->column_TDC_Lambda_Id;
}

inline ::System::Int32 RLSimion::BETADataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::BETARow^  RLSimion::BETADataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::BETARow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::BETADataTable::AddBETARow(RLSimion::BETARow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::BETARow^  RLSimion::BETADataTable::AddBETARow(System::Decimal decimal, RLSimion::_TDC_LambdaRow^  _parent_TDC_LambdaRowByTDC_Lambda_BETA) {
    RLSimion::BETARow^  rowBETARow = (cli::safe_cast<RLSimion::BETARow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {decimal, nullptr, nullptr};
    if (_parent_TDC_LambdaRowByTDC_Lambda_BETA != nullptr) {
        columnValuesArray[2] = _parent_TDC_LambdaRowByTDC_Lambda_BETA[0];
    }
    rowBETARow->ItemArray = columnValuesArray;
    this->Rows->Add(rowBETARow);
    return rowBETARow;
}

inline ::System::Collections::IEnumerator^  RLSimion::BETADataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::BETADataTable::Clone() {
    RLSimion::BETADataTable^  cln = (cli::safe_cast<RLSimion::BETADataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::BETADataTable::CreateInstance() {
    return (gcnew RLSimion::BETADataTable());
}

inline ::System::Void RLSimion::BETADataTable::InitVars() {
    this->columndecimal = __super::Columns[L"decimal"];
    this->columnBETA_Id = __super::Columns[L"BETA_Id"];
    this->column_TDC_Lambda_Id = __super::Columns[L"TDC-Lambda_Id"];
}

inline ::System::Void RLSimion::BETADataTable::InitClass() {
    this->columndecimal = (gcnew ::System::Data::DataColumn(L"decimal", ::System::Decimal::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndecimal);
    this->columnBETA_Id = (gcnew ::System::Data::DataColumn(L"BETA_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnBETA_Id);
    this->column_TDC_Lambda_Id = (gcnew ::System::Data::DataColumn(L"TDC-Lambda_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_TDC_Lambda_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnBETA_Id}, 
            true)));
    this->columndecimal->AllowDBNull = false;
    this->columnBETA_Id->AutoIncrement = true;
    this->columnBETA_Id->AllowDBNull = false;
    this->columnBETA_Id->Unique = true;
}

inline RLSimion::BETARow^  RLSimion::BETADataTable::NewBETARow() {
    return (cli::safe_cast<RLSimion::BETARow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::BETADataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::BETARow(builder));
}

inline ::System::Type^  RLSimion::BETADataTable::GetRowType() {
    return RLSimion::BETARow::typeid;
}

inline ::System::Void RLSimion::BETADataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->BETARowChanged(this, (gcnew RLSimion::BETARowChangeEvent((cli::safe_cast<RLSimion::BETARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::BETADataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->BETARowChanging(this, (gcnew RLSimion::BETARowChangeEvent((cli::safe_cast<RLSimion::BETARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::BETADataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->BETARowDeleted(this, (gcnew RLSimion::BETARowChangeEvent((cli::safe_cast<RLSimion::BETARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::BETADataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->BETARowDeleting(this, (gcnew RLSimion::BETARowChangeEvent((cli::safe_cast<RLSimion::BETARow^  >(e->Row)), e->Action)));
    }
}

inline ::System::Void RLSimion::BETADataTable::RemoveBETARow(RLSimion::BETARow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::BETADataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"BETADataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::_actor_critic_controllerDataTable::_actor_critic_controllerDataTable() {
    this->TableName = L"actor-critic-controller";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::_actor_critic_controllerDataTable::_actor_critic_controllerDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::_actor_critic_controllerDataTable::_actor_critic_controllerDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::_actor_critic_controllerDataTable::_actor_critic_controller_IdColumn::get() {
    return this->column_actor_critic_controller_Id;
}

inline ::System::Data::DataColumn^  RLSimion::_actor_critic_controllerDataTable::SIMGOD_IdColumn::get() {
    return this->columnSIMGOD_Id;
}

inline ::System::Int32 RLSimion::_actor_critic_controllerDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::_actor_critic_controllerRow^  RLSimion::_actor_critic_controllerDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::_actor_critic_controllerRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::_actor_critic_controllerDataTable::Add_actor_critic_controllerRow(RLSimion::_actor_critic_controllerRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::_actor_critic_controllerRow^  RLSimion::_actor_critic_controllerDataTable::Add_actor_critic_controllerRow(
            RLSimion::SIMGODRow^  _parentSIMGODRowBySIMGOD_actor_critic_controller) {
    RLSimion::_actor_critic_controllerRow^  row_actor_critic_controllerRow = (cli::safe_cast<RLSimion::_actor_critic_controllerRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (_parentSIMGODRowBySIMGOD_actor_critic_controller != nullptr) {
        columnValuesArray[1] = _parentSIMGODRowBySIMGOD_actor_critic_controller[0];
    }
    row_actor_critic_controllerRow->ItemArray = columnValuesArray;
    this->Rows->Add(row_actor_critic_controllerRow);
    return row_actor_critic_controllerRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::_actor_critic_controllerDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::_actor_critic_controllerDataTable::Clone() {
    RLSimion::_actor_critic_controllerDataTable^  cln = (cli::safe_cast<RLSimion::_actor_critic_controllerDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::_actor_critic_controllerDataTable::CreateInstance() {
    return (gcnew RLSimion::_actor_critic_controllerDataTable());
}

inline ::System::Void RLSimion::_actor_critic_controllerDataTable::InitVars() {
    this->column_actor_critic_controller_Id = __super::Columns[L"actor-critic-controller_Id"];
    this->columnSIMGOD_Id = __super::Columns[L"SIMGOD_Id"];
}

inline ::System::Void RLSimion::_actor_critic_controllerDataTable::InitClass() {
    this->column_actor_critic_controller_Id = (gcnew ::System::Data::DataColumn(L"actor-critic-controller_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_actor_critic_controller_Id);
    this->columnSIMGOD_Id = (gcnew ::System::Data::DataColumn(L"SIMGOD_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnSIMGOD_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->column_actor_critic_controller_Id}, 
            true)));
    this->column_actor_critic_controller_Id->AutoIncrement = true;
    this->column_actor_critic_controller_Id->AllowDBNull = false;
    this->column_actor_critic_controller_Id->Unique = true;
}

inline RLSimion::_actor_critic_controllerRow^  RLSimion::_actor_critic_controllerDataTable::New_actor_critic_controllerRow() {
    return (cli::safe_cast<RLSimion::_actor_critic_controllerRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::_actor_critic_controllerDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::_actor_critic_controllerRow(builder));
}

inline ::System::Type^  RLSimion::_actor_critic_controllerDataTable::GetRowType() {
    return RLSimion::_actor_critic_controllerRow::typeid;
}

inline ::System::Void RLSimion::_actor_critic_controllerDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->_actor_critic_controllerRowChanged(this, (gcnew RLSimion::_actor_critic_controllerRowChangeEvent((cli::safe_cast<RLSimion::_actor_critic_controllerRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_actor_critic_controllerDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->_actor_critic_controllerRowChanging(this, (gcnew RLSimion::_actor_critic_controllerRowChangeEvent((cli::safe_cast<RLSimion::_actor_critic_controllerRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_actor_critic_controllerDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->_actor_critic_controllerRowDeleted(this, (gcnew RLSimion::_actor_critic_controllerRowChangeEvent((cli::safe_cast<RLSimion::_actor_critic_controllerRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_actor_critic_controllerDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->_actor_critic_controllerRowDeleting(this, (gcnew RLSimion::_actor_critic_controllerRowChangeEvent((cli::safe_cast<RLSimion::_actor_critic_controllerRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::_actor_critic_controllerDataTable::Remove_actor_critic_controllerRow(RLSimion::_actor_critic_controllerRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::_actor_critic_controllerDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"_actor_critic_controllerDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::CONTROLLERDataTable::CONTROLLERDataTable() {
    this->TableName = L"CONTROLLER";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline RLSimion::CONTROLLERDataTable::CONTROLLERDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline RLSimion::CONTROLLERDataTable::CONTROLLERDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  RLSimion::CONTROLLERDataTable::CONTROLLER_IdColumn::get() {
    return this->columnCONTROLLER_Id;
}

inline ::System::Data::DataColumn^  RLSimion::CONTROLLERDataTable::_actor_critic_controller_IdColumn::get() {
    return this->column_actor_critic_controller_Id;
}

inline ::System::Int32 RLSimion::CONTROLLERDataTable::Count::get() {
    return this->Rows->Count;
}

inline RLSimion::CONTROLLERRow^  RLSimion::CONTROLLERDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<RLSimion::CONTROLLERRow^  >(this->Rows[index]));
}

inline ::System::Void RLSimion::CONTROLLERDataTable::AddCONTROLLERRow(RLSimion::CONTROLLERRow^  row) {
    this->Rows->Add(row);
}

inline RLSimion::CONTROLLERRow^  RLSimion::CONTROLLERDataTable::AddCONTROLLERRow(RLSimion::_actor_critic_controllerRow^  _parent_actor_critic_controllerRowByactor_critic_controller_CONTROLLER) {
    RLSimion::CONTROLLERRow^  rowCONTROLLERRow = (cli::safe_cast<RLSimion::CONTROLLERRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (_parent_actor_critic_controllerRowByactor_critic_controller_CONTROLLER != nullptr) {
        columnValuesArray[1] = _parent_actor_critic_controllerRowByactor_critic_controller_CONTROLLER[0];
    }
    rowCONTROLLERRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowCONTROLLERRow);
    return rowCONTROLLERRow;
}

inline ::System::Collections::IEnumerator^  RLSimion::CONTROLLERDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  RLSimion::CONTROLLERDataTable::Clone() {
    RLSimion::CONTROLLERDataTable^  cln = (cli::safe_cast<RLSimion::CONTROLLERDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  RLSimion::CONTROLLERDataTable::CreateInstance() {
    return (gcnew RLSimion::CONTROLLERDataTable());
}

inline ::System::Void RLSimion::CONTROLLERDataTable::InitVars() {
    this->columnCONTROLLER_Id = __super::Columns[L"CONTROLLER_Id"];
    this->column_actor_critic_controller_Id = __super::Columns[L"actor-critic-controller_Id"];
}

inline ::System::Void RLSimion::CONTROLLERDataTable::InitClass() {
    this->columnCONTROLLER_Id = (gcnew ::System::Data::DataColumn(L"CONTROLLER_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnCONTROLLER_Id);
    this->column_actor_critic_controller_Id = (gcnew ::System::Data::DataColumn(L"actor-critic-controller_Id", ::System::Int32::typeid, 
        nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->column_actor_critic_controller_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnCONTROLLER_Id}, 
            true)));
    this->columnCONTROLLER_Id->AutoIncrement = true;
    this->columnCONTROLLER_Id->AllowDBNull = false;
    this->columnCONTROLLER_Id->Unique = true;
}

inline RLSimion::CONTROLLERRow^  RLSimion::CONTROLLERDataTable::NewCONTROLLERRow() {
    return (cli::safe_cast<RLSimion::CONTROLLERRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  RLSimion::CONTROLLERDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew RLSimion::CONTROLLERRow(builder));
}

inline ::System::Type^  RLSimion::CONTROLLERDataTable::GetRowType() {
    return RLSimion::CONTROLLERRow::typeid;
}

inline ::System::Void RLSimion::CONTROLLERDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->CONTROLLERRowChanged(this, (gcnew RLSimion::CONTROLLERRowChangeEvent((cli::safe_cast<RLSimion::CONTROLLERRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::CONTROLLERDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->CONTROLLERRowChanging(this, (gcnew RLSimion::CONTROLLERRowChangeEvent((cli::safe_cast<RLSimion::CONTROLLERRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::CONTROLLERDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->CONTROLLERRowDeleted(this, (gcnew RLSimion::CONTROLLERRowChangeEvent((cli::safe_cast<RLSimion::CONTROLLERRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::CONTROLLERDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->CONTROLLERRowDeleting(this, (gcnew RLSimion::CONTROLLERRowChangeEvent((cli::safe_cast<RLSimion::CONTROLLERRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void RLSimion::CONTROLLERDataTable::RemoveCONTROLLERRow(RLSimion::CONTROLLERRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  RLSimion::CONTROLLERDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    RLSimion^  ds = (gcnew RLSimion());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"CONTROLLERDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline RLSimion::EXPERIMENTRow::EXPERIMENTRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableEXPERIMENT = (cli::safe_cast<RLSimion::EXPERIMENTDataTable^  >(this->Table));
}

inline System::Int64 RLSimion::EXPERIMENTRow::NUM_EPISODES::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableEXPERIMENT->NUM_EPISODESColumn]));
}
inline System::Void RLSimion::EXPERIMENTRow::NUM_EPISODES::set(System::Int64 value) {
    this[this->tableEXPERIMENT->NUM_EPISODESColumn] = value;
}

inline System::Int64 RLSimion::EXPERIMENTRow::EPISODE_LENGTH::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableEXPERIMENT->EPISODE_LENGTHColumn]));
}
inline System::Void RLSimion::EXPERIMENTRow::EPISODE_LENGTH::set(System::Int64 value) {
    this[this->tableEXPERIMENT->EPISODE_LENGTHColumn] = value;
}

inline System::Int64 RLSimion::EXPERIMENTRow::RANDOM_SEED::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableEXPERIMENT->RANDOM_SEEDColumn]));
}
inline System::Void RLSimion::EXPERIMENTRow::RANDOM_SEED::set(System::Int64 value) {
    this[this->tableEXPERIMENT->RANDOM_SEEDColumn] = value;
}

inline System::Int64 RLSimion::EXPERIMENTRow::EVAL_FREQ::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableEXPERIMENT->EVAL_FREQColumn]));
}
inline System::Void RLSimion::EXPERIMENTRow::EVAL_FREQ::set(System::Int64 value) {
    this[this->tableEXPERIMENT->EVAL_FREQColumn] = value;
}

inline System::Int32 RLSimion::EXPERIMENTRow::EXPERIMENT_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableEXPERIMENT->EXPERIMENT_IdColumn]));
}
inline System::Void RLSimion::EXPERIMENTRow::EXPERIMENT_Id::set(System::Int32 value) {
    this[this->tableEXPERIMENT->EXPERIMENT_IdColumn] = value;
}

inline cli::array< RLSimion::LOGRow^  >^  RLSimion::EXPERIMENTRow::GetLOGRows() {
    if (this->Table->ChildRelations[L"EXPERIMENT_LOG"] == nullptr) {
        return gcnew cli::array< RLSimion::LOGRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::LOGRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"EXPERIMENT_LOG"])));
    }
}


inline RLSimion::LOGRow::LOGRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableLOG = (cli::safe_cast<RLSimion::LOGDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::LOGRow::FREQ::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableLOG->FREQColumn]));
}
inline System::Void RLSimion::LOGRow::FREQ::set(System::Decimal value) {
    this[this->tableLOG->FREQColumn] = value;
}

inline System::String^  RLSimion::LOGRow::OUTPUT_DIR::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableLOG->OUTPUT_DIRColumn]));
}
inline System::Void RLSimion::LOGRow::OUTPUT_DIR::set(System::String^  value) {
    this[this->tableLOG->OUTPUT_DIRColumn] = value;
}

inline System::Int64 RLSimion::LOGRow::FILE_PREFIX::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableLOG->FILE_PREFIXColumn]));
}
inline System::Void RLSimion::LOGRow::FILE_PREFIX::set(System::Int64 value) {
    this[this->tableLOG->FILE_PREFIXColumn] = value;
}

inline System::Boolean RLSimion::LOGRow::EVALUATION_EPISODES::get() {
    return (cli::safe_cast<::System::Boolean >(this[this->tableLOG->EVALUATION_EPISODESColumn]));
}
inline System::Void RLSimion::LOGRow::EVALUATION_EPISODES::set(System::Boolean value) {
    this[this->tableLOG->EVALUATION_EPISODESColumn] = value;
}

inline System::Boolean RLSimion::LOGRow::TRAINING_EPISODES::get() {
    return (cli::safe_cast<::System::Boolean >(this[this->tableLOG->TRAINING_EPISODESColumn]));
}
inline System::Void RLSimion::LOGRow::TRAINING_EPISODES::set(System::Boolean value) {
    this[this->tableLOG->TRAINING_EPISODESColumn] = value;
}

inline System::Boolean RLSimion::LOGRow::EVALUATION_AVG_REWARDS::get() {
    return (cli::safe_cast<::System::Boolean >(this[this->tableLOG->EVALUATION_AVG_REWARDSColumn]));
}
inline System::Void RLSimion::LOGRow::EVALUATION_AVG_REWARDS::set(System::Boolean value) {
    this[this->tableLOG->EVALUATION_AVG_REWARDSColumn] = value;
}

inline System::Int32 RLSimion::LOGRow::EXPERIMENT_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableLOG->EXPERIMENT_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'EXPERIMENT_Id\' in table \'LOG\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::LOGRow::EXPERIMENT_Id::set(System::Int32 value) {
    this[this->tableLOG->EXPERIMENT_IdColumn] = value;
}

inline RLSimion::EXPERIMENTRow^  RLSimion::LOGRow::EXPERIMENTRow::get() {
    return (cli::safe_cast<RLSimion::EXPERIMENTRow^  >(this->GetParentRow(this->Table->ParentRelations[L"EXPERIMENT_LOG"])));
}
inline System::Void RLSimion::LOGRow::EXPERIMENTRow::set(RLSimion::EXPERIMENTRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"EXPERIMENT_LOG"]);
}

inline ::System::Boolean RLSimion::LOGRow::IsEXPERIMENT_IdNull() {
    return this->IsNull(this->tableLOG->EXPERIMENT_IdColumn);
}

inline ::System::Void RLSimion::LOGRow::SetEXPERIMENT_IdNull() {
    this[this->tableLOG->EXPERIMENT_IdColumn] = ::System::Convert::DBNull;
}


inline RLSimion::WORLDRow::WORLDRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableWORLD = (cli::safe_cast<RLSimion::WORLDDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::WORLDRow::DELTA_T::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableWORLD->DELTA_TColumn]));
}
inline System::Void RLSimion::WORLDRow::DELTA_T::set(System::Decimal value) {
    this[this->tableWORLD->DELTA_TColumn] = value;
}

inline System::Int64 RLSimion::WORLDRow::NUM_SIMULATION_STEPS::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tableWORLD->NUM_SIMULATION_STEPSColumn]));
}
inline System::Void RLSimion::WORLDRow::NUM_SIMULATION_STEPS::set(System::Int64 value) {
    this[this->tableWORLD->NUM_SIMULATION_STEPSColumn] = value;
}

inline System::Int32 RLSimion::WORLDRow::WORLD_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableWORLD->WORLD_IdColumn]));
}
inline System::Void RLSimion::WORLDRow::WORLD_Id::set(System::Int32 value) {
    this[this->tableWORLD->WORLD_IdColumn] = value;
}

inline cli::array< RLSimion::rewardRow^  >^  RLSimion::WORLDRow::GetrewardRows() {
    if (this->Table->ChildRelations[L"WORLD_reward"] == nullptr) {
        return gcnew cli::array< RLSimion::rewardRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::rewardRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"WORLD_reward"])));
    }
}

inline cli::array< RLSimion::_wind_turbineRow^  >^  RLSimion::WORLDRow::_Getwind_turbineRows() {
    if (this->Table->ChildRelations[L"WORLD_wind-turbine"] == nullptr) {
        return gcnew cli::array< RLSimion::_wind_turbineRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::_wind_turbineRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"WORLD_wind-turbine"])));
    }
}

inline cli::array< RLSimion::_magnetic_levitationRow^  >^  RLSimion::WORLDRow::_Getmagnetic_levitationRows() {
    if (this->Table->ChildRelations[L"WORLD_magnetic-levitation"] == nullptr) {
        return gcnew cli::array< RLSimion::_magnetic_levitationRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::_magnetic_levitationRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"WORLD_magnetic-levitation"])));
    }
}

inline cli::array< RLSimion::pitchRow^  >^  RLSimion::WORLDRow::GetpitchRows() {
    if (this->Table->ChildRelations[L"WORLD_pitch"] == nullptr) {
        return gcnew cli::array< RLSimion::pitchRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::pitchRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"WORLD_pitch"])));
    }
}

inline cli::array< RLSimion::_underwater_vehicleRow^  >^  RLSimion::WORLDRow::_Getunderwater_vehicleRows() {
    if (this->Table->ChildRelations[L"WORLD_underwater-vehicle"] == nullptr) {
        return gcnew cli::array< RLSimion::_underwater_vehicleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::_underwater_vehicleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"WORLD_underwater-vehicle"])));
    }
}


inline RLSimion::rewardRow::rewardRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablereward = (cli::safe_cast<RLSimion::rewardDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::rewardRow::MIN_REWARD::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tablereward->MIN_REWARDColumn]));
}
inline System::Void RLSimion::rewardRow::MIN_REWARD::set(System::Decimal value) {
    this[this->tablereward->MIN_REWARDColumn] = value;
}

inline System::Decimal RLSimion::rewardRow::MAX_REWARD::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tablereward->MAX_REWARDColumn]));
}
inline System::Void RLSimion::rewardRow::MAX_REWARD::set(System::Decimal value) {
    this[this->tablereward->MAX_REWARDColumn] = value;
}

inline System::Int32 RLSimion::rewardRow::reward_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablereward->reward_IdColumn]));
}
inline System::Void RLSimion::rewardRow::reward_Id::set(System::Int32 value) {
    this[this->tablereward->reward_IdColumn] = value;
}

inline System::Int32 RLSimion::rewardRow::WORLD_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablereward->WORLD_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'WORLD_Id\' in table \'reward\' is DBNull.", e));
    }
}
inline System::Void RLSimion::rewardRow::WORLD_Id::set(System::Int32 value) {
    this[this->tablereward->WORLD_IdColumn] = value;
}

inline RLSimion::WORLDRow^  RLSimion::rewardRow::WORLDRow::get() {
    return (cli::safe_cast<RLSimion::WORLDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"WORLD_reward"])));
}
inline System::Void RLSimion::rewardRow::WORLDRow::set(RLSimion::WORLDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"WORLD_reward"]);
}

inline ::System::Boolean RLSimion::rewardRow::IsWORLD_IdNull() {
    return this->IsNull(this->tablereward->WORLD_IdColumn);
}

inline ::System::Void RLSimion::rewardRow::SetWORLD_IdNull() {
    this[this->tablereward->WORLD_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::_reward_componentRow^  >^  RLSimion::rewardRow::_Getreward_componentRows() {
    if (this->Table->ChildRelations[L"reward_reward-component"] == nullptr) {
        return gcnew cli::array< RLSimion::_reward_componentRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::_reward_componentRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"reward_reward-component"])));
    }
}


inline RLSimion::_reward_componentRow::_reward_componentRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_reward_component = (cli::safe_cast<RLSimion::_reward_componentDataTable^  >(this->Table));
}

inline System::String^  RLSimion::_reward_componentRow::COMPONENT_TYPE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->table_reward_component->COMPONENT_TYPEColumn]));
}
inline System::Void RLSimion::_reward_componentRow::COMPONENT_TYPE::set(System::String^  value) {
    this[this->table_reward_component->COMPONENT_TYPEColumn] = value;
}

inline System::Decimal RLSimion::_reward_componentRow::COMPONENT_WEIGHT::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->table_reward_component->COMPONENT_WEIGHTColumn]));
}
inline System::Void RLSimion::_reward_componentRow::COMPONENT_WEIGHT::set(System::Decimal value) {
    this[this->table_reward_component->COMPONENT_WEIGHTColumn] = value;
}

inline System::Decimal RLSimion::_reward_componentRow::COMPONENT_TOLERANCE::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->table_reward_component->COMPONENT_TOLERANCEColumn]));
}
inline System::Void RLSimion::_reward_componentRow::COMPONENT_TOLERANCE::set(System::Decimal value) {
    this[this->table_reward_component->COMPONENT_TOLERANCEColumn] = value;
}

inline System::String^  RLSimion::_reward_componentRow::CONTROL_ERROR_VARIABLE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->table_reward_component->CONTROL_ERROR_VARIABLEColumn]));
}
inline System::Void RLSimion::_reward_componentRow::CONTROL_ERROR_VARIABLE::set(System::String^  value) {
    this[this->table_reward_component->CONTROL_ERROR_VARIABLEColumn] = value;
}

inline System::Int32 RLSimion::_reward_componentRow::reward_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_reward_component->reward_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'reward_Id\' in table \'reward-component\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::_reward_componentRow::reward_Id::set(System::Int32 value) {
    this[this->table_reward_component->reward_IdColumn] = value;
}

inline RLSimion::rewardRow^  RLSimion::_reward_componentRow::rewardRow::get() {
    return (cli::safe_cast<RLSimion::rewardRow^  >(this->GetParentRow(this->Table->ParentRelations[L"reward_reward-component"])));
}
inline System::Void RLSimion::_reward_componentRow::rewardRow::set(RLSimion::rewardRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"reward_reward-component"]);
}

inline ::System::Boolean RLSimion::_reward_componentRow::Isreward_IdNull() {
    return this->IsNull(this->table_reward_component->reward_IdColumn);
}

inline ::System::Void RLSimion::_reward_componentRow::Setreward_IdNull() {
    this[this->table_reward_component->reward_IdColumn] = ::System::Convert::DBNull;
}


inline RLSimion::_wind_turbineRow::_wind_turbineRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_wind_turbine = (cli::safe_cast<RLSimion::_wind_turbineDataTable^  >(this->Table));
}

inline System::String^  RLSimion::_wind_turbineRow::EVALUATION_WIND_DATA_FILE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->table_wind_turbine->EVALUATION_WIND_DATA_FILEColumn]));
}
inline System::Void RLSimion::_wind_turbineRow::EVALUATION_WIND_DATA_FILE::set(System::String^  value) {
    this[this->table_wind_turbine->EVALUATION_WIND_DATA_FILEColumn] = value;
}

inline System::String^  RLSimion::_wind_turbineRow::POWER_SET_POINT_FILE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->table_wind_turbine->POWER_SET_POINT_FILEColumn]));
}
inline System::Void RLSimion::_wind_turbineRow::POWER_SET_POINT_FILE::set(System::String^  value) {
    this[this->table_wind_turbine->POWER_SET_POINT_FILEColumn] = value;
}

inline System::Int32 RLSimion::_wind_turbineRow::_wind_turbine_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->table_wind_turbine->_wind_turbine_IdColumn]));
}
inline System::Void RLSimion::_wind_turbineRow::_wind_turbine_Id::set(System::Int32 value) {
    this[this->table_wind_turbine->_wind_turbine_IdColumn] = value;
}

inline System::Int32 RLSimion::_wind_turbineRow::WORLD_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_wind_turbine->WORLD_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'WORLD_Id\' in table \'wind-turbine\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::_wind_turbineRow::WORLD_Id::set(System::Int32 value) {
    this[this->table_wind_turbine->WORLD_IdColumn] = value;
}

inline RLSimion::WORLDRow^  RLSimion::_wind_turbineRow::WORLDRow::get() {
    return (cli::safe_cast<RLSimion::WORLDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"WORLD_wind-turbine"])));
}
inline System::Void RLSimion::_wind_turbineRow::WORLDRow::set(RLSimion::WORLDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"WORLD_wind-turbine"]);
}

inline ::System::Boolean RLSimion::_wind_turbineRow::IsWORLD_IdNull() {
    return this->IsNull(this->table_wind_turbine->WORLD_IdColumn);
}

inline ::System::Void RLSimion::_wind_turbineRow::SetWORLD_IdNull() {
    this[this->table_wind_turbine->WORLD_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::TRAINING_WIND_DATA_FILESRow^  >^  RLSimion::_wind_turbineRow::GetTRAINING_WIND_DATA_FILESRows() {
    if (this->Table->ChildRelations[L"wind-turbine_TRAINING_WIND_DATA_FILES"] == nullptr) {
        return gcnew cli::array< RLSimion::TRAINING_WIND_DATA_FILESRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::TRAINING_WIND_DATA_FILESRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"wind-turbine_TRAINING_WIND_DATA_FILES"])));
    }
}


inline RLSimion::TRAINING_WIND_DATA_FILESRow::TRAINING_WIND_DATA_FILESRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableTRAINING_WIND_DATA_FILES = (cli::safe_cast<RLSimion::TRAINING_WIND_DATA_FILESDataTable^  >(this->Table));
}

inline System::String^  RLSimion::TRAINING_WIND_DATA_FILESRow::TRAINING_WIND_DATA_FILES_Column::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableTRAINING_WIND_DATA_FILES->TRAINING_WIND_DATA_FILES_ColumnColumn]));
}
inline System::Void RLSimion::TRAINING_WIND_DATA_FILESRow::TRAINING_WIND_DATA_FILES_Column::set(System::String^  value) {
    this[this->tableTRAINING_WIND_DATA_FILES->TRAINING_WIND_DATA_FILES_ColumnColumn] = value;
}

inline System::Int32 RLSimion::TRAINING_WIND_DATA_FILESRow::_wind_turbine_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableTRAINING_WIND_DATA_FILES->_wind_turbine_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'wind-turbine_Id\' in table \'TRAINING_WIND_DATA_FILES\' is DBN" 
L"ull.", 
            e));
    }
}
inline System::Void RLSimion::TRAINING_WIND_DATA_FILESRow::_wind_turbine_Id::set(System::Int32 value) {
    this[this->tableTRAINING_WIND_DATA_FILES->_wind_turbine_IdColumn] = value;
}

inline RLSimion::_wind_turbineRow^  RLSimion::TRAINING_WIND_DATA_FILESRow::_wind_turbineRow::get() {
    return (cli::safe_cast<RLSimion::_wind_turbineRow^  >(this->GetParentRow(this->Table->ParentRelations[L"wind-turbine_TRAINING_WIND_DATA_FILES"])));
}
inline System::Void RLSimion::TRAINING_WIND_DATA_FILESRow::_wind_turbineRow::set(RLSimion::_wind_turbineRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"wind-turbine_TRAINING_WIND_DATA_FILES"]);
}

inline ::System::Boolean RLSimion::TRAINING_WIND_DATA_FILESRow::Is_wind_turbine_IdNull() {
    return this->IsNull(this->tableTRAINING_WIND_DATA_FILES->_wind_turbine_IdColumn);
}

inline ::System::Void RLSimion::TRAINING_WIND_DATA_FILESRow::Set_wind_turbine_IdNull() {
    this[this->tableTRAINING_WIND_DATA_FILES->_wind_turbine_IdColumn] = ::System::Convert::DBNull;
}


inline RLSimion::_magnetic_levitationRow::_magnetic_levitationRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_magnetic_levitation = (cli::safe_cast<RLSimion::_magnetic_levitationDataTable^  >(this->Table));
}

inline System::String^  RLSimion::_magnetic_levitationRow::SET_POINT_FILE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->table_magnetic_levitation->SET_POINT_FILEColumn]));
}
inline System::Void RLSimion::_magnetic_levitationRow::SET_POINT_FILE::set(System::String^  value) {
    this[this->table_magnetic_levitation->SET_POINT_FILEColumn] = value;
}

inline System::Int32 RLSimion::_magnetic_levitationRow::WORLD_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_magnetic_levitation->WORLD_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'WORLD_Id\' in table \'magnetic-levitation\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::_magnetic_levitationRow::WORLD_Id::set(System::Int32 value) {
    this[this->table_magnetic_levitation->WORLD_IdColumn] = value;
}

inline RLSimion::WORLDRow^  RLSimion::_magnetic_levitationRow::WORLDRow::get() {
    return (cli::safe_cast<RLSimion::WORLDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"WORLD_magnetic-levitation"])));
}
inline System::Void RLSimion::_magnetic_levitationRow::WORLDRow::set(RLSimion::WORLDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"WORLD_magnetic-levitation"]);
}

inline ::System::Boolean RLSimion::_magnetic_levitationRow::IsWORLD_IdNull() {
    return this->IsNull(this->table_magnetic_levitation->WORLD_IdColumn);
}

inline ::System::Void RLSimion::_magnetic_levitationRow::SetWORLD_IdNull() {
    this[this->table_magnetic_levitation->WORLD_IdColumn] = ::System::Convert::DBNull;
}


inline RLSimion::pitchRow::pitchRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablepitch = (cli::safe_cast<RLSimion::pitchDataTable^  >(this->Table));
}

inline System::String^  RLSimion::pitchRow::SET_POINT_FILE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablepitch->SET_POINT_FILEColumn]));
}
inline System::Void RLSimion::pitchRow::SET_POINT_FILE::set(System::String^  value) {
    this[this->tablepitch->SET_POINT_FILEColumn] = value;
}

inline System::Int32 RLSimion::pitchRow::WORLD_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablepitch->WORLD_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'WORLD_Id\' in table \'pitch\' is DBNull.", e));
    }
}
inline System::Void RLSimion::pitchRow::WORLD_Id::set(System::Int32 value) {
    this[this->tablepitch->WORLD_IdColumn] = value;
}

inline RLSimion::WORLDRow^  RLSimion::pitchRow::WORLDRow::get() {
    return (cli::safe_cast<RLSimion::WORLDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"WORLD_pitch"])));
}
inline System::Void RLSimion::pitchRow::WORLDRow::set(RLSimion::WORLDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"WORLD_pitch"]);
}

inline ::System::Boolean RLSimion::pitchRow::IsWORLD_IdNull() {
    return this->IsNull(this->tablepitch->WORLD_IdColumn);
}

inline ::System::Void RLSimion::pitchRow::SetWORLD_IdNull() {
    this[this->tablepitch->WORLD_IdColumn] = ::System::Convert::DBNull;
}


inline RLSimion::_underwater_vehicleRow::_underwater_vehicleRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_underwater_vehicle = (cli::safe_cast<RLSimion::_underwater_vehicleDataTable^  >(this->Table));
}

inline System::String^  RLSimion::_underwater_vehicleRow::SET_POINT_FILE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->table_underwater_vehicle->SET_POINT_FILEColumn]));
}
inline System::Void RLSimion::_underwater_vehicleRow::SET_POINT_FILE::set(System::String^  value) {
    this[this->table_underwater_vehicle->SET_POINT_FILEColumn] = value;
}

inline System::Int32 RLSimion::_underwater_vehicleRow::WORLD_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_underwater_vehicle->WORLD_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'WORLD_Id\' in table \'underwater-vehicle\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::_underwater_vehicleRow::WORLD_Id::set(System::Int32 value) {
    this[this->table_underwater_vehicle->WORLD_IdColumn] = value;
}

inline RLSimion::WORLDRow^  RLSimion::_underwater_vehicleRow::WORLDRow::get() {
    return (cli::safe_cast<RLSimion::WORLDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"WORLD_underwater-vehicle"])));
}
inline System::Void RLSimion::_underwater_vehicleRow::WORLDRow::set(RLSimion::WORLDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"WORLD_underwater-vehicle"]);
}

inline ::System::Boolean RLSimion::_underwater_vehicleRow::IsWORLD_IdNull() {
    return this->IsNull(this->table_underwater_vehicle->WORLD_IdColumn);
}

inline ::System::Void RLSimion::_underwater_vehicleRow::SetWORLD_IdNull() {
    this[this->table_underwater_vehicle->WORLD_IdColumn] = ::System::Convert::DBNull;
}


inline RLSimion::SIMGODRow::SIMGODRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableSIMGOD = (cli::safe_cast<RLSimion::SIMGODDataTable^  >(this->Table));
}

inline System::Int32 RLSimion::SIMGODRow::SIMGOD_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableSIMGOD->SIMGOD_IdColumn]));
}
inline System::Void RLSimion::SIMGODRow::SIMGOD_Id::set(System::Int32 value) {
    this[this->tableSIMGOD->SIMGOD_IdColumn] = value;
}

inline cli::array< RLSimion::_actor_onlyRow^  >^  RLSimion::SIMGODRow::_Getactor_onlyRows() {
    if (this->Table->ChildRelations[L"SIMGOD_actor-only"] == nullptr) {
        return gcnew cli::array< RLSimion::_actor_onlyRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::_actor_onlyRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"SIMGOD_actor-only"])));
    }
}

inline cli::array< RLSimion::_actor_criticRow^  >^  RLSimion::SIMGODRow::_Getactor_criticRows() {
    if (this->Table->ChildRelations[L"SIMGOD_actor-critic"] == nullptr) {
        return gcnew cli::array< RLSimion::_actor_criticRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::_actor_criticRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"SIMGOD_actor-critic"])));
    }
}

inline cli::array< RLSimion::_actor_critic_controllerRow^  >^  RLSimion::SIMGODRow::_Getactor_critic_controllerRows() {
    if (this->Table->ChildRelations[L"SIMGOD_actor-critic-controller"] == nullptr) {
        return gcnew cli::array< RLSimion::_actor_critic_controllerRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::_actor_critic_controllerRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"SIMGOD_actor-critic-controller"])));
    }
}


inline RLSimion::_actor_onlyRow::_actor_onlyRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_actor_only = (cli::safe_cast<RLSimion::_actor_onlyDataTable^  >(this->Table));
}

inline System::Int32 RLSimion::_actor_onlyRow::_actor_only_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->table_actor_only->_actor_only_IdColumn]));
}
inline System::Void RLSimion::_actor_onlyRow::_actor_only_Id::set(System::Int32 value) {
    this[this->table_actor_only->_actor_only_IdColumn] = value;
}

inline System::Int32 RLSimion::_actor_onlyRow::SIMGOD_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_actor_only->SIMGOD_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'SIMGOD_Id\' in table \'actor-only\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::_actor_onlyRow::SIMGOD_Id::set(System::Int32 value) {
    this[this->table_actor_only->SIMGOD_IdColumn] = value;
}

inline RLSimion::SIMGODRow^  RLSimion::_actor_onlyRow::SIMGODRow::get() {
    return (cli::safe_cast<RLSimion::SIMGODRow^  >(this->GetParentRow(this->Table->ParentRelations[L"SIMGOD_actor-only"])));
}
inline System::Void RLSimion::_actor_onlyRow::SIMGODRow::set(RLSimion::SIMGODRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"SIMGOD_actor-only"]);
}

inline ::System::Boolean RLSimion::_actor_onlyRow::IsSIMGOD_IdNull() {
    return this->IsNull(this->table_actor_only->SIMGOD_IdColumn);
}

inline ::System::Void RLSimion::_actor_onlyRow::SetSIMGOD_IdNull() {
    this[this->table_actor_only->SIMGOD_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::ACTORRow^  >^  RLSimion::_actor_onlyRow::GetACTORRows() {
    if (this->Table->ChildRelations[L"actor-only_ACTOR"] == nullptr) {
        return gcnew cli::array< RLSimion::ACTORRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::ACTORRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"actor-only_ACTOR"])));
    }
}


inline RLSimion::ACTORRow::ACTORRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableACTOR = (cli::safe_cast<RLSimion::ACTORDataTable^  >(this->Table));
}

inline System::Int32 RLSimion::ACTORRow::ACTOR_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableACTOR->ACTOR_IdColumn]));
}
inline System::Void RLSimion::ACTORRow::ACTOR_Id::set(System::Int32 value) {
    this[this->tableACTOR->ACTOR_IdColumn] = value;
}

inline System::Int32 RLSimion::ACTORRow::_actor_only_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableACTOR->_actor_only_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'actor-only_Id\' in table \'ACTOR\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::ACTORRow::_actor_only_Id::set(System::Int32 value) {
    this[this->tableACTOR->_actor_only_IdColumn] = value;
}

inline System::Int32 RLSimion::ACTORRow::_actor_critic_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableACTOR->_actor_critic_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'actor-critic_Id\' in table \'ACTOR\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::ACTORRow::_actor_critic_Id::set(System::Int32 value) {
    this[this->tableACTOR->_actor_critic_IdColumn] = value;
}

inline System::Int32 RLSimion::ACTORRow::_actor_critic_controller_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableACTOR->_actor_critic_controller_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'actor-critic-controller_Id\' in table \'ACTOR\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::ACTORRow::_actor_critic_controller_Id::set(System::Int32 value) {
    this[this->tableACTOR->_actor_critic_controller_IdColumn] = value;
}

inline RLSimion::_actor_onlyRow^  RLSimion::ACTORRow::_actor_onlyRow::get() {
    return (cli::safe_cast<RLSimion::_actor_onlyRow^  >(this->GetParentRow(this->Table->ParentRelations[L"actor-only_ACTOR"])));
}
inline System::Void RLSimion::ACTORRow::_actor_onlyRow::set(RLSimion::_actor_onlyRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"actor-only_ACTOR"]);
}

inline RLSimion::_actor_criticRow^  RLSimion::ACTORRow::_actor_criticRow::get() {
    return (cli::safe_cast<RLSimion::_actor_criticRow^  >(this->GetParentRow(this->Table->ParentRelations[L"actor-critic_ACTOR"])));
}
inline System::Void RLSimion::ACTORRow::_actor_criticRow::set(RLSimion::_actor_criticRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"actor-critic_ACTOR"]);
}

inline RLSimion::_actor_critic_controllerRow^  RLSimion::ACTORRow::_actor_critic_controllerRow::get() {
    return (cli::safe_cast<RLSimion::_actor_critic_controllerRow^  >(this->GetParentRow(this->Table->ParentRelations[L"actor-critic-controller_ACTOR"])));
}
inline System::Void RLSimion::ACTORRow::_actor_critic_controllerRow::set(RLSimion::_actor_critic_controllerRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"actor-critic-controller_ACTOR"]);
}

inline ::System::Boolean RLSimion::ACTORRow::Is_actor_only_IdNull() {
    return this->IsNull(this->tableACTOR->_actor_only_IdColumn);
}

inline ::System::Void RLSimion::ACTORRow::Set_actor_only_IdNull() {
    this[this->tableACTOR->_actor_only_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::ACTORRow::Is_actor_critic_IdNull() {
    return this->IsNull(this->tableACTOR->_actor_critic_IdColumn);
}

inline ::System::Void RLSimion::ACTORRow::Set_actor_critic_IdNull() {
    this[this->tableACTOR->_actor_critic_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::ACTORRow::Is_actor_critic_controller_IdNull() {
    return this->IsNull(this->tableACTOR->_actor_critic_controller_IdColumn);
}

inline ::System::Void RLSimion::ACTORRow::Set_actor_critic_controller_IdNull() {
    this[this->tableACTOR->_actor_critic_controller_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::_VFA_ActorRow^  >^  RLSimion::ACTORRow::_GetVFA_ActorRows() {
    if (this->Table->ChildRelations[L"ACTOR_VFA-Actor"] == nullptr) {
        return gcnew cli::array< RLSimion::_VFA_ActorRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::_VFA_ActorRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"ACTOR_VFA-Actor"])));
    }
}

inline cli::array< RLSimion::PIDRow^  >^  RLSimion::ACTORRow::GetPIDRows() {
    if (this->Table->ChildRelations[L"ACTOR_PID"] == nullptr) {
        return gcnew cli::array< RLSimion::PIDRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::PIDRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"ACTOR_PID"])));
    }
}

inline cli::array< RLSimion::LQRRow^  >^  RLSimion::ACTORRow::GetLQRRows() {
    if (this->Table->ChildRelations[L"ACTOR_LQR"] == nullptr) {
        return gcnew cli::array< RLSimion::LQRRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::LQRRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"ACTOR_LQR"])));
    }
}

inline cli::array< RLSimion::jonkmanRow^  >^  RLSimion::ACTORRow::GetjonkmanRows() {
    if (this->Table->ChildRelations[L"ACTOR_jonkman"] == nullptr) {
        return gcnew cli::array< RLSimion::jonkmanRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::jonkmanRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"ACTOR_jonkman"])));
    }
}

inline cli::array< RLSimion::vidalRow^  >^  RLSimion::ACTORRow::GetvidalRows() {
    if (this->Table->ChildRelations[L"ACTOR_vidal"] == nullptr) {
        return gcnew cli::array< RLSimion::vidalRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::vidalRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"ACTOR_vidal"])));
    }
}

inline cli::array< RLSimion::boukhezzarRow^  >^  RLSimion::ACTORRow::GetboukhezzarRows() {
    if (this->Table->ChildRelations[L"ACTOR_boukhezzar"] == nullptr) {
        return gcnew cli::array< RLSimion::boukhezzarRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::boukhezzarRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"ACTOR_boukhezzar"])));
    }
}


inline RLSimion::_VFA_ActorRow::_VFA_ActorRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_VFA_Actor = (cli::safe_cast<RLSimion::_VFA_ActorDataTable^  >(this->Table));
}

inline System::String^  RLSimion::_VFA_ActorRow::LOAD::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->table_VFA_Actor->LOADColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'LOAD\' in table \'VFA-Actor\' is DBNull.", e));
    }
}
inline System::Void RLSimion::_VFA_ActorRow::LOAD::set(System::String^  value) {
    this[this->table_VFA_Actor->LOADColumn] = value;
}

inline System::String^  RLSimion::_VFA_ActorRow::SAVE::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->table_VFA_Actor->SAVEColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'SAVE\' in table \'VFA-Actor\' is DBNull.", e));
    }
}
inline System::Void RLSimion::_VFA_ActorRow::SAVE::set(System::String^  value) {
    this[this->table_VFA_Actor->SAVEColumn] = value;
}

inline System::Int32 RLSimion::_VFA_ActorRow::_VFA_Actor_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->table_VFA_Actor->_VFA_Actor_IdColumn]));
}
inline System::Void RLSimion::_VFA_ActorRow::_VFA_Actor_Id::set(System::Int32 value) {
    this[this->table_VFA_Actor->_VFA_Actor_IdColumn] = value;
}

inline System::Int32 RLSimion::_VFA_ActorRow::ACTOR_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_VFA_Actor->ACTOR_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ACTOR_Id\' in table \'VFA-Actor\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::_VFA_ActorRow::ACTOR_Id::set(System::Int32 value) {
    this[this->table_VFA_Actor->ACTOR_IdColumn] = value;
}

inline System::Int32 RLSimion::_VFA_ActorRow::CONTROLLER_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_VFA_Actor->CONTROLLER_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CONTROLLER_Id\' in table \'VFA-Actor\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::_VFA_ActorRow::CONTROLLER_Id::set(System::Int32 value) {
    this[this->table_VFA_Actor->CONTROLLER_IdColumn] = value;
}

inline RLSimion::ACTORRow^  RLSimion::_VFA_ActorRow::ACTORRow::get() {
    return (cli::safe_cast<RLSimion::ACTORRow^  >(this->GetParentRow(this->Table->ParentRelations[L"ACTOR_VFA-Actor"])));
}
inline System::Void RLSimion::_VFA_ActorRow::ACTORRow::set(RLSimion::ACTORRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"ACTOR_VFA-Actor"]);
}

inline RLSimion::CONTROLLERRow^  RLSimion::_VFA_ActorRow::CONTROLLERRow::get() {
    return (cli::safe_cast<RLSimion::CONTROLLERRow^  >(this->GetParentRow(this->Table->ParentRelations[L"CONTROLLER_VFA-Actor"])));
}
inline System::Void RLSimion::_VFA_ActorRow::CONTROLLERRow::set(RLSimion::CONTROLLERRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"CONTROLLER_VFA-Actor"]);
}

inline ::System::Boolean RLSimion::_VFA_ActorRow::IsLOADNull() {
    return this->IsNull(this->table_VFA_Actor->LOADColumn);
}

inline ::System::Void RLSimion::_VFA_ActorRow::SetLOADNull() {
    this[this->table_VFA_Actor->LOADColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::_VFA_ActorRow::IsSAVENull() {
    return this->IsNull(this->table_VFA_Actor->SAVEColumn);
}

inline ::System::Void RLSimion::_VFA_ActorRow::SetSAVENull() {
    this[this->table_VFA_Actor->SAVEColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::_VFA_ActorRow::IsACTOR_IdNull() {
    return this->IsNull(this->table_VFA_Actor->ACTOR_IdColumn);
}

inline ::System::Void RLSimion::_VFA_ActorRow::SetACTOR_IdNull() {
    this[this->table_VFA_Actor->ACTOR_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::_VFA_ActorRow::IsCONTROLLER_IdNull() {
    return this->IsNull(this->table_VFA_Actor->CONTROLLER_IdColumn);
}

inline ::System::Void RLSimion::_VFA_ActorRow::SetCONTROLLER_IdNull() {
    this[this->table_VFA_Actor->CONTROLLER_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::_Single_Output_Policy_LearnerRow^  >^  RLSimion::_VFA_ActorRow::_GetSingle_Output_Policy_LearnerRows() {
    if (this->Table->ChildRelations[L"VFA-Actor_Single-Output-Policy-Learner"] == nullptr) {
        return gcnew cli::array< RLSimion::_Single_Output_Policy_LearnerRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::_Single_Output_Policy_LearnerRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"VFA-Actor_Single-Output-Policy-Learner"])));
    }
}


inline RLSimion::_Single_Output_Policy_LearnerRow::_Single_Output_Policy_LearnerRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_Single_Output_Policy_Learner = (cli::safe_cast<RLSimion::_Single_Output_Policy_LearnerDataTable^  >(this->Table));
}

inline System::Int32 RLSimion::_Single_Output_Policy_LearnerRow::_Single_Output_Policy_Learner_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->table_Single_Output_Policy_Learner->_Single_Output_Policy_Learner_IdColumn]));
}
inline System::Void RLSimion::_Single_Output_Policy_LearnerRow::_Single_Output_Policy_Learner_Id::set(System::Int32 value) {
    this[this->table_Single_Output_Policy_Learner->_Single_Output_Policy_Learner_IdColumn] = value;
}

inline System::Int32 RLSimion::_Single_Output_Policy_LearnerRow::_VFA_Actor_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_Single_Output_Policy_Learner->_VFA_Actor_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VFA-Actor_Id\' in table \'Single-Output-Policy-Learner\' is DB" 
L"Null.", 
            e));
    }
}
inline System::Void RLSimion::_Single_Output_Policy_LearnerRow::_VFA_Actor_Id::set(System::Int32 value) {
    this[this->table_Single_Output_Policy_Learner->_VFA_Actor_IdColumn] = value;
}

inline RLSimion::_VFA_ActorRow^  RLSimion::_Single_Output_Policy_LearnerRow::_VFA_ActorRow::get() {
    return (cli::safe_cast<RLSimion::_VFA_ActorRow^  >(this->GetParentRow(this->Table->ParentRelations[L"VFA-Actor_Single-Output-Policy-Learner"])));
}
inline System::Void RLSimion::_Single_Output_Policy_LearnerRow::_VFA_ActorRow::set(RLSimion::_VFA_ActorRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"VFA-Actor_Single-Output-Policy-Learner"]);
}

inline ::System::Boolean RLSimion::_Single_Output_Policy_LearnerRow::Is_VFA_Actor_IdNull() {
    return this->IsNull(this->table_Single_Output_Policy_Learner->_VFA_Actor_IdColumn);
}

inline ::System::Void RLSimion::_Single_Output_Policy_LearnerRow::Set_VFA_Actor_IdNull() {
    this[this->table_Single_Output_Policy_Learner->_VFA_Actor_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::CACLARow^  >^  RLSimion::_Single_Output_Policy_LearnerRow::GetCACLARows() {
    if (this->Table->ChildRelations[L"Single-Output-Policy-Learner_CACLA"] == nullptr) {
        return gcnew cli::array< RLSimion::CACLARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::CACLARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Single-Output-Policy-Learner_CACLA"])));
    }
}

inline cli::array< RLSimion::RegularGradientActorRow^  >^  RLSimion::_Single_Output_Policy_LearnerRow::GetRegularGradientActorRows() {
    if (this->Table->ChildRelations[L"Single-Output-Policy-Learner_RegularGradientActor"] == nullptr) {
        return gcnew cli::array< RLSimion::RegularGradientActorRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::RegularGradientActorRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Single-Output-Policy-Learner_RegularGradientActor"])));
    }
}

inline cli::array< RLSimion::IncrementalNaturalActorRow^  >^  RLSimion::_Single_Output_Policy_LearnerRow::GetIncrementalNaturalActorRows() {
    if (this->Table->ChildRelations[L"Single-Output-Policy-Learner_IncrementalNaturalActor"] == nullptr) {
        return gcnew cli::array< RLSimion::IncrementalNaturalActorRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::IncrementalNaturalActorRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"Single-Output-Policy-Learner_IncrementalNaturalActor"])));
    }
}


inline RLSimion::CACLARow::CACLARow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableCACLA = (cli::safe_cast<RLSimion::CACLADataTable^  >(this->Table));
}

inline System::String^  RLSimion::CACLARow::ACTION::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableCACLA->ACTIONColumn]));
}
inline System::Void RLSimion::CACLARow::ACTION::set(System::String^  value) {
    this[this->tableCACLA->ACTIONColumn] = value;
}

inline System::Int32 RLSimion::CACLARow::CACLA_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableCACLA->CACLA_IdColumn]));
}
inline System::Void RLSimion::CACLARow::CACLA_Id::set(System::Int32 value) {
    this[this->tableCACLA->CACLA_IdColumn] = value;
}

inline System::Int32 RLSimion::CACLARow::_Single_Output_Policy_Learner_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableCACLA->_Single_Output_Policy_Learner_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Single-Output-Policy-Learner_Id\' in table \'CACLA\' is DBNull" 
L".", 
            e));
    }
}
inline System::Void RLSimion::CACLARow::_Single_Output_Policy_Learner_Id::set(System::Int32 value) {
    this[this->tableCACLA->_Single_Output_Policy_Learner_IdColumn] = value;
}

inline RLSimion::_Single_Output_Policy_LearnerRow^  RLSimion::CACLARow::_Single_Output_Policy_LearnerRow::get() {
    return (cli::safe_cast<RLSimion::_Single_Output_Policy_LearnerRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Single-Output-Policy-Learner_CACLA"])));
}
inline System::Void RLSimion::CACLARow::_Single_Output_Policy_LearnerRow::set(RLSimion::_Single_Output_Policy_LearnerRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"Single-Output-Policy-Learner_CACLA"]);
}

inline ::System::Boolean RLSimion::CACLARow::Is_Single_Output_Policy_Learner_IdNull() {
    return this->IsNull(this->tableCACLA->_Single_Output_Policy_Learner_IdColumn);
}

inline ::System::Void RLSimion::CACLARow::Set_Single_Output_Policy_Learner_IdNull() {
    this[this->tableCACLA->_Single_Output_Policy_Learner_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::ETRACESRow^  >^  RLSimion::CACLARow::GetETRACESRows() {
    if (this->Table->ChildRelations[L"CACLA_ETRACES"] == nullptr) {
        return gcnew cli::array< RLSimion::ETRACESRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::ETRACESRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"CACLA_ETRACES"])));
    }
}

inline cli::array< RLSimion::ALPHARow^  >^  RLSimion::CACLARow::GetALPHARows() {
    if (this->Table->ChildRelations[L"CACLA_ALPHA"] == nullptr) {
        return gcnew cli::array< RLSimion::ALPHARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::ALPHARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"CACLA_ALPHA"])));
    }
}

inline cli::array< RLSimion::VFARow^  >^  RLSimion::CACLARow::GetVFARows() {
    if (this->Table->ChildRelations[L"CACLA_VFA"] == nullptr) {
        return gcnew cli::array< RLSimion::VFARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::VFARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"CACLA_VFA"])));
    }
}

inline cli::array< RLSimion::EXPLORATION_NOISERow^  >^  RLSimion::CACLARow::GetEXPLORATION_NOISERows() {
    if (this->Table->ChildRelations[L"CACLA_EXPLORATION_NOISE"] == nullptr) {
        return gcnew cli::array< RLSimion::EXPLORATION_NOISERow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::EXPLORATION_NOISERow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"CACLA_EXPLORATION_NOISE"])));
    }
}


inline RLSimion::ETRACESRow::ETRACESRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableETRACES = (cli::safe_cast<RLSimion::ETRACESDataTable^  >(this->Table));
}

inline System::Int32 RLSimion::ETRACESRow::ETRACES_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableETRACES->ETRACES_IdColumn]));
}
inline System::Void RLSimion::ETRACESRow::ETRACES_Id::set(System::Int32 value) {
    this[this->tableETRACES->ETRACES_IdColumn] = value;
}

inline System::Int32 RLSimion::ETRACESRow::CACLA_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableETRACES->CACLA_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CACLA_Id\' in table \'ETRACES\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::ETRACESRow::CACLA_Id::set(System::Int32 value) {
    this[this->tableETRACES->CACLA_IdColumn] = value;
}

inline System::Int32 RLSimion::ETRACESRow::RegularGradientActor_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableETRACES->RegularGradientActor_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'RegularGradientActor_Id\' in table \'ETRACES\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::ETRACESRow::RegularGradientActor_Id::set(System::Int32 value) {
    this[this->tableETRACES->RegularGradientActor_IdColumn] = value;
}

inline System::Int32 RLSimion::ETRACESRow::IncrementalNaturalActor_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableETRACES->IncrementalNaturalActor_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'IncrementalNaturalActor_Id\' in table \'ETRACES\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::ETRACESRow::IncrementalNaturalActor_Id::set(System::Int32 value) {
    this[this->tableETRACES->IncrementalNaturalActor_IdColumn] = value;
}

inline System::Int32 RLSimion::ETRACESRow::_TD_Lambda_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableETRACES->_TD_Lambda_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TD-Lambda_Id\' in table \'ETRACES\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::ETRACESRow::_TD_Lambda_Id::set(System::Int32 value) {
    this[this->tableETRACES->_TD_Lambda_IdColumn] = value;
}

inline System::Int32 RLSimion::ETRACESRow::_True_Online_TD_Lambda_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableETRACES->_True_Online_TD_Lambda_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'True-Online-TD-Lambda_Id\' in table \'ETRACES\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::ETRACESRow::_True_Online_TD_Lambda_Id::set(System::Int32 value) {
    this[this->tableETRACES->_True_Online_TD_Lambda_IdColumn] = value;
}

inline System::Int32 RLSimion::ETRACESRow::_TDC_Lambda_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableETRACES->_TDC_Lambda_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TDC-Lambda_Id\' in table \'ETRACES\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::ETRACESRow::_TDC_Lambda_Id::set(System::Int32 value) {
    this[this->tableETRACES->_TDC_Lambda_IdColumn] = value;
}

inline RLSimion::CACLARow^  RLSimion::ETRACESRow::CACLARow::get() {
    return (cli::safe_cast<RLSimion::CACLARow^  >(this->GetParentRow(this->Table->ParentRelations[L"CACLA_ETRACES"])));
}
inline System::Void RLSimion::ETRACESRow::CACLARow::set(RLSimion::CACLARow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"CACLA_ETRACES"]);
}

inline RLSimion::RegularGradientActorRow^  RLSimion::ETRACESRow::RegularGradientActorRow::get() {
    return (cli::safe_cast<RLSimion::RegularGradientActorRow^  >(this->GetParentRow(this->Table->ParentRelations[L"RegularGradientActor_ETRACES"])));
}
inline System::Void RLSimion::ETRACESRow::RegularGradientActorRow::set(RLSimion::RegularGradientActorRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"RegularGradientActor_ETRACES"]);
}

inline RLSimion::IncrementalNaturalActorRow^  RLSimion::ETRACESRow::IncrementalNaturalActorRow::get() {
    return (cli::safe_cast<RLSimion::IncrementalNaturalActorRow^  >(this->GetParentRow(this->Table->ParentRelations[L"IncrementalNaturalActor_ETRACES"])));
}
inline System::Void RLSimion::ETRACESRow::IncrementalNaturalActorRow::set(RLSimion::IncrementalNaturalActorRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"IncrementalNaturalActor_ETRACES"]);
}

inline RLSimion::_TD_LambdaRow^  RLSimion::ETRACESRow::_TD_LambdaRow::get() {
    return (cli::safe_cast<RLSimion::_TD_LambdaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TD-Lambda_ETRACES"])));
}
inline System::Void RLSimion::ETRACESRow::_TD_LambdaRow::set(RLSimion::_TD_LambdaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"TD-Lambda_ETRACES"]);
}

inline RLSimion::_True_Online_TD_LambdaRow^  RLSimion::ETRACESRow::_True_Online_TD_LambdaRow::get() {
    return (cli::safe_cast<RLSimion::_True_Online_TD_LambdaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"True-Online-TD-Lambda_ETRACES"])));
}
inline System::Void RLSimion::ETRACESRow::_True_Online_TD_LambdaRow::set(RLSimion::_True_Online_TD_LambdaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"True-Online-TD-Lambda_ETRACES"]);
}

inline RLSimion::_TDC_LambdaRow^  RLSimion::ETRACESRow::_TDC_LambdaRow::get() {
    return (cli::safe_cast<RLSimion::_TDC_LambdaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TDC-Lambda_ETRACES"])));
}
inline System::Void RLSimion::ETRACESRow::_TDC_LambdaRow::set(RLSimion::_TDC_LambdaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"TDC-Lambda_ETRACES"]);
}

inline ::System::Boolean RLSimion::ETRACESRow::IsCACLA_IdNull() {
    return this->IsNull(this->tableETRACES->CACLA_IdColumn);
}

inline ::System::Void RLSimion::ETRACESRow::SetCACLA_IdNull() {
    this[this->tableETRACES->CACLA_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::ETRACESRow::IsRegularGradientActor_IdNull() {
    return this->IsNull(this->tableETRACES->RegularGradientActor_IdColumn);
}

inline ::System::Void RLSimion::ETRACESRow::SetRegularGradientActor_IdNull() {
    this[this->tableETRACES->RegularGradientActor_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::ETRACESRow::IsIncrementalNaturalActor_IdNull() {
    return this->IsNull(this->tableETRACES->IncrementalNaturalActor_IdColumn);
}

inline ::System::Void RLSimion::ETRACESRow::SetIncrementalNaturalActor_IdNull() {
    this[this->tableETRACES->IncrementalNaturalActor_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::ETRACESRow::Is_TD_Lambda_IdNull() {
    return this->IsNull(this->tableETRACES->_TD_Lambda_IdColumn);
}

inline ::System::Void RLSimion::ETRACESRow::Set_TD_Lambda_IdNull() {
    this[this->tableETRACES->_TD_Lambda_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::ETRACESRow::Is_True_Online_TD_Lambda_IdNull() {
    return this->IsNull(this->tableETRACES->_True_Online_TD_Lambda_IdColumn);
}

inline ::System::Void RLSimion::ETRACESRow::Set_True_Online_TD_Lambda_IdNull() {
    this[this->tableETRACES->_True_Online_TD_Lambda_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::ETRACESRow::Is_TDC_Lambda_IdNull() {
    return this->IsNull(this->tableETRACES->_TDC_Lambda_IdColumn);
}

inline ::System::Void RLSimion::ETRACESRow::Set_TDC_Lambda_IdNull() {
    this[this->tableETRACES->_TDC_Lambda_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::LAMBDARow^  >^  RLSimion::ETRACESRow::GetLAMBDARows() {
    if (this->Table->ChildRelations[L"ETRACES_LAMBDA"] == nullptr) {
        return gcnew cli::array< RLSimion::LAMBDARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::LAMBDARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"ETRACES_LAMBDA"])));
    }
}

inline cli::array< RLSimion::THRESHOLDRow^  >^  RLSimion::ETRACESRow::GetTHRESHOLDRows() {
    if (this->Table->ChildRelations[L"ETRACES_THRESHOLD"] == nullptr) {
        return gcnew cli::array< RLSimion::THRESHOLDRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::THRESHOLDRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"ETRACES_THRESHOLD"])));
    }
}


inline RLSimion::LAMBDARow::LAMBDARow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableLAMBDA = (cli::safe_cast<RLSimion::LAMBDADataTable^  >(this->Table));
}

inline System::Decimal RLSimion::LAMBDARow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableLAMBDA->decimalColumn]));
}
inline System::Void RLSimion::LAMBDARow::decimal::set(System::Decimal value) {
    this[this->tableLAMBDA->decimalColumn] = value;
}

inline System::Int32 RLSimion::LAMBDARow::LAMBDA_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableLAMBDA->LAMBDA_IdColumn]));
}
inline System::Void RLSimion::LAMBDARow::LAMBDA_Id::set(System::Int32 value) {
    this[this->tableLAMBDA->LAMBDA_IdColumn] = value;
}

inline System::Int32 RLSimion::LAMBDARow::ETRACES_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableLAMBDA->ETRACES_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ETRACES_Id\' in table \'LAMBDA\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::LAMBDARow::ETRACES_Id::set(System::Int32 value) {
    this[this->tableLAMBDA->ETRACES_IdColumn] = value;
}

inline RLSimion::ETRACESRow^  RLSimion::LAMBDARow::ETRACESRow::get() {
    return (cli::safe_cast<RLSimion::ETRACESRow^  >(this->GetParentRow(this->Table->ParentRelations[L"ETRACES_LAMBDA"])));
}
inline System::Void RLSimion::LAMBDARow::ETRACESRow::set(RLSimion::ETRACESRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"ETRACES_LAMBDA"]);
}

inline ::System::Boolean RLSimion::LAMBDARow::IsETRACES_IdNull() {
    return this->IsNull(this->tableLAMBDA->ETRACES_IdColumn);
}

inline ::System::Void RLSimion::LAMBDARow::SetETRACES_IdNull() {
    this[this->tableLAMBDA->ETRACES_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::LAMBDARow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"LAMBDA_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"LAMBDA_schedule"])));
    }
}


inline RLSimion::scheduleRow::scheduleRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableschedule = (cli::safe_cast<RLSimion::scheduleDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::scheduleRow::INITIAL_VALUE::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableschedule->INITIAL_VALUEColumn]));
}
inline System::Void RLSimion::scheduleRow::INITIAL_VALUE::set(System::Decimal value) {
    this[this->tableschedule->INITIAL_VALUEColumn] = value;
}

inline System::Decimal RLSimion::scheduleRow::FINAL_VALUE::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableschedule->FINAL_VALUEColumn]));
}
inline System::Void RLSimion::scheduleRow::FINAL_VALUE::set(System::Decimal value) {
    this[this->tableschedule->FINAL_VALUEColumn] = value;
}

inline System::Decimal RLSimion::scheduleRow::EVALUATION_EPISODE_VALUE::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableschedule->EVALUATION_EPISODE_VALUEColumn]));
}
inline System::Void RLSimion::scheduleRow::EVALUATION_EPISODE_VALUE::set(System::Decimal value) {
    this[this->tableschedule->EVALUATION_EPISODE_VALUEColumn] = value;
}

inline System::String^  RLSimion::scheduleRow::INTERPOLATION::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableschedule->INTERPOLATIONColumn]));
}
inline System::Void RLSimion::scheduleRow::INTERPOLATION::set(System::String^  value) {
    this[this->tableschedule->INTERPOLATIONColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::LAMBDA_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->LAMBDA_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'LAMBDA_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::scheduleRow::LAMBDA_Id::set(System::Int32 value) {
    this[this->tableschedule->LAMBDA_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::THRESHOLD_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->THRESHOLD_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'THRESHOLD_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::scheduleRow::THRESHOLD_Id::set(System::Int32 value) {
    this[this->tableschedule->THRESHOLD_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::ALPHA_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->ALPHA_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ALPHA_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::scheduleRow::ALPHA_Id::set(System::Int32 value) {
    this[this->tableschedule->ALPHA_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::SIGMA_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->SIGMA_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'SIGMA_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::scheduleRow::SIGMA_Id::set(System::Int32 value) {
    this[this->tableschedule->SIGMA_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::KP_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->KP_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'KP_Id\' in table \'schedule\' is DBNull.", e));
    }
}
inline System::Void RLSimion::scheduleRow::KP_Id::set(System::Int32 value) {
    this[this->tableschedule->KP_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::KI_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->KI_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'KI_Id\' in table \'schedule\' is DBNull.", e));
    }
}
inline System::Void RLSimion::scheduleRow::KI_Id::set(System::Int32 value) {
    this[this->tableschedule->KI_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::KD_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->KD_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'KD_Id\' in table \'schedule\' is DBNull.", e));
    }
}
inline System::Void RLSimion::scheduleRow::KD_Id::set(System::Int32 value) {
    this[this->tableschedule->KD_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::VS_RtGnSp_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->VS_RtGnSp_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VS_RtGnSp_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::scheduleRow::VS_RtGnSp_Id::set(System::Int32 value) {
    this[this->tableschedule->VS_RtGnSp_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::VS_SlPc_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->VS_SlPc_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VS_SlPc_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::scheduleRow::VS_SlPc_Id::set(System::Int32 value) {
    this[this->tableschedule->VS_SlPc_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::VS_Rgn2K_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->VS_Rgn2K_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VS_Rgn2K_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::scheduleRow::VS_Rgn2K_Id::set(System::Int32 value) {
    this[this->tableschedule->VS_Rgn2K_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::VS_Rgn2Sp_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->VS_Rgn2Sp_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VS_Rgn2Sp_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::scheduleRow::VS_Rgn2Sp_Id::set(System::Int32 value) {
    this[this->tableschedule->VS_Rgn2Sp_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::VS_CtInSp_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->VS_CtInSp_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VS_CtInSp_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::scheduleRow::VS_CtInSp_Id::set(System::Int32 value) {
    this[this->tableschedule->VS_CtInSp_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::VS_RtPwr_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->VS_RtPwr_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VS_RtPwr_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::scheduleRow::VS_RtPwr_Id::set(System::Int32 value) {
    this[this->tableschedule->VS_RtPwr_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::VS_Rgn3MP_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->VS_Rgn3MP_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VS_Rgn3MP_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::scheduleRow::VS_Rgn3MP_Id::set(System::Int32 value) {
    this[this->tableschedule->VS_Rgn3MP_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::PC_KI_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->PC_KI_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PC_KI_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::scheduleRow::PC_KI_Id::set(System::Int32 value) {
    this[this->tableschedule->PC_KI_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::PC_KK_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->PC_KK_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PC_KK_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::scheduleRow::PC_KK_Id::set(System::Int32 value) {
    this[this->tableschedule->PC_KK_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::PC_KP_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->PC_KP_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PC_KP_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::scheduleRow::PC_KP_Id::set(System::Int32 value) {
    this[this->tableschedule->PC_KP_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::PC_RefSpd_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->PC_RefSpd_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PC_RefSpd_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::scheduleRow::PC_RefSpd_Id::set(System::Int32 value) {
    this[this->tableschedule->PC_RefSpd_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::A_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->A_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'A_Id\' in table \'schedule\' is DBNull.", e));
    }
}
inline System::Void RLSimion::scheduleRow::A_Id::set(System::Int32 value) {
    this[this->tableschedule->A_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::K_alpha_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->K_alpha_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'K_alpha_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::scheduleRow::K_alpha_Id::set(System::Int32 value) {
    this[this->tableschedule->K_alpha_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::P_s_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->P_s_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'P_s_Id\' in table \'schedule\' is DBNull.", e));
    }
}
inline System::Void RLSimion::scheduleRow::P_s_Id::set(System::Int32 value) {
    this[this->tableschedule->P_s_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::C_0_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->C_0_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'C_0_Id\' in table \'schedule\' is DBNull.", e));
    }
}
inline System::Void RLSimion::scheduleRow::C_0_Id::set(System::Int32 value) {
    this[this->tableschedule->C_0_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::K_t_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->K_t_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'K_t_Id\' in table \'schedule\' is DBNull.", e));
    }
}
inline System::Void RLSimion::scheduleRow::K_t_Id::set(System::Int32 value) {
    this[this->tableschedule->K_t_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::J_t_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->J_t_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'J_t_Id\' in table \'schedule\' is DBNull.", e));
    }
}
inline System::Void RLSimion::scheduleRow::J_t_Id::set(System::Int32 value) {
    this[this->tableschedule->J_t_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::GAMMA_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->GAMMA_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'GAMMA_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::scheduleRow::GAMMA_Id::set(System::Int32 value) {
    this[this->tableschedule->GAMMA_IdColumn] = value;
}

inline System::Int32 RLSimion::scheduleRow::BETA_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableschedule->BETA_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'BETA_Id\' in table \'schedule\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::scheduleRow::BETA_Id::set(System::Int32 value) {
    this[this->tableschedule->BETA_IdColumn] = value;
}

inline RLSimion::LAMBDARow^  RLSimion::scheduleRow::LAMBDARow::get() {
    return (cli::safe_cast<RLSimion::LAMBDARow^  >(this->GetParentRow(this->Table->ParentRelations[L"LAMBDA_schedule"])));
}
inline System::Void RLSimion::scheduleRow::LAMBDARow::set(RLSimion::LAMBDARow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"LAMBDA_schedule"]);
}

inline RLSimion::THRESHOLDRow^  RLSimion::scheduleRow::THRESHOLDRow::get() {
    return (cli::safe_cast<RLSimion::THRESHOLDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"THRESHOLD_schedule"])));
}
inline System::Void RLSimion::scheduleRow::THRESHOLDRow::set(RLSimion::THRESHOLDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"THRESHOLD_schedule"]);
}

inline RLSimion::ALPHARow^  RLSimion::scheduleRow::ALPHARow::get() {
    return (cli::safe_cast<RLSimion::ALPHARow^  >(this->GetParentRow(this->Table->ParentRelations[L"ALPHA_schedule"])));
}
inline System::Void RLSimion::scheduleRow::ALPHARow::set(RLSimion::ALPHARow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"ALPHA_schedule"]);
}

inline RLSimion::SIGMARow^  RLSimion::scheduleRow::SIGMARow::get() {
    return (cli::safe_cast<RLSimion::SIGMARow^  >(this->GetParentRow(this->Table->ParentRelations[L"SIGMA_schedule"])));
}
inline System::Void RLSimion::scheduleRow::SIGMARow::set(RLSimion::SIGMARow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"SIGMA_schedule"]);
}

inline RLSimion::KPRow^  RLSimion::scheduleRow::KPRow::get() {
    return (cli::safe_cast<RLSimion::KPRow^  >(this->GetParentRow(this->Table->ParentRelations[L"KP_schedule"])));
}
inline System::Void RLSimion::scheduleRow::KPRow::set(RLSimion::KPRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"KP_schedule"]);
}

inline RLSimion::KIRow^  RLSimion::scheduleRow::KIRow::get() {
    return (cli::safe_cast<RLSimion::KIRow^  >(this->GetParentRow(this->Table->ParentRelations[L"KI_schedule"])));
}
inline System::Void RLSimion::scheduleRow::KIRow::set(RLSimion::KIRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"KI_schedule"]);
}

inline RLSimion::KDRow^  RLSimion::scheduleRow::KDRow::get() {
    return (cli::safe_cast<RLSimion::KDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"KD_schedule"])));
}
inline System::Void RLSimion::scheduleRow::KDRow::set(RLSimion::KDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"KD_schedule"]);
}

inline RLSimion::VS_RtGnSpRow^  RLSimion::scheduleRow::VS_RtGnSpRow::get() {
    return (cli::safe_cast<RLSimion::VS_RtGnSpRow^  >(this->GetParentRow(this->Table->ParentRelations[L"VS_RtGnSp_schedule"])));
}
inline System::Void RLSimion::scheduleRow::VS_RtGnSpRow::set(RLSimion::VS_RtGnSpRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"VS_RtGnSp_schedule"]);
}

inline RLSimion::VS_SlPcRow^  RLSimion::scheduleRow::VS_SlPcRow::get() {
    return (cli::safe_cast<RLSimion::VS_SlPcRow^  >(this->GetParentRow(this->Table->ParentRelations[L"VS_SlPc_schedule"])));
}
inline System::Void RLSimion::scheduleRow::VS_SlPcRow::set(RLSimion::VS_SlPcRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"VS_SlPc_schedule"]);
}

inline RLSimion::VS_Rgn2KRow^  RLSimion::scheduleRow::VS_Rgn2KRow::get() {
    return (cli::safe_cast<RLSimion::VS_Rgn2KRow^  >(this->GetParentRow(this->Table->ParentRelations[L"VS_Rgn2K_schedule"])));
}
inline System::Void RLSimion::scheduleRow::VS_Rgn2KRow::set(RLSimion::VS_Rgn2KRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"VS_Rgn2K_schedule"]);
}

inline RLSimion::VS_Rgn2SpRow^  RLSimion::scheduleRow::VS_Rgn2SpRow::get() {
    return (cli::safe_cast<RLSimion::VS_Rgn2SpRow^  >(this->GetParentRow(this->Table->ParentRelations[L"VS_Rgn2Sp_schedule"])));
}
inline System::Void RLSimion::scheduleRow::VS_Rgn2SpRow::set(RLSimion::VS_Rgn2SpRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"VS_Rgn2Sp_schedule"]);
}

inline RLSimion::VS_CtInSpRow^  RLSimion::scheduleRow::VS_CtInSpRow::get() {
    return (cli::safe_cast<RLSimion::VS_CtInSpRow^  >(this->GetParentRow(this->Table->ParentRelations[L"VS_CtInSp_schedule"])));
}
inline System::Void RLSimion::scheduleRow::VS_CtInSpRow::set(RLSimion::VS_CtInSpRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"VS_CtInSp_schedule"]);
}

inline RLSimion::VS_RtPwrRow^  RLSimion::scheduleRow::VS_RtPwrRow::get() {
    return (cli::safe_cast<RLSimion::VS_RtPwrRow^  >(this->GetParentRow(this->Table->ParentRelations[L"VS_RtPwr_schedule"])));
}
inline System::Void RLSimion::scheduleRow::VS_RtPwrRow::set(RLSimion::VS_RtPwrRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"VS_RtPwr_schedule"]);
}

inline RLSimion::VS_Rgn3MPRow^  RLSimion::scheduleRow::VS_Rgn3MPRow::get() {
    return (cli::safe_cast<RLSimion::VS_Rgn3MPRow^  >(this->GetParentRow(this->Table->ParentRelations[L"VS_Rgn3MP_schedule"])));
}
inline System::Void RLSimion::scheduleRow::VS_Rgn3MPRow::set(RLSimion::VS_Rgn3MPRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"VS_Rgn3MP_schedule"]);
}

inline RLSimion::PC_KIRow^  RLSimion::scheduleRow::PC_KIRow::get() {
    return (cli::safe_cast<RLSimion::PC_KIRow^  >(this->GetParentRow(this->Table->ParentRelations[L"PC_KI_schedule"])));
}
inline System::Void RLSimion::scheduleRow::PC_KIRow::set(RLSimion::PC_KIRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"PC_KI_schedule"]);
}

inline RLSimion::PC_KKRow^  RLSimion::scheduleRow::PC_KKRow::get() {
    return (cli::safe_cast<RLSimion::PC_KKRow^  >(this->GetParentRow(this->Table->ParentRelations[L"PC_KK_schedule"])));
}
inline System::Void RLSimion::scheduleRow::PC_KKRow::set(RLSimion::PC_KKRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"PC_KK_schedule"]);
}

inline RLSimion::PC_KPRow^  RLSimion::scheduleRow::PC_KPRow::get() {
    return (cli::safe_cast<RLSimion::PC_KPRow^  >(this->GetParentRow(this->Table->ParentRelations[L"PC_KP_schedule"])));
}
inline System::Void RLSimion::scheduleRow::PC_KPRow::set(RLSimion::PC_KPRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"PC_KP_schedule"]);
}

inline RLSimion::PC_RefSpdRow^  RLSimion::scheduleRow::PC_RefSpdRow::get() {
    return (cli::safe_cast<RLSimion::PC_RefSpdRow^  >(this->GetParentRow(this->Table->ParentRelations[L"PC_RefSpd_schedule"])));
}
inline System::Void RLSimion::scheduleRow::PC_RefSpdRow::set(RLSimion::PC_RefSpdRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"PC_RefSpd_schedule"]);
}

inline RLSimion::ARow^  RLSimion::scheduleRow::ARow::get() {
    return (cli::safe_cast<RLSimion::ARow^  >(this->GetParentRow(this->Table->ParentRelations[L"A_schedule"])));
}
inline System::Void RLSimion::scheduleRow::ARow::set(RLSimion::ARow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"A_schedule"]);
}

inline RLSimion::K_alphaRow^  RLSimion::scheduleRow::K_alphaRow::get() {
    return (cli::safe_cast<RLSimion::K_alphaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"K_alpha_schedule"])));
}
inline System::Void RLSimion::scheduleRow::K_alphaRow::set(RLSimion::K_alphaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"K_alpha_schedule"]);
}

inline RLSimion::P_sRow^  RLSimion::scheduleRow::P_sRow::get() {
    return (cli::safe_cast<RLSimion::P_sRow^  >(this->GetParentRow(this->Table->ParentRelations[L"P_s_schedule"])));
}
inline System::Void RLSimion::scheduleRow::P_sRow::set(RLSimion::P_sRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"P_s_schedule"]);
}

inline RLSimion::C_0Row^  RLSimion::scheduleRow::C_0Row::get() {
    return (cli::safe_cast<RLSimion::C_0Row^  >(this->GetParentRow(this->Table->ParentRelations[L"C_0_schedule"])));
}
inline System::Void RLSimion::scheduleRow::C_0Row::set(RLSimion::C_0Row^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"C_0_schedule"]);
}

inline RLSimion::K_tRow^  RLSimion::scheduleRow::K_tRow::get() {
    return (cli::safe_cast<RLSimion::K_tRow^  >(this->GetParentRow(this->Table->ParentRelations[L"K_t_schedule"])));
}
inline System::Void RLSimion::scheduleRow::K_tRow::set(RLSimion::K_tRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"K_t_schedule"]);
}

inline RLSimion::J_tRow^  RLSimion::scheduleRow::J_tRow::get() {
    return (cli::safe_cast<RLSimion::J_tRow^  >(this->GetParentRow(this->Table->ParentRelations[L"J_t_schedule"])));
}
inline System::Void RLSimion::scheduleRow::J_tRow::set(RLSimion::J_tRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"J_t_schedule"]);
}

inline RLSimion::GAMMARow^  RLSimion::scheduleRow::GAMMARow::get() {
    return (cli::safe_cast<RLSimion::GAMMARow^  >(this->GetParentRow(this->Table->ParentRelations[L"GAMMA_schedule"])));
}
inline System::Void RLSimion::scheduleRow::GAMMARow::set(RLSimion::GAMMARow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"GAMMA_schedule"]);
}

inline RLSimion::BETARow^  RLSimion::scheduleRow::BETARow::get() {
    return (cli::safe_cast<RLSimion::BETARow^  >(this->GetParentRow(this->Table->ParentRelations[L"BETA_schedule"])));
}
inline System::Void RLSimion::scheduleRow::BETARow::set(RLSimion::BETARow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"BETA_schedule"]);
}

inline ::System::Boolean RLSimion::scheduleRow::IsLAMBDA_IdNull() {
    return this->IsNull(this->tableschedule->LAMBDA_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetLAMBDA_IdNull() {
    this[this->tableschedule->LAMBDA_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsTHRESHOLD_IdNull() {
    return this->IsNull(this->tableschedule->THRESHOLD_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetTHRESHOLD_IdNull() {
    this[this->tableschedule->THRESHOLD_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsALPHA_IdNull() {
    return this->IsNull(this->tableschedule->ALPHA_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetALPHA_IdNull() {
    this[this->tableschedule->ALPHA_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsSIGMA_IdNull() {
    return this->IsNull(this->tableschedule->SIGMA_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetSIGMA_IdNull() {
    this[this->tableschedule->SIGMA_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsKP_IdNull() {
    return this->IsNull(this->tableschedule->KP_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetKP_IdNull() {
    this[this->tableschedule->KP_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsKI_IdNull() {
    return this->IsNull(this->tableschedule->KI_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetKI_IdNull() {
    this[this->tableschedule->KI_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsKD_IdNull() {
    return this->IsNull(this->tableschedule->KD_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetKD_IdNull() {
    this[this->tableschedule->KD_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsVS_RtGnSp_IdNull() {
    return this->IsNull(this->tableschedule->VS_RtGnSp_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetVS_RtGnSp_IdNull() {
    this[this->tableschedule->VS_RtGnSp_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsVS_SlPc_IdNull() {
    return this->IsNull(this->tableschedule->VS_SlPc_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetVS_SlPc_IdNull() {
    this[this->tableschedule->VS_SlPc_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsVS_Rgn2K_IdNull() {
    return this->IsNull(this->tableschedule->VS_Rgn2K_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetVS_Rgn2K_IdNull() {
    this[this->tableschedule->VS_Rgn2K_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsVS_Rgn2Sp_IdNull() {
    return this->IsNull(this->tableschedule->VS_Rgn2Sp_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetVS_Rgn2Sp_IdNull() {
    this[this->tableschedule->VS_Rgn2Sp_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsVS_CtInSp_IdNull() {
    return this->IsNull(this->tableschedule->VS_CtInSp_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetVS_CtInSp_IdNull() {
    this[this->tableschedule->VS_CtInSp_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsVS_RtPwr_IdNull() {
    return this->IsNull(this->tableschedule->VS_RtPwr_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetVS_RtPwr_IdNull() {
    this[this->tableschedule->VS_RtPwr_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsVS_Rgn3MP_IdNull() {
    return this->IsNull(this->tableschedule->VS_Rgn3MP_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetVS_Rgn3MP_IdNull() {
    this[this->tableschedule->VS_Rgn3MP_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsPC_KI_IdNull() {
    return this->IsNull(this->tableschedule->PC_KI_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetPC_KI_IdNull() {
    this[this->tableschedule->PC_KI_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsPC_KK_IdNull() {
    return this->IsNull(this->tableschedule->PC_KK_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetPC_KK_IdNull() {
    this[this->tableschedule->PC_KK_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsPC_KP_IdNull() {
    return this->IsNull(this->tableschedule->PC_KP_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetPC_KP_IdNull() {
    this[this->tableschedule->PC_KP_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsPC_RefSpd_IdNull() {
    return this->IsNull(this->tableschedule->PC_RefSpd_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetPC_RefSpd_IdNull() {
    this[this->tableschedule->PC_RefSpd_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsA_IdNull() {
    return this->IsNull(this->tableschedule->A_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetA_IdNull() {
    this[this->tableschedule->A_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsK_alpha_IdNull() {
    return this->IsNull(this->tableschedule->K_alpha_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetK_alpha_IdNull() {
    this[this->tableschedule->K_alpha_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsP_s_IdNull() {
    return this->IsNull(this->tableschedule->P_s_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetP_s_IdNull() {
    this[this->tableschedule->P_s_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsC_0_IdNull() {
    return this->IsNull(this->tableschedule->C_0_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetC_0_IdNull() {
    this[this->tableschedule->C_0_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsK_t_IdNull() {
    return this->IsNull(this->tableschedule->K_t_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetK_t_IdNull() {
    this[this->tableschedule->K_t_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsJ_t_IdNull() {
    return this->IsNull(this->tableschedule->J_t_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetJ_t_IdNull() {
    this[this->tableschedule->J_t_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsGAMMA_IdNull() {
    return this->IsNull(this->tableschedule->GAMMA_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetGAMMA_IdNull() {
    this[this->tableschedule->GAMMA_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::scheduleRow::IsBETA_IdNull() {
    return this->IsNull(this->tableschedule->BETA_IdColumn);
}

inline ::System::Void RLSimion::scheduleRow::SetBETA_IdNull() {
    this[this->tableschedule->BETA_IdColumn] = ::System::Convert::DBNull;
}


inline RLSimion::THRESHOLDRow::THRESHOLDRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableTHRESHOLD = (cli::safe_cast<RLSimion::THRESHOLDDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::THRESHOLDRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableTHRESHOLD->decimalColumn]));
}
inline System::Void RLSimion::THRESHOLDRow::decimal::set(System::Decimal value) {
    this[this->tableTHRESHOLD->decimalColumn] = value;
}

inline System::Int32 RLSimion::THRESHOLDRow::THRESHOLD_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableTHRESHOLD->THRESHOLD_IdColumn]));
}
inline System::Void RLSimion::THRESHOLDRow::THRESHOLD_Id::set(System::Int32 value) {
    this[this->tableTHRESHOLD->THRESHOLD_IdColumn] = value;
}

inline System::Int32 RLSimion::THRESHOLDRow::ETRACES_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableTHRESHOLD->ETRACES_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ETRACES_Id\' in table \'THRESHOLD\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::THRESHOLDRow::ETRACES_Id::set(System::Int32 value) {
    this[this->tableTHRESHOLD->ETRACES_IdColumn] = value;
}

inline RLSimion::ETRACESRow^  RLSimion::THRESHOLDRow::ETRACESRow::get() {
    return (cli::safe_cast<RLSimion::ETRACESRow^  >(this->GetParentRow(this->Table->ParentRelations[L"ETRACES_THRESHOLD"])));
}
inline System::Void RLSimion::THRESHOLDRow::ETRACESRow::set(RLSimion::ETRACESRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"ETRACES_THRESHOLD"]);
}

inline ::System::Boolean RLSimion::THRESHOLDRow::IsETRACES_IdNull() {
    return this->IsNull(this->tableTHRESHOLD->ETRACES_IdColumn);
}

inline ::System::Void RLSimion::THRESHOLDRow::SetETRACES_IdNull() {
    this[this->tableTHRESHOLD->ETRACES_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::THRESHOLDRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"THRESHOLD_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"THRESHOLD_schedule"])));
    }
}


inline RLSimion::ALPHARow::ALPHARow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableALPHA = (cli::safe_cast<RLSimion::ALPHADataTable^  >(this->Table));
}

inline System::Decimal RLSimion::ALPHARow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableALPHA->decimalColumn]));
}
inline System::Void RLSimion::ALPHARow::decimal::set(System::Decimal value) {
    this[this->tableALPHA->decimalColumn] = value;
}

inline System::Int32 RLSimion::ALPHARow::ALPHA_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableALPHA->ALPHA_IdColumn]));
}
inline System::Void RLSimion::ALPHARow::ALPHA_Id::set(System::Int32 value) {
    this[this->tableALPHA->ALPHA_IdColumn] = value;
}

inline System::Int32 RLSimion::ALPHARow::CACLA_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableALPHA->CACLA_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CACLA_Id\' in table \'ALPHA\' is DBNull.", e));
    }
}
inline System::Void RLSimion::ALPHARow::CACLA_Id::set(System::Int32 value) {
    this[this->tableALPHA->CACLA_IdColumn] = value;
}

inline System::Int32 RLSimion::ALPHARow::RegularGradientActor_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableALPHA->RegularGradientActor_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'RegularGradientActor_Id\' in table \'ALPHA\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::ALPHARow::RegularGradientActor_Id::set(System::Int32 value) {
    this[this->tableALPHA->RegularGradientActor_IdColumn] = value;
}

inline System::Int32 RLSimion::ALPHARow::IncrementalNaturalActor_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableALPHA->IncrementalNaturalActor_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'IncrementalNaturalActor_Id\' in table \'ALPHA\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::ALPHARow::IncrementalNaturalActor_Id::set(System::Int32 value) {
    this[this->tableALPHA->IncrementalNaturalActor_IdColumn] = value;
}

inline System::Int32 RLSimion::ALPHARow::_TD_Lambda_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableALPHA->_TD_Lambda_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TD-Lambda_Id\' in table \'ALPHA\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::ALPHARow::_TD_Lambda_Id::set(System::Int32 value) {
    this[this->tableALPHA->_TD_Lambda_IdColumn] = value;
}

inline System::Int32 RLSimion::ALPHARow::_True_Online_TD_Lambda_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableALPHA->_True_Online_TD_Lambda_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'True-Online-TD-Lambda_Id\' in table \'ALPHA\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::ALPHARow::_True_Online_TD_Lambda_Id::set(System::Int32 value) {
    this[this->tableALPHA->_True_Online_TD_Lambda_IdColumn] = value;
}

inline System::Int32 RLSimion::ALPHARow::_TDC_Lambda_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableALPHA->_TDC_Lambda_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TDC-Lambda_Id\' in table \'ALPHA\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::ALPHARow::_TDC_Lambda_Id::set(System::Int32 value) {
    this[this->tableALPHA->_TDC_Lambda_IdColumn] = value;
}

inline RLSimion::CACLARow^  RLSimion::ALPHARow::CACLARow::get() {
    return (cli::safe_cast<RLSimion::CACLARow^  >(this->GetParentRow(this->Table->ParentRelations[L"CACLA_ALPHA"])));
}
inline System::Void RLSimion::ALPHARow::CACLARow::set(RLSimion::CACLARow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"CACLA_ALPHA"]);
}

inline RLSimion::RegularGradientActorRow^  RLSimion::ALPHARow::RegularGradientActorRow::get() {
    return (cli::safe_cast<RLSimion::RegularGradientActorRow^  >(this->GetParentRow(this->Table->ParentRelations[L"RegularGradientActor_ALPHA"])));
}
inline System::Void RLSimion::ALPHARow::RegularGradientActorRow::set(RLSimion::RegularGradientActorRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"RegularGradientActor_ALPHA"]);
}

inline RLSimion::IncrementalNaturalActorRow^  RLSimion::ALPHARow::IncrementalNaturalActorRow::get() {
    return (cli::safe_cast<RLSimion::IncrementalNaturalActorRow^  >(this->GetParentRow(this->Table->ParentRelations[L"IncrementalNaturalActor_ALPHA"])));
}
inline System::Void RLSimion::ALPHARow::IncrementalNaturalActorRow::set(RLSimion::IncrementalNaturalActorRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"IncrementalNaturalActor_ALPHA"]);
}

inline RLSimion::_TD_LambdaRow^  RLSimion::ALPHARow::_TD_LambdaRow::get() {
    return (cli::safe_cast<RLSimion::_TD_LambdaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TD-Lambda_ALPHA"])));
}
inline System::Void RLSimion::ALPHARow::_TD_LambdaRow::set(RLSimion::_TD_LambdaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"TD-Lambda_ALPHA"]);
}

inline RLSimion::_True_Online_TD_LambdaRow^  RLSimion::ALPHARow::_True_Online_TD_LambdaRow::get() {
    return (cli::safe_cast<RLSimion::_True_Online_TD_LambdaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"True-Online-TD-Lambda_ALPHA"])));
}
inline System::Void RLSimion::ALPHARow::_True_Online_TD_LambdaRow::set(RLSimion::_True_Online_TD_LambdaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"True-Online-TD-Lambda_ALPHA"]);
}

inline RLSimion::_TDC_LambdaRow^  RLSimion::ALPHARow::_TDC_LambdaRow::get() {
    return (cli::safe_cast<RLSimion::_TDC_LambdaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TDC-Lambda_ALPHA"])));
}
inline System::Void RLSimion::ALPHARow::_TDC_LambdaRow::set(RLSimion::_TDC_LambdaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"TDC-Lambda_ALPHA"]);
}

inline ::System::Boolean RLSimion::ALPHARow::IsCACLA_IdNull() {
    return this->IsNull(this->tableALPHA->CACLA_IdColumn);
}

inline ::System::Void RLSimion::ALPHARow::SetCACLA_IdNull() {
    this[this->tableALPHA->CACLA_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::ALPHARow::IsRegularGradientActor_IdNull() {
    return this->IsNull(this->tableALPHA->RegularGradientActor_IdColumn);
}

inline ::System::Void RLSimion::ALPHARow::SetRegularGradientActor_IdNull() {
    this[this->tableALPHA->RegularGradientActor_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::ALPHARow::IsIncrementalNaturalActor_IdNull() {
    return this->IsNull(this->tableALPHA->IncrementalNaturalActor_IdColumn);
}

inline ::System::Void RLSimion::ALPHARow::SetIncrementalNaturalActor_IdNull() {
    this[this->tableALPHA->IncrementalNaturalActor_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::ALPHARow::Is_TD_Lambda_IdNull() {
    return this->IsNull(this->tableALPHA->_TD_Lambda_IdColumn);
}

inline ::System::Void RLSimion::ALPHARow::Set_TD_Lambda_IdNull() {
    this[this->tableALPHA->_TD_Lambda_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::ALPHARow::Is_True_Online_TD_Lambda_IdNull() {
    return this->IsNull(this->tableALPHA->_True_Online_TD_Lambda_IdColumn);
}

inline ::System::Void RLSimion::ALPHARow::Set_True_Online_TD_Lambda_IdNull() {
    this[this->tableALPHA->_True_Online_TD_Lambda_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::ALPHARow::Is_TDC_Lambda_IdNull() {
    return this->IsNull(this->tableALPHA->_TDC_Lambda_IdColumn);
}

inline ::System::Void RLSimion::ALPHARow::Set_TDC_Lambda_IdNull() {
    this[this->tableALPHA->_TDC_Lambda_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::ALPHARow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"ALPHA_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"ALPHA_schedule"])));
    }
}


inline RLSimion::VFARow::VFARow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableVFA = (cli::safe_cast<RLSimion::VFADataTable^  >(this->Table));
}

inline System::Int32 RLSimion::VFARow::VFA_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableVFA->VFA_IdColumn]));
}
inline System::Void RLSimion::VFARow::VFA_Id::set(System::Int32 value) {
    this[this->tableVFA->VFA_IdColumn] = value;
}

inline System::Int32 RLSimion::VFARow::CACLA_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableVFA->CACLA_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CACLA_Id\' in table \'VFA\' is DBNull.", e));
    }
}
inline System::Void RLSimion::VFARow::CACLA_Id::set(System::Int32 value) {
    this[this->tableVFA->CACLA_IdColumn] = value;
}

inline System::Int32 RLSimion::VFARow::RegularGradientActor_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableVFA->RegularGradientActor_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'RegularGradientActor_Id\' in table \'VFA\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::VFARow::RegularGradientActor_Id::set(System::Int32 value) {
    this[this->tableVFA->RegularGradientActor_IdColumn] = value;
}

inline System::Int32 RLSimion::VFARow::IncrementalNaturalActor_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableVFA->IncrementalNaturalActor_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'IncrementalNaturalActor_Id\' in table \'VFA\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::VFARow::IncrementalNaturalActor_Id::set(System::Int32 value) {
    this[this->tableVFA->IncrementalNaturalActor_IdColumn] = value;
}

inline System::Int32 RLSimion::VFARow::_TD_Lambda_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableVFA->_TD_Lambda_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TD-Lambda_Id\' in table \'VFA\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::VFARow::_TD_Lambda_Id::set(System::Int32 value) {
    this[this->tableVFA->_TD_Lambda_IdColumn] = value;
}

inline System::Int32 RLSimion::VFARow::_True_Online_TD_Lambda_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableVFA->_True_Online_TD_Lambda_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'True-Online-TD-Lambda_Id\' in table \'VFA\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::VFARow::_True_Online_TD_Lambda_Id::set(System::Int32 value) {
    this[this->tableVFA->_True_Online_TD_Lambda_IdColumn] = value;
}

inline System::Int32 RLSimion::VFARow::_TDC_Lambda_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableVFA->_TDC_Lambda_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TDC-Lambda_Id\' in table \'VFA\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::VFARow::_TDC_Lambda_Id::set(System::Int32 value) {
    this[this->tableVFA->_TDC_Lambda_IdColumn] = value;
}

inline RLSimion::CACLARow^  RLSimion::VFARow::CACLARow::get() {
    return (cli::safe_cast<RLSimion::CACLARow^  >(this->GetParentRow(this->Table->ParentRelations[L"CACLA_VFA"])));
}
inline System::Void RLSimion::VFARow::CACLARow::set(RLSimion::CACLARow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"CACLA_VFA"]);
}

inline RLSimion::RegularGradientActorRow^  RLSimion::VFARow::RegularGradientActorRow::get() {
    return (cli::safe_cast<RLSimion::RegularGradientActorRow^  >(this->GetParentRow(this->Table->ParentRelations[L"RegularGradientActor_VFA"])));
}
inline System::Void RLSimion::VFARow::RegularGradientActorRow::set(RLSimion::RegularGradientActorRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"RegularGradientActor_VFA"]);
}

inline RLSimion::IncrementalNaturalActorRow^  RLSimion::VFARow::IncrementalNaturalActorRow::get() {
    return (cli::safe_cast<RLSimion::IncrementalNaturalActorRow^  >(this->GetParentRow(this->Table->ParentRelations[L"IncrementalNaturalActor_VFA"])));
}
inline System::Void RLSimion::VFARow::IncrementalNaturalActorRow::set(RLSimion::IncrementalNaturalActorRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"IncrementalNaturalActor_VFA"]);
}

inline RLSimion::_TD_LambdaRow^  RLSimion::VFARow::_TD_LambdaRow::get() {
    return (cli::safe_cast<RLSimion::_TD_LambdaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TD-Lambda_VFA"])));
}
inline System::Void RLSimion::VFARow::_TD_LambdaRow::set(RLSimion::_TD_LambdaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"TD-Lambda_VFA"]);
}

inline RLSimion::_True_Online_TD_LambdaRow^  RLSimion::VFARow::_True_Online_TD_LambdaRow::get() {
    return (cli::safe_cast<RLSimion::_True_Online_TD_LambdaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"True-Online-TD-Lambda_VFA"])));
}
inline System::Void RLSimion::VFARow::_True_Online_TD_LambdaRow::set(RLSimion::_True_Online_TD_LambdaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"True-Online-TD-Lambda_VFA"]);
}

inline RLSimion::_TDC_LambdaRow^  RLSimion::VFARow::_TDC_LambdaRow::get() {
    return (cli::safe_cast<RLSimion::_TDC_LambdaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TDC-Lambda_VFA"])));
}
inline System::Void RLSimion::VFARow::_TDC_LambdaRow::set(RLSimion::_TDC_LambdaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"TDC-Lambda_VFA"]);
}

inline ::System::Boolean RLSimion::VFARow::IsCACLA_IdNull() {
    return this->IsNull(this->tableVFA->CACLA_IdColumn);
}

inline ::System::Void RLSimion::VFARow::SetCACLA_IdNull() {
    this[this->tableVFA->CACLA_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::VFARow::IsRegularGradientActor_IdNull() {
    return this->IsNull(this->tableVFA->RegularGradientActor_IdColumn);
}

inline ::System::Void RLSimion::VFARow::SetRegularGradientActor_IdNull() {
    this[this->tableVFA->RegularGradientActor_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::VFARow::IsIncrementalNaturalActor_IdNull() {
    return this->IsNull(this->tableVFA->IncrementalNaturalActor_IdColumn);
}

inline ::System::Void RLSimion::VFARow::SetIncrementalNaturalActor_IdNull() {
    this[this->tableVFA->IncrementalNaturalActor_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::VFARow::Is_TD_Lambda_IdNull() {
    return this->IsNull(this->tableVFA->_TD_Lambda_IdColumn);
}

inline ::System::Void RLSimion::VFARow::Set_TD_Lambda_IdNull() {
    this[this->tableVFA->_TD_Lambda_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::VFARow::Is_True_Online_TD_Lambda_IdNull() {
    return this->IsNull(this->tableVFA->_True_Online_TD_Lambda_IdColumn);
}

inline ::System::Void RLSimion::VFARow::Set_True_Online_TD_Lambda_IdNull() {
    this[this->tableVFA->_True_Online_TD_Lambda_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::VFARow::Is_TDC_Lambda_IdNull() {
    return this->IsNull(this->tableVFA->_TDC_Lambda_IdColumn);
}

inline ::System::Void RLSimion::VFARow::Set_TDC_Lambda_IdNull() {
    this[this->tableVFA->_TDC_Lambda_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::RBF_GRIDRow^  >^  RLSimion::VFARow::GetRBF_GRIDRows() {
    if (this->Table->ChildRelations[L"VFA_RBF_GRID"] == nullptr) {
        return gcnew cli::array< RLSimion::RBF_GRIDRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::RBF_GRIDRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"VFA_RBF_GRID"])));
    }
}


inline RLSimion::RBF_GRIDRow::RBF_GRIDRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableRBF_GRID = (cli::safe_cast<RLSimion::RBF_GRIDDataTable^  >(this->Table));
}

inline System::Int32 RLSimion::RBF_GRIDRow::RBF_GRID_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableRBF_GRID->RBF_GRID_IdColumn]));
}
inline System::Void RLSimion::RBF_GRIDRow::RBF_GRID_Id::set(System::Int32 value) {
    this[this->tableRBF_GRID->RBF_GRID_IdColumn] = value;
}

inline System::Int32 RLSimion::RBF_GRIDRow::VFA_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableRBF_GRID->VFA_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VFA_Id\' in table \'RBF_GRID\' is DBNull.", e));
    }
}
inline System::Void RLSimion::RBF_GRIDRow::VFA_Id::set(System::Int32 value) {
    this[this->tableRBF_GRID->VFA_IdColumn] = value;
}

inline RLSimion::VFARow^  RLSimion::RBF_GRIDRow::VFARow::get() {
    return (cli::safe_cast<RLSimion::VFARow^  >(this->GetParentRow(this->Table->ParentRelations[L"VFA_RBF_GRID"])));
}
inline System::Void RLSimion::RBF_GRIDRow::VFARow::set(RLSimion::VFARow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"VFA_RBF_GRID"]);
}

inline ::System::Boolean RLSimion::RBF_GRIDRow::IsVFA_IdNull() {
    return this->IsNull(this->tableRBF_GRID->VFA_IdColumn);
}

inline ::System::Void RLSimion::RBF_GRIDRow::SetVFA_IdNull() {
    this[this->tableRBF_GRID->VFA_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::_state_grid_dimensionRow^  >^  RLSimion::RBF_GRIDRow::_Getstate_grid_dimensionRows() {
    if (this->Table->ChildRelations[L"RBF_GRID_state-grid-dimension"] == nullptr) {
        return gcnew cli::array< RLSimion::_state_grid_dimensionRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::_state_grid_dimensionRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"RBF_GRID_state-grid-dimension"])));
    }
}


inline RLSimion::_state_grid_dimensionRow::_state_grid_dimensionRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_state_grid_dimension = (cli::safe_cast<RLSimion::_state_grid_dimensionDataTable^  >(this->Table));
}

inline System::String^  RLSimion::_state_grid_dimensionRow::VARIABLE_NAME::get() {
    return (cli::safe_cast<::System::String^  >(this[this->table_state_grid_dimension->VARIABLE_NAMEColumn]));
}
inline System::Void RLSimion::_state_grid_dimensionRow::VARIABLE_NAME::set(System::String^  value) {
    this[this->table_state_grid_dimension->VARIABLE_NAMEColumn] = value;
}

inline System::Int64 RLSimion::_state_grid_dimensionRow::NUM_FEATURES::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->table_state_grid_dimension->NUM_FEATURESColumn]));
}
inline System::Void RLSimion::_state_grid_dimensionRow::NUM_FEATURES::set(System::Int64 value) {
    this[this->table_state_grid_dimension->NUM_FEATURESColumn] = value;
}

inline System::String^  RLSimion::_state_grid_dimensionRow::DISTRIBUTION::get() {
    return (cli::safe_cast<::System::String^  >(this[this->table_state_grid_dimension->DISTRIBUTIONColumn]));
}
inline System::Void RLSimion::_state_grid_dimensionRow::DISTRIBUTION::set(System::String^  value) {
    this[this->table_state_grid_dimension->DISTRIBUTIONColumn] = value;
}

inline System::Int32 RLSimion::_state_grid_dimensionRow::RBF_GRID_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_state_grid_dimension->RBF_GRID_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'RBF_GRID_Id\' in table \'state-grid-dimension\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::_state_grid_dimensionRow::RBF_GRID_Id::set(System::Int32 value) {
    this[this->table_state_grid_dimension->RBF_GRID_IdColumn] = value;
}

inline RLSimion::RBF_GRIDRow^  RLSimion::_state_grid_dimensionRow::RBF_GRIDRow::get() {
    return (cli::safe_cast<RLSimion::RBF_GRIDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"RBF_GRID_state-grid-dimension"])));
}
inline System::Void RLSimion::_state_grid_dimensionRow::RBF_GRIDRow::set(RLSimion::RBF_GRIDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"RBF_GRID_state-grid-dimension"]);
}

inline ::System::Boolean RLSimion::_state_grid_dimensionRow::IsRBF_GRID_IdNull() {
    return this->IsNull(this->table_state_grid_dimension->RBF_GRID_IdColumn);
}

inline ::System::Void RLSimion::_state_grid_dimensionRow::SetRBF_GRID_IdNull() {
    this[this->table_state_grid_dimension->RBF_GRID_IdColumn] = ::System::Convert::DBNull;
}


inline RLSimion::EXPLORATION_NOISERow::EXPLORATION_NOISERow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableEXPLORATION_NOISE = (cli::safe_cast<RLSimion::EXPLORATION_NOISEDataTable^  >(this->Table));
}

inline System::Int32 RLSimion::EXPLORATION_NOISERow::EXPLORATION_NOISE_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableEXPLORATION_NOISE->EXPLORATION_NOISE_IdColumn]));
}
inline System::Void RLSimion::EXPLORATION_NOISERow::EXPLORATION_NOISE_Id::set(System::Int32 value) {
    this[this->tableEXPLORATION_NOISE->EXPLORATION_NOISE_IdColumn] = value;
}

inline System::Int32 RLSimion::EXPLORATION_NOISERow::CACLA_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableEXPLORATION_NOISE->CACLA_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CACLA_Id\' in table \'EXPLORATION_NOISE\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::EXPLORATION_NOISERow::CACLA_Id::set(System::Int32 value) {
    this[this->tableEXPLORATION_NOISE->CACLA_IdColumn] = value;
}

inline System::Int32 RLSimion::EXPLORATION_NOISERow::RegularGradientActor_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableEXPLORATION_NOISE->RegularGradientActor_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'RegularGradientActor_Id\' in table \'EXPLORATION_NOISE\' is DB" 
L"Null.", 
            e));
    }
}
inline System::Void RLSimion::EXPLORATION_NOISERow::RegularGradientActor_Id::set(System::Int32 value) {
    this[this->tableEXPLORATION_NOISE->RegularGradientActor_IdColumn] = value;
}

inline System::Int32 RLSimion::EXPLORATION_NOISERow::IncrementalNaturalActor_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableEXPLORATION_NOISE->IncrementalNaturalActor_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'IncrementalNaturalActor_Id\' in table \'EXPLORATION_NOISE\' is" 
L" DBNull.", 
            e));
    }
}
inline System::Void RLSimion::EXPLORATION_NOISERow::IncrementalNaturalActor_Id::set(System::Int32 value) {
    this[this->tableEXPLORATION_NOISE->IncrementalNaturalActor_IdColumn] = value;
}

inline RLSimion::CACLARow^  RLSimion::EXPLORATION_NOISERow::CACLARow::get() {
    return (cli::safe_cast<RLSimion::CACLARow^  >(this->GetParentRow(this->Table->ParentRelations[L"CACLA_EXPLORATION_NOISE"])));
}
inline System::Void RLSimion::EXPLORATION_NOISERow::CACLARow::set(RLSimion::CACLARow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"CACLA_EXPLORATION_NOISE"]);
}

inline RLSimion::RegularGradientActorRow^  RLSimion::EXPLORATION_NOISERow::RegularGradientActorRow::get() {
    return (cli::safe_cast<RLSimion::RegularGradientActorRow^  >(this->GetParentRow(this->Table->ParentRelations[L"RegularGradientActor_EXPLORATION_NOISE"])));
}
inline System::Void RLSimion::EXPLORATION_NOISERow::RegularGradientActorRow::set(RLSimion::RegularGradientActorRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"RegularGradientActor_EXPLORATION_NOISE"]);
}

inline RLSimion::IncrementalNaturalActorRow^  RLSimion::EXPLORATION_NOISERow::IncrementalNaturalActorRow::get() {
    return (cli::safe_cast<RLSimion::IncrementalNaturalActorRow^  >(this->GetParentRow(this->Table->ParentRelations[L"IncrementalNaturalActor_EXPLORATION_NOISE"])));
}
inline System::Void RLSimion::EXPLORATION_NOISERow::IncrementalNaturalActorRow::set(RLSimion::IncrementalNaturalActorRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"IncrementalNaturalActor_EXPLORATION_NOISE"]);
}

inline ::System::Boolean RLSimion::EXPLORATION_NOISERow::IsCACLA_IdNull() {
    return this->IsNull(this->tableEXPLORATION_NOISE->CACLA_IdColumn);
}

inline ::System::Void RLSimion::EXPLORATION_NOISERow::SetCACLA_IdNull() {
    this[this->tableEXPLORATION_NOISE->CACLA_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::EXPLORATION_NOISERow::IsRegularGradientActor_IdNull() {
    return this->IsNull(this->tableEXPLORATION_NOISE->RegularGradientActor_IdColumn);
}

inline ::System::Void RLSimion::EXPLORATION_NOISERow::SetRegularGradientActor_IdNull() {
    this[this->tableEXPLORATION_NOISE->RegularGradientActor_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::EXPLORATION_NOISERow::IsIncrementalNaturalActor_IdNull() {
    return this->IsNull(this->tableEXPLORATION_NOISE->IncrementalNaturalActor_IdColumn);
}

inline ::System::Void RLSimion::EXPLORATION_NOISERow::SetIncrementalNaturalActor_IdNull() {
    this[this->tableEXPLORATION_NOISE->IncrementalNaturalActor_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::SIGMARow^  >^  RLSimion::EXPLORATION_NOISERow::GetSIGMARows() {
    if (this->Table->ChildRelations[L"EXPLORATION_NOISE_SIGMA"] == nullptr) {
        return gcnew cli::array< RLSimion::SIGMARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::SIGMARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"EXPLORATION_NOISE_SIGMA"])));
    }
}


inline RLSimion::SIGMARow::SIGMARow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableSIGMA = (cli::safe_cast<RLSimion::SIGMADataTable^  >(this->Table));
}

inline System::Decimal RLSimion::SIGMARow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableSIGMA->decimalColumn]));
}
inline System::Void RLSimion::SIGMARow::decimal::set(System::Decimal value) {
    this[this->tableSIGMA->decimalColumn] = value;
}

inline System::Int32 RLSimion::SIGMARow::SIGMA_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableSIGMA->SIGMA_IdColumn]));
}
inline System::Void RLSimion::SIGMARow::SIGMA_Id::set(System::Int32 value) {
    this[this->tableSIGMA->SIGMA_IdColumn] = value;
}

inline System::Int32 RLSimion::SIGMARow::EXPLORATION_NOISE_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableSIGMA->EXPLORATION_NOISE_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'EXPLORATION_NOISE_Id\' in table \'SIGMA\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::SIGMARow::EXPLORATION_NOISE_Id::set(System::Int32 value) {
    this[this->tableSIGMA->EXPLORATION_NOISE_IdColumn] = value;
}

inline RLSimion::EXPLORATION_NOISERow^  RLSimion::SIGMARow::EXPLORATION_NOISERow::get() {
    return (cli::safe_cast<RLSimion::EXPLORATION_NOISERow^  >(this->GetParentRow(this->Table->ParentRelations[L"EXPLORATION_NOISE_SIGMA"])));
}
inline System::Void RLSimion::SIGMARow::EXPLORATION_NOISERow::set(RLSimion::EXPLORATION_NOISERow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"EXPLORATION_NOISE_SIGMA"]);
}

inline ::System::Boolean RLSimion::SIGMARow::IsEXPLORATION_NOISE_IdNull() {
    return this->IsNull(this->tableSIGMA->EXPLORATION_NOISE_IdColumn);
}

inline ::System::Void RLSimion::SIGMARow::SetEXPLORATION_NOISE_IdNull() {
    this[this->tableSIGMA->EXPLORATION_NOISE_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::SIGMARow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"SIGMA_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"SIGMA_schedule"])));
    }
}


inline RLSimion::RegularGradientActorRow::RegularGradientActorRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableRegularGradientActor = (cli::safe_cast<RLSimion::RegularGradientActorDataTable^  >(this->Table));
}

inline System::String^  RLSimion::RegularGradientActorRow::ACTION::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableRegularGradientActor->ACTIONColumn]));
}
inline System::Void RLSimion::RegularGradientActorRow::ACTION::set(System::String^  value) {
    this[this->tableRegularGradientActor->ACTIONColumn] = value;
}

inline System::Int32 RLSimion::RegularGradientActorRow::RegularGradientActor_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableRegularGradientActor->RegularGradientActor_IdColumn]));
}
inline System::Void RLSimion::RegularGradientActorRow::RegularGradientActor_Id::set(System::Int32 value) {
    this[this->tableRegularGradientActor->RegularGradientActor_IdColumn] = value;
}

inline System::Int32 RLSimion::RegularGradientActorRow::_Single_Output_Policy_Learner_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableRegularGradientActor->_Single_Output_Policy_Learner_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Single-Output-Policy-Learner_Id\' in table \'RegularGradientA" 
L"ctor\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::RegularGradientActorRow::_Single_Output_Policy_Learner_Id::set(System::Int32 value) {
    this[this->tableRegularGradientActor->_Single_Output_Policy_Learner_IdColumn] = value;
}

inline RLSimion::_Single_Output_Policy_LearnerRow^  RLSimion::RegularGradientActorRow::_Single_Output_Policy_LearnerRow::get() {
    return (cli::safe_cast<RLSimion::_Single_Output_Policy_LearnerRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Single-Output-Policy-Learner_RegularGradientActor"])));
}
inline System::Void RLSimion::RegularGradientActorRow::_Single_Output_Policy_LearnerRow::set(RLSimion::_Single_Output_Policy_LearnerRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"Single-Output-Policy-Learner_RegularGradientActor"]);
}

inline ::System::Boolean RLSimion::RegularGradientActorRow::Is_Single_Output_Policy_Learner_IdNull() {
    return this->IsNull(this->tableRegularGradientActor->_Single_Output_Policy_Learner_IdColumn);
}

inline ::System::Void RLSimion::RegularGradientActorRow::Set_Single_Output_Policy_Learner_IdNull() {
    this[this->tableRegularGradientActor->_Single_Output_Policy_Learner_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::ETRACESRow^  >^  RLSimion::RegularGradientActorRow::GetETRACESRows() {
    if (this->Table->ChildRelations[L"RegularGradientActor_ETRACES"] == nullptr) {
        return gcnew cli::array< RLSimion::ETRACESRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::ETRACESRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"RegularGradientActor_ETRACES"])));
    }
}

inline cli::array< RLSimion::ALPHARow^  >^  RLSimion::RegularGradientActorRow::GetALPHARows() {
    if (this->Table->ChildRelations[L"RegularGradientActor_ALPHA"] == nullptr) {
        return gcnew cli::array< RLSimion::ALPHARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::ALPHARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"RegularGradientActor_ALPHA"])));
    }
}

inline cli::array< RLSimion::VFARow^  >^  RLSimion::RegularGradientActorRow::GetVFARows() {
    if (this->Table->ChildRelations[L"RegularGradientActor_VFA"] == nullptr) {
        return gcnew cli::array< RLSimion::VFARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::VFARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"RegularGradientActor_VFA"])));
    }
}

inline cli::array< RLSimion::EXPLORATION_NOISERow^  >^  RLSimion::RegularGradientActorRow::GetEXPLORATION_NOISERows() {
    if (this->Table->ChildRelations[L"RegularGradientActor_EXPLORATION_NOISE"] == nullptr) {
        return gcnew cli::array< RLSimion::EXPLORATION_NOISERow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::EXPLORATION_NOISERow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"RegularGradientActor_EXPLORATION_NOISE"])));
    }
}


inline RLSimion::IncrementalNaturalActorRow::IncrementalNaturalActorRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableIncrementalNaturalActor = (cli::safe_cast<RLSimion::IncrementalNaturalActorDataTable^  >(this->Table));
}

inline System::String^  RLSimion::IncrementalNaturalActorRow::ACTION::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableIncrementalNaturalActor->ACTIONColumn]));
}
inline System::Void RLSimion::IncrementalNaturalActorRow::ACTION::set(System::String^  value) {
    this[this->tableIncrementalNaturalActor->ACTIONColumn] = value;
}

inline System::Int32 RLSimion::IncrementalNaturalActorRow::IncrementalNaturalActor_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableIncrementalNaturalActor->IncrementalNaturalActor_IdColumn]));
}
inline System::Void RLSimion::IncrementalNaturalActorRow::IncrementalNaturalActor_Id::set(System::Int32 value) {
    this[this->tableIncrementalNaturalActor->IncrementalNaturalActor_IdColumn] = value;
}

inline System::Int32 RLSimion::IncrementalNaturalActorRow::_Single_Output_Policy_Learner_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableIncrementalNaturalActor->_Single_Output_Policy_Learner_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Single-Output-Policy-Learner_Id\' in table \'IncrementalNatur" 
L"alActor\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::IncrementalNaturalActorRow::_Single_Output_Policy_Learner_Id::set(System::Int32 value) {
    this[this->tableIncrementalNaturalActor->_Single_Output_Policy_Learner_IdColumn] = value;
}

inline RLSimion::_Single_Output_Policy_LearnerRow^  RLSimion::IncrementalNaturalActorRow::_Single_Output_Policy_LearnerRow::get() {
    return (cli::safe_cast<RLSimion::_Single_Output_Policy_LearnerRow^  >(this->GetParentRow(this->Table->ParentRelations[L"Single-Output-Policy-Learner_IncrementalNaturalActor"])));
}
inline System::Void RLSimion::IncrementalNaturalActorRow::_Single_Output_Policy_LearnerRow::set(RLSimion::_Single_Output_Policy_LearnerRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"Single-Output-Policy-Learner_IncrementalNaturalActor"]);
}

inline ::System::Boolean RLSimion::IncrementalNaturalActorRow::Is_Single_Output_Policy_Learner_IdNull() {
    return this->IsNull(this->tableIncrementalNaturalActor->_Single_Output_Policy_Learner_IdColumn);
}

inline ::System::Void RLSimion::IncrementalNaturalActorRow::Set_Single_Output_Policy_Learner_IdNull() {
    this[this->tableIncrementalNaturalActor->_Single_Output_Policy_Learner_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::ETRACESRow^  >^  RLSimion::IncrementalNaturalActorRow::GetETRACESRows() {
    if (this->Table->ChildRelations[L"IncrementalNaturalActor_ETRACES"] == nullptr) {
        return gcnew cli::array< RLSimion::ETRACESRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::ETRACESRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"IncrementalNaturalActor_ETRACES"])));
    }
}

inline cli::array< RLSimion::ALPHARow^  >^  RLSimion::IncrementalNaturalActorRow::GetALPHARows() {
    if (this->Table->ChildRelations[L"IncrementalNaturalActor_ALPHA"] == nullptr) {
        return gcnew cli::array< RLSimion::ALPHARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::ALPHARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"IncrementalNaturalActor_ALPHA"])));
    }
}

inline cli::array< RLSimion::VFARow^  >^  RLSimion::IncrementalNaturalActorRow::GetVFARows() {
    if (this->Table->ChildRelations[L"IncrementalNaturalActor_VFA"] == nullptr) {
        return gcnew cli::array< RLSimion::VFARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::VFARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"IncrementalNaturalActor_VFA"])));
    }
}

inline cli::array< RLSimion::EXPLORATION_NOISERow^  >^  RLSimion::IncrementalNaturalActorRow::GetEXPLORATION_NOISERows() {
    if (this->Table->ChildRelations[L"IncrementalNaturalActor_EXPLORATION_NOISE"] == nullptr) {
        return gcnew cli::array< RLSimion::EXPLORATION_NOISERow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::EXPLORATION_NOISERow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"IncrementalNaturalActor_EXPLORATION_NOISE"])));
    }
}


inline RLSimion::PIDRow::PIDRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablePID = (cli::safe_cast<RLSimion::PIDDataTable^  >(this->Table));
}

inline System::String^  RLSimion::PIDRow::ERROR_VARIABLE::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tablePID->ERROR_VARIABLEColumn]));
}
inline System::Void RLSimion::PIDRow::ERROR_VARIABLE::set(System::String^  value) {
    this[this->tablePID->ERROR_VARIABLEColumn] = value;
}

inline System::Int32 RLSimion::PIDRow::PID_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablePID->PID_IdColumn]));
}
inline System::Void RLSimion::PIDRow::PID_Id::set(System::Int32 value) {
    this[this->tablePID->PID_IdColumn] = value;
}

inline System::Int32 RLSimion::PIDRow::ACTOR_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablePID->ACTOR_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ACTOR_Id\' in table \'PID\' is DBNull.", e));
    }
}
inline System::Void RLSimion::PIDRow::ACTOR_Id::set(System::Int32 value) {
    this[this->tablePID->ACTOR_IdColumn] = value;
}

inline System::Int32 RLSimion::PIDRow::CONTROLLER_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablePID->CONTROLLER_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CONTROLLER_Id\' in table \'PID\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::PIDRow::CONTROLLER_Id::set(System::Int32 value) {
    this[this->tablePID->CONTROLLER_IdColumn] = value;
}

inline RLSimion::ACTORRow^  RLSimion::PIDRow::ACTORRow::get() {
    return (cli::safe_cast<RLSimion::ACTORRow^  >(this->GetParentRow(this->Table->ParentRelations[L"ACTOR_PID"])));
}
inline System::Void RLSimion::PIDRow::ACTORRow::set(RLSimion::ACTORRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"ACTOR_PID"]);
}

inline RLSimion::CONTROLLERRow^  RLSimion::PIDRow::CONTROLLERRow::get() {
    return (cli::safe_cast<RLSimion::CONTROLLERRow^  >(this->GetParentRow(this->Table->ParentRelations[L"CONTROLLER_PID"])));
}
inline System::Void RLSimion::PIDRow::CONTROLLERRow::set(RLSimion::CONTROLLERRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"CONTROLLER_PID"]);
}

inline ::System::Boolean RLSimion::PIDRow::IsACTOR_IdNull() {
    return this->IsNull(this->tablePID->ACTOR_IdColumn);
}

inline ::System::Void RLSimion::PIDRow::SetACTOR_IdNull() {
    this[this->tablePID->ACTOR_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::PIDRow::IsCONTROLLER_IdNull() {
    return this->IsNull(this->tablePID->CONTROLLER_IdColumn);
}

inline ::System::Void RLSimion::PIDRow::SetCONTROLLER_IdNull() {
    this[this->tablePID->CONTROLLER_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::KPRow^  >^  RLSimion::PIDRow::GetKPRows() {
    if (this->Table->ChildRelations[L"PID_KP"] == nullptr) {
        return gcnew cli::array< RLSimion::KPRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::KPRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"PID_KP"])));
    }
}

inline cli::array< RLSimion::KIRow^  >^  RLSimion::PIDRow::GetKIRows() {
    if (this->Table->ChildRelations[L"PID_KI"] == nullptr) {
        return gcnew cli::array< RLSimion::KIRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::KIRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"PID_KI"])));
    }
}

inline cli::array< RLSimion::KDRow^  >^  RLSimion::PIDRow::GetKDRows() {
    if (this->Table->ChildRelations[L"PID_KD"] == nullptr) {
        return gcnew cli::array< RLSimion::KDRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::KDRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"PID_KD"])));
    }
}


inline RLSimion::KPRow::KPRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableKP = (cli::safe_cast<RLSimion::KPDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::KPRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableKP->decimalColumn]));
}
inline System::Void RLSimion::KPRow::decimal::set(System::Decimal value) {
    this[this->tableKP->decimalColumn] = value;
}

inline System::Int32 RLSimion::KPRow::KP_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableKP->KP_IdColumn]));
}
inline System::Void RLSimion::KPRow::KP_Id::set(System::Int32 value) {
    this[this->tableKP->KP_IdColumn] = value;
}

inline System::Int32 RLSimion::KPRow::PID_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableKP->PID_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PID_Id\' in table \'KP\' is DBNull.", e));
    }
}
inline System::Void RLSimion::KPRow::PID_Id::set(System::Int32 value) {
    this[this->tableKP->PID_IdColumn] = value;
}

inline System::Int32 RLSimion::KPRow::vidal_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableKP->vidal_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'vidal_Id\' in table \'KP\' is DBNull.", e));
    }
}
inline System::Void RLSimion::KPRow::vidal_Id::set(System::Int32 value) {
    this[this->tableKP->vidal_IdColumn] = value;
}

inline System::Int32 RLSimion::KPRow::boukhezzar_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableKP->boukhezzar_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'boukhezzar_Id\' in table \'KP\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::KPRow::boukhezzar_Id::set(System::Int32 value) {
    this[this->tableKP->boukhezzar_IdColumn] = value;
}

inline RLSimion::PIDRow^  RLSimion::KPRow::PIDRow::get() {
    return (cli::safe_cast<RLSimion::PIDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"PID_KP"])));
}
inline System::Void RLSimion::KPRow::PIDRow::set(RLSimion::PIDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"PID_KP"]);
}

inline RLSimion::vidalRow^  RLSimion::KPRow::vidalRow::get() {
    return (cli::safe_cast<RLSimion::vidalRow^  >(this->GetParentRow(this->Table->ParentRelations[L"vidal_KP"])));
}
inline System::Void RLSimion::KPRow::vidalRow::set(RLSimion::vidalRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"vidal_KP"]);
}

inline RLSimion::boukhezzarRow^  RLSimion::KPRow::boukhezzarRow::get() {
    return (cli::safe_cast<RLSimion::boukhezzarRow^  >(this->GetParentRow(this->Table->ParentRelations[L"boukhezzar_KP"])));
}
inline System::Void RLSimion::KPRow::boukhezzarRow::set(RLSimion::boukhezzarRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"boukhezzar_KP"]);
}

inline ::System::Boolean RLSimion::KPRow::IsPID_IdNull() {
    return this->IsNull(this->tableKP->PID_IdColumn);
}

inline ::System::Void RLSimion::KPRow::SetPID_IdNull() {
    this[this->tableKP->PID_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::KPRow::Isvidal_IdNull() {
    return this->IsNull(this->tableKP->vidal_IdColumn);
}

inline ::System::Void RLSimion::KPRow::Setvidal_IdNull() {
    this[this->tableKP->vidal_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::KPRow::Isboukhezzar_IdNull() {
    return this->IsNull(this->tableKP->boukhezzar_IdColumn);
}

inline ::System::Void RLSimion::KPRow::Setboukhezzar_IdNull() {
    this[this->tableKP->boukhezzar_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::KPRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"KP_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"KP_schedule"])));
    }
}


inline RLSimion::KIRow::KIRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableKI = (cli::safe_cast<RLSimion::KIDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::KIRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableKI->decimalColumn]));
}
inline System::Void RLSimion::KIRow::decimal::set(System::Decimal value) {
    this[this->tableKI->decimalColumn] = value;
}

inline System::Int32 RLSimion::KIRow::KI_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableKI->KI_IdColumn]));
}
inline System::Void RLSimion::KIRow::KI_Id::set(System::Int32 value) {
    this[this->tableKI->KI_IdColumn] = value;
}

inline System::Int32 RLSimion::KIRow::PID_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableKI->PID_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PID_Id\' in table \'KI\' is DBNull.", e));
    }
}
inline System::Void RLSimion::KIRow::PID_Id::set(System::Int32 value) {
    this[this->tableKI->PID_IdColumn] = value;
}

inline System::Int32 RLSimion::KIRow::vidal_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableKI->vidal_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'vidal_Id\' in table \'KI\' is DBNull.", e));
    }
}
inline System::Void RLSimion::KIRow::vidal_Id::set(System::Int32 value) {
    this[this->tableKI->vidal_IdColumn] = value;
}

inline System::Int32 RLSimion::KIRow::boukhezzar_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableKI->boukhezzar_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'boukhezzar_Id\' in table \'KI\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::KIRow::boukhezzar_Id::set(System::Int32 value) {
    this[this->tableKI->boukhezzar_IdColumn] = value;
}

inline RLSimion::PIDRow^  RLSimion::KIRow::PIDRow::get() {
    return (cli::safe_cast<RLSimion::PIDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"PID_KI"])));
}
inline System::Void RLSimion::KIRow::PIDRow::set(RLSimion::PIDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"PID_KI"]);
}

inline RLSimion::vidalRow^  RLSimion::KIRow::vidalRow::get() {
    return (cli::safe_cast<RLSimion::vidalRow^  >(this->GetParentRow(this->Table->ParentRelations[L"vidal_KI"])));
}
inline System::Void RLSimion::KIRow::vidalRow::set(RLSimion::vidalRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"vidal_KI"]);
}

inline RLSimion::boukhezzarRow^  RLSimion::KIRow::boukhezzarRow::get() {
    return (cli::safe_cast<RLSimion::boukhezzarRow^  >(this->GetParentRow(this->Table->ParentRelations[L"boukhezzar_KI"])));
}
inline System::Void RLSimion::KIRow::boukhezzarRow::set(RLSimion::boukhezzarRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"boukhezzar_KI"]);
}

inline ::System::Boolean RLSimion::KIRow::IsPID_IdNull() {
    return this->IsNull(this->tableKI->PID_IdColumn);
}

inline ::System::Void RLSimion::KIRow::SetPID_IdNull() {
    this[this->tableKI->PID_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::KIRow::Isvidal_IdNull() {
    return this->IsNull(this->tableKI->vidal_IdColumn);
}

inline ::System::Void RLSimion::KIRow::Setvidal_IdNull() {
    this[this->tableKI->vidal_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::KIRow::Isboukhezzar_IdNull() {
    return this->IsNull(this->tableKI->boukhezzar_IdColumn);
}

inline ::System::Void RLSimion::KIRow::Setboukhezzar_IdNull() {
    this[this->tableKI->boukhezzar_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::KIRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"KI_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"KI_schedule"])));
    }
}


inline RLSimion::KDRow::KDRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableKD = (cli::safe_cast<RLSimion::KDDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::KDRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableKD->decimalColumn]));
}
inline System::Void RLSimion::KDRow::decimal::set(System::Decimal value) {
    this[this->tableKD->decimalColumn] = value;
}

inline System::Int32 RLSimion::KDRow::KD_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableKD->KD_IdColumn]));
}
inline System::Void RLSimion::KDRow::KD_Id::set(System::Int32 value) {
    this[this->tableKD->KD_IdColumn] = value;
}

inline System::Int32 RLSimion::KDRow::PID_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableKD->PID_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PID_Id\' in table \'KD\' is DBNull.", e));
    }
}
inline System::Void RLSimion::KDRow::PID_Id::set(System::Int32 value) {
    this[this->tableKD->PID_IdColumn] = value;
}

inline RLSimion::PIDRow^  RLSimion::KDRow::PIDRow::get() {
    return (cli::safe_cast<RLSimion::PIDRow^  >(this->GetParentRow(this->Table->ParentRelations[L"PID_KD"])));
}
inline System::Void RLSimion::KDRow::PIDRow::set(RLSimion::PIDRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"PID_KD"]);
}

inline ::System::Boolean RLSimion::KDRow::IsPID_IdNull() {
    return this->IsNull(this->tableKD->PID_IdColumn);
}

inline ::System::Void RLSimion::KDRow::SetPID_IdNull() {
    this[this->tableKD->PID_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::KDRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"KD_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"KD_schedule"])));
    }
}


inline RLSimion::LQRRow::LQRRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableLQR = (cli::safe_cast<RLSimion::LQRDataTable^  >(this->Table));
}

inline System::Int32 RLSimion::LQRRow::LQR_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableLQR->LQR_IdColumn]));
}
inline System::Void RLSimion::LQRRow::LQR_Id::set(System::Int32 value) {
    this[this->tableLQR->LQR_IdColumn] = value;
}

inline System::Int32 RLSimion::LQRRow::ACTOR_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableLQR->ACTOR_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ACTOR_Id\' in table \'LQR\' is DBNull.", e));
    }
}
inline System::Void RLSimion::LQRRow::ACTOR_Id::set(System::Int32 value) {
    this[this->tableLQR->ACTOR_IdColumn] = value;
}

inline System::Int32 RLSimion::LQRRow::CONTROLLER_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableLQR->CONTROLLER_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CONTROLLER_Id\' in table \'LQR\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::LQRRow::CONTROLLER_Id::set(System::Int32 value) {
    this[this->tableLQR->CONTROLLER_IdColumn] = value;
}

inline RLSimion::ACTORRow^  RLSimion::LQRRow::ACTORRow::get() {
    return (cli::safe_cast<RLSimion::ACTORRow^  >(this->GetParentRow(this->Table->ParentRelations[L"ACTOR_LQR"])));
}
inline System::Void RLSimion::LQRRow::ACTORRow::set(RLSimion::ACTORRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"ACTOR_LQR"]);
}

inline RLSimion::CONTROLLERRow^  RLSimion::LQRRow::CONTROLLERRow::get() {
    return (cli::safe_cast<RLSimion::CONTROLLERRow^  >(this->GetParentRow(this->Table->ParentRelations[L"CONTROLLER_LQR"])));
}
inline System::Void RLSimion::LQRRow::CONTROLLERRow::set(RLSimion::CONTROLLERRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"CONTROLLER_LQR"]);
}

inline ::System::Boolean RLSimion::LQRRow::IsACTOR_IdNull() {
    return this->IsNull(this->tableLQR->ACTOR_IdColumn);
}

inline ::System::Void RLSimion::LQRRow::SetACTOR_IdNull() {
    this[this->tableLQR->ACTOR_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::LQRRow::IsCONTROLLER_IdNull() {
    return this->IsNull(this->tableLQR->CONTROLLER_IdColumn);
}

inline ::System::Void RLSimion::LQRRow::SetCONTROLLER_IdNull() {
    this[this->tableLQR->CONTROLLER_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::_LQR_GAINRow^  >^  RLSimion::LQRRow::_GetLQR_GAINRows() {
    if (this->Table->ChildRelations[L"LQR_LQR-GAIN"] == nullptr) {
        return gcnew cli::array< RLSimion::_LQR_GAINRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::_LQR_GAINRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"LQR_LQR-GAIN"])));
    }
}


inline RLSimion::_LQR_GAINRow::_LQR_GAINRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_LQR_GAIN = (cli::safe_cast<RLSimion::_LQR_GAINDataTable^  >(this->Table));
}

inline System::String^  RLSimion::_LQR_GAINRow::_state_variable::get() {
    return (cli::safe_cast<::System::String^  >(this[this->table_LQR_GAIN->_state_variableColumn]));
}
inline System::Void RLSimion::_LQR_GAINRow::_state_variable::set(System::String^  value) {
    this[this->table_LQR_GAIN->_state_variableColumn] = value;
}

inline System::Decimal RLSimion::_LQR_GAINRow::gain::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->table_LQR_GAIN->gainColumn]));
}
inline System::Void RLSimion::_LQR_GAINRow::gain::set(System::Decimal value) {
    this[this->table_LQR_GAIN->gainColumn] = value;
}

inline System::Int32 RLSimion::_LQR_GAINRow::LQR_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_LQR_GAIN->LQR_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'LQR_Id\' in table \'LQR-GAIN\' is DBNull.", e));
    }
}
inline System::Void RLSimion::_LQR_GAINRow::LQR_Id::set(System::Int32 value) {
    this[this->table_LQR_GAIN->LQR_IdColumn] = value;
}

inline RLSimion::LQRRow^  RLSimion::_LQR_GAINRow::LQRRow::get() {
    return (cli::safe_cast<RLSimion::LQRRow^  >(this->GetParentRow(this->Table->ParentRelations[L"LQR_LQR-GAIN"])));
}
inline System::Void RLSimion::_LQR_GAINRow::LQRRow::set(RLSimion::LQRRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"LQR_LQR-GAIN"]);
}

inline ::System::Boolean RLSimion::_LQR_GAINRow::IsLQR_IdNull() {
    return this->IsNull(this->table_LQR_GAIN->LQR_IdColumn);
}

inline ::System::Void RLSimion::_LQR_GAINRow::SetLQR_IdNull() {
    this[this->table_LQR_GAIN->LQR_IdColumn] = ::System::Convert::DBNull;
}


inline RLSimion::jonkmanRow::jonkmanRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablejonkman = (cli::safe_cast<RLSimion::jonkmanDataTable^  >(this->Table));
}

inline System::Int32 RLSimion::jonkmanRow::jonkman_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablejonkman->jonkman_IdColumn]));
}
inline System::Void RLSimion::jonkmanRow::jonkman_Id::set(System::Int32 value) {
    this[this->tablejonkman->jonkman_IdColumn] = value;
}

inline System::Int32 RLSimion::jonkmanRow::ACTOR_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablejonkman->ACTOR_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ACTOR_Id\' in table \'jonkman\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::jonkmanRow::ACTOR_Id::set(System::Int32 value) {
    this[this->tablejonkman->ACTOR_IdColumn] = value;
}

inline System::Int32 RLSimion::jonkmanRow::CONTROLLER_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablejonkman->CONTROLLER_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CONTROLLER_Id\' in table \'jonkman\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::jonkmanRow::CONTROLLER_Id::set(System::Int32 value) {
    this[this->tablejonkman->CONTROLLER_IdColumn] = value;
}

inline RLSimion::ACTORRow^  RLSimion::jonkmanRow::ACTORRow::get() {
    return (cli::safe_cast<RLSimion::ACTORRow^  >(this->GetParentRow(this->Table->ParentRelations[L"ACTOR_jonkman"])));
}
inline System::Void RLSimion::jonkmanRow::ACTORRow::set(RLSimion::ACTORRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"ACTOR_jonkman"]);
}

inline RLSimion::CONTROLLERRow^  RLSimion::jonkmanRow::CONTROLLERRow::get() {
    return (cli::safe_cast<RLSimion::CONTROLLERRow^  >(this->GetParentRow(this->Table->ParentRelations[L"CONTROLLER_jonkman"])));
}
inline System::Void RLSimion::jonkmanRow::CONTROLLERRow::set(RLSimion::CONTROLLERRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"CONTROLLER_jonkman"]);
}

inline ::System::Boolean RLSimion::jonkmanRow::IsACTOR_IdNull() {
    return this->IsNull(this->tablejonkman->ACTOR_IdColumn);
}

inline ::System::Void RLSimion::jonkmanRow::SetACTOR_IdNull() {
    this[this->tablejonkman->ACTOR_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::jonkmanRow::IsCONTROLLER_IdNull() {
    return this->IsNull(this->tablejonkman->CONTROLLER_IdColumn);
}

inline ::System::Void RLSimion::jonkmanRow::SetCONTROLLER_IdNull() {
    this[this->tablejonkman->CONTROLLER_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::VS_RtGnSpRow^  >^  RLSimion::jonkmanRow::GetVS_RtGnSpRows() {
    if (this->Table->ChildRelations[L"jonkman_VS_RtGnSp"] == nullptr) {
        return gcnew cli::array< RLSimion::VS_RtGnSpRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::VS_RtGnSpRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_VS_RtGnSp"])));
    }
}

inline cli::array< RLSimion::VS_SlPcRow^  >^  RLSimion::jonkmanRow::GetVS_SlPcRows() {
    if (this->Table->ChildRelations[L"jonkman_VS_SlPc"] == nullptr) {
        return gcnew cli::array< RLSimion::VS_SlPcRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::VS_SlPcRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_VS_SlPc"])));
    }
}

inline cli::array< RLSimion::VS_Rgn2KRow^  >^  RLSimion::jonkmanRow::GetVS_Rgn2KRows() {
    if (this->Table->ChildRelations[L"jonkman_VS_Rgn2K"] == nullptr) {
        return gcnew cli::array< RLSimion::VS_Rgn2KRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::VS_Rgn2KRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_VS_Rgn2K"])));
    }
}

inline cli::array< RLSimion::VS_Rgn2SpRow^  >^  RLSimion::jonkmanRow::GetVS_Rgn2SpRows() {
    if (this->Table->ChildRelations[L"jonkman_VS_Rgn2Sp"] == nullptr) {
        return gcnew cli::array< RLSimion::VS_Rgn2SpRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::VS_Rgn2SpRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_VS_Rgn2Sp"])));
    }
}

inline cli::array< RLSimion::VS_CtInSpRow^  >^  RLSimion::jonkmanRow::GetVS_CtInSpRows() {
    if (this->Table->ChildRelations[L"jonkman_VS_CtInSp"] == nullptr) {
        return gcnew cli::array< RLSimion::VS_CtInSpRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::VS_CtInSpRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_VS_CtInSp"])));
    }
}

inline cli::array< RLSimion::VS_RtPwrRow^  >^  RLSimion::jonkmanRow::GetVS_RtPwrRows() {
    if (this->Table->ChildRelations[L"jonkman_VS_RtPwr"] == nullptr) {
        return gcnew cli::array< RLSimion::VS_RtPwrRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::VS_RtPwrRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_VS_RtPwr"])));
    }
}

inline cli::array< RLSimion::VS_Rgn3MPRow^  >^  RLSimion::jonkmanRow::GetVS_Rgn3MPRows() {
    if (this->Table->ChildRelations[L"jonkman_VS_Rgn3MP"] == nullptr) {
        return gcnew cli::array< RLSimion::VS_Rgn3MPRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::VS_Rgn3MPRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_VS_Rgn3MP"])));
    }
}

inline cli::array< RLSimion::PC_KIRow^  >^  RLSimion::jonkmanRow::GetPC_KIRows() {
    if (this->Table->ChildRelations[L"jonkman_PC_KI"] == nullptr) {
        return gcnew cli::array< RLSimion::PC_KIRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::PC_KIRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_PC_KI"])));
    }
}

inline cli::array< RLSimion::PC_KKRow^  >^  RLSimion::jonkmanRow::GetPC_KKRows() {
    if (this->Table->ChildRelations[L"jonkman_PC_KK"] == nullptr) {
        return gcnew cli::array< RLSimion::PC_KKRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::PC_KKRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_PC_KK"])));
    }
}

inline cli::array< RLSimion::PC_KPRow^  >^  RLSimion::jonkmanRow::GetPC_KPRows() {
    if (this->Table->ChildRelations[L"jonkman_PC_KP"] == nullptr) {
        return gcnew cli::array< RLSimion::PC_KPRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::PC_KPRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_PC_KP"])));
    }
}

inline cli::array< RLSimion::PC_RefSpdRow^  >^  RLSimion::jonkmanRow::GetPC_RefSpdRows() {
    if (this->Table->ChildRelations[L"jonkman_PC_RefSpd"] == nullptr) {
        return gcnew cli::array< RLSimion::PC_RefSpdRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::PC_RefSpdRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"jonkman_PC_RefSpd"])));
    }
}


inline RLSimion::VS_RtGnSpRow::VS_RtGnSpRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableVS_RtGnSp = (cli::safe_cast<RLSimion::VS_RtGnSpDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::VS_RtGnSpRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableVS_RtGnSp->decimalColumn]));
}
inline System::Void RLSimion::VS_RtGnSpRow::decimal::set(System::Decimal value) {
    this[this->tableVS_RtGnSp->decimalColumn] = value;
}

inline System::Int32 RLSimion::VS_RtGnSpRow::VS_RtGnSp_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableVS_RtGnSp->VS_RtGnSp_IdColumn]));
}
inline System::Void RLSimion::VS_RtGnSpRow::VS_RtGnSp_Id::set(System::Int32 value) {
    this[this->tableVS_RtGnSp->VS_RtGnSp_IdColumn] = value;
}

inline System::Int32 RLSimion::VS_RtGnSpRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableVS_RtGnSp->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'VS_RtGnSp\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::VS_RtGnSpRow::jonkman_Id::set(System::Int32 value) {
    this[this->tableVS_RtGnSp->jonkman_IdColumn] = value;
}

inline RLSimion::jonkmanRow^  RLSimion::VS_RtGnSpRow::jonkmanRow::get() {
    return (cli::safe_cast<RLSimion::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_VS_RtGnSp"])));
}
inline System::Void RLSimion::VS_RtGnSpRow::jonkmanRow::set(RLSimion::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_VS_RtGnSp"]);
}

inline ::System::Boolean RLSimion::VS_RtGnSpRow::Isjonkman_IdNull() {
    return this->IsNull(this->tableVS_RtGnSp->jonkman_IdColumn);
}

inline ::System::Void RLSimion::VS_RtGnSpRow::Setjonkman_IdNull() {
    this[this->tableVS_RtGnSp->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::VS_RtGnSpRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"VS_RtGnSp_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"VS_RtGnSp_schedule"])));
    }
}


inline RLSimion::VS_SlPcRow::VS_SlPcRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableVS_SlPc = (cli::safe_cast<RLSimion::VS_SlPcDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::VS_SlPcRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableVS_SlPc->decimalColumn]));
}
inline System::Void RLSimion::VS_SlPcRow::decimal::set(System::Decimal value) {
    this[this->tableVS_SlPc->decimalColumn] = value;
}

inline System::Int32 RLSimion::VS_SlPcRow::VS_SlPc_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableVS_SlPc->VS_SlPc_IdColumn]));
}
inline System::Void RLSimion::VS_SlPcRow::VS_SlPc_Id::set(System::Int32 value) {
    this[this->tableVS_SlPc->VS_SlPc_IdColumn] = value;
}

inline System::Int32 RLSimion::VS_SlPcRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableVS_SlPc->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'VS_SlPc\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::VS_SlPcRow::jonkman_Id::set(System::Int32 value) {
    this[this->tableVS_SlPc->jonkman_IdColumn] = value;
}

inline RLSimion::jonkmanRow^  RLSimion::VS_SlPcRow::jonkmanRow::get() {
    return (cli::safe_cast<RLSimion::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_VS_SlPc"])));
}
inline System::Void RLSimion::VS_SlPcRow::jonkmanRow::set(RLSimion::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_VS_SlPc"]);
}

inline ::System::Boolean RLSimion::VS_SlPcRow::Isjonkman_IdNull() {
    return this->IsNull(this->tableVS_SlPc->jonkman_IdColumn);
}

inline ::System::Void RLSimion::VS_SlPcRow::Setjonkman_IdNull() {
    this[this->tableVS_SlPc->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::VS_SlPcRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"VS_SlPc_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"VS_SlPc_schedule"])));
    }
}


inline RLSimion::VS_Rgn2KRow::VS_Rgn2KRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableVS_Rgn2K = (cli::safe_cast<RLSimion::VS_Rgn2KDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::VS_Rgn2KRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableVS_Rgn2K->decimalColumn]));
}
inline System::Void RLSimion::VS_Rgn2KRow::decimal::set(System::Decimal value) {
    this[this->tableVS_Rgn2K->decimalColumn] = value;
}

inline System::Int32 RLSimion::VS_Rgn2KRow::VS_Rgn2K_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableVS_Rgn2K->VS_Rgn2K_IdColumn]));
}
inline System::Void RLSimion::VS_Rgn2KRow::VS_Rgn2K_Id::set(System::Int32 value) {
    this[this->tableVS_Rgn2K->VS_Rgn2K_IdColumn] = value;
}

inline System::Int32 RLSimion::VS_Rgn2KRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableVS_Rgn2K->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'VS_Rgn2K\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::VS_Rgn2KRow::jonkman_Id::set(System::Int32 value) {
    this[this->tableVS_Rgn2K->jonkman_IdColumn] = value;
}

inline RLSimion::jonkmanRow^  RLSimion::VS_Rgn2KRow::jonkmanRow::get() {
    return (cli::safe_cast<RLSimion::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_VS_Rgn2K"])));
}
inline System::Void RLSimion::VS_Rgn2KRow::jonkmanRow::set(RLSimion::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_VS_Rgn2K"]);
}

inline ::System::Boolean RLSimion::VS_Rgn2KRow::Isjonkman_IdNull() {
    return this->IsNull(this->tableVS_Rgn2K->jonkman_IdColumn);
}

inline ::System::Void RLSimion::VS_Rgn2KRow::Setjonkman_IdNull() {
    this[this->tableVS_Rgn2K->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::VS_Rgn2KRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"VS_Rgn2K_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"VS_Rgn2K_schedule"])));
    }
}


inline RLSimion::VS_Rgn2SpRow::VS_Rgn2SpRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableVS_Rgn2Sp = (cli::safe_cast<RLSimion::VS_Rgn2SpDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::VS_Rgn2SpRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableVS_Rgn2Sp->decimalColumn]));
}
inline System::Void RLSimion::VS_Rgn2SpRow::decimal::set(System::Decimal value) {
    this[this->tableVS_Rgn2Sp->decimalColumn] = value;
}

inline System::Int32 RLSimion::VS_Rgn2SpRow::VS_Rgn2Sp_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableVS_Rgn2Sp->VS_Rgn2Sp_IdColumn]));
}
inline System::Void RLSimion::VS_Rgn2SpRow::VS_Rgn2Sp_Id::set(System::Int32 value) {
    this[this->tableVS_Rgn2Sp->VS_Rgn2Sp_IdColumn] = value;
}

inline System::Int32 RLSimion::VS_Rgn2SpRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableVS_Rgn2Sp->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'VS_Rgn2Sp\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::VS_Rgn2SpRow::jonkman_Id::set(System::Int32 value) {
    this[this->tableVS_Rgn2Sp->jonkman_IdColumn] = value;
}

inline RLSimion::jonkmanRow^  RLSimion::VS_Rgn2SpRow::jonkmanRow::get() {
    return (cli::safe_cast<RLSimion::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_VS_Rgn2Sp"])));
}
inline System::Void RLSimion::VS_Rgn2SpRow::jonkmanRow::set(RLSimion::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_VS_Rgn2Sp"]);
}

inline ::System::Boolean RLSimion::VS_Rgn2SpRow::Isjonkman_IdNull() {
    return this->IsNull(this->tableVS_Rgn2Sp->jonkman_IdColumn);
}

inline ::System::Void RLSimion::VS_Rgn2SpRow::Setjonkman_IdNull() {
    this[this->tableVS_Rgn2Sp->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::VS_Rgn2SpRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"VS_Rgn2Sp_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"VS_Rgn2Sp_schedule"])));
    }
}


inline RLSimion::VS_CtInSpRow::VS_CtInSpRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableVS_CtInSp = (cli::safe_cast<RLSimion::VS_CtInSpDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::VS_CtInSpRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableVS_CtInSp->decimalColumn]));
}
inline System::Void RLSimion::VS_CtInSpRow::decimal::set(System::Decimal value) {
    this[this->tableVS_CtInSp->decimalColumn] = value;
}

inline System::Int32 RLSimion::VS_CtInSpRow::VS_CtInSp_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableVS_CtInSp->VS_CtInSp_IdColumn]));
}
inline System::Void RLSimion::VS_CtInSpRow::VS_CtInSp_Id::set(System::Int32 value) {
    this[this->tableVS_CtInSp->VS_CtInSp_IdColumn] = value;
}

inline System::Int32 RLSimion::VS_CtInSpRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableVS_CtInSp->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'VS_CtInSp\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::VS_CtInSpRow::jonkman_Id::set(System::Int32 value) {
    this[this->tableVS_CtInSp->jonkman_IdColumn] = value;
}

inline RLSimion::jonkmanRow^  RLSimion::VS_CtInSpRow::jonkmanRow::get() {
    return (cli::safe_cast<RLSimion::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_VS_CtInSp"])));
}
inline System::Void RLSimion::VS_CtInSpRow::jonkmanRow::set(RLSimion::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_VS_CtInSp"]);
}

inline ::System::Boolean RLSimion::VS_CtInSpRow::Isjonkman_IdNull() {
    return this->IsNull(this->tableVS_CtInSp->jonkman_IdColumn);
}

inline ::System::Void RLSimion::VS_CtInSpRow::Setjonkman_IdNull() {
    this[this->tableVS_CtInSp->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::VS_CtInSpRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"VS_CtInSp_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"VS_CtInSp_schedule"])));
    }
}


inline RLSimion::VS_RtPwrRow::VS_RtPwrRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableVS_RtPwr = (cli::safe_cast<RLSimion::VS_RtPwrDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::VS_RtPwrRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableVS_RtPwr->decimalColumn]));
}
inline System::Void RLSimion::VS_RtPwrRow::decimal::set(System::Decimal value) {
    this[this->tableVS_RtPwr->decimalColumn] = value;
}

inline System::Int32 RLSimion::VS_RtPwrRow::VS_RtPwr_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableVS_RtPwr->VS_RtPwr_IdColumn]));
}
inline System::Void RLSimion::VS_RtPwrRow::VS_RtPwr_Id::set(System::Int32 value) {
    this[this->tableVS_RtPwr->VS_RtPwr_IdColumn] = value;
}

inline System::Int32 RLSimion::VS_RtPwrRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableVS_RtPwr->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'VS_RtPwr\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::VS_RtPwrRow::jonkman_Id::set(System::Int32 value) {
    this[this->tableVS_RtPwr->jonkman_IdColumn] = value;
}

inline RLSimion::jonkmanRow^  RLSimion::VS_RtPwrRow::jonkmanRow::get() {
    return (cli::safe_cast<RLSimion::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_VS_RtPwr"])));
}
inline System::Void RLSimion::VS_RtPwrRow::jonkmanRow::set(RLSimion::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_VS_RtPwr"]);
}

inline ::System::Boolean RLSimion::VS_RtPwrRow::Isjonkman_IdNull() {
    return this->IsNull(this->tableVS_RtPwr->jonkman_IdColumn);
}

inline ::System::Void RLSimion::VS_RtPwrRow::Setjonkman_IdNull() {
    this[this->tableVS_RtPwr->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::VS_RtPwrRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"VS_RtPwr_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"VS_RtPwr_schedule"])));
    }
}


inline RLSimion::VS_Rgn3MPRow::VS_Rgn3MPRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableVS_Rgn3MP = (cli::safe_cast<RLSimion::VS_Rgn3MPDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::VS_Rgn3MPRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableVS_Rgn3MP->decimalColumn]));
}
inline System::Void RLSimion::VS_Rgn3MPRow::decimal::set(System::Decimal value) {
    this[this->tableVS_Rgn3MP->decimalColumn] = value;
}

inline System::Int32 RLSimion::VS_Rgn3MPRow::VS_Rgn3MP_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableVS_Rgn3MP->VS_Rgn3MP_IdColumn]));
}
inline System::Void RLSimion::VS_Rgn3MPRow::VS_Rgn3MP_Id::set(System::Int32 value) {
    this[this->tableVS_Rgn3MP->VS_Rgn3MP_IdColumn] = value;
}

inline System::Int32 RLSimion::VS_Rgn3MPRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableVS_Rgn3MP->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'VS_Rgn3MP\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::VS_Rgn3MPRow::jonkman_Id::set(System::Int32 value) {
    this[this->tableVS_Rgn3MP->jonkman_IdColumn] = value;
}

inline RLSimion::jonkmanRow^  RLSimion::VS_Rgn3MPRow::jonkmanRow::get() {
    return (cli::safe_cast<RLSimion::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_VS_Rgn3MP"])));
}
inline System::Void RLSimion::VS_Rgn3MPRow::jonkmanRow::set(RLSimion::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_VS_Rgn3MP"]);
}

inline ::System::Boolean RLSimion::VS_Rgn3MPRow::Isjonkman_IdNull() {
    return this->IsNull(this->tableVS_Rgn3MP->jonkman_IdColumn);
}

inline ::System::Void RLSimion::VS_Rgn3MPRow::Setjonkman_IdNull() {
    this[this->tableVS_Rgn3MP->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::VS_Rgn3MPRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"VS_Rgn3MP_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"VS_Rgn3MP_schedule"])));
    }
}


inline RLSimion::PC_KIRow::PC_KIRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablePC_KI = (cli::safe_cast<RLSimion::PC_KIDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::PC_KIRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tablePC_KI->decimalColumn]));
}
inline System::Void RLSimion::PC_KIRow::decimal::set(System::Decimal value) {
    this[this->tablePC_KI->decimalColumn] = value;
}

inline System::Int32 RLSimion::PC_KIRow::PC_KI_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablePC_KI->PC_KI_IdColumn]));
}
inline System::Void RLSimion::PC_KIRow::PC_KI_Id::set(System::Int32 value) {
    this[this->tablePC_KI->PC_KI_IdColumn] = value;
}

inline System::Int32 RLSimion::PC_KIRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablePC_KI->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'PC_KI\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::PC_KIRow::jonkman_Id::set(System::Int32 value) {
    this[this->tablePC_KI->jonkman_IdColumn] = value;
}

inline RLSimion::jonkmanRow^  RLSimion::PC_KIRow::jonkmanRow::get() {
    return (cli::safe_cast<RLSimion::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_PC_KI"])));
}
inline System::Void RLSimion::PC_KIRow::jonkmanRow::set(RLSimion::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_PC_KI"]);
}

inline ::System::Boolean RLSimion::PC_KIRow::Isjonkman_IdNull() {
    return this->IsNull(this->tablePC_KI->jonkman_IdColumn);
}

inline ::System::Void RLSimion::PC_KIRow::Setjonkman_IdNull() {
    this[this->tablePC_KI->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::PC_KIRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"PC_KI_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"PC_KI_schedule"])));
    }
}


inline RLSimion::PC_KKRow::PC_KKRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablePC_KK = (cli::safe_cast<RLSimion::PC_KKDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::PC_KKRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tablePC_KK->decimalColumn]));
}
inline System::Void RLSimion::PC_KKRow::decimal::set(System::Decimal value) {
    this[this->tablePC_KK->decimalColumn] = value;
}

inline System::Int32 RLSimion::PC_KKRow::PC_KK_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablePC_KK->PC_KK_IdColumn]));
}
inline System::Void RLSimion::PC_KKRow::PC_KK_Id::set(System::Int32 value) {
    this[this->tablePC_KK->PC_KK_IdColumn] = value;
}

inline System::Int32 RLSimion::PC_KKRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablePC_KK->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'PC_KK\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::PC_KKRow::jonkman_Id::set(System::Int32 value) {
    this[this->tablePC_KK->jonkman_IdColumn] = value;
}

inline RLSimion::jonkmanRow^  RLSimion::PC_KKRow::jonkmanRow::get() {
    return (cli::safe_cast<RLSimion::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_PC_KK"])));
}
inline System::Void RLSimion::PC_KKRow::jonkmanRow::set(RLSimion::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_PC_KK"]);
}

inline ::System::Boolean RLSimion::PC_KKRow::Isjonkman_IdNull() {
    return this->IsNull(this->tablePC_KK->jonkman_IdColumn);
}

inline ::System::Void RLSimion::PC_KKRow::Setjonkman_IdNull() {
    this[this->tablePC_KK->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::PC_KKRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"PC_KK_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"PC_KK_schedule"])));
    }
}


inline RLSimion::PC_KPRow::PC_KPRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablePC_KP = (cli::safe_cast<RLSimion::PC_KPDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::PC_KPRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tablePC_KP->decimalColumn]));
}
inline System::Void RLSimion::PC_KPRow::decimal::set(System::Decimal value) {
    this[this->tablePC_KP->decimalColumn] = value;
}

inline System::Int32 RLSimion::PC_KPRow::PC_KP_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablePC_KP->PC_KP_IdColumn]));
}
inline System::Void RLSimion::PC_KPRow::PC_KP_Id::set(System::Int32 value) {
    this[this->tablePC_KP->PC_KP_IdColumn] = value;
}

inline System::Int32 RLSimion::PC_KPRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablePC_KP->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'PC_KP\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::PC_KPRow::jonkman_Id::set(System::Int32 value) {
    this[this->tablePC_KP->jonkman_IdColumn] = value;
}

inline RLSimion::jonkmanRow^  RLSimion::PC_KPRow::jonkmanRow::get() {
    return (cli::safe_cast<RLSimion::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_PC_KP"])));
}
inline System::Void RLSimion::PC_KPRow::jonkmanRow::set(RLSimion::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_PC_KP"]);
}

inline ::System::Boolean RLSimion::PC_KPRow::Isjonkman_IdNull() {
    return this->IsNull(this->tablePC_KP->jonkman_IdColumn);
}

inline ::System::Void RLSimion::PC_KPRow::Setjonkman_IdNull() {
    this[this->tablePC_KP->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::PC_KPRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"PC_KP_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"PC_KP_schedule"])));
    }
}


inline RLSimion::PC_RefSpdRow::PC_RefSpdRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablePC_RefSpd = (cli::safe_cast<RLSimion::PC_RefSpdDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::PC_RefSpdRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tablePC_RefSpd->decimalColumn]));
}
inline System::Void RLSimion::PC_RefSpdRow::decimal::set(System::Decimal value) {
    this[this->tablePC_RefSpd->decimalColumn] = value;
}

inline System::Int32 RLSimion::PC_RefSpdRow::PC_RefSpd_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablePC_RefSpd->PC_RefSpd_IdColumn]));
}
inline System::Void RLSimion::PC_RefSpdRow::PC_RefSpd_Id::set(System::Int32 value) {
    this[this->tablePC_RefSpd->PC_RefSpd_IdColumn] = value;
}

inline System::Int32 RLSimion::PC_RefSpdRow::jonkman_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablePC_RefSpd->jonkman_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'jonkman_Id\' in table \'PC_RefSpd\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::PC_RefSpdRow::jonkman_Id::set(System::Int32 value) {
    this[this->tablePC_RefSpd->jonkman_IdColumn] = value;
}

inline RLSimion::jonkmanRow^  RLSimion::PC_RefSpdRow::jonkmanRow::get() {
    return (cli::safe_cast<RLSimion::jonkmanRow^  >(this->GetParentRow(this->Table->ParentRelations[L"jonkman_PC_RefSpd"])));
}
inline System::Void RLSimion::PC_RefSpdRow::jonkmanRow::set(RLSimion::jonkmanRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"jonkman_PC_RefSpd"]);
}

inline ::System::Boolean RLSimion::PC_RefSpdRow::Isjonkman_IdNull() {
    return this->IsNull(this->tablePC_RefSpd->jonkman_IdColumn);
}

inline ::System::Void RLSimion::PC_RefSpdRow::Setjonkman_IdNull() {
    this[this->tablePC_RefSpd->jonkman_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::PC_RefSpdRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"PC_RefSpd_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"PC_RefSpd_schedule"])));
    }
}


inline RLSimion::vidalRow::vidalRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablevidal = (cli::safe_cast<RLSimion::vidalDataTable^  >(this->Table));
}

inline System::Int32 RLSimion::vidalRow::vidal_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablevidal->vidal_IdColumn]));
}
inline System::Void RLSimion::vidalRow::vidal_Id::set(System::Int32 value) {
    this[this->tablevidal->vidal_IdColumn] = value;
}

inline System::Int32 RLSimion::vidalRow::ACTOR_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablevidal->ACTOR_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ACTOR_Id\' in table \'vidal\' is DBNull.", e));
    }
}
inline System::Void RLSimion::vidalRow::ACTOR_Id::set(System::Int32 value) {
    this[this->tablevidal->ACTOR_IdColumn] = value;
}

inline System::Int32 RLSimion::vidalRow::CONTROLLER_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablevidal->CONTROLLER_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CONTROLLER_Id\' in table \'vidal\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::vidalRow::CONTROLLER_Id::set(System::Int32 value) {
    this[this->tablevidal->CONTROLLER_IdColumn] = value;
}

inline RLSimion::ACTORRow^  RLSimion::vidalRow::ACTORRow::get() {
    return (cli::safe_cast<RLSimion::ACTORRow^  >(this->GetParentRow(this->Table->ParentRelations[L"ACTOR_vidal"])));
}
inline System::Void RLSimion::vidalRow::ACTORRow::set(RLSimion::ACTORRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"ACTOR_vidal"]);
}

inline RLSimion::CONTROLLERRow^  RLSimion::vidalRow::CONTROLLERRow::get() {
    return (cli::safe_cast<RLSimion::CONTROLLERRow^  >(this->GetParentRow(this->Table->ParentRelations[L"CONTROLLER_vidal"])));
}
inline System::Void RLSimion::vidalRow::CONTROLLERRow::set(RLSimion::CONTROLLERRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"CONTROLLER_vidal"]);
}

inline ::System::Boolean RLSimion::vidalRow::IsACTOR_IdNull() {
    return this->IsNull(this->tablevidal->ACTOR_IdColumn);
}

inline ::System::Void RLSimion::vidalRow::SetACTOR_IdNull() {
    this[this->tablevidal->ACTOR_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::vidalRow::IsCONTROLLER_IdNull() {
    return this->IsNull(this->tablevidal->CONTROLLER_IdColumn);
}

inline ::System::Void RLSimion::vidalRow::SetCONTROLLER_IdNull() {
    this[this->tablevidal->CONTROLLER_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::ARow^  >^  RLSimion::vidalRow::GetARows() {
    if (this->Table->ChildRelations[L"vidal_A"] == nullptr) {
        return gcnew cli::array< RLSimion::ARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::ARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"vidal_A"])));
    }
}

inline cli::array< RLSimion::K_alphaRow^  >^  RLSimion::vidalRow::GetK_alphaRows() {
    if (this->Table->ChildRelations[L"vidal_K_alpha"] == nullptr) {
        return gcnew cli::array< RLSimion::K_alphaRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::K_alphaRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"vidal_K_alpha"])));
    }
}

inline cli::array< RLSimion::KPRow^  >^  RLSimion::vidalRow::GetKPRows() {
    if (this->Table->ChildRelations[L"vidal_KP"] == nullptr) {
        return gcnew cli::array< RLSimion::KPRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::KPRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"vidal_KP"])));
    }
}

inline cli::array< RLSimion::KIRow^  >^  RLSimion::vidalRow::GetKIRows() {
    if (this->Table->ChildRelations[L"vidal_KI"] == nullptr) {
        return gcnew cli::array< RLSimion::KIRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::KIRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"vidal_KI"])));
    }
}

inline cli::array< RLSimion::P_sRow^  >^  RLSimion::vidalRow::GetP_sRows() {
    if (this->Table->ChildRelations[L"vidal_P_s"] == nullptr) {
        return gcnew cli::array< RLSimion::P_sRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::P_sRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"vidal_P_s"])));
    }
}


inline RLSimion::ARow::ARow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableA = (cli::safe_cast<RLSimion::ADataTable^  >(this->Table));
}

inline System::Decimal RLSimion::ARow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableA->decimalColumn]));
}
inline System::Void RLSimion::ARow::decimal::set(System::Decimal value) {
    this[this->tableA->decimalColumn] = value;
}

inline System::Int32 RLSimion::ARow::A_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableA->A_IdColumn]));
}
inline System::Void RLSimion::ARow::A_Id::set(System::Int32 value) {
    this[this->tableA->A_IdColumn] = value;
}

inline System::Int32 RLSimion::ARow::vidal_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableA->vidal_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'vidal_Id\' in table \'A\' is DBNull.", e));
    }
}
inline System::Void RLSimion::ARow::vidal_Id::set(System::Int32 value) {
    this[this->tableA->vidal_IdColumn] = value;
}

inline RLSimion::vidalRow^  RLSimion::ARow::vidalRow::get() {
    return (cli::safe_cast<RLSimion::vidalRow^  >(this->GetParentRow(this->Table->ParentRelations[L"vidal_A"])));
}
inline System::Void RLSimion::ARow::vidalRow::set(RLSimion::vidalRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"vidal_A"]);
}

inline ::System::Boolean RLSimion::ARow::Isvidal_IdNull() {
    return this->IsNull(this->tableA->vidal_IdColumn);
}

inline ::System::Void RLSimion::ARow::Setvidal_IdNull() {
    this[this->tableA->vidal_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::ARow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"A_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"A_schedule"])));
    }
}


inline RLSimion::K_alphaRow::K_alphaRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableK_alpha = (cli::safe_cast<RLSimion::K_alphaDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::K_alphaRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableK_alpha->decimalColumn]));
}
inline System::Void RLSimion::K_alphaRow::decimal::set(System::Decimal value) {
    this[this->tableK_alpha->decimalColumn] = value;
}

inline System::Int32 RLSimion::K_alphaRow::K_alpha_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableK_alpha->K_alpha_IdColumn]));
}
inline System::Void RLSimion::K_alphaRow::K_alpha_Id::set(System::Int32 value) {
    this[this->tableK_alpha->K_alpha_IdColumn] = value;
}

inline System::Int32 RLSimion::K_alphaRow::vidal_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableK_alpha->vidal_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'vidal_Id\' in table \'K_alpha\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::K_alphaRow::vidal_Id::set(System::Int32 value) {
    this[this->tableK_alpha->vidal_IdColumn] = value;
}

inline RLSimion::vidalRow^  RLSimion::K_alphaRow::vidalRow::get() {
    return (cli::safe_cast<RLSimion::vidalRow^  >(this->GetParentRow(this->Table->ParentRelations[L"vidal_K_alpha"])));
}
inline System::Void RLSimion::K_alphaRow::vidalRow::set(RLSimion::vidalRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"vidal_K_alpha"]);
}

inline ::System::Boolean RLSimion::K_alphaRow::Isvidal_IdNull() {
    return this->IsNull(this->tableK_alpha->vidal_IdColumn);
}

inline ::System::Void RLSimion::K_alphaRow::Setvidal_IdNull() {
    this[this->tableK_alpha->vidal_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::K_alphaRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"K_alpha_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"K_alpha_schedule"])));
    }
}


inline RLSimion::P_sRow::P_sRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableP_s = (cli::safe_cast<RLSimion::P_sDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::P_sRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableP_s->decimalColumn]));
}
inline System::Void RLSimion::P_sRow::decimal::set(System::Decimal value) {
    this[this->tableP_s->decimalColumn] = value;
}

inline System::Int32 RLSimion::P_sRow::P_s_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableP_s->P_s_IdColumn]));
}
inline System::Void RLSimion::P_sRow::P_s_Id::set(System::Int32 value) {
    this[this->tableP_s->P_s_IdColumn] = value;
}

inline System::Int32 RLSimion::P_sRow::vidal_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableP_s->vidal_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'vidal_Id\' in table \'P_s\' is DBNull.", e));
    }
}
inline System::Void RLSimion::P_sRow::vidal_Id::set(System::Int32 value) {
    this[this->tableP_s->vidal_IdColumn] = value;
}

inline RLSimion::vidalRow^  RLSimion::P_sRow::vidalRow::get() {
    return (cli::safe_cast<RLSimion::vidalRow^  >(this->GetParentRow(this->Table->ParentRelations[L"vidal_P_s"])));
}
inline System::Void RLSimion::P_sRow::vidalRow::set(RLSimion::vidalRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"vidal_P_s"]);
}

inline ::System::Boolean RLSimion::P_sRow::Isvidal_IdNull() {
    return this->IsNull(this->tableP_s->vidal_IdColumn);
}

inline ::System::Void RLSimion::P_sRow::Setvidal_IdNull() {
    this[this->tableP_s->vidal_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::P_sRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"P_s_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"P_s_schedule"])));
    }
}


inline RLSimion::boukhezzarRow::boukhezzarRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableboukhezzar = (cli::safe_cast<RLSimion::boukhezzarDataTable^  >(this->Table));
}

inline System::Int32 RLSimion::boukhezzarRow::boukhezzar_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableboukhezzar->boukhezzar_IdColumn]));
}
inline System::Void RLSimion::boukhezzarRow::boukhezzar_Id::set(System::Int32 value) {
    this[this->tableboukhezzar->boukhezzar_IdColumn] = value;
}

inline System::Int32 RLSimion::boukhezzarRow::ACTOR_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableboukhezzar->ACTOR_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ACTOR_Id\' in table \'boukhezzar\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::boukhezzarRow::ACTOR_Id::set(System::Int32 value) {
    this[this->tableboukhezzar->ACTOR_IdColumn] = value;
}

inline System::Int32 RLSimion::boukhezzarRow::CONTROLLER_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableboukhezzar->CONTROLLER_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CONTROLLER_Id\' in table \'boukhezzar\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::boukhezzarRow::CONTROLLER_Id::set(System::Int32 value) {
    this[this->tableboukhezzar->CONTROLLER_IdColumn] = value;
}

inline RLSimion::ACTORRow^  RLSimion::boukhezzarRow::ACTORRow::get() {
    return (cli::safe_cast<RLSimion::ACTORRow^  >(this->GetParentRow(this->Table->ParentRelations[L"ACTOR_boukhezzar"])));
}
inline System::Void RLSimion::boukhezzarRow::ACTORRow::set(RLSimion::ACTORRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"ACTOR_boukhezzar"]);
}

inline RLSimion::CONTROLLERRow^  RLSimion::boukhezzarRow::CONTROLLERRow::get() {
    return (cli::safe_cast<RLSimion::CONTROLLERRow^  >(this->GetParentRow(this->Table->ParentRelations[L"CONTROLLER_boukhezzar"])));
}
inline System::Void RLSimion::boukhezzarRow::CONTROLLERRow::set(RLSimion::CONTROLLERRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"CONTROLLER_boukhezzar"]);
}

inline ::System::Boolean RLSimion::boukhezzarRow::IsACTOR_IdNull() {
    return this->IsNull(this->tableboukhezzar->ACTOR_IdColumn);
}

inline ::System::Void RLSimion::boukhezzarRow::SetACTOR_IdNull() {
    this[this->tableboukhezzar->ACTOR_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::boukhezzarRow::IsCONTROLLER_IdNull() {
    return this->IsNull(this->tableboukhezzar->CONTROLLER_IdColumn);
}

inline ::System::Void RLSimion::boukhezzarRow::SetCONTROLLER_IdNull() {
    this[this->tableboukhezzar->CONTROLLER_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::C_0Row^  >^  RLSimion::boukhezzarRow::GetC_0Rows() {
    if (this->Table->ChildRelations[L"boukhezzar_C_0"] == nullptr) {
        return gcnew cli::array< RLSimion::C_0Row^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::C_0Row^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"boukhezzar_C_0"])));
    }
}

inline cli::array< RLSimion::KPRow^  >^  RLSimion::boukhezzarRow::GetKPRows() {
    if (this->Table->ChildRelations[L"boukhezzar_KP"] == nullptr) {
        return gcnew cli::array< RLSimion::KPRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::KPRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"boukhezzar_KP"])));
    }
}

inline cli::array< RLSimion::KIRow^  >^  RLSimion::boukhezzarRow::GetKIRows() {
    if (this->Table->ChildRelations[L"boukhezzar_KI"] == nullptr) {
        return gcnew cli::array< RLSimion::KIRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::KIRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"boukhezzar_KI"])));
    }
}

inline cli::array< RLSimion::K_tRow^  >^  RLSimion::boukhezzarRow::GetK_tRows() {
    if (this->Table->ChildRelations[L"boukhezzar_K_t"] == nullptr) {
        return gcnew cli::array< RLSimion::K_tRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::K_tRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"boukhezzar_K_t"])));
    }
}

inline cli::array< RLSimion::J_tRow^  >^  RLSimion::boukhezzarRow::GetJ_tRows() {
    if (this->Table->ChildRelations[L"boukhezzar_J_t"] == nullptr) {
        return gcnew cli::array< RLSimion::J_tRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::J_tRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"boukhezzar_J_t"])));
    }
}


inline RLSimion::C_0Row::C_0Row(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableC_0 = (cli::safe_cast<RLSimion::C_0DataTable^  >(this->Table));
}

inline System::Decimal RLSimion::C_0Row::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableC_0->decimalColumn]));
}
inline System::Void RLSimion::C_0Row::decimal::set(System::Decimal value) {
    this[this->tableC_0->decimalColumn] = value;
}

inline System::Int32 RLSimion::C_0Row::C_0_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableC_0->C_0_IdColumn]));
}
inline System::Void RLSimion::C_0Row::C_0_Id::set(System::Int32 value) {
    this[this->tableC_0->C_0_IdColumn] = value;
}

inline System::Int32 RLSimion::C_0Row::boukhezzar_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableC_0->boukhezzar_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'boukhezzar_Id\' in table \'C_0\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::C_0Row::boukhezzar_Id::set(System::Int32 value) {
    this[this->tableC_0->boukhezzar_IdColumn] = value;
}

inline RLSimion::boukhezzarRow^  RLSimion::C_0Row::boukhezzarRow::get() {
    return (cli::safe_cast<RLSimion::boukhezzarRow^  >(this->GetParentRow(this->Table->ParentRelations[L"boukhezzar_C_0"])));
}
inline System::Void RLSimion::C_0Row::boukhezzarRow::set(RLSimion::boukhezzarRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"boukhezzar_C_0"]);
}

inline ::System::Boolean RLSimion::C_0Row::Isboukhezzar_IdNull() {
    return this->IsNull(this->tableC_0->boukhezzar_IdColumn);
}

inline ::System::Void RLSimion::C_0Row::Setboukhezzar_IdNull() {
    this[this->tableC_0->boukhezzar_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::C_0Row::GetscheduleRows() {
    if (this->Table->ChildRelations[L"C_0_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"C_0_schedule"])));
    }
}


inline RLSimion::K_tRow::K_tRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableK_t = (cli::safe_cast<RLSimion::K_tDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::K_tRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableK_t->decimalColumn]));
}
inline System::Void RLSimion::K_tRow::decimal::set(System::Decimal value) {
    this[this->tableK_t->decimalColumn] = value;
}

inline System::Int32 RLSimion::K_tRow::K_t_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableK_t->K_t_IdColumn]));
}
inline System::Void RLSimion::K_tRow::K_t_Id::set(System::Int32 value) {
    this[this->tableK_t->K_t_IdColumn] = value;
}

inline System::Int32 RLSimion::K_tRow::boukhezzar_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableK_t->boukhezzar_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'boukhezzar_Id\' in table \'K_t\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::K_tRow::boukhezzar_Id::set(System::Int32 value) {
    this[this->tableK_t->boukhezzar_IdColumn] = value;
}

inline RLSimion::boukhezzarRow^  RLSimion::K_tRow::boukhezzarRow::get() {
    return (cli::safe_cast<RLSimion::boukhezzarRow^  >(this->GetParentRow(this->Table->ParentRelations[L"boukhezzar_K_t"])));
}
inline System::Void RLSimion::K_tRow::boukhezzarRow::set(RLSimion::boukhezzarRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"boukhezzar_K_t"]);
}

inline ::System::Boolean RLSimion::K_tRow::Isboukhezzar_IdNull() {
    return this->IsNull(this->tableK_t->boukhezzar_IdColumn);
}

inline ::System::Void RLSimion::K_tRow::Setboukhezzar_IdNull() {
    this[this->tableK_t->boukhezzar_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::K_tRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"K_t_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"K_t_schedule"])));
    }
}


inline RLSimion::J_tRow::J_tRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableJ_t = (cli::safe_cast<RLSimion::J_tDataTable^  >(this->Table));
}

inline System::Decimal RLSimion::J_tRow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableJ_t->decimalColumn]));
}
inline System::Void RLSimion::J_tRow::decimal::set(System::Decimal value) {
    this[this->tableJ_t->decimalColumn] = value;
}

inline System::Int32 RLSimion::J_tRow::J_t_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableJ_t->J_t_IdColumn]));
}
inline System::Void RLSimion::J_tRow::J_t_Id::set(System::Int32 value) {
    this[this->tableJ_t->J_t_IdColumn] = value;
}

inline System::Int32 RLSimion::J_tRow::boukhezzar_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableJ_t->boukhezzar_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'boukhezzar_Id\' in table \'J_t\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::J_tRow::boukhezzar_Id::set(System::Int32 value) {
    this[this->tableJ_t->boukhezzar_IdColumn] = value;
}

inline RLSimion::boukhezzarRow^  RLSimion::J_tRow::boukhezzarRow::get() {
    return (cli::safe_cast<RLSimion::boukhezzarRow^  >(this->GetParentRow(this->Table->ParentRelations[L"boukhezzar_J_t"])));
}
inline System::Void RLSimion::J_tRow::boukhezzarRow::set(RLSimion::boukhezzarRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"boukhezzar_J_t"]);
}

inline ::System::Boolean RLSimion::J_tRow::Isboukhezzar_IdNull() {
    return this->IsNull(this->tableJ_t->boukhezzar_IdColumn);
}

inline ::System::Void RLSimion::J_tRow::Setboukhezzar_IdNull() {
    this[this->tableJ_t->boukhezzar_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::J_tRow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"J_t_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"J_t_schedule"])));
    }
}


inline RLSimion::_actor_criticRow::_actor_criticRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_actor_critic = (cli::safe_cast<RLSimion::_actor_criticDataTable^  >(this->Table));
}

inline System::Int32 RLSimion::_actor_criticRow::_actor_critic_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->table_actor_critic->_actor_critic_IdColumn]));
}
inline System::Void RLSimion::_actor_criticRow::_actor_critic_Id::set(System::Int32 value) {
    this[this->table_actor_critic->_actor_critic_IdColumn] = value;
}

inline System::Int32 RLSimion::_actor_criticRow::SIMGOD_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_actor_critic->SIMGOD_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'SIMGOD_Id\' in table \'actor-critic\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::_actor_criticRow::SIMGOD_Id::set(System::Int32 value) {
    this[this->table_actor_critic->SIMGOD_IdColumn] = value;
}

inline RLSimion::SIMGODRow^  RLSimion::_actor_criticRow::SIMGODRow::get() {
    return (cli::safe_cast<RLSimion::SIMGODRow^  >(this->GetParentRow(this->Table->ParentRelations[L"SIMGOD_actor-critic"])));
}
inline System::Void RLSimion::_actor_criticRow::SIMGODRow::set(RLSimion::SIMGODRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"SIMGOD_actor-critic"]);
}

inline ::System::Boolean RLSimion::_actor_criticRow::IsSIMGOD_IdNull() {
    return this->IsNull(this->table_actor_critic->SIMGOD_IdColumn);
}

inline ::System::Void RLSimion::_actor_criticRow::SetSIMGOD_IdNull() {
    this[this->table_actor_critic->SIMGOD_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::ACTORRow^  >^  RLSimion::_actor_criticRow::GetACTORRows() {
    if (this->Table->ChildRelations[L"actor-critic_ACTOR"] == nullptr) {
        return gcnew cli::array< RLSimion::ACTORRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::ACTORRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"actor-critic_ACTOR"])));
    }
}

inline cli::array< RLSimion::CRITICRow^  >^  RLSimion::_actor_criticRow::GetCRITICRows() {
    if (this->Table->ChildRelations[L"actor-critic_CRITIC"] == nullptr) {
        return gcnew cli::array< RLSimion::CRITICRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::CRITICRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"actor-critic_CRITIC"])));
    }
}


inline RLSimion::CRITICRow::CRITICRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableCRITIC = (cli::safe_cast<RLSimion::CRITICDataTable^  >(this->Table));
}

inline System::String^  RLSimion::CRITICRow::LOAD::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableCRITIC->LOADColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'LOAD\' in table \'CRITIC\' is DBNull.", e));
    }
}
inline System::Void RLSimion::CRITICRow::LOAD::set(System::String^  value) {
    this[this->tableCRITIC->LOADColumn] = value;
}

inline System::String^  RLSimion::CRITICRow::SAVE::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableCRITIC->SAVEColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'SAVE\' in table \'CRITIC\' is DBNull.", e));
    }
}
inline System::Void RLSimion::CRITICRow::SAVE::set(System::String^  value) {
    this[this->tableCRITIC->SAVEColumn] = value;
}

inline System::Int32 RLSimion::CRITICRow::CRITIC_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableCRITIC->CRITIC_IdColumn]));
}
inline System::Void RLSimion::CRITICRow::CRITIC_Id::set(System::Int32 value) {
    this[this->tableCRITIC->CRITIC_IdColumn] = value;
}

inline System::Int32 RLSimion::CRITICRow::_actor_critic_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableCRITIC->_actor_critic_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'actor-critic_Id\' in table \'CRITIC\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::CRITICRow::_actor_critic_Id::set(System::Int32 value) {
    this[this->tableCRITIC->_actor_critic_IdColumn] = value;
}

inline System::Int32 RLSimion::CRITICRow::_actor_critic_controller_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableCRITIC->_actor_critic_controller_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'actor-critic-controller_Id\' in table \'CRITIC\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::CRITICRow::_actor_critic_controller_Id::set(System::Int32 value) {
    this[this->tableCRITIC->_actor_critic_controller_IdColumn] = value;
}

inline RLSimion::_actor_criticRow^  RLSimion::CRITICRow::_actor_criticRow::get() {
    return (cli::safe_cast<RLSimion::_actor_criticRow^  >(this->GetParentRow(this->Table->ParentRelations[L"actor-critic_CRITIC"])));
}
inline System::Void RLSimion::CRITICRow::_actor_criticRow::set(RLSimion::_actor_criticRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"actor-critic_CRITIC"]);
}

inline RLSimion::_actor_critic_controllerRow^  RLSimion::CRITICRow::_actor_critic_controllerRow::get() {
    return (cli::safe_cast<RLSimion::_actor_critic_controllerRow^  >(this->GetParentRow(this->Table->ParentRelations[L"actor-critic-controller_CRITIC"])));
}
inline System::Void RLSimion::CRITICRow::_actor_critic_controllerRow::set(RLSimion::_actor_critic_controllerRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"actor-critic-controller_CRITIC"]);
}

inline ::System::Boolean RLSimion::CRITICRow::IsLOADNull() {
    return this->IsNull(this->tableCRITIC->LOADColumn);
}

inline ::System::Void RLSimion::CRITICRow::SetLOADNull() {
    this[this->tableCRITIC->LOADColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::CRITICRow::IsSAVENull() {
    return this->IsNull(this->tableCRITIC->SAVEColumn);
}

inline ::System::Void RLSimion::CRITICRow::SetSAVENull() {
    this[this->tableCRITIC->SAVEColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::CRITICRow::Is_actor_critic_IdNull() {
    return this->IsNull(this->tableCRITIC->_actor_critic_IdColumn);
}

inline ::System::Void RLSimion::CRITICRow::Set_actor_critic_IdNull() {
    this[this->tableCRITIC->_actor_critic_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::CRITICRow::Is_actor_critic_controller_IdNull() {
    return this->IsNull(this->tableCRITIC->_actor_critic_controller_IdColumn);
}

inline ::System::Void RLSimion::CRITICRow::Set_actor_critic_controller_IdNull() {
    this[this->tableCRITIC->_actor_critic_controller_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::_TD_LambdaRow^  >^  RLSimion::CRITICRow::_GetTD_LambdaRows() {
    if (this->Table->ChildRelations[L"CRITIC_TD-Lambda"] == nullptr) {
        return gcnew cli::array< RLSimion::_TD_LambdaRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::_TD_LambdaRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"CRITIC_TD-Lambda"])));
    }
}

inline cli::array< RLSimion::_True_Online_TD_LambdaRow^  >^  RLSimion::CRITICRow::_GetTrue_Online_TD_LambdaRows() {
    if (this->Table->ChildRelations[L"CRITIC_True-Online-TD-Lambda"] == nullptr) {
        return gcnew cli::array< RLSimion::_True_Online_TD_LambdaRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::_True_Online_TD_LambdaRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"CRITIC_True-Online-TD-Lambda"])));
    }
}

inline cli::array< RLSimion::_TDC_LambdaRow^  >^  RLSimion::CRITICRow::_GetTDC_LambdaRows() {
    if (this->Table->ChildRelations[L"CRITIC_TDC-Lambda"] == nullptr) {
        return gcnew cli::array< RLSimion::_TDC_LambdaRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::_TDC_LambdaRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"CRITIC_TDC-Lambda"])));
    }
}


inline RLSimion::_TD_LambdaRow::_TD_LambdaRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_TD_Lambda = (cli::safe_cast<RLSimion::_TD_LambdaDataTable^  >(this->Table));
}

inline System::Int32 RLSimion::_TD_LambdaRow::_TD_Lambda_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->table_TD_Lambda->_TD_Lambda_IdColumn]));
}
inline System::Void RLSimion::_TD_LambdaRow::_TD_Lambda_Id::set(System::Int32 value) {
    this[this->table_TD_Lambda->_TD_Lambda_IdColumn] = value;
}

inline System::Int32 RLSimion::_TD_LambdaRow::CRITIC_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_TD_Lambda->CRITIC_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CRITIC_Id\' in table \'TD-Lambda\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::_TD_LambdaRow::CRITIC_Id::set(System::Int32 value) {
    this[this->table_TD_Lambda->CRITIC_IdColumn] = value;
}

inline RLSimion::CRITICRow^  RLSimion::_TD_LambdaRow::CRITICRow::get() {
    return (cli::safe_cast<RLSimion::CRITICRow^  >(this->GetParentRow(this->Table->ParentRelations[L"CRITIC_TD-Lambda"])));
}
inline System::Void RLSimion::_TD_LambdaRow::CRITICRow::set(RLSimion::CRITICRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"CRITIC_TD-Lambda"]);
}

inline ::System::Boolean RLSimion::_TD_LambdaRow::IsCRITIC_IdNull() {
    return this->IsNull(this->table_TD_Lambda->CRITIC_IdColumn);
}

inline ::System::Void RLSimion::_TD_LambdaRow::SetCRITIC_IdNull() {
    this[this->table_TD_Lambda->CRITIC_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::VFARow^  >^  RLSimion::_TD_LambdaRow::GetVFARows() {
    if (this->Table->ChildRelations[L"TD-Lambda_VFA"] == nullptr) {
        return gcnew cli::array< RLSimion::VFARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::VFARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TD-Lambda_VFA"])));
    }
}

inline cli::array< RLSimion::ETRACESRow^  >^  RLSimion::_TD_LambdaRow::GetETRACESRows() {
    if (this->Table->ChildRelations[L"TD-Lambda_ETRACES"] == nullptr) {
        return gcnew cli::array< RLSimion::ETRACESRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::ETRACESRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TD-Lambda_ETRACES"])));
    }
}

inline cli::array< RLSimion::GAMMARow^  >^  RLSimion::_TD_LambdaRow::GetGAMMARows() {
    if (this->Table->ChildRelations[L"TD-Lambda_GAMMA"] == nullptr) {
        return gcnew cli::array< RLSimion::GAMMARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::GAMMARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TD-Lambda_GAMMA"])));
    }
}

inline cli::array< RLSimion::ALPHARow^  >^  RLSimion::_TD_LambdaRow::GetALPHARows() {
    if (this->Table->ChildRelations[L"TD-Lambda_ALPHA"] == nullptr) {
        return gcnew cli::array< RLSimion::ALPHARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::ALPHARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TD-Lambda_ALPHA"])));
    }
}


inline RLSimion::GAMMARow::GAMMARow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableGAMMA = (cli::safe_cast<RLSimion::GAMMADataTable^  >(this->Table));
}

inline System::Decimal RLSimion::GAMMARow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableGAMMA->decimalColumn]));
}
inline System::Void RLSimion::GAMMARow::decimal::set(System::Decimal value) {
    this[this->tableGAMMA->decimalColumn] = value;
}

inline System::Int32 RLSimion::GAMMARow::GAMMA_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableGAMMA->GAMMA_IdColumn]));
}
inline System::Void RLSimion::GAMMARow::GAMMA_Id::set(System::Int32 value) {
    this[this->tableGAMMA->GAMMA_IdColumn] = value;
}

inline System::Int32 RLSimion::GAMMARow::_TD_Lambda_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableGAMMA->_TD_Lambda_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TD-Lambda_Id\' in table \'GAMMA\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::GAMMARow::_TD_Lambda_Id::set(System::Int32 value) {
    this[this->tableGAMMA->_TD_Lambda_IdColumn] = value;
}

inline System::Int32 RLSimion::GAMMARow::_True_Online_TD_Lambda_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableGAMMA->_True_Online_TD_Lambda_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'True-Online-TD-Lambda_Id\' in table \'GAMMA\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::GAMMARow::_True_Online_TD_Lambda_Id::set(System::Int32 value) {
    this[this->tableGAMMA->_True_Online_TD_Lambda_IdColumn] = value;
}

inline System::Int32 RLSimion::GAMMARow::_TDC_Lambda_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableGAMMA->_TDC_Lambda_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TDC-Lambda_Id\' in table \'GAMMA\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::GAMMARow::_TDC_Lambda_Id::set(System::Int32 value) {
    this[this->tableGAMMA->_TDC_Lambda_IdColumn] = value;
}

inline RLSimion::_TD_LambdaRow^  RLSimion::GAMMARow::_TD_LambdaRow::get() {
    return (cli::safe_cast<RLSimion::_TD_LambdaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TD-Lambda_GAMMA"])));
}
inline System::Void RLSimion::GAMMARow::_TD_LambdaRow::set(RLSimion::_TD_LambdaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"TD-Lambda_GAMMA"]);
}

inline RLSimion::_True_Online_TD_LambdaRow^  RLSimion::GAMMARow::_True_Online_TD_LambdaRow::get() {
    return (cli::safe_cast<RLSimion::_True_Online_TD_LambdaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"True-Online-TD-Lambda_GAMMA"])));
}
inline System::Void RLSimion::GAMMARow::_True_Online_TD_LambdaRow::set(RLSimion::_True_Online_TD_LambdaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"True-Online-TD-Lambda_GAMMA"]);
}

inline RLSimion::_TDC_LambdaRow^  RLSimion::GAMMARow::_TDC_LambdaRow::get() {
    return (cli::safe_cast<RLSimion::_TDC_LambdaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TDC-Lambda_GAMMA"])));
}
inline System::Void RLSimion::GAMMARow::_TDC_LambdaRow::set(RLSimion::_TDC_LambdaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"TDC-Lambda_GAMMA"]);
}

inline ::System::Boolean RLSimion::GAMMARow::Is_TD_Lambda_IdNull() {
    return this->IsNull(this->tableGAMMA->_TD_Lambda_IdColumn);
}

inline ::System::Void RLSimion::GAMMARow::Set_TD_Lambda_IdNull() {
    this[this->tableGAMMA->_TD_Lambda_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::GAMMARow::Is_True_Online_TD_Lambda_IdNull() {
    return this->IsNull(this->tableGAMMA->_True_Online_TD_Lambda_IdColumn);
}

inline ::System::Void RLSimion::GAMMARow::Set_True_Online_TD_Lambda_IdNull() {
    this[this->tableGAMMA->_True_Online_TD_Lambda_IdColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean RLSimion::GAMMARow::Is_TDC_Lambda_IdNull() {
    return this->IsNull(this->tableGAMMA->_TDC_Lambda_IdColumn);
}

inline ::System::Void RLSimion::GAMMARow::Set_TDC_Lambda_IdNull() {
    this[this->tableGAMMA->_TDC_Lambda_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::GAMMARow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"GAMMA_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"GAMMA_schedule"])));
    }
}


inline RLSimion::_True_Online_TD_LambdaRow::_True_Online_TD_LambdaRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_True_Online_TD_Lambda = (cli::safe_cast<RLSimion::_True_Online_TD_LambdaDataTable^  >(this->Table));
}

inline System::Int32 RLSimion::_True_Online_TD_LambdaRow::_True_Online_TD_Lambda_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->table_True_Online_TD_Lambda->_True_Online_TD_Lambda_IdColumn]));
}
inline System::Void RLSimion::_True_Online_TD_LambdaRow::_True_Online_TD_Lambda_Id::set(System::Int32 value) {
    this[this->table_True_Online_TD_Lambda->_True_Online_TD_Lambda_IdColumn] = value;
}

inline System::Int32 RLSimion::_True_Online_TD_LambdaRow::CRITIC_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_True_Online_TD_Lambda->CRITIC_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CRITIC_Id\' in table \'True-Online-TD-Lambda\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::_True_Online_TD_LambdaRow::CRITIC_Id::set(System::Int32 value) {
    this[this->table_True_Online_TD_Lambda->CRITIC_IdColumn] = value;
}

inline RLSimion::CRITICRow^  RLSimion::_True_Online_TD_LambdaRow::CRITICRow::get() {
    return (cli::safe_cast<RLSimion::CRITICRow^  >(this->GetParentRow(this->Table->ParentRelations[L"CRITIC_True-Online-TD-Lambda"])));
}
inline System::Void RLSimion::_True_Online_TD_LambdaRow::CRITICRow::set(RLSimion::CRITICRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"CRITIC_True-Online-TD-Lambda"]);
}

inline ::System::Boolean RLSimion::_True_Online_TD_LambdaRow::IsCRITIC_IdNull() {
    return this->IsNull(this->table_True_Online_TD_Lambda->CRITIC_IdColumn);
}

inline ::System::Void RLSimion::_True_Online_TD_LambdaRow::SetCRITIC_IdNull() {
    this[this->table_True_Online_TD_Lambda->CRITIC_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::VFARow^  >^  RLSimion::_True_Online_TD_LambdaRow::GetVFARows() {
    if (this->Table->ChildRelations[L"True-Online-TD-Lambda_VFA"] == nullptr) {
        return gcnew cli::array< RLSimion::VFARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::VFARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"True-Online-TD-Lambda_VFA"])));
    }
}

inline cli::array< RLSimion::ETRACESRow^  >^  RLSimion::_True_Online_TD_LambdaRow::GetETRACESRows() {
    if (this->Table->ChildRelations[L"True-Online-TD-Lambda_ETRACES"] == nullptr) {
        return gcnew cli::array< RLSimion::ETRACESRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::ETRACESRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"True-Online-TD-Lambda_ETRACES"])));
    }
}

inline cli::array< RLSimion::GAMMARow^  >^  RLSimion::_True_Online_TD_LambdaRow::GetGAMMARows() {
    if (this->Table->ChildRelations[L"True-Online-TD-Lambda_GAMMA"] == nullptr) {
        return gcnew cli::array< RLSimion::GAMMARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::GAMMARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"True-Online-TD-Lambda_GAMMA"])));
    }
}

inline cli::array< RLSimion::ALPHARow^  >^  RLSimion::_True_Online_TD_LambdaRow::GetALPHARows() {
    if (this->Table->ChildRelations[L"True-Online-TD-Lambda_ALPHA"] == nullptr) {
        return gcnew cli::array< RLSimion::ALPHARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::ALPHARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"True-Online-TD-Lambda_ALPHA"])));
    }
}


inline RLSimion::_TDC_LambdaRow::_TDC_LambdaRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_TDC_Lambda = (cli::safe_cast<RLSimion::_TDC_LambdaDataTable^  >(this->Table));
}

inline System::Int32 RLSimion::_TDC_LambdaRow::_TDC_Lambda_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->table_TDC_Lambda->_TDC_Lambda_IdColumn]));
}
inline System::Void RLSimion::_TDC_LambdaRow::_TDC_Lambda_Id::set(System::Int32 value) {
    this[this->table_TDC_Lambda->_TDC_Lambda_IdColumn] = value;
}

inline System::Int32 RLSimion::_TDC_LambdaRow::CRITIC_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_TDC_Lambda->CRITIC_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'CRITIC_Id\' in table \'TDC-Lambda\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::_TDC_LambdaRow::CRITIC_Id::set(System::Int32 value) {
    this[this->table_TDC_Lambda->CRITIC_IdColumn] = value;
}

inline RLSimion::CRITICRow^  RLSimion::_TDC_LambdaRow::CRITICRow::get() {
    return (cli::safe_cast<RLSimion::CRITICRow^  >(this->GetParentRow(this->Table->ParentRelations[L"CRITIC_TDC-Lambda"])));
}
inline System::Void RLSimion::_TDC_LambdaRow::CRITICRow::set(RLSimion::CRITICRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"CRITIC_TDC-Lambda"]);
}

inline ::System::Boolean RLSimion::_TDC_LambdaRow::IsCRITIC_IdNull() {
    return this->IsNull(this->table_TDC_Lambda->CRITIC_IdColumn);
}

inline ::System::Void RLSimion::_TDC_LambdaRow::SetCRITIC_IdNull() {
    this[this->table_TDC_Lambda->CRITIC_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::VFARow^  >^  RLSimion::_TDC_LambdaRow::GetVFARows() {
    if (this->Table->ChildRelations[L"TDC-Lambda_VFA"] == nullptr) {
        return gcnew cli::array< RLSimion::VFARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::VFARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TDC-Lambda_VFA"])));
    }
}

inline cli::array< RLSimion::ETRACESRow^  >^  RLSimion::_TDC_LambdaRow::GetETRACESRows() {
    if (this->Table->ChildRelations[L"TDC-Lambda_ETRACES"] == nullptr) {
        return gcnew cli::array< RLSimion::ETRACESRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::ETRACESRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TDC-Lambda_ETRACES"])));
    }
}

inline cli::array< RLSimion::GAMMARow^  >^  RLSimion::_TDC_LambdaRow::GetGAMMARows() {
    if (this->Table->ChildRelations[L"TDC-Lambda_GAMMA"] == nullptr) {
        return gcnew cli::array< RLSimion::GAMMARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::GAMMARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TDC-Lambda_GAMMA"])));
    }
}

inline cli::array< RLSimion::ALPHARow^  >^  RLSimion::_TDC_LambdaRow::GetALPHARows() {
    if (this->Table->ChildRelations[L"TDC-Lambda_ALPHA"] == nullptr) {
        return gcnew cli::array< RLSimion::ALPHARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::ALPHARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TDC-Lambda_ALPHA"])));
    }
}

inline cli::array< RLSimion::BETARow^  >^  RLSimion::_TDC_LambdaRow::GetBETARows() {
    if (this->Table->ChildRelations[L"TDC-Lambda_BETA"] == nullptr) {
        return gcnew cli::array< RLSimion::BETARow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::BETARow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"TDC-Lambda_BETA"])));
    }
}


inline RLSimion::BETARow::BETARow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableBETA = (cli::safe_cast<RLSimion::BETADataTable^  >(this->Table));
}

inline System::Decimal RLSimion::BETARow::decimal::get() {
    return (cli::safe_cast<::System::Decimal >(this[this->tableBETA->decimalColumn]));
}
inline System::Void RLSimion::BETARow::decimal::set(System::Decimal value) {
    this[this->tableBETA->decimalColumn] = value;
}

inline System::Int32 RLSimion::BETARow::BETA_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableBETA->BETA_IdColumn]));
}
inline System::Void RLSimion::BETARow::BETA_Id::set(System::Int32 value) {
    this[this->tableBETA->BETA_IdColumn] = value;
}

inline System::Int32 RLSimion::BETARow::_TDC_Lambda_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableBETA->_TDC_Lambda_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'TDC-Lambda_Id\' in table \'BETA\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::BETARow::_TDC_Lambda_Id::set(System::Int32 value) {
    this[this->tableBETA->_TDC_Lambda_IdColumn] = value;
}

inline RLSimion::_TDC_LambdaRow^  RLSimion::BETARow::_TDC_LambdaRow::get() {
    return (cli::safe_cast<RLSimion::_TDC_LambdaRow^  >(this->GetParentRow(this->Table->ParentRelations[L"TDC-Lambda_BETA"])));
}
inline System::Void RLSimion::BETARow::_TDC_LambdaRow::set(RLSimion::_TDC_LambdaRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"TDC-Lambda_BETA"]);
}

inline ::System::Boolean RLSimion::BETARow::Is_TDC_Lambda_IdNull() {
    return this->IsNull(this->tableBETA->_TDC_Lambda_IdColumn);
}

inline ::System::Void RLSimion::BETARow::Set_TDC_Lambda_IdNull() {
    this[this->tableBETA->_TDC_Lambda_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::scheduleRow^  >^  RLSimion::BETARow::GetscheduleRows() {
    if (this->Table->ChildRelations[L"BETA_schedule"] == nullptr) {
        return gcnew cli::array< RLSimion::scheduleRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::scheduleRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"BETA_schedule"])));
    }
}


inline RLSimion::_actor_critic_controllerRow::_actor_critic_controllerRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->table_actor_critic_controller = (cli::safe_cast<RLSimion::_actor_critic_controllerDataTable^  >(this->Table));
}

inline System::Int32 RLSimion::_actor_critic_controllerRow::_actor_critic_controller_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->table_actor_critic_controller->_actor_critic_controller_IdColumn]));
}
inline System::Void RLSimion::_actor_critic_controllerRow::_actor_critic_controller_Id::set(System::Int32 value) {
    this[this->table_actor_critic_controller->_actor_critic_controller_IdColumn] = value;
}

inline System::Int32 RLSimion::_actor_critic_controllerRow::SIMGOD_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->table_actor_critic_controller->SIMGOD_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'SIMGOD_Id\' in table \'actor-critic-controller\' is DBNull.", 
            e));
    }
}
inline System::Void RLSimion::_actor_critic_controllerRow::SIMGOD_Id::set(System::Int32 value) {
    this[this->table_actor_critic_controller->SIMGOD_IdColumn] = value;
}

inline RLSimion::SIMGODRow^  RLSimion::_actor_critic_controllerRow::SIMGODRow::get() {
    return (cli::safe_cast<RLSimion::SIMGODRow^  >(this->GetParentRow(this->Table->ParentRelations[L"SIMGOD_actor-critic-controller"])));
}
inline System::Void RLSimion::_actor_critic_controllerRow::SIMGODRow::set(RLSimion::SIMGODRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"SIMGOD_actor-critic-controller"]);
}

inline ::System::Boolean RLSimion::_actor_critic_controllerRow::IsSIMGOD_IdNull() {
    return this->IsNull(this->table_actor_critic_controller->SIMGOD_IdColumn);
}

inline ::System::Void RLSimion::_actor_critic_controllerRow::SetSIMGOD_IdNull() {
    this[this->table_actor_critic_controller->SIMGOD_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::ACTORRow^  >^  RLSimion::_actor_critic_controllerRow::GetACTORRows() {
    if (this->Table->ChildRelations[L"actor-critic-controller_ACTOR"] == nullptr) {
        return gcnew cli::array< RLSimion::ACTORRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::ACTORRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"actor-critic-controller_ACTOR"])));
    }
}

inline cli::array< RLSimion::CRITICRow^  >^  RLSimion::_actor_critic_controllerRow::GetCRITICRows() {
    if (this->Table->ChildRelations[L"actor-critic-controller_CRITIC"] == nullptr) {
        return gcnew cli::array< RLSimion::CRITICRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::CRITICRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"actor-critic-controller_CRITIC"])));
    }
}

inline cli::array< RLSimion::CONTROLLERRow^  >^  RLSimion::_actor_critic_controllerRow::GetCONTROLLERRows() {
    if (this->Table->ChildRelations[L"actor-critic-controller_CONTROLLER"] == nullptr) {
        return gcnew cli::array< RLSimion::CONTROLLERRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::CONTROLLERRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"actor-critic-controller_CONTROLLER"])));
    }
}


inline RLSimion::CONTROLLERRow::CONTROLLERRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableCONTROLLER = (cli::safe_cast<RLSimion::CONTROLLERDataTable^  >(this->Table));
}

inline System::Int32 RLSimion::CONTROLLERRow::CONTROLLER_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableCONTROLLER->CONTROLLER_IdColumn]));
}
inline System::Void RLSimion::CONTROLLERRow::CONTROLLER_Id::set(System::Int32 value) {
    this[this->tableCONTROLLER->CONTROLLER_IdColumn] = value;
}

inline System::Int32 RLSimion::CONTROLLERRow::_actor_critic_controller_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableCONTROLLER->_actor_critic_controller_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'actor-critic-controller_Id\' in table \'CONTROLLER\' is DBNull" 
L".", 
            e));
    }
}
inline System::Void RLSimion::CONTROLLERRow::_actor_critic_controller_Id::set(System::Int32 value) {
    this[this->tableCONTROLLER->_actor_critic_controller_IdColumn] = value;
}

inline RLSimion::_actor_critic_controllerRow^  RLSimion::CONTROLLERRow::_actor_critic_controllerRow::get() {
    return (cli::safe_cast<RLSimion::_actor_critic_controllerRow^  >(this->GetParentRow(this->Table->ParentRelations[L"actor-critic-controller_CONTROLLER"])));
}
inline System::Void RLSimion::CONTROLLERRow::_actor_critic_controllerRow::set(RLSimion::_actor_critic_controllerRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"actor-critic-controller_CONTROLLER"]);
}

inline ::System::Boolean RLSimion::CONTROLLERRow::Is_actor_critic_controller_IdNull() {
    return this->IsNull(this->tableCONTROLLER->_actor_critic_controller_IdColumn);
}

inline ::System::Void RLSimion::CONTROLLERRow::Set_actor_critic_controller_IdNull() {
    this[this->tableCONTROLLER->_actor_critic_controller_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< RLSimion::_VFA_ActorRow^  >^  RLSimion::CONTROLLERRow::_GetVFA_ActorRows() {
    if (this->Table->ChildRelations[L"CONTROLLER_VFA-Actor"] == nullptr) {
        return gcnew cli::array< RLSimion::_VFA_ActorRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::_VFA_ActorRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"CONTROLLER_VFA-Actor"])));
    }
}

inline cli::array< RLSimion::PIDRow^  >^  RLSimion::CONTROLLERRow::GetPIDRows() {
    if (this->Table->ChildRelations[L"CONTROLLER_PID"] == nullptr) {
        return gcnew cli::array< RLSimion::PIDRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::PIDRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"CONTROLLER_PID"])));
    }
}

inline cli::array< RLSimion::LQRRow^  >^  RLSimion::CONTROLLERRow::GetLQRRows() {
    if (this->Table->ChildRelations[L"CONTROLLER_LQR"] == nullptr) {
        return gcnew cli::array< RLSimion::LQRRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::LQRRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"CONTROLLER_LQR"])));
    }
}

inline cli::array< RLSimion::jonkmanRow^  >^  RLSimion::CONTROLLERRow::GetjonkmanRows() {
    if (this->Table->ChildRelations[L"CONTROLLER_jonkman"] == nullptr) {
        return gcnew cli::array< RLSimion::jonkmanRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::jonkmanRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"CONTROLLER_jonkman"])));
    }
}

inline cli::array< RLSimion::vidalRow^  >^  RLSimion::CONTROLLERRow::GetvidalRows() {
    if (this->Table->ChildRelations[L"CONTROLLER_vidal"] == nullptr) {
        return gcnew cli::array< RLSimion::vidalRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::vidalRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"CONTROLLER_vidal"])));
    }
}

inline cli::array< RLSimion::boukhezzarRow^  >^  RLSimion::CONTROLLERRow::GetboukhezzarRows() {
    if (this->Table->ChildRelations[L"CONTROLLER_boukhezzar"] == nullptr) {
        return gcnew cli::array< RLSimion::boukhezzarRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< RLSimion::boukhezzarRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"CONTROLLER_boukhezzar"])));
    }
}


inline RLSimion::EXPERIMENTRowChangeEvent::EXPERIMENTRowChangeEvent(RLSimion::EXPERIMENTRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::EXPERIMENTRow^  RLSimion::EXPERIMENTRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::EXPERIMENTRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::LOGRowChangeEvent::LOGRowChangeEvent(RLSimion::LOGRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::LOGRow^  RLSimion::LOGRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::LOGRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::WORLDRowChangeEvent::WORLDRowChangeEvent(RLSimion::WORLDRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::WORLDRow^  RLSimion::WORLDRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::WORLDRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::rewardRowChangeEvent::rewardRowChangeEvent(RLSimion::rewardRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::rewardRow^  RLSimion::rewardRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::rewardRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::_reward_componentRowChangeEvent::_reward_componentRowChangeEvent(RLSimion::_reward_componentRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::_reward_componentRow^  RLSimion::_reward_componentRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::_reward_componentRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::_wind_turbineRowChangeEvent::_wind_turbineRowChangeEvent(RLSimion::_wind_turbineRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::_wind_turbineRow^  RLSimion::_wind_turbineRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::_wind_turbineRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::TRAINING_WIND_DATA_FILESRowChangeEvent::TRAINING_WIND_DATA_FILESRowChangeEvent(RLSimion::TRAINING_WIND_DATA_FILESRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::TRAINING_WIND_DATA_FILESRow^  RLSimion::TRAINING_WIND_DATA_FILESRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::TRAINING_WIND_DATA_FILESRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::_magnetic_levitationRowChangeEvent::_magnetic_levitationRowChangeEvent(RLSimion::_magnetic_levitationRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::_magnetic_levitationRow^  RLSimion::_magnetic_levitationRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::_magnetic_levitationRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::pitchRowChangeEvent::pitchRowChangeEvent(RLSimion::pitchRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::pitchRow^  RLSimion::pitchRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::pitchRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::_underwater_vehicleRowChangeEvent::_underwater_vehicleRowChangeEvent(RLSimion::_underwater_vehicleRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::_underwater_vehicleRow^  RLSimion::_underwater_vehicleRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::_underwater_vehicleRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::SIMGODRowChangeEvent::SIMGODRowChangeEvent(RLSimion::SIMGODRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::SIMGODRow^  RLSimion::SIMGODRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::SIMGODRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::_actor_onlyRowChangeEvent::_actor_onlyRowChangeEvent(RLSimion::_actor_onlyRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::_actor_onlyRow^  RLSimion::_actor_onlyRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::_actor_onlyRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::ACTORRowChangeEvent::ACTORRowChangeEvent(RLSimion::ACTORRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::ACTORRow^  RLSimion::ACTORRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::ACTORRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::_VFA_ActorRowChangeEvent::_VFA_ActorRowChangeEvent(RLSimion::_VFA_ActorRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::_VFA_ActorRow^  RLSimion::_VFA_ActorRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::_VFA_ActorRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::_Single_Output_Policy_LearnerRowChangeEvent::_Single_Output_Policy_LearnerRowChangeEvent(RLSimion::_Single_Output_Policy_LearnerRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::_Single_Output_Policy_LearnerRow^  RLSimion::_Single_Output_Policy_LearnerRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::_Single_Output_Policy_LearnerRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::CACLARowChangeEvent::CACLARowChangeEvent(RLSimion::CACLARow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::CACLARow^  RLSimion::CACLARowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::CACLARowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::ETRACESRowChangeEvent::ETRACESRowChangeEvent(RLSimion::ETRACESRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::ETRACESRow^  RLSimion::ETRACESRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::ETRACESRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::LAMBDARowChangeEvent::LAMBDARowChangeEvent(RLSimion::LAMBDARow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::LAMBDARow^  RLSimion::LAMBDARowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::LAMBDARowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::scheduleRowChangeEvent::scheduleRowChangeEvent(RLSimion::scheduleRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::scheduleRow^  RLSimion::scheduleRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::scheduleRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::THRESHOLDRowChangeEvent::THRESHOLDRowChangeEvent(RLSimion::THRESHOLDRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::THRESHOLDRow^  RLSimion::THRESHOLDRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::THRESHOLDRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::ALPHARowChangeEvent::ALPHARowChangeEvent(RLSimion::ALPHARow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::ALPHARow^  RLSimion::ALPHARowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::ALPHARowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::VFARowChangeEvent::VFARowChangeEvent(RLSimion::VFARow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::VFARow^  RLSimion::VFARowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::VFARowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::RBF_GRIDRowChangeEvent::RBF_GRIDRowChangeEvent(RLSimion::RBF_GRIDRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::RBF_GRIDRow^  RLSimion::RBF_GRIDRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::RBF_GRIDRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::_state_grid_dimensionRowChangeEvent::_state_grid_dimensionRowChangeEvent(RLSimion::_state_grid_dimensionRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::_state_grid_dimensionRow^  RLSimion::_state_grid_dimensionRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::_state_grid_dimensionRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::EXPLORATION_NOISERowChangeEvent::EXPLORATION_NOISERowChangeEvent(RLSimion::EXPLORATION_NOISERow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::EXPLORATION_NOISERow^  RLSimion::EXPLORATION_NOISERowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::EXPLORATION_NOISERowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::SIGMARowChangeEvent::SIGMARowChangeEvent(RLSimion::SIGMARow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::SIGMARow^  RLSimion::SIGMARowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::SIGMARowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::RegularGradientActorRowChangeEvent::RegularGradientActorRowChangeEvent(RLSimion::RegularGradientActorRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::RegularGradientActorRow^  RLSimion::RegularGradientActorRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::RegularGradientActorRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::IncrementalNaturalActorRowChangeEvent::IncrementalNaturalActorRowChangeEvent(RLSimion::IncrementalNaturalActorRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::IncrementalNaturalActorRow^  RLSimion::IncrementalNaturalActorRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::IncrementalNaturalActorRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::PIDRowChangeEvent::PIDRowChangeEvent(RLSimion::PIDRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::PIDRow^  RLSimion::PIDRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::PIDRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::KPRowChangeEvent::KPRowChangeEvent(RLSimion::KPRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::KPRow^  RLSimion::KPRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::KPRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::KIRowChangeEvent::KIRowChangeEvent(RLSimion::KIRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::KIRow^  RLSimion::KIRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::KIRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::KDRowChangeEvent::KDRowChangeEvent(RLSimion::KDRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::KDRow^  RLSimion::KDRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::KDRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::LQRRowChangeEvent::LQRRowChangeEvent(RLSimion::LQRRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::LQRRow^  RLSimion::LQRRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::LQRRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::_LQR_GAINRowChangeEvent::_LQR_GAINRowChangeEvent(RLSimion::_LQR_GAINRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::_LQR_GAINRow^  RLSimion::_LQR_GAINRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::_LQR_GAINRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::jonkmanRowChangeEvent::jonkmanRowChangeEvent(RLSimion::jonkmanRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::jonkmanRow^  RLSimion::jonkmanRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::jonkmanRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::VS_RtGnSpRowChangeEvent::VS_RtGnSpRowChangeEvent(RLSimion::VS_RtGnSpRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::VS_RtGnSpRow^  RLSimion::VS_RtGnSpRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::VS_RtGnSpRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::VS_SlPcRowChangeEvent::VS_SlPcRowChangeEvent(RLSimion::VS_SlPcRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::VS_SlPcRow^  RLSimion::VS_SlPcRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::VS_SlPcRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::VS_Rgn2KRowChangeEvent::VS_Rgn2KRowChangeEvent(RLSimion::VS_Rgn2KRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::VS_Rgn2KRow^  RLSimion::VS_Rgn2KRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::VS_Rgn2KRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::VS_Rgn2SpRowChangeEvent::VS_Rgn2SpRowChangeEvent(RLSimion::VS_Rgn2SpRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::VS_Rgn2SpRow^  RLSimion::VS_Rgn2SpRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::VS_Rgn2SpRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::VS_CtInSpRowChangeEvent::VS_CtInSpRowChangeEvent(RLSimion::VS_CtInSpRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::VS_CtInSpRow^  RLSimion::VS_CtInSpRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::VS_CtInSpRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::VS_RtPwrRowChangeEvent::VS_RtPwrRowChangeEvent(RLSimion::VS_RtPwrRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::VS_RtPwrRow^  RLSimion::VS_RtPwrRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::VS_RtPwrRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::VS_Rgn3MPRowChangeEvent::VS_Rgn3MPRowChangeEvent(RLSimion::VS_Rgn3MPRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::VS_Rgn3MPRow^  RLSimion::VS_Rgn3MPRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::VS_Rgn3MPRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::PC_KIRowChangeEvent::PC_KIRowChangeEvent(RLSimion::PC_KIRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::PC_KIRow^  RLSimion::PC_KIRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::PC_KIRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::PC_KKRowChangeEvent::PC_KKRowChangeEvent(RLSimion::PC_KKRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::PC_KKRow^  RLSimion::PC_KKRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::PC_KKRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::PC_KPRowChangeEvent::PC_KPRowChangeEvent(RLSimion::PC_KPRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::PC_KPRow^  RLSimion::PC_KPRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::PC_KPRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::PC_RefSpdRowChangeEvent::PC_RefSpdRowChangeEvent(RLSimion::PC_RefSpdRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::PC_RefSpdRow^  RLSimion::PC_RefSpdRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::PC_RefSpdRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::vidalRowChangeEvent::vidalRowChangeEvent(RLSimion::vidalRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::vidalRow^  RLSimion::vidalRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::vidalRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::ARowChangeEvent::ARowChangeEvent(RLSimion::ARow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::ARow^  RLSimion::ARowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::ARowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::K_alphaRowChangeEvent::K_alphaRowChangeEvent(RLSimion::K_alphaRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::K_alphaRow^  RLSimion::K_alphaRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::K_alphaRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::P_sRowChangeEvent::P_sRowChangeEvent(RLSimion::P_sRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::P_sRow^  RLSimion::P_sRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::P_sRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::boukhezzarRowChangeEvent::boukhezzarRowChangeEvent(RLSimion::boukhezzarRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::boukhezzarRow^  RLSimion::boukhezzarRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::boukhezzarRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::C_0RowChangeEvent::C_0RowChangeEvent(RLSimion::C_0Row^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::C_0Row^  RLSimion::C_0RowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::C_0RowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::K_tRowChangeEvent::K_tRowChangeEvent(RLSimion::K_tRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::K_tRow^  RLSimion::K_tRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::K_tRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::J_tRowChangeEvent::J_tRowChangeEvent(RLSimion::J_tRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::J_tRow^  RLSimion::J_tRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::J_tRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::_actor_criticRowChangeEvent::_actor_criticRowChangeEvent(RLSimion::_actor_criticRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::_actor_criticRow^  RLSimion::_actor_criticRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::_actor_criticRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::CRITICRowChangeEvent::CRITICRowChangeEvent(RLSimion::CRITICRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::CRITICRow^  RLSimion::CRITICRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::CRITICRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::_TD_LambdaRowChangeEvent::_TD_LambdaRowChangeEvent(RLSimion::_TD_LambdaRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::_TD_LambdaRow^  RLSimion::_TD_LambdaRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::_TD_LambdaRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::GAMMARowChangeEvent::GAMMARowChangeEvent(RLSimion::GAMMARow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::GAMMARow^  RLSimion::GAMMARowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::GAMMARowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::_True_Online_TD_LambdaRowChangeEvent::_True_Online_TD_LambdaRowChangeEvent(RLSimion::_True_Online_TD_LambdaRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::_True_Online_TD_LambdaRow^  RLSimion::_True_Online_TD_LambdaRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::_True_Online_TD_LambdaRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::_TDC_LambdaRowChangeEvent::_TDC_LambdaRowChangeEvent(RLSimion::_TDC_LambdaRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::_TDC_LambdaRow^  RLSimion::_TDC_LambdaRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::_TDC_LambdaRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::BETARowChangeEvent::BETARowChangeEvent(RLSimion::BETARow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::BETARow^  RLSimion::BETARowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::BETARowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::_actor_critic_controllerRowChangeEvent::_actor_critic_controllerRowChangeEvent(RLSimion::_actor_critic_controllerRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::_actor_critic_controllerRow^  RLSimion::_actor_critic_controllerRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::_actor_critic_controllerRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline RLSimion::CONTROLLERRowChangeEvent::CONTROLLERRowChangeEvent(RLSimion::CONTROLLERRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline RLSimion::CONTROLLERRow^  RLSimion::CONTROLLERRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction RLSimion::CONTROLLERRowChangeEvent::Action::get() {
    return this->eventAction;
}
