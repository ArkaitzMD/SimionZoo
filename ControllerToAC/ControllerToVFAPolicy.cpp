// ControllerToActorCritic.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "../RLSimion-Lib/parameters.h"
#include "../RLSimion-Lib/world.h"
#include "../RLSimion-Lib/actor.h"
#include "../RLSimion-Lib/reward.h"
#include "../RLSimion-Lib/logger.h"
#include "../RLSimion-Lib/named-var-set.h"
#include "../RLSimion-Lib/vfa.h"
#include "../RLSimion-Lib/features.h"
#include "../RLSimion-Lib/globals.h"
#include "../RLSimion-Lib/experiment.h"
#include "../RLSimion-Lib/vfa-policy.h"


int main(int argc, char* argv[])
{

	CParameters* pConfig;

	if (argc < 2)
	{
		printf("ERROR: a configuration file should be provided as an argument.");
		exit(-1);
	}

	CParameterFile xmlDoc;
	//set app parameters and additional parameters if any, generated by Badger
	pConfig = xmlDoc.loadFile(argv[1], "Controller-To-VFA-Policy");
	if (!pConfig)
	{
		printf("Configuration error: %s\n", xmlDoc.getError());
		exit(-1);
	}
	
	//INITIALISE WORLD -> STATE PROPERTIES
	RLSimion::init(pConfig);
	//RLSimion::g_pWorld = new CWorld(pConfig->getChild("World"));
//	RLSimion::g_pExperiment = new CExperiment(pConfig->getChild("Experiment"));

	//INTIALISE CONTROLLER: VIDAL, BOUKHEZZAR, ...
	CParameters* pControllerConfig = pConfig->getChild("Controller");
	CActor* pController = CActor::getInstance(pControllerConfig);

	CParameters* pVFAConfig = pConfig->getChild("Multi-Output-VFA");
	CParameters* pOutputConfig = pConfig->getChild("Output-File");

	if (!pVFAConfig || !RLSimion::g_pWorld || !pOutputConfig)
	{
		printf("Configuration error: Some component is missing in the config file\n");
		exit(-1);
	}

	CState *s = RLSimion::g_pWorld->getStateInstance();
	CAction *a = RLSimion::g_pWorld->getActionInstance();


	CParameters* pSingleOutputVFAConfig = pVFAConfig->getChild("Single-Output-VFA");
	//CONTROLLER -> ACTOR
	printf("\nSaving the weights of a VFA that approximates the controller...\n");
	FILE *pBinFile, *pXMLFile;
	unsigned int numWeights;
	unsigned int feature;
	double output;
	char binFilename[512];
	char xmlFilename[512];

	sprintf_s(binFilename, 512, "%s.weights.bin", pOutputConfig->getConstString());
	sprintf_s(xmlFilename, 512, "%s.feature-map.xml", pOutputConfig->getConstString());
	fopen_s(&pBinFile, pOutputConfig->getConstString(), "wb");
	
	int i = 0;
	if (pBinFile)
	{
		fopen_s(&pXMLFile,xmlFilename, "w");
		if (pXMLFile)
		{
			CLinearStateVFA* pVFA;
			CParameters* pFeatureMapParameters;
			const char* pOutputAction;

			while (pSingleOutputVFAConfig)
			{
				pVFA = new CLinearStateVFA(pSingleOutputVFAConfig->getChild("Linear-State-VFA"));
				pFeatureMapParameters = pVFA->getParameters();
				pOutputAction = pSingleOutputVFAConfig->getChild("Output-Action")->getConstString();

				numWeights = pVFA->getNumWeights();
				fwrite(&numWeights, sizeof(unsigned int), 1, pBinFile);

				double *pWeights = new double[numWeights];

				for (feature = 0; feature < numWeights; feature++)
				{
					if (feature % 1000 == 0)
						printf("Output dim: %d      Progress: %2.2f%%\r", i + 1, 100.0*((double)feature) / ((double)numWeights));
					pVFA->getFeatureState(feature, s);
					pController->selectAction(s, a);
					output = a->getValue(i);
					pWeights[feature] = output;
				}
				pFeatureMapParameters->saveFile(pXMLFile);
				fwrite(pWeights, sizeof(double), numWeights, pBinFile);
				delete[] pWeights;
				delete pVFA;
				i++;

				pSingleOutputVFAConfig = pSingleOutputVFAConfig->getNextChild("Single-Output-VFA");
			}
			fclose(pXMLFile);
		}
		printf("\nDone\n");
		fclose(pBinFile);
	}
	else printf("ERROR: could not open output file\n");
	

	//CLEAN-UP
	delete a;
	delete s;
	RLSimion::shutdown();
	//delete RLSimion::g_pWorld;
	delete pController;
	//delete RLSimion::g_pExperiment;

}

