// ControllerToActorCritic.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "../tinyxml2/tinyxml2.h"
#include "../RLSimion-Lib/world.h"
#include "../RLSimion-Lib/actor.h"
#include "../RLSimion-Lib/reward.h"
#include "../RLSimion-Lib/logger.h"
#include "../RLSimion-Lib/states-and-actions.h"
#include "../RLSimion-Lib/vfa.h"
#include "../RLSimion-Lib/features.h"
#include "../RLSimion-Lib/globals.h"
#include "../RLSimion-Lib/experiment.h"


CWorld *g_pWorld;
CExperiment *g_pExperiment;

int main(int argc, char* argv[])
{
	tinyxml2::XMLDocument xmlDoc;
	tinyxml2::XMLElement* pConfig;
	CLinearVFA **m_pVFA;
	CActor *pController;

	if (argc < 2)
	{
		printf("ERROR: a configuration file should be provided as an argument.");
		exit(-1);
	}


	//set app parameters and additional parameters if any, generated by Badger
	xmlDoc.LoadFile(argv[1]);

	if (xmlDoc.Error())
	{
		printf("Configuration error: %s\n", xmlDoc.ErrorName);
		exit(-1);
	}

	pConfig = xmlDoc.RootElement();
	
	//INITIALISE WORLD -> STATE PROPERTIES
	g_pWorld = new CWorld(pConfig->FirstChildElement("WORLD"));
	g_pExperiment = new CExperiment(pConfig->FirstChildElement("EXPERIMENT"));
	

	//INTIALISE CONTROLLER: VIDAL, BOUKHEZZAR, ...

	tinyxml2::XMLElement* pSimGod = pConfig->FirstChildElement("SIMGOD");
	if (!pSimGod)
	{
		printf("Configuration error: No SimGod node\n");
		exit(-1);
	}

	pController = CActor::getInstance(pSimGod->FirstChildElement("CONTROLLER"));

	tinyxml2::XMLElement* pActorNode = pSimGod->FirstChildElement("ACTOR");

	CParameters* pActorNode = pActorParameters->getChild("SIMGOD")->getChild("ACTOR");

	int numOutputs= (int) pActorNode->getParameter("NUM_OUTPUTS")->getDouble();

	//INTIALISE VFA
	m_pVFA= new CFeatureVFA* [numOutputs];

	for (int i= 0; i<numOutputs; i++)
	{
		sprintf_s(parameterName,MAX_PARAMETER_NAME_SIZE,"POLICY_RBF_VARIABLES_%d",i);
		m_pVFA[i] = new CRBFFeatureGridVFA(pActorNode->getParameter(parameterName)->getStringPtr());
	}

	CState *s= g_pWorld->getStateInstance();
	CAction *a= g_pWorld->getActionInstance();


	//CONTROLLER -> ACTOR
	printf("\nSaving the weights of a VFA that approximates the controller...\n");
	FILE* pFile;
	unsigned int numWeights;
	unsigned int feature;
	double output;
	fopen_s(&pFile, pParameterNode->getParameter("OUTPUT_FILE")->getStringPtr(), "wb");
	if (pFile)
	{
		for (int i= 0; i<numOutputs; i++)
		{
			numWeights= m_pVFA[i]->getNumWeights();
			fwrite(&numWeights,sizeof(unsigned int),1,pFile);

			double *pWeights = new double[numWeights];
			
			for (feature= 0; feature<numWeights; feature++)
			{
				if (feature % 1000== 0)
					printf("Output dim: %d/%d      Progress: %2.2f%%\r",i+1
					,numOutputs,100.0*((double)feature)/((double)numWeights));
				m_pVFA[i]->getFeatureStateAction(feature,s,a);
				pController->selectAction(s,a);
				output= a->getValue(i);
				pWeights[feature] = output;
			}
			fwrite(pWeights, sizeof(double), numWeights, pFile);
			delete[] pWeights;
		}
		printf("\nDone\n");
		fclose(pFile);
	}
	else printf("ERROR: could not open output file\n");

	//CLEAN-UP
	delete a;
	delete s;
	delete g_pWorld;
	delete pController;
	delete g_pExperiment;

	for (int i= 0; i<numOutputs; i++) delete m_pVFA [i];
	delete [] m_pVFA;

	delete pAppParameters;
	delete pActorParameters;
	delete pControllerParameters;
}

